     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RDP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "caar"
   441 0000056E 0400000000000000        	dq 4
   442 00000576 63616172                	db 0x63, 0x61, 0x61, 0x72
   443                                  	; L_constants + 1402:
   444 0000057A 03                      	db T_string	; "cadr"
   445 0000057B 0400000000000000        	dq 4
   446 00000583 63616472                	db 0x63, 0x61, 0x64, 0x72
   447                                  	; L_constants + 1415:
   448 00000587 03                      	db T_string	; "cdar"
   449 00000588 0400000000000000        	dq 4
   450 00000590 63646172                	db 0x63, 0x64, 0x61, 0x72
   451                                  	; L_constants + 1428:
   452 00000594 03                      	db T_string	; "cddr"
   453 00000595 0400000000000000        	dq 4
   454 0000059D 63646472                	db 0x63, 0x64, 0x64, 0x72
   455                                  	; L_constants + 1441:
   456 000005A1 03                      	db T_string	; "caaar"
   457 000005A2 0500000000000000        	dq 5
   458 000005AA 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   459                                  	; L_constants + 1455:
   460 000005AF 03                      	db T_string	; "caadr"
   461 000005B0 0500000000000000        	dq 5
   462 000005B8 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   463                                  	; L_constants + 1469:
   464 000005BD 03                      	db T_string	; "cadar"
   465 000005BE 0500000000000000        	dq 5
   466 000005C6 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   467                                  	; L_constants + 1483:
   468 000005CB 03                      	db T_string	; "caddr"
   469 000005CC 0500000000000000        	dq 5
   470 000005D4 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   471                                  	; L_constants + 1497:
   472 000005D9 03                      	db T_string	; "cdaar"
   473 000005DA 0500000000000000        	dq 5
   474 000005E2 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   475                                  	; L_constants + 1511:
   476 000005E7 03                      	db T_string	; "cdadr"
   477 000005E8 0500000000000000        	dq 5
   478 000005F0 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   479                                  	; L_constants + 1525:
   480 000005F5 03                      	db T_string	; "cddar"
   481 000005F6 0500000000000000        	dq 5
   482 000005FE 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   483                                  	; L_constants + 1539:
   484 00000603 03                      	db T_string	; "cdddr"
   485 00000604 0500000000000000        	dq 5
   486 0000060C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   487                                  	; L_constants + 1553:
   488 00000611 03                      	db T_string	; "caaaar"
   489 00000612 0600000000000000        	dq 6
   490 0000061A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   491                                  	; L_constants + 1568:
   492 00000620 03                      	db T_string	; "caaadr"
   493 00000621 0600000000000000        	dq 6
   494 00000629 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   495                                  	; L_constants + 1583:
   496 0000062F 03                      	db T_string	; "caadar"
   497 00000630 0600000000000000        	dq 6
   498 00000638 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   499                                  	; L_constants + 1598:
   500 0000063E 03                      	db T_string	; "caaddr"
   501 0000063F 0600000000000000        	dq 6
   502 00000647 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   503                                  	; L_constants + 1613:
   504 0000064D 03                      	db T_string	; "cadaar"
   505 0000064E 0600000000000000        	dq 6
   506 00000656 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   507                                  	; L_constants + 1628:
   508 0000065C 03                      	db T_string	; "cadadr"
   509 0000065D 0600000000000000        	dq 6
   510 00000665 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   511                                  	; L_constants + 1643:
   512 0000066B 03                      	db T_string	; "caddar"
   513 0000066C 0600000000000000        	dq 6
   514 00000674 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   515                                  	; L_constants + 1658:
   516 0000067A 03                      	db T_string	; "cadddr"
   517 0000067B 0600000000000000        	dq 6
   518 00000683 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   519                                  	; L_constants + 1673:
   520 00000689 03                      	db T_string	; "cdaaar"
   521 0000068A 0600000000000000        	dq 6
   522 00000692 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   523                                  	; L_constants + 1688:
   524 00000698 03                      	db T_string	; "cdaadr"
   525 00000699 0600000000000000        	dq 6
   526 000006A1 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   527                                  	; L_constants + 1703:
   528 000006A7 03                      	db T_string	; "cdadar"
   529 000006A8 0600000000000000        	dq 6
   530 000006B0 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   531                                  	; L_constants + 1718:
   532 000006B6 03                      	db T_string	; "cdaddr"
   533 000006B7 0600000000000000        	dq 6
   534 000006BF 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   535                                  	; L_constants + 1733:
   536 000006C5 03                      	db T_string	; "cddaar"
   537 000006C6 0600000000000000        	dq 6
   538 000006CE 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   539                                  	; L_constants + 1748:
   540 000006D4 03                      	db T_string	; "cddadr"
   541 000006D5 0600000000000000        	dq 6
   542 000006DD 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   543                                  	; L_constants + 1763:
   544 000006E3 03                      	db T_string	; "cdddar"
   545 000006E4 0600000000000000        	dq 6
   546 000006EC 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   547                                  	; L_constants + 1778:
   548 000006F2 03                      	db T_string	; "cddddr"
   549 000006F3 0600000000000000        	dq 6
   550 000006FB 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   551                                  	; L_constants + 1793:
   552 00000701 03                      	db T_string	; "list?"
   553 00000702 0500000000000000        	dq 5
   554 0000070A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   555                                  	; L_constants + 1807:
   556 0000070F 03                      	db T_string	; "list"
   557 00000710 0400000000000000        	dq 4
   558 00000718 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   559                                  	; L_constants + 1820:
   560 0000071C 03                      	db T_string	; "not"
   561 0000071D 0300000000000000        	dq 3
   562 00000725 6E6F74                  	db 0x6E, 0x6F, 0x74
   563                                  	; L_constants + 1832:
   564 00000728 03                      	db T_string	; "rational?"
   565 00000729 0900000000000000        	dq 9
   566 00000731 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   567 00000739 3F                      	db 0x3F
   568                                  	; L_constants + 1850:
   569 0000073A 03                      	db T_string	; "list*"
   570 0000073B 0500000000000000        	dq 5
   571 00000743 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   572                                  	; L_constants + 1864:
   573 00000748 03                      	db T_string	; "whatever"
   574 00000749 0800000000000000        	dq 8
   575 00000751 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   576                                  	; L_constants + 1881:
   577 00000759 41                      	db T_interned_symbol	; whatever
   578 0000075A [4807000000000000]      	dq L_constants + 1864
   579                                  	; L_constants + 1890:
   580 00000762 03                      	db T_string	; "apply"
   581 00000763 0500000000000000        	dq 5
   582 0000076B 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   583                                  	; L_constants + 1904:
   584 00000770 03                      	db T_string	; "ormap"
   585 00000771 0500000000000000        	dq 5
   586 00000779 6F726D6170              	db 0x6F, 0x72, 0x6D, 0x61, 0x70
   587                                  	; L_constants + 1918:
   588 0000077E 03                      	db T_string	; "map"
   589 0000077F 0300000000000000        	dq 3
   590 00000787 6D6170                  	db 0x6D, 0x61, 0x70
   591                                  	; L_constants + 1930:
   592 0000078A 03                      	db T_string	; "andmap"
   593 0000078B 0600000000000000        	dq 6
   594 00000793 616E646D6170            	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
   595                                  	; L_constants + 1945:
   596 00000799 03                      	db T_string	; "reverse"
   597 0000079A 0700000000000000        	dq 7
   598 000007A2 72657665727365          	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   599                                  	; L_constants + 1961:
   600 000007A9 03                      	db T_string	; "fold-left"
   601 000007AA 0900000000000000        	dq 9
   602 000007B2 666F6C642D6C6566        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
   603 000007BA 74                      	db 0x74
   604                                  	; L_constants + 1979:
   605 000007BB 03                      	db T_string	; "append"
   606 000007BC 0600000000000000        	dq 6
   607 000007C4 617070656E64            	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
   608                                  	; L_constants + 1994:
   609 000007CA 03                      	db T_string	; "fold-right"
   610 000007CB 0A00000000000000        	dq 10
   611 000007D3 666F6C642D726967        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x72, 0x69, 0x67
   612 000007DB 6874                    	db 0x68, 0x74
   613                                  	; L_constants + 2013:
   614 000007DD 03                      	db T_string	; "+"
   615 000007DE 0100000000000000        	dq 1
   616 000007E6 2B                      	db 0x2B
   617                                  	; L_constants + 2023:
   618 000007E7 11                      	db T_integer	; 0
   619 000007E8 0000000000000000        	dq 0
   620                                  	; L_constants + 2032:
   621 000007F0 03                      	db T_string	; "__bin_integer_to_fr...
   622 000007F1 1900000000000000        	dq 25
   623 000007F9 5F5F62696E5F696E        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x5F, 0x69, 0x6E
   624 00000801 74656765725F746F        	db 0x74, 0x65, 0x67, 0x65, 0x72, 0x5F, 0x74, 0x6F
   625 00000809 5F6672616374696F        	db 0x5F, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F
   626 00000811 6E                      	db 0x6E
   627                                  	; L_constants + 2066:
   628 00000812 41                      	db T_interned_symbol	; +
   629 00000813 [DD07000000000000]      	dq L_constants + 2013
   630                                  	; L_constants + 2075:
   631 0000081B 03                      	db T_string	; "all arguments need ...
   632 0000081C 2000000000000000        	dq 32
   633 00000824 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   634 0000082C 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   635 00000834 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   636 0000083C 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   637                                  	; L_constants + 2116:
   638 00000844 03                      	db T_string	; "-"
   639 00000845 0100000000000000        	dq 1
   640 0000084D 2D                      	db 0x2D
   641                                  	; L_constants + 2126:
   642 0000084E 03                      	db T_string	; "real"
   643 0000084F 0400000000000000        	dq 4
   644 00000857 7265616C                	db 0x72, 0x65, 0x61, 0x6C
   645                                  	; L_constants + 2139:
   646 0000085B 41                      	db T_interned_symbol	; -
   647 0000085C [4408000000000000]      	dq L_constants + 2116
   648                                  	; L_constants + 2148:
   649 00000864 03                      	db T_string	; "*"
   650 00000865 0100000000000000        	dq 1
   651 0000086D 2A                      	db 0x2A
   652                                  	; L_constants + 2158:
   653 0000086E 11                      	db T_integer	; 1
   654 0000086F 0100000000000000        	dq 1
   655                                  	; L_constants + 2167:
   656 00000877 41                      	db T_interned_symbol	; *
   657 00000878 [6408000000000000]      	dq L_constants + 2148
   658                                  	; L_constants + 2176:
   659 00000880 03                      	db T_string	; "/"
   660 00000881 0100000000000000        	dq 1
   661 00000889 2F                      	db 0x2F
   662                                  	; L_constants + 2186:
   663 0000088A 41                      	db T_interned_symbol	; /
   664 0000088B [8008000000000000]      	dq L_constants + 2176
   665                                  	; L_constants + 2195:
   666 00000893 03                      	db T_string	; "fact"
   667 00000894 0400000000000000        	dq 4
   668 0000089C 66616374                	db 0x66, 0x61, 0x63, 0x74
   669                                  	; L_constants + 2208:
   670 000008A0 03                      	db T_string	; "<"
   671 000008A1 0100000000000000        	dq 1
   672 000008A9 3C                      	db 0x3C
   673                                  	; L_constants + 2218:
   674 000008AA 03                      	db T_string	; "<="
   675 000008AB 0200000000000000        	dq 2
   676 000008B3 3C3D                    	db 0x3C, 0x3D
   677                                  	; L_constants + 2229:
   678 000008B5 03                      	db T_string	; ">"
   679 000008B6 0100000000000000        	dq 1
   680 000008BE 3E                      	db 0x3E
   681                                  	; L_constants + 2239:
   682 000008BF 03                      	db T_string	; ">="
   683 000008C0 0200000000000000        	dq 2
   684 000008C8 3E3D                    	db 0x3E, 0x3D
   685                                  	; L_constants + 2250:
   686 000008CA 03                      	db T_string	; "="
   687 000008CB 0100000000000000        	dq 1
   688 000008D3 3D                      	db 0x3D
   689                                  	; L_constants + 2260:
   690 000008D4 03                      	db T_string	; "generic-comparator"
   691 000008D5 1200000000000000        	dq 18
   692 000008DD 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   693 000008E5 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   694 000008ED 6F72                    	db 0x6F, 0x72
   695                                  	; L_constants + 2287:
   696 000008EF 41                      	db T_interned_symbol	; generic-comparator
   697 000008F0 [D408000000000000]      	dq L_constants + 2260
   698                                  	; L_constants + 2296:
   699 000008F8 03                      	db T_string	; "all the arguments m...
   700 000008F9 2100000000000000        	dq 33
   701 00000901 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   702 00000909 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   703 00000911 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   704 00000919 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   705 00000921 73                      	db 0x73
   706                                  	; L_constants + 2338:
   707 00000922 03                      	db T_string	; "make-list"
   708 00000923 0900000000000000        	dq 9
   709 0000092B 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   710 00000933 74                      	db 0x74
   711                                  	; L_constants + 2356:
   712 00000934 41                      	db T_interned_symbol	; make-list
   713 00000935 [2209000000000000]      	dq L_constants + 2338
   714                                  	; L_constants + 2365:
   715 0000093D 03                      	db T_string	; "Usage: (make-list l...
   716 0000093E 2D00000000000000        	dq 45
   717 00000946 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   718 0000094E 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   719 00000956 74206C656E677468        	db 0x74, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   720 0000095E 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   721 00000966 616C2D696E69742D        	db 0x61, 0x6C, 0x2D, 0x69, 0x6E, 0x69, 0x74, 0x2D
   722 0000096E 6368617229              	db 0x63, 0x68, 0x61, 0x72, 0x29
   723                                  	; L_constants + 2419:
   724 00000973 03                      	db T_string	; "char<?"
   725 00000974 0600000000000000        	dq 6
   726 0000097C 636861723C3F            	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3F
   727                                  	; L_constants + 2434:
   728 00000982 03                      	db T_string	; "char<=?"
   729 00000983 0700000000000000        	dq 7
   730 0000098B 636861723C3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3D, 0x3F
   731                                  	; L_constants + 2450:
   732 00000992 03                      	db T_string	; "char=?"
   733 00000993 0600000000000000        	dq 6
   734 0000099B 636861723D3F            	db 0x63, 0x68, 0x61, 0x72, 0x3D, 0x3F
   735                                  	; L_constants + 2465:
   736 000009A1 03                      	db T_string	; "char>?"
   737 000009A2 0600000000000000        	dq 6
   738 000009AA 636861723E3F            	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3F
   739                                  	; L_constants + 2480:
   740 000009B0 03                      	db T_string	; "char>=?"
   741 000009B1 0700000000000000        	dq 7
   742 000009B9 636861723E3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3D, 0x3F
   743                                  	; L_constants + 2496:
   744 000009C0 03                      	db T_string	; "char-downcase"
   745 000009C1 0D00000000000000        	dq 13
   746 000009C9 636861722D646F77        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x64, 0x6F, 0x77
   747 000009D1 6E63617365              	db 0x6E, 0x63, 0x61, 0x73, 0x65
   748                                  	; L_constants + 2518:
   749 000009D6 03                      	db T_string	; "char-upcase"
   750 000009D7 0B00000000000000        	dq 11
   751 000009DF 636861722D757063        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x75, 0x70, 0x63
   752 000009E7 617365                  	db 0x61, 0x73, 0x65
   753                                  	; L_constants + 2538:
   754 000009EA 0241                    	db T_char, 0x41	; #\A
   755                                  	; L_constants + 2540:
   756 000009EC 025A                    	db T_char, 0x5A	; #\Z
   757                                  	; L_constants + 2542:
   758 000009EE 0261                    	db T_char, 0x61	; #\a
   759                                  	; L_constants + 2544:
   760 000009F0 027A                    	db T_char, 0x7A	; #\z
   761                                  	; L_constants + 2546:
   762 000009F2 03                      	db T_string	; "char-ci<?"
   763 000009F3 0900000000000000        	dq 9
   764 000009FB 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   765 00000A03 3F                      	db 0x3F
   766                                  	; L_constants + 2564:
   767 00000A04 03                      	db T_string	; "char-ci<=?"
   768 00000A05 0A00000000000000        	dq 10
   769 00000A0D 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   770 00000A15 3D3F                    	db 0x3D, 0x3F
   771                                  	; L_constants + 2583:
   772 00000A17 03                      	db T_string	; "char-ci=?"
   773 00000A18 0900000000000000        	dq 9
   774 00000A20 636861722D63693D        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3D
   775 00000A28 3F                      	db 0x3F
   776                                  	; L_constants + 2601:
   777 00000A29 03                      	db T_string	; "char-ci>?"
   778 00000A2A 0900000000000000        	dq 9
   779 00000A32 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   780 00000A3A 3F                      	db 0x3F
   781                                  	; L_constants + 2619:
   782 00000A3B 03                      	db T_string	; "char-ci>=?"
   783 00000A3C 0A00000000000000        	dq 10
   784 00000A44 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   785 00000A4C 3D3F                    	db 0x3D, 0x3F
   786                                  	; L_constants + 2638:
   787 00000A4E 03                      	db T_string	; "string-downcase"
   788 00000A4F 0F00000000000000        	dq 15
   789 00000A57 737472696E672D64        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x64
   790 00000A5F 6F776E63617365          	db 0x6F, 0x77, 0x6E, 0x63, 0x61, 0x73, 0x65
   791                                  	; L_constants + 2662:
   792 00000A66 03                      	db T_string	; "string-upcase"
   793 00000A67 0D00000000000000        	dq 13
   794 00000A6F 737472696E672D75        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x75
   795 00000A77 7063617365              	db 0x70, 0x63, 0x61, 0x73, 0x65
   796                                  	; L_constants + 2684:
   797 00000A7C 03                      	db T_string	; "list->string"
   798 00000A7D 0C00000000000000        	dq 12
   799 00000A85 6C6973742D3E7374        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x73, 0x74
   800 00000A8D 72696E67                	db 0x72, 0x69, 0x6E, 0x67
   801                                  	; L_constants + 2705:
   802 00000A91 03                      	db T_string	; "string->list"
   803 00000A92 0C00000000000000        	dq 12
   804 00000A9A 737472696E672D3E        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x3E
   805 00000AA2 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   806                                  	; L_constants + 2726:
   807 00000AA6 03                      	db T_string	; "string<?"
   808 00000AA7 0800000000000000        	dq 8
   809 00000AAF 737472696E673C3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3F
   810                                  	; L_constants + 2743:
   811 00000AB7 03                      	db T_string	; "string<=?"
   812 00000AB8 0900000000000000        	dq 9
   813 00000AC0 737472696E673C3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3D
   814 00000AC8 3F                      	db 0x3F
   815                                  	; L_constants + 2761:
   816 00000AC9 03                      	db T_string	; "string=?"
   817 00000ACA 0800000000000000        	dq 8
   818 00000AD2 737472696E673D3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3D, 0x3F
   819                                  	; L_constants + 2778:
   820 00000ADA 03                      	db T_string	; "string>=?"
   821 00000ADB 0900000000000000        	dq 9
   822 00000AE3 737472696E673E3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3D
   823 00000AEB 3F                      	db 0x3F
   824                                  	; L_constants + 2796:
   825 00000AEC 03                      	db T_string	; "string>?"
   826 00000AED 0800000000000000        	dq 8
   827 00000AF5 737472696E673E3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3F
   828                                  	; L_constants + 2813:
   829 00000AFD 03                      	db T_string	; "string-ci<?"
   830 00000AFE 0B00000000000000        	dq 11
   831 00000B06 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   832 00000B0E 693C3F                  	db 0x69, 0x3C, 0x3F
   833                                  	; L_constants + 2833:
   834 00000B11 03                      	db T_string	; "string-ci<=?"
   835 00000B12 0C00000000000000        	dq 12
   836 00000B1A 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   837 00000B22 693C3D3F                	db 0x69, 0x3C, 0x3D, 0x3F
   838                                  	; L_constants + 2854:
   839 00000B26 03                      	db T_string	; "string-ci=?"
   840 00000B27 0B00000000000000        	dq 11
   841 00000B2F 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   842 00000B37 693D3F                  	db 0x69, 0x3D, 0x3F
   843                                  	; L_constants + 2874:
   844 00000B3A 03                      	db T_string	; "string-ci>=?"
   845 00000B3B 0C00000000000000        	dq 12
   846 00000B43 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   847 00000B4B 693E3D3F                	db 0x69, 0x3E, 0x3D, 0x3F
   848                                  	; L_constants + 2895:
   849 00000B4F 03                      	db T_string	; "string-ci>?"
   850 00000B50 0B00000000000000        	dq 11
   851 00000B58 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   852 00000B60 693E3F                  	db 0x69, 0x3E, 0x3F
   853                                  	; L_constants + 2915:
   854 00000B63 03                      	db T_string	; "length"
   855 00000B64 0600000000000000        	dq 6
   856 00000B6C 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   857                                  	; L_constants + 2930:
   858 00000B72 41                      	db T_interned_symbol	; make-vector
   859 00000B73 [4804000000000000]      	dq L_constants + 1096
   860                                  	; L_constants + 2939:
   861 00000B7B 03                      	db T_string	; "Usage: (make-vector...
   862 00000B7C 2B00000000000000        	dq 43
   863 00000B84 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   864 00000B8C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   865 00000B94 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   866 00000B9C 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   867 00000BA4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   868 00000BAC 6C7429                  	db 0x6C, 0x74, 0x29
   869                                  	; L_constants + 2991:
   870 00000BAF 41                      	db T_interned_symbol	; make-string
   871 00000BB0 [5C04000000000000]      	dq L_constants + 1116
   872                                  	; L_constants + 3000:
   873 00000BB8 03                      	db T_string	; "Usage: (make-string...
   874 00000BB9 2B00000000000000        	dq 43
   875 00000BC1 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   876 00000BC9 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   877 00000BD1 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   878 00000BD9 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   879 00000BE1 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   880 00000BE9 6C7429                  	db 0x6C, 0x74, 0x29
   881                                  	; L_constants + 3052:
   882 00000BEC 03                      	db T_string	; "list->vector"
   883 00000BED 0C00000000000000        	dq 12
   884 00000BF5 6C6973742D3E7665        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x76, 0x65
   885 00000BFD 63746F72                	db 0x63, 0x74, 0x6F, 0x72
   886                                  	; L_constants + 3073:
   887 00000C01 03                      	db T_string	; "vector"
   888 00000C02 0600000000000000        	dq 6
   889 00000C0A 766563746F72            	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72
   890                                  	; L_constants + 3088:
   891 00000C10 03                      	db T_string	; "vector->list"
   892 00000C11 0C00000000000000        	dq 12
   893 00000C19 766563746F722D3E        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x3E
   894 00000C21 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   895                                  	; L_constants + 3109:
   896 00000C25 03                      	db T_string	; "random"
   897 00000C26 0600000000000000        	dq 6
   898 00000C2E 72616E646F6D            	db 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D
   899                                  	; L_constants + 3124:
   900 00000C34 03                      	db T_string	; "positive?"
   901 00000C35 0900000000000000        	dq 9
   902 00000C3D 706F736974697665        	db 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65
   903 00000C45 3F                      	db 0x3F
   904                                  	; L_constants + 3142:
   905 00000C46 03                      	db T_string	; "negative?"
   906 00000C47 0900000000000000        	dq 9
   907 00000C4F 6E65676174697665        	db 0x6E, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65
   908 00000C57 3F                      	db 0x3F
   909                                  	; L_constants + 3160:
   910 00000C58 03                      	db T_string	; "even?"
   911 00000C59 0500000000000000        	dq 5
   912 00000C61 6576656E3F              	db 0x65, 0x76, 0x65, 0x6E, 0x3F
   913                                  	; L_constants + 3174:
   914 00000C66 11                      	db T_integer	; 2
   915 00000C67 0200000000000000        	dq 2
   916                                  	; L_constants + 3183:
   917 00000C6F 03                      	db T_string	; "odd?"
   918 00000C70 0400000000000000        	dq 4
   919 00000C78 6F64643F                	db 0x6F, 0x64, 0x64, 0x3F
   920                                  	; L_constants + 3196:
   921 00000C7C 03                      	db T_string	; "abs"
   922 00000C7D 0300000000000000        	dq 3
   923 00000C85 616273                  	db 0x61, 0x62, 0x73
   924                                  	; L_constants + 3208:
   925 00000C88 03                      	db T_string	; "equal?"
   926 00000C89 0600000000000000        	dq 6
   927 00000C91 657175616C3F            	db 0x65, 0x71, 0x75, 0x61, 0x6C, 0x3F
   928                                  	; L_constants + 3223:
   929 00000C97 03                      	db T_string	; "assoc"
   930 00000C98 0500000000000000        	dq 5
   931 00000CA0 6173736F63              	db 0x61, 0x73, 0x73, 0x6F, 0x63
   932                                  	; L_constants + 3237:
   933 00000CA5 03                      	db T_string	; "string-append"
   934 00000CA6 0D00000000000000        	dq 13
   935 00000CAE 737472696E672D61        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x61
   936 00000CB6 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   937                                  	; L_constants + 3259:
   938 00000CBB 03                      	db T_string	; "vector-append"
   939 00000CBC 0D00000000000000        	dq 13
   940 00000CC4 766563746F722D61        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x61
   941 00000CCC 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   942                                  	; L_constants + 3281:
   943 00000CD1 03                      	db T_string	; "string-reverse"
   944 00000CD2 0E00000000000000        	dq 14
   945 00000CDA 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   946 00000CE2 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   947                                  	; L_constants + 3304:
   948 00000CE8 03                      	db T_string	; "vector-reverse"
   949 00000CE9 0E00000000000000        	dq 14
   950 00000CF1 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   951 00000CF9 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   952                                  	; L_constants + 3327:
   953 00000CFF 03                      	db T_string	; "string-reverse!"
   954 00000D00 0F00000000000000        	dq 15
   955 00000D08 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   956 00000D10 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   957                                  	; L_constants + 3351:
   958 00000D17 03                      	db T_string	; "vector-reverse!"
   959 00000D18 0F00000000000000        	dq 15
   960 00000D20 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   961 00000D28 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   962                                  	; L_constants + 3375:
   963 00000D2F 03                      	db T_string	; "make-list-thunk"
   964 00000D30 0F00000000000000        	dq 15
   965 00000D38 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   966 00000D40 742D7468756E6B          	db 0x74, 0x2D, 0x74, 0x68, 0x75, 0x6E, 0x6B
   967                                  	; L_constants + 3399:
   968 00000D47 03                      	db T_string	; "make-string-thunk"
   969 00000D48 1100000000000000        	dq 17
   970 00000D50 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   971 00000D58 696E672D7468756E        	db 0x69, 0x6E, 0x67, 0x2D, 0x74, 0x68, 0x75, 0x6E
   972 00000D60 6B                      	db 0x6B
   973                                  	; L_constants + 3425:
   974 00000D61 03                      	db T_string	; "make-vector-thunk"
   975 00000D62 1100000000000000        	dq 17
   976 00000D6A 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   977 00000D72 746F722D7468756E        	db 0x74, 0x6F, 0x72, 0x2D, 0x74, 0x68, 0x75, 0x6E
   978 00000D7A 6B                      	db 0x6B
   979                                  	; L_constants + 3451:
   980 00000D7B 03                      	db T_string	; "logarithm"
   981 00000D7C 0900000000000000        	dq 9
   982 00000D84 6C6F676172697468        	db 0x6C, 0x6F, 0x67, 0x61, 0x72, 0x69, 0x74, 0x68
   983 00000D8C 6D                      	db 0x6D
   984                                  	; L_constants + 3469:
   985 00000D8D 13                      	db T_real	; 1.000000
   986 00000D8E 000000000000F03F        	dq 1.000000
   987                                  	; L_constants + 3478:
   988 00000D96 03                      	db T_string	; "newline"
   989 00000D97 0700000000000000        	dq 7
   990 00000D9F 6E65776C696E65          	db 0x6E, 0x65, 0x77, 0x6C, 0x69, 0x6E, 0x65
   991                                  	; L_constants + 3494:
   992 00000DA6 020A                    	db T_char, 0x0A	; #\newline
   993                                  free_var_0:	; location of null?
   994 00000DA8 [B00D000000000000]      	dq .undefined_object
   995                                  .undefined_object:
   996 00000DB0 05                      	db T_undefined
   997 00000DB1 [0600000000000000]      	dq L_constants + 6
   998                                  
   999                                  free_var_1:	; location of pair?
  1000 00000DB9 [C10D000000000000]      	dq .undefined_object
  1001                                  .undefined_object:
  1002 00000DC1 05                      	db T_undefined
  1003 00000DC2 [1400000000000000]      	dq L_constants + 20
  1004                                  
  1005                                  free_var_2:	; location of void?
  1006 00000DCA [D20D000000000000]      	dq .undefined_object
  1007                                  .undefined_object:
  1008 00000DD2 05                      	db T_undefined
  1009 00000DD3 [2200000000000000]      	dq L_constants + 34
  1010                                  
  1011                                  free_var_3:	; location of char?
  1012 00000DDB [E30D000000000000]      	dq .undefined_object
  1013                                  .undefined_object:
  1014 00000DE3 05                      	db T_undefined
  1015 00000DE4 [3000000000000000]      	dq L_constants + 48
  1016                                  
  1017                                  free_var_4:	; location of string?
  1018 00000DEC [F40D000000000000]      	dq .undefined_object
  1019                                  .undefined_object:
  1020 00000DF4 05                      	db T_undefined
  1021 00000DF5 [3E00000000000000]      	dq L_constants + 62
  1022                                  
  1023                                  free_var_5:	; location of interned-symbol?
  1024 00000DFD [050E000000000000]      	dq .undefined_object
  1025                                  .undefined_object:
  1026 00000E05 05                      	db T_undefined
  1027 00000E06 [4E00000000000000]      	dq L_constants + 78
  1028                                  
  1029                                  free_var_6:	; location of vector?
  1030 00000E0E [160E000000000000]      	dq .undefined_object
  1031                                  .undefined_object:
  1032 00000E16 05                      	db T_undefined
  1033 00000E17 [6700000000000000]      	dq L_constants + 103
  1034                                  
  1035                                  free_var_7:	; location of procedure?
  1036 00000E1F [270E000000000000]      	dq .undefined_object
  1037                                  .undefined_object:
  1038 00000E27 05                      	db T_undefined
  1039 00000E28 [7700000000000000]      	dq L_constants + 119
  1040                                  
  1041                                  free_var_8:	; location of real?
  1042 00000E30 [380E000000000000]      	dq .undefined_object
  1043                                  .undefined_object:
  1044 00000E38 05                      	db T_undefined
  1045 00000E39 [8A00000000000000]      	dq L_constants + 138
  1046                                  
  1047                                  free_var_9:	; location of fraction?
  1048 00000E41 [490E000000000000]      	dq .undefined_object
  1049                                  .undefined_object:
  1050 00000E49 05                      	db T_undefined
  1051 00000E4A [9800000000000000]      	dq L_constants + 152
  1052                                  
  1053                                  free_var_10:	; location of boolean?
  1054 00000E52 [5A0E000000000000]      	dq .undefined_object
  1055                                  .undefined_object:
  1056 00000E5A 05                      	db T_undefined
  1057 00000E5B [AA00000000000000]      	dq L_constants + 170
  1058                                  
  1059                                  free_var_11:	; location of number?
  1060 00000E63 [6B0E000000000000]      	dq .undefined_object
  1061                                  .undefined_object:
  1062 00000E6B 05                      	db T_undefined
  1063 00000E6C [BB00000000000000]      	dq L_constants + 187
  1064                                  
  1065                                  free_var_12:	; location of collection?
  1066 00000E74 [7C0E000000000000]      	dq .undefined_object
  1067                                  .undefined_object:
  1068 00000E7C 05                      	db T_undefined
  1069 00000E7D [CB00000000000000]      	dq L_constants + 203
  1070                                  
  1071                                  free_var_13:	; location of cons
  1072 00000E85 [8D0E000000000000]      	dq .undefined_object
  1073                                  .undefined_object:
  1074 00000E8D 05                      	db T_undefined
  1075 00000E8E [DF00000000000000]      	dq L_constants + 223
  1076                                  
  1077                                  free_var_14:	; location of display-sexpr
  1078 00000E96 [9E0E000000000000]      	dq .undefined_object
  1079                                  .undefined_object:
  1080 00000E9E 05                      	db T_undefined
  1081 00000E9F [EC00000000000000]      	dq L_constants + 236
  1082                                  
  1083                                  free_var_15:	; location of write-char
  1084 00000EA7 [AF0E000000000000]      	dq .undefined_object
  1085                                  .undefined_object:
  1086 00000EAF 05                      	db T_undefined
  1087 00000EB0 [0201000000000000]      	dq L_constants + 258
  1088                                  
  1089                                  free_var_16:	; location of car
  1090 00000EB8 [C00E000000000000]      	dq .undefined_object
  1091                                  .undefined_object:
  1092 00000EC0 05                      	db T_undefined
  1093 00000EC1 [1501000000000000]      	dq L_constants + 277
  1094                                  
  1095                                  free_var_17:	; location of cdr
  1096 00000EC9 [D10E000000000000]      	dq .undefined_object
  1097                                  .undefined_object:
  1098 00000ED1 05                      	db T_undefined
  1099 00000ED2 [2101000000000000]      	dq L_constants + 289
  1100                                  
  1101                                  free_var_18:	; location of string-length
  1102 00000EDA [E20E000000000000]      	dq .undefined_object
  1103                                  .undefined_object:
  1104 00000EE2 05                      	db T_undefined
  1105 00000EE3 [2D01000000000000]      	dq L_constants + 301
  1106                                  
  1107                                  free_var_19:	; location of vector-length
  1108 00000EEB [F30E000000000000]      	dq .undefined_object
  1109                                  .undefined_object:
  1110 00000EF3 05                      	db T_undefined
  1111 00000EF4 [4301000000000000]      	dq L_constants + 323
  1112                                  
  1113                                  free_var_20:	; location of real->integer
  1114 00000EFC [040F000000000000]      	dq .undefined_object
  1115                                  .undefined_object:
  1116 00000F04 05                      	db T_undefined
  1117 00000F05 [5901000000000000]      	dq L_constants + 345
  1118                                  
  1119                                  free_var_21:	; location of exit
  1120 00000F0D [150F000000000000]      	dq .undefined_object
  1121                                  .undefined_object:
  1122 00000F15 05                      	db T_undefined
  1123 00000F16 [6F01000000000000]      	dq L_constants + 367
  1124                                  
  1125                                  free_var_22:	; location of integer->real
  1126 00000F1E [260F000000000000]      	dq .undefined_object
  1127                                  .undefined_object:
  1128 00000F26 05                      	db T_undefined
  1129 00000F27 [7C01000000000000]      	dq L_constants + 380
  1130                                  
  1131                                  free_var_23:	; location of fraction->real
  1132 00000F2F [370F000000000000]      	dq .undefined_object
  1133                                  .undefined_object:
  1134 00000F37 05                      	db T_undefined
  1135 00000F38 [9201000000000000]      	dq L_constants + 402
  1136                                  
  1137                                  free_var_24:	; location of char->integer
  1138 00000F40 [480F000000000000]      	dq .undefined_object
  1139                                  .undefined_object:
  1140 00000F48 05                      	db T_undefined
  1141 00000F49 [A901000000000000]      	dq L_constants + 425
  1142                                  
  1143                                  free_var_25:	; location of integer->char
  1144 00000F51 [590F000000000000]      	dq .undefined_object
  1145                                  .undefined_object:
  1146 00000F59 05                      	db T_undefined
  1147 00000F5A [BF01000000000000]      	dq L_constants + 447
  1148                                  
  1149                                  free_var_26:	; location of trng
  1150 00000F62 [6A0F000000000000]      	dq .undefined_object
  1151                                  .undefined_object:
  1152 00000F6A 05                      	db T_undefined
  1153 00000F6B [D501000000000000]      	dq L_constants + 469
  1154                                  
  1155                                  free_var_27:	; location of zero?
  1156 00000F73 [7B0F000000000000]      	dq .undefined_object
  1157                                  .undefined_object:
  1158 00000F7B 05                      	db T_undefined
  1159 00000F7C [E201000000000000]      	dq L_constants + 482
  1160                                  
  1161                                  free_var_28:	; location of integer?
  1162 00000F84 [8C0F000000000000]      	dq .undefined_object
  1163                                  .undefined_object:
  1164 00000F8C 05                      	db T_undefined
  1165 00000F8D [F001000000000000]      	dq L_constants + 496
  1166                                  
  1167                                  free_var_29:	; location of __bin-apply
  1168 00000F95 [9D0F000000000000]      	dq .undefined_object
  1169                                  .undefined_object:
  1170 00000F9D 05                      	db T_undefined
  1171 00000F9E [0102000000000000]      	dq L_constants + 513
  1172                                  
  1173                                  free_var_30:	; location of __bin-add-rr
  1174 00000FA6 [AE0F000000000000]      	dq .undefined_object
  1175                                  .undefined_object:
  1176 00000FAE 05                      	db T_undefined
  1177 00000FAF [1502000000000000]      	dq L_constants + 533
  1178                                  
  1179                                  free_var_31:	; location of __bin-sub-rr
  1180 00000FB7 [BF0F000000000000]      	dq .undefined_object
  1181                                  .undefined_object:
  1182 00000FBF 05                      	db T_undefined
  1183 00000FC0 [2A02000000000000]      	dq L_constants + 554
  1184                                  
  1185                                  free_var_32:	; location of __bin-mul-rr
  1186 00000FC8 [D00F000000000000]      	dq .undefined_object
  1187                                  .undefined_object:
  1188 00000FD0 05                      	db T_undefined
  1189 00000FD1 [3F02000000000000]      	dq L_constants + 575
  1190                                  
  1191                                  free_var_33:	; location of __bin-div-rr
  1192 00000FD9 [E10F000000000000]      	dq .undefined_object
  1193                                  .undefined_object:
  1194 00000FE1 05                      	db T_undefined
  1195 00000FE2 [5402000000000000]      	dq L_constants + 596
  1196                                  
  1197                                  free_var_34:	; location of __bin-add-qq
  1198 00000FEA [F20F000000000000]      	dq .undefined_object
  1199                                  .undefined_object:
  1200 00000FF2 05                      	db T_undefined
  1201 00000FF3 [6902000000000000]      	dq L_constants + 617
  1202                                  
  1203                                  free_var_35:	; location of __bin-sub-qq
  1204 00000FFB [0310000000000000]      	dq .undefined_object
  1205                                  .undefined_object:
  1206 00001003 05                      	db T_undefined
  1207 00001004 [7E02000000000000]      	dq L_constants + 638
  1208                                  
  1209                                  free_var_36:	; location of __bin-mul-qq
  1210 0000100C [1410000000000000]      	dq .undefined_object
  1211                                  .undefined_object:
  1212 00001014 05                      	db T_undefined
  1213 00001015 [9302000000000000]      	dq L_constants + 659
  1214                                  
  1215                                  free_var_37:	; location of __bin-div-qq
  1216 0000101D [2510000000000000]      	dq .undefined_object
  1217                                  .undefined_object:
  1218 00001025 05                      	db T_undefined
  1219 00001026 [A802000000000000]      	dq L_constants + 680
  1220                                  
  1221                                  free_var_38:	; location of __bin-add-zz
  1222 0000102E [3610000000000000]      	dq .undefined_object
  1223                                  .undefined_object:
  1224 00001036 05                      	db T_undefined
  1225 00001037 [BD02000000000000]      	dq L_constants + 701
  1226                                  
  1227                                  free_var_39:	; location of __bin-sub-zz
  1228 0000103F [4710000000000000]      	dq .undefined_object
  1229                                  .undefined_object:
  1230 00001047 05                      	db T_undefined
  1231 00001048 [D202000000000000]      	dq L_constants + 722
  1232                                  
  1233                                  free_var_40:	; location of __bin-mul-zz
  1234 00001050 [5810000000000000]      	dq .undefined_object
  1235                                  .undefined_object:
  1236 00001058 05                      	db T_undefined
  1237 00001059 [E702000000000000]      	dq L_constants + 743
  1238                                  
  1239                                  free_var_41:	; location of __bin-div-zz
  1240 00001061 [6910000000000000]      	dq .undefined_object
  1241                                  .undefined_object:
  1242 00001069 05                      	db T_undefined
  1243 0000106A [FC02000000000000]      	dq L_constants + 764
  1244                                  
  1245                                  free_var_42:	; location of error
  1246 00001072 [7A10000000000000]      	dq .undefined_object
  1247                                  .undefined_object:
  1248 0000107A 05                      	db T_undefined
  1249 0000107B [1103000000000000]      	dq L_constants + 785
  1250                                  
  1251                                  free_var_43:	; location of __bin-less-than-rr
  1252 00001083 [8B10000000000000]      	dq .undefined_object
  1253                                  .undefined_object:
  1254 0000108B 05                      	db T_undefined
  1255 0000108C [1F03000000000000]      	dq L_constants + 799
  1256                                  
  1257                                  free_var_44:	; location of __bin-less-than-qq
  1258 00001094 [9C10000000000000]      	dq .undefined_object
  1259                                  .undefined_object:
  1260 0000109C 05                      	db T_undefined
  1261 0000109D [3A03000000000000]      	dq L_constants + 826
  1262                                  
  1263                                  free_var_45:	; location of __bin-less-than-zz
  1264 000010A5 [AD10000000000000]      	dq .undefined_object
  1265                                  .undefined_object:
  1266 000010AD 05                      	db T_undefined
  1267 000010AE [5503000000000000]      	dq L_constants + 853
  1268                                  
  1269                                  free_var_46:	; location of __bin-equal-rr
  1270 000010B6 [BE10000000000000]      	dq .undefined_object
  1271                                  .undefined_object:
  1272 000010BE 05                      	db T_undefined
  1273 000010BF [7003000000000000]      	dq L_constants + 880
  1274                                  
  1275                                  free_var_47:	; location of __bin-equal-qq
  1276 000010C7 [CF10000000000000]      	dq .undefined_object
  1277                                  .undefined_object:
  1278 000010CF 05                      	db T_undefined
  1279 000010D0 [8703000000000000]      	dq L_constants + 903
  1280                                  
  1281                                  free_var_48:	; location of __bin-equal-zz
  1282 000010D8 [E010000000000000]      	dq .undefined_object
  1283                                  .undefined_object:
  1284 000010E0 05                      	db T_undefined
  1285 000010E1 [9E03000000000000]      	dq L_constants + 926
  1286                                  
  1287                                  free_var_49:	; location of quotient
  1288 000010E9 [F110000000000000]      	dq .undefined_object
  1289                                  .undefined_object:
  1290 000010F1 05                      	db T_undefined
  1291 000010F2 [B503000000000000]      	dq L_constants + 949
  1292                                  
  1293                                  free_var_50:	; location of remainder
  1294 000010FA [0211000000000000]      	dq .undefined_object
  1295                                  .undefined_object:
  1296 00001102 05                      	db T_undefined
  1297 00001103 [C603000000000000]      	dq L_constants + 966
  1298                                  
  1299                                  free_var_51:	; location of set-car!
  1300 0000110B [1311000000000000]      	dq .undefined_object
  1301                                  .undefined_object:
  1302 00001113 05                      	db T_undefined
  1303 00001114 [D803000000000000]      	dq L_constants + 984
  1304                                  
  1305                                  free_var_52:	; location of set-cdr!
  1306 0000111C [2411000000000000]      	dq .undefined_object
  1307                                  .undefined_object:
  1308 00001124 05                      	db T_undefined
  1309 00001125 [E903000000000000]      	dq L_constants + 1001
  1310                                  
  1311                                  free_var_53:	; location of string-ref
  1312 0000112D [3511000000000000]      	dq .undefined_object
  1313                                  .undefined_object:
  1314 00001135 05                      	db T_undefined
  1315 00001136 [FA03000000000000]      	dq L_constants + 1018
  1316                                  
  1317                                  free_var_54:	; location of vector-ref
  1318 0000113E [4611000000000000]      	dq .undefined_object
  1319                                  .undefined_object:
  1320 00001146 05                      	db T_undefined
  1321 00001147 [0D04000000000000]      	dq L_constants + 1037
  1322                                  
  1323                                  free_var_55:	; location of vector-set!
  1324 0000114F [5711000000000000]      	dq .undefined_object
  1325                                  .undefined_object:
  1326 00001157 05                      	db T_undefined
  1327 00001158 [2004000000000000]      	dq L_constants + 1056
  1328                                  
  1329                                  free_var_56:	; location of string-set!
  1330 00001160 [6811000000000000]      	dq .undefined_object
  1331                                  .undefined_object:
  1332 00001168 05                      	db T_undefined
  1333 00001169 [3404000000000000]      	dq L_constants + 1076
  1334                                  
  1335                                  free_var_57:	; location of make-vector
  1336 00001171 [7911000000000000]      	dq .undefined_object
  1337                                  .undefined_object:
  1338 00001179 05                      	db T_undefined
  1339 0000117A [4804000000000000]      	dq L_constants + 1096
  1340                                  
  1341                                  free_var_58:	; location of make-string
  1342 00001182 [8A11000000000000]      	dq .undefined_object
  1343                                  .undefined_object:
  1344 0000118A 05                      	db T_undefined
  1345 0000118B [5C04000000000000]      	dq L_constants + 1116
  1346                                  
  1347                                  free_var_59:	; location of numerator
  1348 00001193 [9B11000000000000]      	dq .undefined_object
  1349                                  .undefined_object:
  1350 0000119B 05                      	db T_undefined
  1351 0000119C [7004000000000000]      	dq L_constants + 1136
  1352                                  
  1353                                  free_var_60:	; location of denominator
  1354 000011A4 [AC11000000000000]      	dq .undefined_object
  1355                                  .undefined_object:
  1356 000011AC 05                      	db T_undefined
  1357 000011AD [8204000000000000]      	dq L_constants + 1154
  1358                                  
  1359                                  free_var_61:	; location of eq?
  1360 000011B5 [BD11000000000000]      	dq .undefined_object
  1361                                  .undefined_object:
  1362 000011BD 05                      	db T_undefined
  1363 000011BE [9604000000000000]      	dq L_constants + 1174
  1364                                  
  1365                                  free_var_62:	; location of __integer-to-fraction
  1366 000011C6 [CE11000000000000]      	dq .undefined_object
  1367                                  .undefined_object:
  1368 000011CE 05                      	db T_undefined
  1369 000011CF [A204000000000000]      	dq L_constants + 1186
  1370                                  
  1371                                  free_var_63:	; location of logand
  1372 000011D7 [DF11000000000000]      	dq .undefined_object
  1373                                  .undefined_object:
  1374 000011DF 05                      	db T_undefined
  1375 000011E0 [C004000000000000]      	dq L_constants + 1216
  1376                                  
  1377                                  free_var_64:	; location of logor
  1378 000011E8 [F011000000000000]      	dq .undefined_object
  1379                                  .undefined_object:
  1380 000011F0 05                      	db T_undefined
  1381 000011F1 [CF04000000000000]      	dq L_constants + 1231
  1382                                  
  1383                                  free_var_65:	; location of logxor
  1384 000011F9 [0112000000000000]      	dq .undefined_object
  1385                                  .undefined_object:
  1386 00001201 05                      	db T_undefined
  1387 00001202 [DD04000000000000]      	dq L_constants + 1245
  1388                                  
  1389                                  free_var_66:	; location of lognot
  1390 0000120A [1212000000000000]      	dq .undefined_object
  1391                                  .undefined_object:
  1392 00001212 05                      	db T_undefined
  1393 00001213 [EC04000000000000]      	dq L_constants + 1260
  1394                                  
  1395                                  free_var_67:	; location of ash
  1396 0000121B [2312000000000000]      	dq .undefined_object
  1397                                  .undefined_object:
  1398 00001223 05                      	db T_undefined
  1399 00001224 [FB04000000000000]      	dq L_constants + 1275
  1400                                  
  1401                                  free_var_68:	; location of symbol?
  1402 0000122C [3412000000000000]      	dq .undefined_object
  1403                                  .undefined_object:
  1404 00001234 05                      	db T_undefined
  1405 00001235 [0705000000000000]      	dq L_constants + 1287
  1406                                  
  1407                                  free_var_69:	; location of uninterned-symbol?
  1408 0000123D [4512000000000000]      	dq .undefined_object
  1409                                  .undefined_object:
  1410 00001245 05                      	db T_undefined
  1411 00001246 [1705000000000000]      	dq L_constants + 1303
  1412                                  
  1413                                  free_var_70:	; location of gensym?
  1414 0000124E [5612000000000000]      	dq .undefined_object
  1415                                  .undefined_object:
  1416 00001256 05                      	db T_undefined
  1417 00001257 [3205000000000000]      	dq L_constants + 1330
  1418                                  
  1419                                  free_var_71:	; location of gensym
  1420 0000125F [6712000000000000]      	dq .undefined_object
  1421                                  .undefined_object:
  1422 00001267 05                      	db T_undefined
  1423 00001268 [4205000000000000]      	dq L_constants + 1346
  1424                                  
  1425                                  free_var_72:	; location of frame
  1426 00001270 [7812000000000000]      	dq .undefined_object
  1427                                  .undefined_object:
  1428 00001278 05                      	db T_undefined
  1429 00001279 [5105000000000000]      	dq L_constants + 1361
  1430                                  
  1431                                  free_var_73:	; location of break
  1432 00001281 [8912000000000000]      	dq .undefined_object
  1433                                  .undefined_object:
  1434 00001289 05                      	db T_undefined
  1435 0000128A [5F05000000000000]      	dq L_constants + 1375
  1436                                  
  1437                                  free_var_74:	; location of caar
  1438 00001292 [9A12000000000000]      	dq .undefined_object
  1439                                  .undefined_object:
  1440 0000129A 05                      	db T_undefined
  1441 0000129B [6D05000000000000]      	dq L_constants + 1389
  1442                                  
  1443                                  free_var_75:	; location of cadr
  1444 000012A3 [AB12000000000000]      	dq .undefined_object
  1445                                  .undefined_object:
  1446 000012AB 05                      	db T_undefined
  1447 000012AC [7A05000000000000]      	dq L_constants + 1402
  1448                                  
  1449                                  free_var_76:	; location of cdar
  1450 000012B4 [BC12000000000000]      	dq .undefined_object
  1451                                  .undefined_object:
  1452 000012BC 05                      	db T_undefined
  1453 000012BD [8705000000000000]      	dq L_constants + 1415
  1454                                  
  1455                                  free_var_77:	; location of cddr
  1456 000012C5 [CD12000000000000]      	dq .undefined_object
  1457                                  .undefined_object:
  1458 000012CD 05                      	db T_undefined
  1459 000012CE [9405000000000000]      	dq L_constants + 1428
  1460                                  
  1461                                  free_var_78:	; location of caaar
  1462 000012D6 [DE12000000000000]      	dq .undefined_object
  1463                                  .undefined_object:
  1464 000012DE 05                      	db T_undefined
  1465 000012DF [A105000000000000]      	dq L_constants + 1441
  1466                                  
  1467                                  free_var_79:	; location of caadr
  1468 000012E7 [EF12000000000000]      	dq .undefined_object
  1469                                  .undefined_object:
  1470 000012EF 05                      	db T_undefined
  1471 000012F0 [AF05000000000000]      	dq L_constants + 1455
  1472                                  
  1473                                  free_var_80:	; location of cadar
  1474 000012F8 [0013000000000000]      	dq .undefined_object
  1475                                  .undefined_object:
  1476 00001300 05                      	db T_undefined
  1477 00001301 [BD05000000000000]      	dq L_constants + 1469
  1478                                  
  1479                                  free_var_81:	; location of caddr
  1480 00001309 [1113000000000000]      	dq .undefined_object
  1481                                  .undefined_object:
  1482 00001311 05                      	db T_undefined
  1483 00001312 [CB05000000000000]      	dq L_constants + 1483
  1484                                  
  1485                                  free_var_82:	; location of cdaar
  1486 0000131A [2213000000000000]      	dq .undefined_object
  1487                                  .undefined_object:
  1488 00001322 05                      	db T_undefined
  1489 00001323 [D905000000000000]      	dq L_constants + 1497
  1490                                  
  1491                                  free_var_83:	; location of cdadr
  1492 0000132B [3313000000000000]      	dq .undefined_object
  1493                                  .undefined_object:
  1494 00001333 05                      	db T_undefined
  1495 00001334 [E705000000000000]      	dq L_constants + 1511
  1496                                  
  1497                                  free_var_84:	; location of cddar
  1498 0000133C [4413000000000000]      	dq .undefined_object
  1499                                  .undefined_object:
  1500 00001344 05                      	db T_undefined
  1501 00001345 [F505000000000000]      	dq L_constants + 1525
  1502                                  
  1503                                  free_var_85:	; location of cdddr
  1504 0000134D [5513000000000000]      	dq .undefined_object
  1505                                  .undefined_object:
  1506 00001355 05                      	db T_undefined
  1507 00001356 [0306000000000000]      	dq L_constants + 1539
  1508                                  
  1509                                  free_var_86:	; location of caaaar
  1510 0000135E [6613000000000000]      	dq .undefined_object
  1511                                  .undefined_object:
  1512 00001366 05                      	db T_undefined
  1513 00001367 [1106000000000000]      	dq L_constants + 1553
  1514                                  
  1515                                  free_var_87:	; location of caaadr
  1516 0000136F [7713000000000000]      	dq .undefined_object
  1517                                  .undefined_object:
  1518 00001377 05                      	db T_undefined
  1519 00001378 [2006000000000000]      	dq L_constants + 1568
  1520                                  
  1521                                  free_var_88:	; location of caadar
  1522 00001380 [8813000000000000]      	dq .undefined_object
  1523                                  .undefined_object:
  1524 00001388 05                      	db T_undefined
  1525 00001389 [2F06000000000000]      	dq L_constants + 1583
  1526                                  
  1527                                  free_var_89:	; location of caaddr
  1528 00001391 [9913000000000000]      	dq .undefined_object
  1529                                  .undefined_object:
  1530 00001399 05                      	db T_undefined
  1531 0000139A [3E06000000000000]      	dq L_constants + 1598
  1532                                  
  1533                                  free_var_90:	; location of cadaar
  1534 000013A2 [AA13000000000000]      	dq .undefined_object
  1535                                  .undefined_object:
  1536 000013AA 05                      	db T_undefined
  1537 000013AB [4D06000000000000]      	dq L_constants + 1613
  1538                                  
  1539                                  free_var_91:	; location of cadadr
  1540 000013B3 [BB13000000000000]      	dq .undefined_object
  1541                                  .undefined_object:
  1542 000013BB 05                      	db T_undefined
  1543 000013BC [5C06000000000000]      	dq L_constants + 1628
  1544                                  
  1545                                  free_var_92:	; location of caddar
  1546 000013C4 [CC13000000000000]      	dq .undefined_object
  1547                                  .undefined_object:
  1548 000013CC 05                      	db T_undefined
  1549 000013CD [6B06000000000000]      	dq L_constants + 1643
  1550                                  
  1551                                  free_var_93:	; location of cadddr
  1552 000013D5 [DD13000000000000]      	dq .undefined_object
  1553                                  .undefined_object:
  1554 000013DD 05                      	db T_undefined
  1555 000013DE [7A06000000000000]      	dq L_constants + 1658
  1556                                  
  1557                                  free_var_94:	; location of cdaaar
  1558 000013E6 [EE13000000000000]      	dq .undefined_object
  1559                                  .undefined_object:
  1560 000013EE 05                      	db T_undefined
  1561 000013EF [8906000000000000]      	dq L_constants + 1673
  1562                                  
  1563                                  free_var_95:	; location of cdaadr
  1564 000013F7 [FF13000000000000]      	dq .undefined_object
  1565                                  .undefined_object:
  1566 000013FF 05                      	db T_undefined
  1567 00001400 [9806000000000000]      	dq L_constants + 1688
  1568                                  
  1569                                  free_var_96:	; location of cdadar
  1570 00001408 [1014000000000000]      	dq .undefined_object
  1571                                  .undefined_object:
  1572 00001410 05                      	db T_undefined
  1573 00001411 [A706000000000000]      	dq L_constants + 1703
  1574                                  
  1575                                  free_var_97:	; location of cdaddr
  1576 00001419 [2114000000000000]      	dq .undefined_object
  1577                                  .undefined_object:
  1578 00001421 05                      	db T_undefined
  1579 00001422 [B606000000000000]      	dq L_constants + 1718
  1580                                  
  1581                                  free_var_98:	; location of cddaar
  1582 0000142A [3214000000000000]      	dq .undefined_object
  1583                                  .undefined_object:
  1584 00001432 05                      	db T_undefined
  1585 00001433 [C506000000000000]      	dq L_constants + 1733
  1586                                  
  1587                                  free_var_99:	; location of cddadr
  1588 0000143B [4314000000000000]      	dq .undefined_object
  1589                                  .undefined_object:
  1590 00001443 05                      	db T_undefined
  1591 00001444 [D406000000000000]      	dq L_constants + 1748
  1592                                  
  1593                                  free_var_100:	; location of cdddar
  1594 0000144C [5414000000000000]      	dq .undefined_object
  1595                                  .undefined_object:
  1596 00001454 05                      	db T_undefined
  1597 00001455 [E306000000000000]      	dq L_constants + 1763
  1598                                  
  1599                                  free_var_101:	; location of cddddr
  1600 0000145D [6514000000000000]      	dq .undefined_object
  1601                                  .undefined_object:
  1602 00001465 05                      	db T_undefined
  1603 00001466 [F206000000000000]      	dq L_constants + 1778
  1604                                  
  1605                                  free_var_102:	; location of list?
  1606 0000146E [7614000000000000]      	dq .undefined_object
  1607                                  .undefined_object:
  1608 00001476 05                      	db T_undefined
  1609 00001477 [0107000000000000]      	dq L_constants + 1793
  1610                                  
  1611                                  free_var_103:	; location of list
  1612 0000147F [8714000000000000]      	dq .undefined_object
  1613                                  .undefined_object:
  1614 00001487 05                      	db T_undefined
  1615 00001488 [0F07000000000000]      	dq L_constants + 1807
  1616                                  
  1617                                  free_var_104:	; location of not
  1618 00001490 [9814000000000000]      	dq .undefined_object
  1619                                  .undefined_object:
  1620 00001498 05                      	db T_undefined
  1621 00001499 [1C07000000000000]      	dq L_constants + 1820
  1622                                  
  1623                                  free_var_105:	; location of rational?
  1624 000014A1 [A914000000000000]      	dq .undefined_object
  1625                                  .undefined_object:
  1626 000014A9 05                      	db T_undefined
  1627 000014AA [2807000000000000]      	dq L_constants + 1832
  1628                                  
  1629                                  free_var_106:	; location of list*
  1630 000014B2 [BA14000000000000]      	dq .undefined_object
  1631                                  .undefined_object:
  1632 000014BA 05                      	db T_undefined
  1633 000014BB [3A07000000000000]      	dq L_constants + 1850
  1634                                  
  1635                                  free_var_107:	; location of apply
  1636 000014C3 [CB14000000000000]      	dq .undefined_object
  1637                                  .undefined_object:
  1638 000014CB 05                      	db T_undefined
  1639 000014CC [6207000000000000]      	dq L_constants + 1890
  1640                                  
  1641                                  free_var_108:	; location of ormap
  1642 000014D4 [DC14000000000000]      	dq .undefined_object
  1643                                  .undefined_object:
  1644 000014DC 05                      	db T_undefined
  1645 000014DD [7007000000000000]      	dq L_constants + 1904
  1646                                  
  1647                                  free_var_109:	; location of map
  1648 000014E5 [ED14000000000000]      	dq .undefined_object
  1649                                  .undefined_object:
  1650 000014ED 05                      	db T_undefined
  1651 000014EE [7E07000000000000]      	dq L_constants + 1918
  1652                                  
  1653                                  free_var_110:	; location of andmap
  1654 000014F6 [FE14000000000000]      	dq .undefined_object
  1655                                  .undefined_object:
  1656 000014FE 05                      	db T_undefined
  1657 000014FF [8A07000000000000]      	dq L_constants + 1930
  1658                                  
  1659                                  free_var_111:	; location of reverse
  1660 00001507 [0F15000000000000]      	dq .undefined_object
  1661                                  .undefined_object:
  1662 0000150F 05                      	db T_undefined
  1663 00001510 [9907000000000000]      	dq L_constants + 1945
  1664                                  
  1665                                  free_var_112:	; location of fold-left
  1666 00001518 [2015000000000000]      	dq .undefined_object
  1667                                  .undefined_object:
  1668 00001520 05                      	db T_undefined
  1669 00001521 [A907000000000000]      	dq L_constants + 1961
  1670                                  
  1671                                  free_var_113:	; location of append
  1672 00001529 [3115000000000000]      	dq .undefined_object
  1673                                  .undefined_object:
  1674 00001531 05                      	db T_undefined
  1675 00001532 [BB07000000000000]      	dq L_constants + 1979
  1676                                  
  1677                                  free_var_114:	; location of fold-right
  1678 0000153A [4215000000000000]      	dq .undefined_object
  1679                                  .undefined_object:
  1680 00001542 05                      	db T_undefined
  1681 00001543 [CA07000000000000]      	dq L_constants + 1994
  1682                                  
  1683                                  free_var_115:	; location of +
  1684 0000154B [5315000000000000]      	dq .undefined_object
  1685                                  .undefined_object:
  1686 00001553 05                      	db T_undefined
  1687 00001554 [DD07000000000000]      	dq L_constants + 2013
  1688                                  
  1689                                  free_var_116:	; location of __bin_integer_to_fraction
  1690 0000155C [6415000000000000]      	dq .undefined_object
  1691                                  .undefined_object:
  1692 00001564 05                      	db T_undefined
  1693 00001565 [F007000000000000]      	dq L_constants + 2032
  1694                                  
  1695                                  free_var_117:	; location of -
  1696 0000156D [7515000000000000]      	dq .undefined_object
  1697                                  .undefined_object:
  1698 00001575 05                      	db T_undefined
  1699 00001576 [4408000000000000]      	dq L_constants + 2116
  1700                                  
  1701                                  free_var_118:	; location of real
  1702 0000157E [8615000000000000]      	dq .undefined_object
  1703                                  .undefined_object:
  1704 00001586 05                      	db T_undefined
  1705 00001587 [4E08000000000000]      	dq L_constants + 2126
  1706                                  
  1707                                  free_var_119:	; location of *
  1708 0000158F [9715000000000000]      	dq .undefined_object
  1709                                  .undefined_object:
  1710 00001597 05                      	db T_undefined
  1711 00001598 [6408000000000000]      	dq L_constants + 2148
  1712                                  
  1713                                  free_var_120:	; location of /
  1714 000015A0 [A815000000000000]      	dq .undefined_object
  1715                                  .undefined_object:
  1716 000015A8 05                      	db T_undefined
  1717 000015A9 [8008000000000000]      	dq L_constants + 2176
  1718                                  
  1719                                  free_var_121:	; location of fact
  1720 000015B1 [B915000000000000]      	dq .undefined_object
  1721                                  .undefined_object:
  1722 000015B9 05                      	db T_undefined
  1723 000015BA [9308000000000000]      	dq L_constants + 2195
  1724                                  
  1725                                  free_var_122:	; location of <
  1726 000015C2 [CA15000000000000]      	dq .undefined_object
  1727                                  .undefined_object:
  1728 000015CA 05                      	db T_undefined
  1729 000015CB [A008000000000000]      	dq L_constants + 2208
  1730                                  
  1731                                  free_var_123:	; location of <=
  1732 000015D3 [DB15000000000000]      	dq .undefined_object
  1733                                  .undefined_object:
  1734 000015DB 05                      	db T_undefined
  1735 000015DC [AA08000000000000]      	dq L_constants + 2218
  1736                                  
  1737                                  free_var_124:	; location of >
  1738 000015E4 [EC15000000000000]      	dq .undefined_object
  1739                                  .undefined_object:
  1740 000015EC 05                      	db T_undefined
  1741 000015ED [B508000000000000]      	dq L_constants + 2229
  1742                                  
  1743                                  free_var_125:	; location of >=
  1744 000015F5 [FD15000000000000]      	dq .undefined_object
  1745                                  .undefined_object:
  1746 000015FD 05                      	db T_undefined
  1747 000015FE [BF08000000000000]      	dq L_constants + 2239
  1748                                  
  1749                                  free_var_126:	; location of =
  1750 00001606 [0E16000000000000]      	dq .undefined_object
  1751                                  .undefined_object:
  1752 0000160E 05                      	db T_undefined
  1753 0000160F [CA08000000000000]      	dq L_constants + 2250
  1754                                  
  1755                                  free_var_127:	; location of make-list
  1756 00001617 [1F16000000000000]      	dq .undefined_object
  1757                                  .undefined_object:
  1758 0000161F 05                      	db T_undefined
  1759 00001620 [2209000000000000]      	dq L_constants + 2338
  1760                                  
  1761                                  free_var_128:	; location of char<?
  1762 00001628 [3016000000000000]      	dq .undefined_object
  1763                                  .undefined_object:
  1764 00001630 05                      	db T_undefined
  1765 00001631 [7309000000000000]      	dq L_constants + 2419
  1766                                  
  1767                                  free_var_129:	; location of char<=?
  1768 00001639 [4116000000000000]      	dq .undefined_object
  1769                                  .undefined_object:
  1770 00001641 05                      	db T_undefined
  1771 00001642 [8209000000000000]      	dq L_constants + 2434
  1772                                  
  1773                                  free_var_130:	; location of char=?
  1774 0000164A [5216000000000000]      	dq .undefined_object
  1775                                  .undefined_object:
  1776 00001652 05                      	db T_undefined
  1777 00001653 [9209000000000000]      	dq L_constants + 2450
  1778                                  
  1779                                  free_var_131:	; location of char>?
  1780 0000165B [6316000000000000]      	dq .undefined_object
  1781                                  .undefined_object:
  1782 00001663 05                      	db T_undefined
  1783 00001664 [A109000000000000]      	dq L_constants + 2465
  1784                                  
  1785                                  free_var_132:	; location of char>=?
  1786 0000166C [7416000000000000]      	dq .undefined_object
  1787                                  .undefined_object:
  1788 00001674 05                      	db T_undefined
  1789 00001675 [B009000000000000]      	dq L_constants + 2480
  1790                                  
  1791                                  free_var_133:	; location of char-downcase
  1792 0000167D [8516000000000000]      	dq .undefined_object
  1793                                  .undefined_object:
  1794 00001685 05                      	db T_undefined
  1795 00001686 [C009000000000000]      	dq L_constants + 2496
  1796                                  
  1797                                  free_var_134:	; location of char-upcase
  1798 0000168E [9616000000000000]      	dq .undefined_object
  1799                                  .undefined_object:
  1800 00001696 05                      	db T_undefined
  1801 00001697 [D609000000000000]      	dq L_constants + 2518
  1802                                  
  1803                                  free_var_135:	; location of char-ci<?
  1804 0000169F [A716000000000000]      	dq .undefined_object
  1805                                  .undefined_object:
  1806 000016A7 05                      	db T_undefined
  1807 000016A8 [F209000000000000]      	dq L_constants + 2546
  1808                                  
  1809                                  free_var_136:	; location of char-ci<=?
  1810 000016B0 [B816000000000000]      	dq .undefined_object
  1811                                  .undefined_object:
  1812 000016B8 05                      	db T_undefined
  1813 000016B9 [040A000000000000]      	dq L_constants + 2564
  1814                                  
  1815                                  free_var_137:	; location of char-ci=?
  1816 000016C1 [C916000000000000]      	dq .undefined_object
  1817                                  .undefined_object:
  1818 000016C9 05                      	db T_undefined
  1819 000016CA [170A000000000000]      	dq L_constants + 2583
  1820                                  
  1821                                  free_var_138:	; location of char-ci>?
  1822 000016D2 [DA16000000000000]      	dq .undefined_object
  1823                                  .undefined_object:
  1824 000016DA 05                      	db T_undefined
  1825 000016DB [290A000000000000]      	dq L_constants + 2601
  1826                                  
  1827                                  free_var_139:	; location of char-ci>=?
  1828 000016E3 [EB16000000000000]      	dq .undefined_object
  1829                                  .undefined_object:
  1830 000016EB 05                      	db T_undefined
  1831 000016EC [3B0A000000000000]      	dq L_constants + 2619
  1832                                  
  1833                                  free_var_140:	; location of string-downcase
  1834 000016F4 [FC16000000000000]      	dq .undefined_object
  1835                                  .undefined_object:
  1836 000016FC 05                      	db T_undefined
  1837 000016FD [4E0A000000000000]      	dq L_constants + 2638
  1838                                  
  1839                                  free_var_141:	; location of string-upcase
  1840 00001705 [0D17000000000000]      	dq .undefined_object
  1841                                  .undefined_object:
  1842 0000170D 05                      	db T_undefined
  1843 0000170E [660A000000000000]      	dq L_constants + 2662
  1844                                  
  1845                                  free_var_142:	; location of list->string
  1846 00001716 [1E17000000000000]      	dq .undefined_object
  1847                                  .undefined_object:
  1848 0000171E 05                      	db T_undefined
  1849 0000171F [7C0A000000000000]      	dq L_constants + 2684
  1850                                  
  1851                                  free_var_143:	; location of string->list
  1852 00001727 [2F17000000000000]      	dq .undefined_object
  1853                                  .undefined_object:
  1854 0000172F 05                      	db T_undefined
  1855 00001730 [910A000000000000]      	dq L_constants + 2705
  1856                                  
  1857                                  free_var_144:	; location of string<?
  1858 00001738 [4017000000000000]      	dq .undefined_object
  1859                                  .undefined_object:
  1860 00001740 05                      	db T_undefined
  1861 00001741 [A60A000000000000]      	dq L_constants + 2726
  1862                                  
  1863                                  free_var_145:	; location of string<=?
  1864 00001749 [5117000000000000]      	dq .undefined_object
  1865                                  .undefined_object:
  1866 00001751 05                      	db T_undefined
  1867 00001752 [B70A000000000000]      	dq L_constants + 2743
  1868                                  
  1869                                  free_var_146:	; location of string=?
  1870 0000175A [6217000000000000]      	dq .undefined_object
  1871                                  .undefined_object:
  1872 00001762 05                      	db T_undefined
  1873 00001763 [C90A000000000000]      	dq L_constants + 2761
  1874                                  
  1875                                  free_var_147:	; location of string>=?
  1876 0000176B [7317000000000000]      	dq .undefined_object
  1877                                  .undefined_object:
  1878 00001773 05                      	db T_undefined
  1879 00001774 [DA0A000000000000]      	dq L_constants + 2778
  1880                                  
  1881                                  free_var_148:	; location of string>?
  1882 0000177C [8417000000000000]      	dq .undefined_object
  1883                                  .undefined_object:
  1884 00001784 05                      	db T_undefined
  1885 00001785 [EC0A000000000000]      	dq L_constants + 2796
  1886                                  
  1887                                  free_var_149:	; location of string-ci<?
  1888 0000178D [9517000000000000]      	dq .undefined_object
  1889                                  .undefined_object:
  1890 00001795 05                      	db T_undefined
  1891 00001796 [FD0A000000000000]      	dq L_constants + 2813
  1892                                  
  1893                                  free_var_150:	; location of string-ci<=?
  1894 0000179E [A617000000000000]      	dq .undefined_object
  1895                                  .undefined_object:
  1896 000017A6 05                      	db T_undefined
  1897 000017A7 [110B000000000000]      	dq L_constants + 2833
  1898                                  
  1899                                  free_var_151:	; location of string-ci=?
  1900 000017AF [B717000000000000]      	dq .undefined_object
  1901                                  .undefined_object:
  1902 000017B7 05                      	db T_undefined
  1903 000017B8 [260B000000000000]      	dq L_constants + 2854
  1904                                  
  1905                                  free_var_152:	; location of string-ci>=?
  1906 000017C0 [C817000000000000]      	dq .undefined_object
  1907                                  .undefined_object:
  1908 000017C8 05                      	db T_undefined
  1909 000017C9 [3A0B000000000000]      	dq L_constants + 2874
  1910                                  
  1911                                  free_var_153:	; location of string-ci>?
  1912 000017D1 [D917000000000000]      	dq .undefined_object
  1913                                  .undefined_object:
  1914 000017D9 05                      	db T_undefined
  1915 000017DA [4F0B000000000000]      	dq L_constants + 2895
  1916                                  
  1917                                  free_var_154:	; location of length
  1918 000017E2 [EA17000000000000]      	dq .undefined_object
  1919                                  .undefined_object:
  1920 000017EA 05                      	db T_undefined
  1921 000017EB [630B000000000000]      	dq L_constants + 2915
  1922                                  
  1923                                  free_var_155:	; location of list->vector
  1924 000017F3 [FB17000000000000]      	dq .undefined_object
  1925                                  .undefined_object:
  1926 000017FB 05                      	db T_undefined
  1927 000017FC [EC0B000000000000]      	dq L_constants + 3052
  1928                                  
  1929                                  free_var_156:	; location of vector
  1930 00001804 [0C18000000000000]      	dq .undefined_object
  1931                                  .undefined_object:
  1932 0000180C 05                      	db T_undefined
  1933 0000180D [010C000000000000]      	dq L_constants + 3073
  1934                                  
  1935                                  free_var_157:	; location of vector->list
  1936 00001815 [1D18000000000000]      	dq .undefined_object
  1937                                  .undefined_object:
  1938 0000181D 05                      	db T_undefined
  1939 0000181E [100C000000000000]      	dq L_constants + 3088
  1940                                  
  1941                                  free_var_158:	; location of random
  1942 00001826 [2E18000000000000]      	dq .undefined_object
  1943                                  .undefined_object:
  1944 0000182E 05                      	db T_undefined
  1945 0000182F [250C000000000000]      	dq L_constants + 3109
  1946                                  
  1947                                  free_var_159:	; location of positive?
  1948 00001837 [3F18000000000000]      	dq .undefined_object
  1949                                  .undefined_object:
  1950 0000183F 05                      	db T_undefined
  1951 00001840 [340C000000000000]      	dq L_constants + 3124
  1952                                  
  1953                                  free_var_160:	; location of negative?
  1954 00001848 [5018000000000000]      	dq .undefined_object
  1955                                  .undefined_object:
  1956 00001850 05                      	db T_undefined
  1957 00001851 [460C000000000000]      	dq L_constants + 3142
  1958                                  
  1959                                  free_var_161:	; location of even?
  1960 00001859 [6118000000000000]      	dq .undefined_object
  1961                                  .undefined_object:
  1962 00001861 05                      	db T_undefined
  1963 00001862 [580C000000000000]      	dq L_constants + 3160
  1964                                  
  1965                                  free_var_162:	; location of odd?
  1966 0000186A [7218000000000000]      	dq .undefined_object
  1967                                  .undefined_object:
  1968 00001872 05                      	db T_undefined
  1969 00001873 [6F0C000000000000]      	dq L_constants + 3183
  1970                                  
  1971                                  free_var_163:	; location of abs
  1972 0000187B [8318000000000000]      	dq .undefined_object
  1973                                  .undefined_object:
  1974 00001883 05                      	db T_undefined
  1975 00001884 [7C0C000000000000]      	dq L_constants + 3196
  1976                                  
  1977                                  free_var_164:	; location of equal?
  1978 0000188C [9418000000000000]      	dq .undefined_object
  1979                                  .undefined_object:
  1980 00001894 05                      	db T_undefined
  1981 00001895 [880C000000000000]      	dq L_constants + 3208
  1982                                  
  1983                                  free_var_165:	; location of assoc
  1984 0000189D [A518000000000000]      	dq .undefined_object
  1985                                  .undefined_object:
  1986 000018A5 05                      	db T_undefined
  1987 000018A6 [970C000000000000]      	dq L_constants + 3223
  1988                                  
  1989                                  free_var_166:	; location of string-append
  1990 000018AE [B618000000000000]      	dq .undefined_object
  1991                                  .undefined_object:
  1992 000018B6 05                      	db T_undefined
  1993 000018B7 [A50C000000000000]      	dq L_constants + 3237
  1994                                  
  1995                                  free_var_167:	; location of vector-append
  1996 000018BF [C718000000000000]      	dq .undefined_object
  1997                                  .undefined_object:
  1998 000018C7 05                      	db T_undefined
  1999 000018C8 [BB0C000000000000]      	dq L_constants + 3259
  2000                                  
  2001                                  free_var_168:	; location of string-reverse
  2002 000018D0 [D818000000000000]      	dq .undefined_object
  2003                                  .undefined_object:
  2004 000018D8 05                      	db T_undefined
  2005 000018D9 [D10C000000000000]      	dq L_constants + 3281
  2006                                  
  2007                                  free_var_169:	; location of vector-reverse
  2008 000018E1 [E918000000000000]      	dq .undefined_object
  2009                                  .undefined_object:
  2010 000018E9 05                      	db T_undefined
  2011 000018EA [E80C000000000000]      	dq L_constants + 3304
  2012                                  
  2013                                  free_var_170:	; location of string-reverse!
  2014 000018F2 [FA18000000000000]      	dq .undefined_object
  2015                                  .undefined_object:
  2016 000018FA 05                      	db T_undefined
  2017 000018FB [FF0C000000000000]      	dq L_constants + 3327
  2018                                  
  2019                                  free_var_171:	; location of vector-reverse!
  2020 00001903 [0B19000000000000]      	dq .undefined_object
  2021                                  .undefined_object:
  2022 0000190B 05                      	db T_undefined
  2023 0000190C [170D000000000000]      	dq L_constants + 3351
  2024                                  
  2025                                  free_var_172:	; location of make-list-thunk
  2026 00001914 [1C19000000000000]      	dq .undefined_object
  2027                                  .undefined_object:
  2028 0000191C 05                      	db T_undefined
  2029 0000191D [2F0D000000000000]      	dq L_constants + 3375
  2030                                  
  2031                                  free_var_173:	; location of make-string-thunk
  2032 00001925 [2D19000000000000]      	dq .undefined_object
  2033                                  .undefined_object:
  2034 0000192D 05                      	db T_undefined
  2035 0000192E [470D000000000000]      	dq L_constants + 3399
  2036                                  
  2037                                  free_var_174:	; location of make-vector-thunk
  2038 00001936 [3E19000000000000]      	dq .undefined_object
  2039                                  .undefined_object:
  2040 0000193E 05                      	db T_undefined
  2041 0000193F [610D000000000000]      	dq L_constants + 3425
  2042                                  
  2043                                  free_var_175:	; location of logarithm
  2044 00001947 [4F19000000000000]      	dq .undefined_object
  2045                                  .undefined_object:
  2046 0000194F 05                      	db T_undefined
  2047 00001950 [7B0D000000000000]      	dq L_constants + 3451
  2048                                  
  2049                                  free_var_176:	; location of newline
  2050 00001958 [6019000000000000]      	dq .undefined_object
  2051                                  .undefined_object:
  2052 00001960 05                      	db T_undefined
  2053 00001961 [960D000000000000]      	dq L_constants + 3478
  2054                                  
  2055                                  
  2056                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
  2057                                  global main
  2058                                  section .text
  2059                                  main:
  2060 00000000 C8000000                        enter 0, 0
  2061                                          
  2062                                  	; building closure for null?
  2063 00000004 48BF-                   	mov rdi, free_var_0
  2063 00000006 [A80D000000000000] 
  2064 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
  2064 00000010 [F269010000000000] 
  2065 00000018 E8D6670100              	call bind_primitive
  2066                                  
  2067                                  	; building closure for pair?
  2068 0000001D 48BF-                   	mov rdi, free_var_1
  2068 0000001F [B90D000000000000] 
  2069 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
  2069 00000029 [246A010000000000] 
  2070 00000031 E8BD670100              	call bind_primitive
  2071                                  
  2072                                  	; building closure for void?
  2073 00000036 48BF-                   	mov rdi, free_var_2
  2073 00000038 [CA0D000000000000] 
  2074 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
  2074 00000042 [566A010000000000] 
  2075 0000004A E8A4670100              	call bind_primitive
  2076                                  
  2077                                  	; building closure for char?
  2078 0000004F 48BF-                   	mov rdi, free_var_3
  2078 00000051 [DB0D000000000000] 
  2079 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
  2079 0000005B [886A010000000000] 
  2080 00000063 E88B670100              	call bind_primitive
  2081                                  
  2082                                  	; building closure for string?
  2083 00000068 48BF-                   	mov rdi, free_var_4
  2083 0000006A [EC0D000000000000] 
  2084 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
  2084 00000074 [BA6A010000000000] 
  2085 0000007C E872670100              	call bind_primitive
  2086                                  
  2087                                  	; building closure for interned-symbol?
  2088 00000081 48BF-                   	mov rdi, free_var_5
  2088 00000083 [FD0D000000000000] 
  2089 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
  2089 0000008D [EC6A010000000000] 
  2090 00000095 E859670100              	call bind_primitive
  2091                                  
  2092                                  	; building closure for vector?
  2093 0000009A 48BF-                   	mov rdi, free_var_6
  2093 0000009C [0E0E000000000000] 
  2094 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
  2094 000000A6 [B86B010000000000] 
  2095 000000AE E840670100              	call bind_primitive
  2096                                  
  2097                                  	; building closure for procedure?
  2098 000000B3 48BF-                   	mov rdi, free_var_7
  2098 000000B5 [1F0E000000000000] 
  2099 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
  2099 000000BF [EA6B010000000000] 
  2100 000000C7 E827670100              	call bind_primitive
  2101                                  
  2102                                  	; building closure for real?
  2103 000000CC 48BF-                   	mov rdi, free_var_8
  2103 000000CE [300E000000000000] 
  2104 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
  2104 000000D8 [1C6C010000000000] 
  2105 000000E0 E80E670100              	call bind_primitive
  2106                                  
  2107                                  	; building closure for fraction?
  2108 000000E5 48BF-                   	mov rdi, free_var_9
  2108 000000E7 [410E000000000000] 
  2109 000000EF 48BE-                   	mov rsi, L_code_ptr_is_fraction
  2109 000000F1 [4E6C010000000000] 
  2110 000000F9 E8F5660100              	call bind_primitive
  2111                                  
  2112                                  	; building closure for boolean?
  2113 000000FE 48BF-                   	mov rdi, free_var_10
  2113 00000100 [520E000000000000] 
  2114 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
  2114 0000010A [806C010000000000] 
  2115 00000112 E8DC660100              	call bind_primitive
  2116                                  
  2117                                  	; building closure for number?
  2118 00000117 48BF-                   	mov rdi, free_var_11
  2118 00000119 [630E000000000000] 
  2119 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
  2119 00000123 [B46C010000000000] 
  2120 0000012B E8C3660100              	call bind_primitive
  2121                                  
  2122                                  	; building closure for collection?
  2123 00000130 48BF-                   	mov rdi, free_var_12
  2123 00000132 [740E000000000000] 
  2124 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
  2124 0000013C [E86C010000000000] 
  2125 00000144 E8AA660100              	call bind_primitive
  2126                                  
  2127                                  	; building closure for cons
  2128 00000149 48BF-                   	mov rdi, free_var_13
  2128 0000014B [850E000000000000] 
  2129 00000153 48BE-                   	mov rsi, L_code_ptr_cons
  2129 00000155 [1C6D010000000000] 
  2130 0000015D E891660100              	call bind_primitive
  2131                                  
  2132                                  	; building closure for display-sexpr
  2133 00000162 48BF-                   	mov rdi, free_var_14
  2133 00000164 [960E000000000000] 
  2134 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
  2134 0000016E [4C6D010000000000] 
  2135 00000176 E878660100              	call bind_primitive
  2136                                  
  2137                                  	; building closure for write-char
  2138 0000017B 48BF-                   	mov rdi, free_var_15
  2138 0000017D [A70E000000000000] 
  2139 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
  2139 00000187 [726D010000000000] 
  2140 0000018F E85F660100              	call bind_primitive
  2141                                  
  2142                                  	; building closure for car
  2143 00000194 48BF-                   	mov rdi, free_var_16
  2143 00000196 [B80E000000000000] 
  2144 0000019E 48BE-                   	mov rsi, L_code_ptr_car
  2144 000001A0 [C56D010000000000] 
  2145 000001A8 E846660100              	call bind_primitive
  2146                                  
  2147                                  	; building closure for cdr
  2148 000001AD 48BF-                   	mov rdi, free_var_17
  2148 000001AF [C90E000000000000] 
  2149 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
  2149 000001B9 [E96D010000000000] 
  2150 000001C1 E82D660100              	call bind_primitive
  2151                                  
  2152                                  	; building closure for string-length
  2153 000001C6 48BF-                   	mov rdi, free_var_18
  2153 000001C8 [DA0E000000000000] 
  2154 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
  2154 000001D2 [0D6E010000000000] 
  2155 000001DA E814660100              	call bind_primitive
  2156                                  
  2157                                  	; building closure for vector-length
  2158 000001DF 48BF-                   	mov rdi, free_var_19
  2158 000001E1 [EB0E000000000000] 
  2159 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
  2159 000001EB [366E010000000000] 
  2160 000001F3 E8FB650100              	call bind_primitive
  2161                                  
  2162                                  	; building closure for real->integer
  2163 000001F8 48BF-                   	mov rdi, free_var_20
  2163 000001FA [FC0E000000000000] 
  2164 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
  2164 00000204 [5F6E010000000000] 
  2165 0000020C E8E2650100              	call bind_primitive
  2166                                  
  2167                                  	; building closure for exit
  2168 00000211 48BF-                   	mov rdi, free_var_21
  2168 00000213 [0D0F000000000000] 
  2169 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
  2169 0000021D [8E6E010000000000] 
  2170 00000225 E8C9650100              	call bind_primitive
  2171                                  
  2172                                  	; building closure for integer->real
  2173 0000022A 48BF-                   	mov rdi, free_var_22
  2173 0000022C [1E0F000000000000] 
  2174 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
  2174 00000236 [A76E010000000000] 
  2175 0000023E E8B0650100              	call bind_primitive
  2176                                  
  2177                                  	; building closure for fraction->real
  2178 00000243 48BF-                   	mov rdi, free_var_23
  2178 00000245 [2F0F000000000000] 
  2179 0000024D 48BE-                   	mov rsi, L_code_ptr_fraction_to_real
  2179 0000024F [D56E010000000000] 
  2180 00000257 E897650100              	call bind_primitive
  2181                                  
  2182                                  	; building closure for char->integer
  2183 0000025C 48BF-                   	mov rdi, free_var_24
  2183 0000025E [400F000000000000] 
  2184 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
  2184 00000268 [106F010000000000] 
  2185 00000270 E87E650100              	call bind_primitive
  2186                                  
  2187                                  	; building closure for integer->char
  2188 00000275 48BF-                   	mov rdi, free_var_25
  2188 00000277 [510F000000000000] 
  2189 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
  2189 00000281 [7F6F010000000000] 
  2190 00000289 E865650100              	call bind_primitive
  2191                                  
  2192                                  	; building closure for trng
  2193 0000028E 48BF-                   	mov rdi, free_var_26
  2193 00000290 [620F000000000000] 
  2194 00000298 48BE-                   	mov rsi, L_code_ptr_trng
  2194 0000029A [CA6F010000000000] 
  2195 000002A2 E84C650100              	call bind_primitive
  2196                                  
  2197                                  	; building closure for zero?
  2198 000002A7 48BF-                   	mov rdi, free_var_27
  2198 000002A9 [730F000000000000] 
  2199 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
  2199 000002B3 [E96F010000000000] 
  2200 000002BB E833650100              	call bind_primitive
  2201                                  
  2202                                  	; building closure for integer?
  2203 000002C0 48BF-                   	mov rdi, free_var_28
  2203 000002C2 [840F000000000000] 
  2204 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
  2204 000002CC [4E70010000000000] 
  2205 000002D4 E81A650100              	call bind_primitive
  2206                                  
  2207                                  	; building closure for __bin-apply
  2208 000002D9 48BF-                   	mov rdi, free_var_29
  2208 000002DB [950F000000000000] 
  2209 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
  2209 000002E5 [6369010000000000] 
  2210 000002ED E801650100              	call bind_primitive
  2211                                  
  2212                                  	; building closure for __bin-add-rr
  2213 000002F2 48BF-                   	mov rdi, free_var_30
  2213 000002F4 [A60F000000000000] 
  2214 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
  2214 000002FE [8070010000000000] 
  2215 00000306 E8E8640100              	call bind_primitive
  2216                                  
  2217                                  	; building closure for __bin-sub-rr
  2218 0000030B 48BF-                   	mov rdi, free_var_31
  2218 0000030D [B70F000000000000] 
  2219 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
  2219 00000317 [C070010000000000] 
  2220 0000031F E8CF640100              	call bind_primitive
  2221                                  
  2222                                  	; building closure for __bin-mul-rr
  2223 00000324 48BF-                   	mov rdi, free_var_32
  2223 00000326 [C80F000000000000] 
  2224 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
  2224 00000330 [0071010000000000] 
  2225 00000338 E8B6640100              	call bind_primitive
  2226                                  
  2227                                  	; building closure for __bin-div-rr
  2228 0000033D 48BF-                   	mov rdi, free_var_33
  2228 0000033F [D90F000000000000] 
  2229 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
  2229 00000349 [4071010000000000] 
  2230 00000351 E89D640100              	call bind_primitive
  2231                                  
  2232                                  	; building closure for __bin-add-qq
  2233 00000356 48BF-                   	mov rdi, free_var_34
  2233 00000358 [EA0F000000000000] 
  2234 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
  2234 00000362 [CA71010000000000] 
  2235 0000036A E884640100              	call bind_primitive
  2236                                  
  2237                                  	; building closure for __bin-sub-qq
  2238 0000036F 48BF-                   	mov rdi, free_var_35
  2238 00000371 [FB0F000000000000] 
  2239 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
  2239 0000037B [6A72010000000000] 
  2240 00000383 E86B640100              	call bind_primitive
  2241                                  
  2242                                  	; building closure for __bin-mul-qq
  2243 00000388 48BF-                   	mov rdi, free_var_36
  2243 0000038A [0C10000000000000] 
  2244 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
  2244 00000394 [0F73010000000000] 
  2245 0000039C E852640100              	call bind_primitive
  2246                                  
  2247                                  	; building closure for __bin-div-qq
  2248 000003A1 48BF-                   	mov rdi, free_var_37
  2248 000003A3 [1D10000000000000] 
  2249 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
  2249 000003AD [A973010000000000] 
  2250 000003B5 E839640100              	call bind_primitive
  2251                                  
  2252                                  	; building closure for __bin-add-zz
  2253 000003BA 48BF-                   	mov rdi, free_var_38
  2253 000003BC [2E10000000000000] 
  2254 000003C4 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
  2254 000003C6 [8E71010000000000] 
  2255 000003CE E820640100              	call bind_primitive
  2256                                  
  2257                                  	; building closure for __bin-sub-zz
  2258 000003D3 48BF-                   	mov rdi, free_var_39
  2258 000003D5 [3F10000000000000] 
  2259 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_zz
  2259 000003DF [2E72010000000000] 
  2260 000003E7 E807640100              	call bind_primitive
  2261                                  
  2262                                  	; building closure for __bin-mul-zz
  2263 000003EC 48BF-                   	mov rdi, free_var_40
  2263 000003EE [5010000000000000] 
  2264 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_zz
  2264 000003F8 [CE72010000000000] 
  2265 00000400 E8EE630100              	call bind_primitive
  2266                                  
  2267                                  	; building closure for __bin-div-zz
  2268 00000405 48BF-                   	mov rdi, free_var_41
  2268 00000407 [6110000000000000] 
  2269 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_zz
  2269 00000411 [6373010000000000] 
  2270 00000419 E8D5630100              	call bind_primitive
  2271                                  
  2272                                  	; building closure for error
  2273 0000041E 48BF-                   	mov rdi, free_var_42
  2273 00000420 [7210000000000000] 
  2274 00000428 48BE-                   	mov rsi, L_code_ptr_error
  2274 0000042A [9374010000000000] 
  2275 00000432 E8BC630100              	call bind_primitive
  2276                                  
  2277                                  	; building closure for __bin-less-than-rr
  2278 00000437 48BF-                   	mov rdi, free_var_43
  2278 00000439 [8310000000000000] 
  2279 00000441 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
  2279 00000443 [4675010000000000] 
  2280 0000044B E8A3630100              	call bind_primitive
  2281                                  
  2282                                  	; building closure for __bin-less-than-qq
  2283 00000450 48BF-                   	mov rdi, free_var_44
  2283 00000452 [9410000000000000] 
  2284 0000045A 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
  2284 0000045C [E875010000000000] 
  2285 00000464 E88A630100              	call bind_primitive
  2286                                  
  2287                                  	; building closure for __bin-less-than-zz
  2288 00000469 48BF-                   	mov rdi, free_var_45
  2288 0000046B [A510000000000000] 
  2289 00000473 48BE-                   	mov rsi, L_code_ptr_raw_less_than_zz
  2289 00000475 [9975010000000000] 
  2290 0000047D E871630100              	call bind_primitive
  2291                                  
  2292                                  	; building closure for __bin-equal-rr
  2293 00000482 48BF-                   	mov rdi, free_var_46
  2293 00000484 [B610000000000000] 
  2294 0000048C 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
  2294 0000048E [4776010000000000] 
  2295 00000496 E858630100              	call bind_primitive
  2296                                  
  2297                                  	; building closure for __bin-equal-qq
  2298 0000049B 48BF-                   	mov rdi, free_var_47
  2298 0000049D [C710000000000000] 
  2299 000004A5 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
  2299 000004A7 [E976010000000000] 
  2300 000004AF E83F630100              	call bind_primitive
  2301                                  
  2302                                  	; building closure for __bin-equal-zz
  2303 000004B4 48BF-                   	mov rdi, free_var_48
  2303 000004B6 [D810000000000000] 
  2304 000004BE 48BE-                   	mov rsi, L_code_ptr_raw_equal_zz
  2304 000004C0 [9A76010000000000] 
  2305 000004C8 E826630100              	call bind_primitive
  2306                                  
  2307                                  	; building closure for quotient
  2308 000004CD 48BF-                   	mov rdi, free_var_49
  2308 000004CF [E910000000000000] 
  2309 000004D7 48BE-                   	mov rsi, L_code_ptr_quotient
  2309 000004D9 [4877010000000000] 
  2310 000004E1 E80D630100              	call bind_primitive
  2311                                  
  2312                                  	; building closure for remainder
  2313 000004E6 48BF-                   	mov rdi, free_var_50
  2313 000004E8 [FA10000000000000] 
  2314 000004F0 48BE-                   	mov rsi, L_code_ptr_remainder
  2314 000004F2 [9477010000000000] 
  2315 000004FA E8F4620100              	call bind_primitive
  2316                                  
  2317                                  	; building closure for set-car!
  2318 000004FF 48BF-                   	mov rdi, free_var_51
  2318 00000501 [0B11000000000000] 
  2319 00000509 48BE-                   	mov rsi, L_code_ptr_set_car
  2319 0000050B [E077010000000000] 
  2320 00000513 E8DB620100              	call bind_primitive
  2321                                  
  2322                                  	; building closure for set-cdr!
  2323 00000518 48BF-                   	mov rdi, free_var_52
  2323 0000051A [1C11000000000000] 
  2324 00000522 48BE-                   	mov rsi, L_code_ptr_set_cdr
  2324 00000524 [1278010000000000] 
  2325 0000052C E8C2620100              	call bind_primitive
  2326                                  
  2327                                  	; building closure for string-ref
  2328 00000531 48BF-                   	mov rdi, free_var_53
  2328 00000533 [2D11000000000000] 
  2329 0000053B 48BE-                   	mov rsi, L_code_ptr_string_ref
  2329 0000053D [4478010000000000] 
  2330 00000545 E8A9620100              	call bind_primitive
  2331                                  
  2332                                  	; building closure for vector-ref
  2333 0000054A 48BF-                   	mov rdi, free_var_54
  2333 0000054C [3E11000000000000] 
  2334 00000554 48BE-                   	mov rsi, L_code_ptr_vector_ref
  2334 00000556 [A078010000000000] 
  2335 0000055E E890620100              	call bind_primitive
  2336                                  
  2337                                  	; building closure for vector-set!
  2338 00000563 48BF-                   	mov rdi, free_var_55
  2338 00000565 [4F11000000000000] 
  2339 0000056D 48BE-                   	mov rsi, L_code_ptr_vector_set
  2339 0000056F [ED78010000000000] 
  2340 00000577 E877620100              	call bind_primitive
  2341                                  
  2342                                  	; building closure for string-set!
  2343 0000057C 48BF-                   	mov rdi, free_var_56
  2343 0000057E [6011000000000000] 
  2344 00000586 48BE-                   	mov rsi, L_code_ptr_string_set
  2344 00000588 [4879010000000000] 
  2345 00000590 E85E620100              	call bind_primitive
  2346                                  
  2347                                  	; building closure for make-vector
  2348 00000595 48BF-                   	mov rdi, free_var_57
  2348 00000597 [7111000000000000] 
  2349 0000059F 48BE-                   	mov rsi, L_code_ptr_make_vector
  2349 000005A1 [AE79010000000000] 
  2350 000005A9 E845620100              	call bind_primitive
  2351                                  
  2352                                  	; building closure for make-string
  2353 000005AE 48BF-                   	mov rdi, free_var_58
  2353 000005B0 [8211000000000000] 
  2354 000005B8 48BE-                   	mov rsi, L_code_ptr_make_string
  2354 000005BA [097A010000000000] 
  2355 000005C2 E82C620100              	call bind_primitive
  2356                                  
  2357                                  	; building closure for numerator
  2358 000005C7 48BF-                   	mov rdi, free_var_59
  2358 000005C9 [9311000000000000] 
  2359 000005D1 48BE-                   	mov rsi, L_code_ptr_numerator
  2359 000005D3 [6C7A010000000000] 
  2360 000005DB E813620100              	call bind_primitive
  2361                                  
  2362                                  	; building closure for denominator
  2363 000005E0 48BF-                   	mov rdi, free_var_60
  2363 000005E2 [A411000000000000] 
  2364 000005EA 48BE-                   	mov rsi, L_code_ptr_denominator
  2364 000005EC [957A010000000000] 
  2365 000005F4 E8FA610100              	call bind_primitive
  2366                                  
  2367                                  	; building closure for eq?
  2368 000005F9 48BF-                   	mov rdi, free_var_61
  2368 000005FB [B511000000000000] 
  2369 00000603 48BE-                   	mov rsi, L_code_ptr_is_eq
  2369 00000605 [BE7A010000000000] 
  2370 0000060D E8E1610100              	call bind_primitive
  2371                                  
  2372                                  	; building closure for __integer-to-fraction
  2373 00000612 48BF-                   	mov rdi, free_var_62
  2373 00000614 [C611000000000000] 
  2374 0000061C 48BE-                   	mov rsi, L_code_ptr_integer_to_fraction
  2374 0000061E [416F010000000000] 
  2375 00000626 E8C8610100              	call bind_primitive
  2376                                  
  2377                                  	; building closure for logand
  2378 0000062B 48BF-                   	mov rdi, free_var_63
  2378 0000062D [D711000000000000] 
  2379 00000635 48BE-                   	mov rsi, L_code_ptr_logand
  2379 00000637 [8268010000000000] 
  2380 0000063F E8AF610100              	call bind_primitive
  2381                                  
  2382                                  	; building closure for logor
  2383 00000644 48BF-                   	mov rdi, free_var_64
  2383 00000646 [E811000000000000] 
  2384 0000064E 48BE-                   	mov rsi, L_code_ptr_logor
  2384 00000650 [BE68010000000000] 
  2385 00000658 E896610100              	call bind_primitive
  2386                                  
  2387                                  	; building closure for logxor
  2388 0000065D 48BF-                   	mov rdi, free_var_65
  2388 0000065F [F911000000000000] 
  2389 00000667 48BE-                   	mov rsi, L_code_ptr_logxor
  2389 00000669 [FA68010000000000] 
  2390 00000671 E87D610100              	call bind_primitive
  2391                                  
  2392                                  	; building closure for lognot
  2393 00000676 48BF-                   	mov rdi, free_var_66
  2393 00000678 [0A12000000000000] 
  2394 00000680 48BE-                   	mov rsi, L_code_ptr_lognot
  2394 00000682 [3669010000000000] 
  2395 0000068A E864610100              	call bind_primitive
  2396                                  
  2397                                  	; building closure for ash
  2398 0000068F 48BF-                   	mov rdi, free_var_67
  2398 00000691 [1B12000000000000] 
  2399 00000699 48BE-                   	mov rsi, L_code_ptr_ash
  2399 0000069B [2168010000000000] 
  2400 000006A3 E84B610100              	call bind_primitive
  2401                                  
  2402                                  	; building closure for symbol?
  2403 000006A8 48BF-                   	mov rdi, free_var_68
  2403 000006AA [2C12000000000000] 
  2404 000006B2 48BE-                   	mov rsi, L_code_ptr_is_symbol
  2404 000006B4 [EC6A010000000000] 
  2405 000006BC E832610100              	call bind_primitive
  2406                                  
  2407                                  	; building closure for uninterned-symbol?
  2408 000006C1 48BF-                   	mov rdi, free_var_69
  2408 000006C3 [3D12000000000000] 
  2409 000006CB 48BE-                   	mov rsi, L_code_ptr_is_uninterned_symbol
  2409 000006CD [1F6B010000000000] 
  2410 000006D5 E819610100              	call bind_primitive
  2411                                  
  2412                                  	; building closure for gensym?
  2413 000006DA 48BF-                   	mov rdi, free_var_70
  2413 000006DC [4E12000000000000] 
  2414 000006E4 48BE-                   	mov rsi, L_code_ptr_is_uninterned_symbol
  2414 000006E6 [1F6B010000000000] 
  2415 000006EE E800610100              	call bind_primitive
  2416                                  
  2417                                  	; building closure for interned-symbol?
  2418 000006F3 48BF-                   	mov rdi, free_var_5
  2418 000006F5 [FD0D000000000000] 
  2419 000006FD 48BE-                   	mov rsi, L_code_ptr_is_interned_symbol
  2419 000006FF [526B010000000000] 
  2420 00000707 E8E7600100              	call bind_primitive
  2421                                  
  2422                                  	; building closure for gensym
  2423 0000070C 48BF-                   	mov rdi, free_var_71
  2423 0000070E [5F12000000000000] 
  2424 00000716 48BE-                   	mov rsi, L_code_ptr_gensym
  2424 00000718 [846B010000000000] 
  2425 00000720 E8CE600100              	call bind_primitive
  2426                                  
  2427                                  	; building closure for frame
  2428 00000725 48BF-                   	mov rdi, free_var_72
  2428 00000727 [7012000000000000] 
  2429 0000072F 48BE-                   	mov rsi, L_code_ptr_frame
  2429 00000731 [3A61010000000000] 
  2430 00000739 E8B5600100              	call bind_primitive
  2431                                  
  2432                                  	; building closure for break
  2433 0000073E 48BF-                   	mov rdi, free_var_73
  2433 00000740 [8112000000000000] 
  2434 00000748 48BE-                   	mov rsi, L_code_ptr_break
  2434 0000074A [2061010000000000] 
  2435 00000752 E89C600100              	call bind_primitive
  2436                                  
  2437 00000757 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2438 0000075C E8AE590100              	call malloc
  2439 00000761 50                      	push rax
  2440 00000762 BF00000000              	mov rdi, 8 * 0	; new rib
  2441 00000767 E8A3590100              	call malloc
  2442 0000076C 50                      	push rax
  2443 0000076D BF08000000              	mov rdi, 8 * 1	; extended env
  2444 00000772 E898590100              	call malloc
  2445 00000777 488B7D10                	mov rdi, ENV
  2446 0000077B BE00000000              	mov rsi, 0
  2447 00000780 BA01000000              	mov rdx, 1
  2448                                  .L_lambda_simple_env_loop_02f4:	; ext_env[i + 1] <-- env[i]
  2449 00000785 4883FE00                	cmp rsi, 0
  2450 00000789 7410                    	je .L_lambda_simple_env_end_02f4
  2451 0000078B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2452 0000078F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2453 00000793 48FFC6                  	inc rsi
  2454 00000796 48FFC2                  	inc rdx
  2455 00000799 EBEA                    	jmp .L_lambda_simple_env_loop_02f4
  2456                                  .L_lambda_simple_env_end_02f4:
  2457 0000079B 5B                      	pop rbx
  2458 0000079C BE00000000              	mov rsi, 0
  2459                                  .L_lambda_simple_params_loop_02f4:	; copy params
  2460 000007A1 4883FE00                	cmp rsi, 0
  2461 000007A5 740E                    	je .L_lambda_simple_params_end_02f4
  2462 000007A7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2463 000007AC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2464 000007B0 48FFC6                  	inc rsi
  2465 000007B3 EBEC                    	jmp .L_lambda_simple_params_loop_02f4
  2466                                  .L_lambda_simple_params_end_02f4:
  2467 000007B5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2468 000007B8 4889C3                  	mov rbx, rax
  2469 000007BB 58                      	pop rax
  2470 000007BC C60004                  	mov byte [rax], T_closure
  2471 000007BF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2472 000007C3 48C74009[D0070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02f4
  2473 000007CB E99B000000              	jmp .L_lambda_simple_end_02f4
  2474                                  .L_lambda_simple_code_02f4:	; lambda-simple body
  2475 000007D0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2476 000007D6 740B                    	je .L_lambda_simple_arity_check_ok_02f4
  2477 000007D8 FF742410                	push qword [rsp + 8 * 2]
  2478 000007DC 6A01                    	push 1
  2479 000007DE E9E5580100              	jmp L_error_incorrect_arity_simple
  2480                                  .L_lambda_simple_arity_check_ok_02f4:
  2481 000007E3 C8000000                	enter 0, 0
  2482                                  	; preparing a tail-call
  2483                                  	; preparing a non tail-call
  2484 000007E7 488B4520                	mov rax, PARAM(0)	; param x
  2485 000007EB 50                      	push rax
  2486 000007EC 6A01                    	push 1	; arg count
  2487 000007EE 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  2488 000007F6 803805                  	cmp byte [rax], T_undefined
  2489 000007F9 0F84E3570100            	je L_error_fvar_undefined
  2490 000007FF 803804                  	cmp byte [rax], T_closure
  2491 00000802 0F855E580100            	jne L_error_non_closure
  2492 00000808 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2493 0000080B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2494 0000080E 50                      	push rax
  2495 0000080F 6A01                    	push 1	; arg count
  2496 00000811 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  2497 00000819 803805                  	cmp byte [rax], T_undefined
  2498 0000081C 0F84C0570100            	je L_error_fvar_undefined
  2499 00000822 803804                  	cmp byte [rax], T_closure
  2500 00000825 0F853B580100            	jne L_error_non_closure
  2501 0000082B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2502                                  
  2503                                  	; recycling the current frame
  2504 0000082E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2505 00000831 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2506 00000834 B905000000              	mov rcx, 1 + 4
  2507 00000839 488B5D18                	mov rbx, COUNT
  2508 0000083D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2509 00000842 488D55F8                	lea rdx, [rbp - 8 * 1]
  2510                                  .L_tc_recycle_frame_loop_03d8:
  2511 00000846 4883F900                	cmp rcx, 0
  2512 0000084A 7413                    	je .L_tc_recycle_frame_done_03d8
  2513 0000084C 488B32                  	mov rsi, qword [rdx]
  2514 0000084F 488933                  	mov qword [rbx], rsi
  2515 00000852 48FFC9                  	dec rcx
  2516 00000855 4883EB08                	sub rbx, 8 * 1
  2517 00000859 4883EA08                	sub rdx, 8 * 1
  2518 0000085D EBE7                    	jmp .L_tc_recycle_frame_loop_03d8
  2519                                  .L_tc_recycle_frame_done_03d8:
  2520 0000085F 488D6308                	lea rsp, [rbx + 8 * 1]
  2521 00000863 5D                      	pop rbp	; the proc will restore it!
  2522 00000864 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2523 00000867 C9                      	leave
  2524 00000868 C21800                  	ret AND_KILL_FRAME(1)
  2525                                  .L_lambda_simple_end_02f4:	; new closure is in rax
  2526 0000086B 48890425[92120000]      	mov qword [free_var_74], rax
  2527 00000873 48B8-                   	mov rax, sob_void
  2527 00000875 [0000000000000000] 
  2528                                  
  2529 0000087D 4889C7                  	mov rdi, rax
  2530 00000880 E89C590100              	call print_sexpr_if_not_void
  2531                                  
  2532 00000885 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2533 0000088A E880580100              	call malloc
  2534 0000088F 50                      	push rax
  2535 00000890 BF00000000              	mov rdi, 8 * 0	; new rib
  2536 00000895 E875580100              	call malloc
  2537 0000089A 50                      	push rax
  2538 0000089B BF08000000              	mov rdi, 8 * 1	; extended env
  2539 000008A0 E86A580100              	call malloc
  2540 000008A5 488B7D10                	mov rdi, ENV
  2541 000008A9 BE00000000              	mov rsi, 0
  2542 000008AE BA01000000              	mov rdx, 1
  2543                                  .L_lambda_simple_env_loop_02f5:	; ext_env[i + 1] <-- env[i]
  2544 000008B3 4883FE00                	cmp rsi, 0
  2545 000008B7 7410                    	je .L_lambda_simple_env_end_02f5
  2546 000008B9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2547 000008BD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2548 000008C1 48FFC6                  	inc rsi
  2549 000008C4 48FFC2                  	inc rdx
  2550 000008C7 EBEA                    	jmp .L_lambda_simple_env_loop_02f5
  2551                                  .L_lambda_simple_env_end_02f5:
  2552 000008C9 5B                      	pop rbx
  2553 000008CA BE00000000              	mov rsi, 0
  2554                                  .L_lambda_simple_params_loop_02f5:	; copy params
  2555 000008CF 4883FE00                	cmp rsi, 0
  2556 000008D3 740E                    	je .L_lambda_simple_params_end_02f5
  2557 000008D5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2558 000008DA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2559 000008DE 48FFC6                  	inc rsi
  2560 000008E1 EBEC                    	jmp .L_lambda_simple_params_loop_02f5
  2561                                  .L_lambda_simple_params_end_02f5:
  2562 000008E3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2563 000008E6 4889C3                  	mov rbx, rax
  2564 000008E9 58                      	pop rax
  2565 000008EA C60004                  	mov byte [rax], T_closure
  2566 000008ED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2567 000008F1 48C74009[FE080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02f5
  2568 000008F9 E99B000000              	jmp .L_lambda_simple_end_02f5
  2569                                  .L_lambda_simple_code_02f5:	; lambda-simple body
  2570 000008FE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2571 00000904 740B                    	je .L_lambda_simple_arity_check_ok_02f5
  2572 00000906 FF742410                	push qword [rsp + 8 * 2]
  2573 0000090A 6A01                    	push 1
  2574 0000090C E9B7570100              	jmp L_error_incorrect_arity_simple
  2575                                  .L_lambda_simple_arity_check_ok_02f5:
  2576 00000911 C8000000                	enter 0, 0
  2577                                  	; preparing a tail-call
  2578                                  	; preparing a non tail-call
  2579 00000915 488B4520                	mov rax, PARAM(0)	; param x
  2580 00000919 50                      	push rax
  2581 0000091A 6A01                    	push 1	; arg count
  2582 0000091C 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2583 00000924 803805                  	cmp byte [rax], T_undefined
  2584 00000927 0F84B5560100            	je L_error_fvar_undefined
  2585 0000092D 803804                  	cmp byte [rax], T_closure
  2586 00000930 0F8530570100            	jne L_error_non_closure
  2587 00000936 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2588 00000939 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2589 0000093C 50                      	push rax
  2590 0000093D 6A01                    	push 1	; arg count
  2591 0000093F 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  2592 00000947 803805                  	cmp byte [rax], T_undefined
  2593 0000094A 0F8492560100            	je L_error_fvar_undefined
  2594 00000950 803804                  	cmp byte [rax], T_closure
  2595 00000953 0F850D570100            	jne L_error_non_closure
  2596 00000959 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2597                                  
  2598                                  	; recycling the current frame
  2599 0000095C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2600 0000095F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2601 00000962 B905000000              	mov rcx, 1 + 4
  2602 00000967 488B5D18                	mov rbx, COUNT
  2603 0000096B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2604 00000970 488D55F8                	lea rdx, [rbp - 8 * 1]
  2605                                  .L_tc_recycle_frame_loop_03d9:
  2606 00000974 4883F900                	cmp rcx, 0
  2607 00000978 7413                    	je .L_tc_recycle_frame_done_03d9
  2608 0000097A 488B32                  	mov rsi, qword [rdx]
  2609 0000097D 488933                  	mov qword [rbx], rsi
  2610 00000980 48FFC9                  	dec rcx
  2611 00000983 4883EB08                	sub rbx, 8 * 1
  2612 00000987 4883EA08                	sub rdx, 8 * 1
  2613 0000098B EBE7                    	jmp .L_tc_recycle_frame_loop_03d9
  2614                                  .L_tc_recycle_frame_done_03d9:
  2615 0000098D 488D6308                	lea rsp, [rbx + 8 * 1]
  2616 00000991 5D                      	pop rbp	; the proc will restore it!
  2617 00000992 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2618 00000995 C9                      	leave
  2619 00000996 C21800                  	ret AND_KILL_FRAME(1)
  2620                                  .L_lambda_simple_end_02f5:	; new closure is in rax
  2621 00000999 48890425[A3120000]      	mov qword [free_var_75], rax
  2622 000009A1 48B8-                   	mov rax, sob_void
  2622 000009A3 [0000000000000000] 
  2623                                  
  2624 000009AB 4889C7                  	mov rdi, rax
  2625 000009AE E86E580100              	call print_sexpr_if_not_void
  2626                                  
  2627 000009B3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2628 000009B8 E852570100              	call malloc
  2629 000009BD 50                      	push rax
  2630 000009BE BF00000000              	mov rdi, 8 * 0	; new rib
  2631 000009C3 E847570100              	call malloc
  2632 000009C8 50                      	push rax
  2633 000009C9 BF08000000              	mov rdi, 8 * 1	; extended env
  2634 000009CE E83C570100              	call malloc
  2635 000009D3 488B7D10                	mov rdi, ENV
  2636 000009D7 BE00000000              	mov rsi, 0
  2637 000009DC BA01000000              	mov rdx, 1
  2638                                  .L_lambda_simple_env_loop_02f6:	; ext_env[i + 1] <-- env[i]
  2639 000009E1 4883FE00                	cmp rsi, 0
  2640 000009E5 7410                    	je .L_lambda_simple_env_end_02f6
  2641 000009E7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2642 000009EB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2643 000009EF 48FFC6                  	inc rsi
  2644 000009F2 48FFC2                  	inc rdx
  2645 000009F5 EBEA                    	jmp .L_lambda_simple_env_loop_02f6
  2646                                  .L_lambda_simple_env_end_02f6:
  2647 000009F7 5B                      	pop rbx
  2648 000009F8 BE00000000              	mov rsi, 0
  2649                                  .L_lambda_simple_params_loop_02f6:	; copy params
  2650 000009FD 4883FE00                	cmp rsi, 0
  2651 00000A01 740E                    	je .L_lambda_simple_params_end_02f6
  2652 00000A03 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2653 00000A08 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2654 00000A0C 48FFC6                  	inc rsi
  2655 00000A0F EBEC                    	jmp .L_lambda_simple_params_loop_02f6
  2656                                  .L_lambda_simple_params_end_02f6:
  2657 00000A11 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2658 00000A14 4889C3                  	mov rbx, rax
  2659 00000A17 58                      	pop rax
  2660 00000A18 C60004                  	mov byte [rax], T_closure
  2661 00000A1B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2662 00000A1F 48C74009[2C0A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02f6
  2663 00000A27 E99B000000              	jmp .L_lambda_simple_end_02f6
  2664                                  .L_lambda_simple_code_02f6:	; lambda-simple body
  2665 00000A2C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2666 00000A32 740B                    	je .L_lambda_simple_arity_check_ok_02f6
  2667 00000A34 FF742410                	push qword [rsp + 8 * 2]
  2668 00000A38 6A01                    	push 1
  2669 00000A3A E989560100              	jmp L_error_incorrect_arity_simple
  2670                                  .L_lambda_simple_arity_check_ok_02f6:
  2671 00000A3F C8000000                	enter 0, 0
  2672                                  	; preparing a tail-call
  2673                                  	; preparing a non tail-call
  2674 00000A43 488B4520                	mov rax, PARAM(0)	; param x
  2675 00000A47 50                      	push rax
  2676 00000A48 6A01                    	push 1	; arg count
  2677 00000A4A 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  2678 00000A52 803805                  	cmp byte [rax], T_undefined
  2679 00000A55 0F8487550100            	je L_error_fvar_undefined
  2680 00000A5B 803804                  	cmp byte [rax], T_closure
  2681 00000A5E 0F8502560100            	jne L_error_non_closure
  2682 00000A64 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2683 00000A67 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2684 00000A6A 50                      	push rax
  2685 00000A6B 6A01                    	push 1	; arg count
  2686 00000A6D 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2687 00000A75 803805                  	cmp byte [rax], T_undefined
  2688 00000A78 0F8464550100            	je L_error_fvar_undefined
  2689 00000A7E 803804                  	cmp byte [rax], T_closure
  2690 00000A81 0F85DF550100            	jne L_error_non_closure
  2691 00000A87 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2692                                  
  2693                                  	; recycling the current frame
  2694 00000A8A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2695 00000A8D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2696 00000A90 B905000000              	mov rcx, 1 + 4
  2697 00000A95 488B5D18                	mov rbx, COUNT
  2698 00000A99 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2699 00000A9E 488D55F8                	lea rdx, [rbp - 8 * 1]
  2700                                  .L_tc_recycle_frame_loop_03da:
  2701 00000AA2 4883F900                	cmp rcx, 0
  2702 00000AA6 7413                    	je .L_tc_recycle_frame_done_03da
  2703 00000AA8 488B32                  	mov rsi, qword [rdx]
  2704 00000AAB 488933                  	mov qword [rbx], rsi
  2705 00000AAE 48FFC9                  	dec rcx
  2706 00000AB1 4883EB08                	sub rbx, 8 * 1
  2707 00000AB5 4883EA08                	sub rdx, 8 * 1
  2708 00000AB9 EBE7                    	jmp .L_tc_recycle_frame_loop_03da
  2709                                  .L_tc_recycle_frame_done_03da:
  2710 00000ABB 488D6308                	lea rsp, [rbx + 8 * 1]
  2711 00000ABF 5D                      	pop rbp	; the proc will restore it!
  2712 00000AC0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2713 00000AC3 C9                      	leave
  2714 00000AC4 C21800                  	ret AND_KILL_FRAME(1)
  2715                                  .L_lambda_simple_end_02f6:	; new closure is in rax
  2716 00000AC7 48890425[B4120000]      	mov qword [free_var_76], rax
  2717 00000ACF 48B8-                   	mov rax, sob_void
  2717 00000AD1 [0000000000000000] 
  2718                                  
  2719 00000AD9 4889C7                  	mov rdi, rax
  2720 00000ADC E840570100              	call print_sexpr_if_not_void
  2721                                  
  2722 00000AE1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2723 00000AE6 E824560100              	call malloc
  2724 00000AEB 50                      	push rax
  2725 00000AEC BF00000000              	mov rdi, 8 * 0	; new rib
  2726 00000AF1 E819560100              	call malloc
  2727 00000AF6 50                      	push rax
  2728 00000AF7 BF08000000              	mov rdi, 8 * 1	; extended env
  2729 00000AFC E80E560100              	call malloc
  2730 00000B01 488B7D10                	mov rdi, ENV
  2731 00000B05 BE00000000              	mov rsi, 0
  2732 00000B0A BA01000000              	mov rdx, 1
  2733                                  .L_lambda_simple_env_loop_02f7:	; ext_env[i + 1] <-- env[i]
  2734 00000B0F 4883FE00                	cmp rsi, 0
  2735 00000B13 7410                    	je .L_lambda_simple_env_end_02f7
  2736 00000B15 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2737 00000B19 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2738 00000B1D 48FFC6                  	inc rsi
  2739 00000B20 48FFC2                  	inc rdx
  2740 00000B23 EBEA                    	jmp .L_lambda_simple_env_loop_02f7
  2741                                  .L_lambda_simple_env_end_02f7:
  2742 00000B25 5B                      	pop rbx
  2743 00000B26 BE00000000              	mov rsi, 0
  2744                                  .L_lambda_simple_params_loop_02f7:	; copy params
  2745 00000B2B 4883FE00                	cmp rsi, 0
  2746 00000B2F 740E                    	je .L_lambda_simple_params_end_02f7
  2747 00000B31 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2748 00000B36 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2749 00000B3A 48FFC6                  	inc rsi
  2750 00000B3D EBEC                    	jmp .L_lambda_simple_params_loop_02f7
  2751                                  .L_lambda_simple_params_end_02f7:
  2752 00000B3F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2753 00000B42 4889C3                  	mov rbx, rax
  2754 00000B45 58                      	pop rax
  2755 00000B46 C60004                  	mov byte [rax], T_closure
  2756 00000B49 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2757 00000B4D 48C74009[5A0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02f7
  2758 00000B55 E99B000000              	jmp .L_lambda_simple_end_02f7
  2759                                  .L_lambda_simple_code_02f7:	; lambda-simple body
  2760 00000B5A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2761 00000B60 740B                    	je .L_lambda_simple_arity_check_ok_02f7
  2762 00000B62 FF742410                	push qword [rsp + 8 * 2]
  2763 00000B66 6A01                    	push 1
  2764 00000B68 E95B550100              	jmp L_error_incorrect_arity_simple
  2765                                  .L_lambda_simple_arity_check_ok_02f7:
  2766 00000B6D C8000000                	enter 0, 0
  2767                                  	; preparing a tail-call
  2768                                  	; preparing a non tail-call
  2769 00000B71 488B4520                	mov rax, PARAM(0)	; param x
  2770 00000B75 50                      	push rax
  2771 00000B76 6A01                    	push 1	; arg count
  2772 00000B78 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2773 00000B80 803805                  	cmp byte [rax], T_undefined
  2774 00000B83 0F8459540100            	je L_error_fvar_undefined
  2775 00000B89 803804                  	cmp byte [rax], T_closure
  2776 00000B8C 0F85D4540100            	jne L_error_non_closure
  2777 00000B92 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2778 00000B95 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2779 00000B98 50                      	push rax
  2780 00000B99 6A01                    	push 1	; arg count
  2781 00000B9B 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2782 00000BA3 803805                  	cmp byte [rax], T_undefined
  2783 00000BA6 0F8436540100            	je L_error_fvar_undefined
  2784 00000BAC 803804                  	cmp byte [rax], T_closure
  2785 00000BAF 0F85B1540100            	jne L_error_non_closure
  2786 00000BB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2787                                  
  2788                                  	; recycling the current frame
  2789 00000BB8 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2790 00000BBB FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2791 00000BBE B905000000              	mov rcx, 1 + 4
  2792 00000BC3 488B5D18                	mov rbx, COUNT
  2793 00000BC7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2794 00000BCC 488D55F8                	lea rdx, [rbp - 8 * 1]
  2795                                  .L_tc_recycle_frame_loop_03db:
  2796 00000BD0 4883F900                	cmp rcx, 0
  2797 00000BD4 7413                    	je .L_tc_recycle_frame_done_03db
  2798 00000BD6 488B32                  	mov rsi, qword [rdx]
  2799 00000BD9 488933                  	mov qword [rbx], rsi
  2800 00000BDC 48FFC9                  	dec rcx
  2801 00000BDF 4883EB08                	sub rbx, 8 * 1
  2802 00000BE3 4883EA08                	sub rdx, 8 * 1
  2803 00000BE7 EBE7                    	jmp .L_tc_recycle_frame_loop_03db
  2804                                  .L_tc_recycle_frame_done_03db:
  2805 00000BE9 488D6308                	lea rsp, [rbx + 8 * 1]
  2806 00000BED 5D                      	pop rbp	; the proc will restore it!
  2807 00000BEE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2808 00000BF1 C9                      	leave
  2809 00000BF2 C21800                  	ret AND_KILL_FRAME(1)
  2810                                  .L_lambda_simple_end_02f7:	; new closure is in rax
  2811 00000BF5 48890425[C5120000]      	mov qword [free_var_77], rax
  2812 00000BFD 48B8-                   	mov rax, sob_void
  2812 00000BFF [0000000000000000] 
  2813                                  
  2814 00000C07 4889C7                  	mov rdi, rax
  2815 00000C0A E812560100              	call print_sexpr_if_not_void
  2816                                  
  2817 00000C0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2818 00000C14 E8F6540100              	call malloc
  2819 00000C19 50                      	push rax
  2820 00000C1A BF00000000              	mov rdi, 8 * 0	; new rib
  2821 00000C1F E8EB540100              	call malloc
  2822 00000C24 50                      	push rax
  2823 00000C25 BF08000000              	mov rdi, 8 * 1	; extended env
  2824 00000C2A E8E0540100              	call malloc
  2825 00000C2F 488B7D10                	mov rdi, ENV
  2826 00000C33 BE00000000              	mov rsi, 0
  2827 00000C38 BA01000000              	mov rdx, 1
  2828                                  .L_lambda_simple_env_loop_02f8:	; ext_env[i + 1] <-- env[i]
  2829 00000C3D 4883FE00                	cmp rsi, 0
  2830 00000C41 7410                    	je .L_lambda_simple_env_end_02f8
  2831 00000C43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2832 00000C47 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2833 00000C4B 48FFC6                  	inc rsi
  2834 00000C4E 48FFC2                  	inc rdx
  2835 00000C51 EBEA                    	jmp .L_lambda_simple_env_loop_02f8
  2836                                  .L_lambda_simple_env_end_02f8:
  2837 00000C53 5B                      	pop rbx
  2838 00000C54 BE00000000              	mov rsi, 0
  2839                                  .L_lambda_simple_params_loop_02f8:	; copy params
  2840 00000C59 4883FE00                	cmp rsi, 0
  2841 00000C5D 740E                    	je .L_lambda_simple_params_end_02f8
  2842 00000C5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2843 00000C64 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2844 00000C68 48FFC6                  	inc rsi
  2845 00000C6B EBEC                    	jmp .L_lambda_simple_params_loop_02f8
  2846                                  .L_lambda_simple_params_end_02f8:
  2847 00000C6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2848 00000C70 4889C3                  	mov rbx, rax
  2849 00000C73 58                      	pop rax
  2850 00000C74 C60004                  	mov byte [rax], T_closure
  2851 00000C77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2852 00000C7B 48C74009[880C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02f8
  2853 00000C83 E99B000000              	jmp .L_lambda_simple_end_02f8
  2854                                  .L_lambda_simple_code_02f8:	; lambda-simple body
  2855 00000C88 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2856 00000C8E 740B                    	je .L_lambda_simple_arity_check_ok_02f8
  2857 00000C90 FF742410                	push qword [rsp + 8 * 2]
  2858 00000C94 6A01                    	push 1
  2859 00000C96 E92D540100              	jmp L_error_incorrect_arity_simple
  2860                                  .L_lambda_simple_arity_check_ok_02f8:
  2861 00000C9B C8000000                	enter 0, 0
  2862                                  	; preparing a tail-call
  2863                                  	; preparing a non tail-call
  2864 00000C9F 488B4520                	mov rax, PARAM(0)	; param x
  2865 00000CA3 50                      	push rax
  2866 00000CA4 6A01                    	push 1	; arg count
  2867 00000CA6 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  2868 00000CAE 803805                  	cmp byte [rax], T_undefined
  2869 00000CB1 0F842B530100            	je L_error_fvar_undefined
  2870 00000CB7 803804                  	cmp byte [rax], T_closure
  2871 00000CBA 0F85A6530100            	jne L_error_non_closure
  2872 00000CC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2873 00000CC3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2874 00000CC6 50                      	push rax
  2875 00000CC7 6A01                    	push 1	; arg count
  2876 00000CC9 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  2877 00000CD1 803805                  	cmp byte [rax], T_undefined
  2878 00000CD4 0F8408530100            	je L_error_fvar_undefined
  2879 00000CDA 803804                  	cmp byte [rax], T_closure
  2880 00000CDD 0F8583530100            	jne L_error_non_closure
  2881 00000CE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2882                                  
  2883                                  	; recycling the current frame
  2884 00000CE6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2885 00000CE9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2886 00000CEC B905000000              	mov rcx, 1 + 4
  2887 00000CF1 488B5D18                	mov rbx, COUNT
  2888 00000CF5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2889 00000CFA 488D55F8                	lea rdx, [rbp - 8 * 1]
  2890                                  .L_tc_recycle_frame_loop_03dc:
  2891 00000CFE 4883F900                	cmp rcx, 0
  2892 00000D02 7413                    	je .L_tc_recycle_frame_done_03dc
  2893 00000D04 488B32                  	mov rsi, qword [rdx]
  2894 00000D07 488933                  	mov qword [rbx], rsi
  2895 00000D0A 48FFC9                  	dec rcx
  2896 00000D0D 4883EB08                	sub rbx, 8 * 1
  2897 00000D11 4883EA08                	sub rdx, 8 * 1
  2898 00000D15 EBE7                    	jmp .L_tc_recycle_frame_loop_03dc
  2899                                  .L_tc_recycle_frame_done_03dc:
  2900 00000D17 488D6308                	lea rsp, [rbx + 8 * 1]
  2901 00000D1B 5D                      	pop rbp	; the proc will restore it!
  2902 00000D1C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2903 00000D1F C9                      	leave
  2904 00000D20 C21800                  	ret AND_KILL_FRAME(1)
  2905                                  .L_lambda_simple_end_02f8:	; new closure is in rax
  2906 00000D23 48890425[D6120000]      	mov qword [free_var_78], rax
  2907 00000D2B 48B8-                   	mov rax, sob_void
  2907 00000D2D [0000000000000000] 
  2908                                  
  2909 00000D35 4889C7                  	mov rdi, rax
  2910 00000D38 E8E4540100              	call print_sexpr_if_not_void
  2911                                  
  2912 00000D3D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2913 00000D42 E8C8530100              	call malloc
  2914 00000D47 50                      	push rax
  2915 00000D48 BF00000000              	mov rdi, 8 * 0	; new rib
  2916 00000D4D E8BD530100              	call malloc
  2917 00000D52 50                      	push rax
  2918 00000D53 BF08000000              	mov rdi, 8 * 1	; extended env
  2919 00000D58 E8B2530100              	call malloc
  2920 00000D5D 488B7D10                	mov rdi, ENV
  2921 00000D61 BE00000000              	mov rsi, 0
  2922 00000D66 BA01000000              	mov rdx, 1
  2923                                  .L_lambda_simple_env_loop_02f9:	; ext_env[i + 1] <-- env[i]
  2924 00000D6B 4883FE00                	cmp rsi, 0
  2925 00000D6F 7410                    	je .L_lambda_simple_env_end_02f9
  2926 00000D71 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2927 00000D75 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2928 00000D79 48FFC6                  	inc rsi
  2929 00000D7C 48FFC2                  	inc rdx
  2930 00000D7F EBEA                    	jmp .L_lambda_simple_env_loop_02f9
  2931                                  .L_lambda_simple_env_end_02f9:
  2932 00000D81 5B                      	pop rbx
  2933 00000D82 BE00000000              	mov rsi, 0
  2934                                  .L_lambda_simple_params_loop_02f9:	; copy params
  2935 00000D87 4883FE00                	cmp rsi, 0
  2936 00000D8B 740E                    	je .L_lambda_simple_params_end_02f9
  2937 00000D8D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2938 00000D92 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2939 00000D96 48FFC6                  	inc rsi
  2940 00000D99 EBEC                    	jmp .L_lambda_simple_params_loop_02f9
  2941                                  .L_lambda_simple_params_end_02f9:
  2942 00000D9B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2943 00000D9E 4889C3                  	mov rbx, rax
  2944 00000DA1 58                      	pop rax
  2945 00000DA2 C60004                  	mov byte [rax], T_closure
  2946 00000DA5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2947 00000DA9 48C74009[B60D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02f9
  2948 00000DB1 E99B000000              	jmp .L_lambda_simple_end_02f9
  2949                                  .L_lambda_simple_code_02f9:	; lambda-simple body
  2950 00000DB6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2951 00000DBC 740B                    	je .L_lambda_simple_arity_check_ok_02f9
  2952 00000DBE FF742410                	push qword [rsp + 8 * 2]
  2953 00000DC2 6A01                    	push 1
  2954 00000DC4 E9FF520100              	jmp L_error_incorrect_arity_simple
  2955                                  .L_lambda_simple_arity_check_ok_02f9:
  2956 00000DC9 C8000000                	enter 0, 0
  2957                                  	; preparing a tail-call
  2958                                  	; preparing a non tail-call
  2959 00000DCD 488B4520                	mov rax, PARAM(0)	; param x
  2960 00000DD1 50                      	push rax
  2961 00000DD2 6A01                    	push 1	; arg count
  2962 00000DD4 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  2963 00000DDC 803805                  	cmp byte [rax], T_undefined
  2964 00000DDF 0F84FD510100            	je L_error_fvar_undefined
  2965 00000DE5 803804                  	cmp byte [rax], T_closure
  2966 00000DE8 0F8578520100            	jne L_error_non_closure
  2967 00000DEE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2968 00000DF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2969 00000DF4 50                      	push rax
  2970 00000DF5 6A01                    	push 1	; arg count
  2971 00000DF7 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  2972 00000DFF 803805                  	cmp byte [rax], T_undefined
  2973 00000E02 0F84DA510100            	je L_error_fvar_undefined
  2974 00000E08 803804                  	cmp byte [rax], T_closure
  2975 00000E0B 0F8555520100            	jne L_error_non_closure
  2976 00000E11 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2977                                  
  2978                                  	; recycling the current frame
  2979 00000E14 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2980 00000E17 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2981 00000E1A B905000000              	mov rcx, 1 + 4
  2982 00000E1F 488B5D18                	mov rbx, COUNT
  2983 00000E23 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2984 00000E28 488D55F8                	lea rdx, [rbp - 8 * 1]
  2985                                  .L_tc_recycle_frame_loop_03dd:
  2986 00000E2C 4883F900                	cmp rcx, 0
  2987 00000E30 7413                    	je .L_tc_recycle_frame_done_03dd
  2988 00000E32 488B32                  	mov rsi, qword [rdx]
  2989 00000E35 488933                  	mov qword [rbx], rsi
  2990 00000E38 48FFC9                  	dec rcx
  2991 00000E3B 4883EB08                	sub rbx, 8 * 1
  2992 00000E3F 4883EA08                	sub rdx, 8 * 1
  2993 00000E43 EBE7                    	jmp .L_tc_recycle_frame_loop_03dd
  2994                                  .L_tc_recycle_frame_done_03dd:
  2995 00000E45 488D6308                	lea rsp, [rbx + 8 * 1]
  2996 00000E49 5D                      	pop rbp	; the proc will restore it!
  2997 00000E4A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2998 00000E4D C9                      	leave
  2999 00000E4E C21800                  	ret AND_KILL_FRAME(1)
  3000                                  .L_lambda_simple_end_02f9:	; new closure is in rax
  3001 00000E51 48890425[E7120000]      	mov qword [free_var_79], rax
  3002 00000E59 48B8-                   	mov rax, sob_void
  3002 00000E5B [0000000000000000] 
  3003                                  
  3004 00000E63 4889C7                  	mov rdi, rax
  3005 00000E66 E8B6530100              	call print_sexpr_if_not_void
  3006                                  
  3007 00000E6B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3008 00000E70 E89A520100              	call malloc
  3009 00000E75 50                      	push rax
  3010 00000E76 BF00000000              	mov rdi, 8 * 0	; new rib
  3011 00000E7B E88F520100              	call malloc
  3012 00000E80 50                      	push rax
  3013 00000E81 BF08000000              	mov rdi, 8 * 1	; extended env
  3014 00000E86 E884520100              	call malloc
  3015 00000E8B 488B7D10                	mov rdi, ENV
  3016 00000E8F BE00000000              	mov rsi, 0
  3017 00000E94 BA01000000              	mov rdx, 1
  3018                                  .L_lambda_simple_env_loop_02fa:	; ext_env[i + 1] <-- env[i]
  3019 00000E99 4883FE00                	cmp rsi, 0
  3020 00000E9D 7410                    	je .L_lambda_simple_env_end_02fa
  3021 00000E9F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3022 00000EA3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3023 00000EA7 48FFC6                  	inc rsi
  3024 00000EAA 48FFC2                  	inc rdx
  3025 00000EAD EBEA                    	jmp .L_lambda_simple_env_loop_02fa
  3026                                  .L_lambda_simple_env_end_02fa:
  3027 00000EAF 5B                      	pop rbx
  3028 00000EB0 BE00000000              	mov rsi, 0
  3029                                  .L_lambda_simple_params_loop_02fa:	; copy params
  3030 00000EB5 4883FE00                	cmp rsi, 0
  3031 00000EB9 740E                    	je .L_lambda_simple_params_end_02fa
  3032 00000EBB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3033 00000EC0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3034 00000EC4 48FFC6                  	inc rsi
  3035 00000EC7 EBEC                    	jmp .L_lambda_simple_params_loop_02fa
  3036                                  .L_lambda_simple_params_end_02fa:
  3037 00000EC9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3038 00000ECC 4889C3                  	mov rbx, rax
  3039 00000ECF 58                      	pop rax
  3040 00000ED0 C60004                  	mov byte [rax], T_closure
  3041 00000ED3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3042 00000ED7 48C74009[E40E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02fa
  3043 00000EDF E99B000000              	jmp .L_lambda_simple_end_02fa
  3044                                  .L_lambda_simple_code_02fa:	; lambda-simple body
  3045 00000EE4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3046 00000EEA 740B                    	je .L_lambda_simple_arity_check_ok_02fa
  3047 00000EEC FF742410                	push qword [rsp + 8 * 2]
  3048 00000EF0 6A01                    	push 1
  3049 00000EF2 E9D1510100              	jmp L_error_incorrect_arity_simple
  3050                                  .L_lambda_simple_arity_check_ok_02fa:
  3051 00000EF7 C8000000                	enter 0, 0
  3052                                  	; preparing a tail-call
  3053                                  	; preparing a non tail-call
  3054 00000EFB 488B4520                	mov rax, PARAM(0)	; param x
  3055 00000EFF 50                      	push rax
  3056 00000F00 6A01                    	push 1	; arg count
  3057 00000F02 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  3058 00000F0A 803805                  	cmp byte [rax], T_undefined
  3059 00000F0D 0F84CF500100            	je L_error_fvar_undefined
  3060 00000F13 803804                  	cmp byte [rax], T_closure
  3061 00000F16 0F854A510100            	jne L_error_non_closure
  3062 00000F1C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3063 00000F1F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3064 00000F22 50                      	push rax
  3065 00000F23 6A01                    	push 1	; arg count
  3066 00000F25 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  3067 00000F2D 803805                  	cmp byte [rax], T_undefined
  3068 00000F30 0F84AC500100            	je L_error_fvar_undefined
  3069 00000F36 803804                  	cmp byte [rax], T_closure
  3070 00000F39 0F8527510100            	jne L_error_non_closure
  3071 00000F3F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3072                                  
  3073                                  	; recycling the current frame
  3074 00000F42 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3075 00000F45 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3076 00000F48 B905000000              	mov rcx, 1 + 4
  3077 00000F4D 488B5D18                	mov rbx, COUNT
  3078 00000F51 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3079 00000F56 488D55F8                	lea rdx, [rbp - 8 * 1]
  3080                                  .L_tc_recycle_frame_loop_03de:
  3081 00000F5A 4883F900                	cmp rcx, 0
  3082 00000F5E 7413                    	je .L_tc_recycle_frame_done_03de
  3083 00000F60 488B32                  	mov rsi, qword [rdx]
  3084 00000F63 488933                  	mov qword [rbx], rsi
  3085 00000F66 48FFC9                  	dec rcx
  3086 00000F69 4883EB08                	sub rbx, 8 * 1
  3087 00000F6D 4883EA08                	sub rdx, 8 * 1
  3088 00000F71 EBE7                    	jmp .L_tc_recycle_frame_loop_03de
  3089                                  .L_tc_recycle_frame_done_03de:
  3090 00000F73 488D6308                	lea rsp, [rbx + 8 * 1]
  3091 00000F77 5D                      	pop rbp	; the proc will restore it!
  3092 00000F78 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3093 00000F7B C9                      	leave
  3094 00000F7C C21800                  	ret AND_KILL_FRAME(1)
  3095                                  .L_lambda_simple_end_02fa:	; new closure is in rax
  3096 00000F7F 48890425[F8120000]      	mov qword [free_var_80], rax
  3097 00000F87 48B8-                   	mov rax, sob_void
  3097 00000F89 [0000000000000000] 
  3098                                  
  3099 00000F91 4889C7                  	mov rdi, rax
  3100 00000F94 E888520100              	call print_sexpr_if_not_void
  3101                                  
  3102 00000F99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3103 00000F9E E86C510100              	call malloc
  3104 00000FA3 50                      	push rax
  3105 00000FA4 BF00000000              	mov rdi, 8 * 0	; new rib
  3106 00000FA9 E861510100              	call malloc
  3107 00000FAE 50                      	push rax
  3108 00000FAF BF08000000              	mov rdi, 8 * 1	; extended env
  3109 00000FB4 E856510100              	call malloc
  3110 00000FB9 488B7D10                	mov rdi, ENV
  3111 00000FBD BE00000000              	mov rsi, 0
  3112 00000FC2 BA01000000              	mov rdx, 1
  3113                                  .L_lambda_simple_env_loop_02fb:	; ext_env[i + 1] <-- env[i]
  3114 00000FC7 4883FE00                	cmp rsi, 0
  3115 00000FCB 7410                    	je .L_lambda_simple_env_end_02fb
  3116 00000FCD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3117 00000FD1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3118 00000FD5 48FFC6                  	inc rsi
  3119 00000FD8 48FFC2                  	inc rdx
  3120 00000FDB EBEA                    	jmp .L_lambda_simple_env_loop_02fb
  3121                                  .L_lambda_simple_env_end_02fb:
  3122 00000FDD 5B                      	pop rbx
  3123 00000FDE BE00000000              	mov rsi, 0
  3124                                  .L_lambda_simple_params_loop_02fb:	; copy params
  3125 00000FE3 4883FE00                	cmp rsi, 0
  3126 00000FE7 740E                    	je .L_lambda_simple_params_end_02fb
  3127 00000FE9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3128 00000FEE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3129 00000FF2 48FFC6                  	inc rsi
  3130 00000FF5 EBEC                    	jmp .L_lambda_simple_params_loop_02fb
  3131                                  .L_lambda_simple_params_end_02fb:
  3132 00000FF7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3133 00000FFA 4889C3                  	mov rbx, rax
  3134 00000FFD 58                      	pop rax
  3135 00000FFE C60004                  	mov byte [rax], T_closure
  3136 00001001 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3137 00001005 48C74009[12100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02fb
  3138 0000100D E99B000000              	jmp .L_lambda_simple_end_02fb
  3139                                  .L_lambda_simple_code_02fb:	; lambda-simple body
  3140 00001012 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3141 00001018 740B                    	je .L_lambda_simple_arity_check_ok_02fb
  3142 0000101A FF742410                	push qword [rsp + 8 * 2]
  3143 0000101E 6A01                    	push 1
  3144 00001020 E9A3500100              	jmp L_error_incorrect_arity_simple
  3145                                  .L_lambda_simple_arity_check_ok_02fb:
  3146 00001025 C8000000                	enter 0, 0
  3147                                  	; preparing a tail-call
  3148                                  	; preparing a non tail-call
  3149 00001029 488B4520                	mov rax, PARAM(0)	; param x
  3150 0000102D 50                      	push rax
  3151 0000102E 6A01                    	push 1	; arg count
  3152 00001030 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  3153 00001038 803805                  	cmp byte [rax], T_undefined
  3154 0000103B 0F84A14F0100            	je L_error_fvar_undefined
  3155 00001041 803804                  	cmp byte [rax], T_closure
  3156 00001044 0F851C500100            	jne L_error_non_closure
  3157 0000104A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3158 0000104D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3159 00001050 50                      	push rax
  3160 00001051 6A01                    	push 1	; arg count
  3161 00001053 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  3162 0000105B 803805                  	cmp byte [rax], T_undefined
  3163 0000105E 0F847E4F0100            	je L_error_fvar_undefined
  3164 00001064 803804                  	cmp byte [rax], T_closure
  3165 00001067 0F85F94F0100            	jne L_error_non_closure
  3166 0000106D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3167                                  
  3168                                  	; recycling the current frame
  3169 00001070 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3170 00001073 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3171 00001076 B905000000              	mov rcx, 1 + 4
  3172 0000107B 488B5D18                	mov rbx, COUNT
  3173 0000107F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3174 00001084 488D55F8                	lea rdx, [rbp - 8 * 1]
  3175                                  .L_tc_recycle_frame_loop_03df:
  3176 00001088 4883F900                	cmp rcx, 0
  3177 0000108C 7413                    	je .L_tc_recycle_frame_done_03df
  3178 0000108E 488B32                  	mov rsi, qword [rdx]
  3179 00001091 488933                  	mov qword [rbx], rsi
  3180 00001094 48FFC9                  	dec rcx
  3181 00001097 4883EB08                	sub rbx, 8 * 1
  3182 0000109B 4883EA08                	sub rdx, 8 * 1
  3183 0000109F EBE7                    	jmp .L_tc_recycle_frame_loop_03df
  3184                                  .L_tc_recycle_frame_done_03df:
  3185 000010A1 488D6308                	lea rsp, [rbx + 8 * 1]
  3186 000010A5 5D                      	pop rbp	; the proc will restore it!
  3187 000010A6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3188 000010A9 C9                      	leave
  3189 000010AA C21800                  	ret AND_KILL_FRAME(1)
  3190                                  .L_lambda_simple_end_02fb:	; new closure is in rax
  3191 000010AD 48890425[09130000]      	mov qword [free_var_81], rax
  3192 000010B5 48B8-                   	mov rax, sob_void
  3192 000010B7 [0000000000000000] 
  3193                                  
  3194 000010BF 4889C7                  	mov rdi, rax
  3195 000010C2 E85A510100              	call print_sexpr_if_not_void
  3196                                  
  3197 000010C7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3198 000010CC E83E500100              	call malloc
  3199 000010D1 50                      	push rax
  3200 000010D2 BF00000000              	mov rdi, 8 * 0	; new rib
  3201 000010D7 E833500100              	call malloc
  3202 000010DC 50                      	push rax
  3203 000010DD BF08000000              	mov rdi, 8 * 1	; extended env
  3204 000010E2 E828500100              	call malloc
  3205 000010E7 488B7D10                	mov rdi, ENV
  3206 000010EB BE00000000              	mov rsi, 0
  3207 000010F0 BA01000000              	mov rdx, 1
  3208                                  .L_lambda_simple_env_loop_02fc:	; ext_env[i + 1] <-- env[i]
  3209 000010F5 4883FE00                	cmp rsi, 0
  3210 000010F9 7410                    	je .L_lambda_simple_env_end_02fc
  3211 000010FB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3212 000010FF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3213 00001103 48FFC6                  	inc rsi
  3214 00001106 48FFC2                  	inc rdx
  3215 00001109 EBEA                    	jmp .L_lambda_simple_env_loop_02fc
  3216                                  .L_lambda_simple_env_end_02fc:
  3217 0000110B 5B                      	pop rbx
  3218 0000110C BE00000000              	mov rsi, 0
  3219                                  .L_lambda_simple_params_loop_02fc:	; copy params
  3220 00001111 4883FE00                	cmp rsi, 0
  3221 00001115 740E                    	je .L_lambda_simple_params_end_02fc
  3222 00001117 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3223 0000111C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3224 00001120 48FFC6                  	inc rsi
  3225 00001123 EBEC                    	jmp .L_lambda_simple_params_loop_02fc
  3226                                  .L_lambda_simple_params_end_02fc:
  3227 00001125 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3228 00001128 4889C3                  	mov rbx, rax
  3229 0000112B 58                      	pop rax
  3230 0000112C C60004                  	mov byte [rax], T_closure
  3231 0000112F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3232 00001133 48C74009[40110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02fc
  3233 0000113B E99B000000              	jmp .L_lambda_simple_end_02fc
  3234                                  .L_lambda_simple_code_02fc:	; lambda-simple body
  3235 00001140 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3236 00001146 740B                    	je .L_lambda_simple_arity_check_ok_02fc
  3237 00001148 FF742410                	push qword [rsp + 8 * 2]
  3238 0000114C 6A01                    	push 1
  3239 0000114E E9754F0100              	jmp L_error_incorrect_arity_simple
  3240                                  .L_lambda_simple_arity_check_ok_02fc:
  3241 00001153 C8000000                	enter 0, 0
  3242                                  	; preparing a tail-call
  3243                                  	; preparing a non tail-call
  3244 00001157 488B4520                	mov rax, PARAM(0)	; param x
  3245 0000115B 50                      	push rax
  3246 0000115C 6A01                    	push 1	; arg count
  3247 0000115E 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  3248 00001166 803805                  	cmp byte [rax], T_undefined
  3249 00001169 0F84734E0100            	je L_error_fvar_undefined
  3250 0000116F 803804                  	cmp byte [rax], T_closure
  3251 00001172 0F85EE4E0100            	jne L_error_non_closure
  3252 00001178 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3253 0000117B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3254 0000117E 50                      	push rax
  3255 0000117F 6A01                    	push 1	; arg count
  3256 00001181 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3257 00001189 803805                  	cmp byte [rax], T_undefined
  3258 0000118C 0F84504E0100            	je L_error_fvar_undefined
  3259 00001192 803804                  	cmp byte [rax], T_closure
  3260 00001195 0F85CB4E0100            	jne L_error_non_closure
  3261 0000119B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3262                                  
  3263                                  	; recycling the current frame
  3264 0000119E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3265 000011A1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3266 000011A4 B905000000              	mov rcx, 1 + 4
  3267 000011A9 488B5D18                	mov rbx, COUNT
  3268 000011AD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3269 000011B2 488D55F8                	lea rdx, [rbp - 8 * 1]
  3270                                  .L_tc_recycle_frame_loop_03e0:
  3271 000011B6 4883F900                	cmp rcx, 0
  3272 000011BA 7413                    	je .L_tc_recycle_frame_done_03e0
  3273 000011BC 488B32                  	mov rsi, qword [rdx]
  3274 000011BF 488933                  	mov qword [rbx], rsi
  3275 000011C2 48FFC9                  	dec rcx
  3276 000011C5 4883EB08                	sub rbx, 8 * 1
  3277 000011C9 4883EA08                	sub rdx, 8 * 1
  3278 000011CD EBE7                    	jmp .L_tc_recycle_frame_loop_03e0
  3279                                  .L_tc_recycle_frame_done_03e0:
  3280 000011CF 488D6308                	lea rsp, [rbx + 8 * 1]
  3281 000011D3 5D                      	pop rbp	; the proc will restore it!
  3282 000011D4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3283 000011D7 C9                      	leave
  3284 000011D8 C21800                  	ret AND_KILL_FRAME(1)
  3285                                  .L_lambda_simple_end_02fc:	; new closure is in rax
  3286 000011DB 48890425[1A130000]      	mov qword [free_var_82], rax
  3287 000011E3 48B8-                   	mov rax, sob_void
  3287 000011E5 [0000000000000000] 
  3288                                  
  3289 000011ED 4889C7                  	mov rdi, rax
  3290 000011F0 E82C500100              	call print_sexpr_if_not_void
  3291                                  
  3292 000011F5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3293 000011FA E8104F0100              	call malloc
  3294 000011FF 50                      	push rax
  3295 00001200 BF00000000              	mov rdi, 8 * 0	; new rib
  3296 00001205 E8054F0100              	call malloc
  3297 0000120A 50                      	push rax
  3298 0000120B BF08000000              	mov rdi, 8 * 1	; extended env
  3299 00001210 E8FA4E0100              	call malloc
  3300 00001215 488B7D10                	mov rdi, ENV
  3301 00001219 BE00000000              	mov rsi, 0
  3302 0000121E BA01000000              	mov rdx, 1
  3303                                  .L_lambda_simple_env_loop_02fd:	; ext_env[i + 1] <-- env[i]
  3304 00001223 4883FE00                	cmp rsi, 0
  3305 00001227 7410                    	je .L_lambda_simple_env_end_02fd
  3306 00001229 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3307 0000122D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3308 00001231 48FFC6                  	inc rsi
  3309 00001234 48FFC2                  	inc rdx
  3310 00001237 EBEA                    	jmp .L_lambda_simple_env_loop_02fd
  3311                                  .L_lambda_simple_env_end_02fd:
  3312 00001239 5B                      	pop rbx
  3313 0000123A BE00000000              	mov rsi, 0
  3314                                  .L_lambda_simple_params_loop_02fd:	; copy params
  3315 0000123F 4883FE00                	cmp rsi, 0
  3316 00001243 740E                    	je .L_lambda_simple_params_end_02fd
  3317 00001245 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3318 0000124A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3319 0000124E 48FFC6                  	inc rsi
  3320 00001251 EBEC                    	jmp .L_lambda_simple_params_loop_02fd
  3321                                  .L_lambda_simple_params_end_02fd:
  3322 00001253 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3323 00001256 4889C3                  	mov rbx, rax
  3324 00001259 58                      	pop rax
  3325 0000125A C60004                  	mov byte [rax], T_closure
  3326 0000125D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3327 00001261 48C74009[6E120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02fd
  3328 00001269 E99B000000              	jmp .L_lambda_simple_end_02fd
  3329                                  .L_lambda_simple_code_02fd:	; lambda-simple body
  3330 0000126E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3331 00001274 740B                    	je .L_lambda_simple_arity_check_ok_02fd
  3332 00001276 FF742410                	push qword [rsp + 8 * 2]
  3333 0000127A 6A01                    	push 1
  3334 0000127C E9474E0100              	jmp L_error_incorrect_arity_simple
  3335                                  .L_lambda_simple_arity_check_ok_02fd:
  3336 00001281 C8000000                	enter 0, 0
  3337                                  	; preparing a tail-call
  3338                                  	; preparing a non tail-call
  3339 00001285 488B4520                	mov rax, PARAM(0)	; param x
  3340 00001289 50                      	push rax
  3341 0000128A 6A01                    	push 1	; arg count
  3342 0000128C 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  3343 00001294 803805                  	cmp byte [rax], T_undefined
  3344 00001297 0F84454D0100            	je L_error_fvar_undefined
  3345 0000129D 803804                  	cmp byte [rax], T_closure
  3346 000012A0 0F85C04D0100            	jne L_error_non_closure
  3347 000012A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3348 000012A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3349 000012AC 50                      	push rax
  3350 000012AD 6A01                    	push 1	; arg count
  3351 000012AF 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3352 000012B7 803805                  	cmp byte [rax], T_undefined
  3353 000012BA 0F84224D0100            	je L_error_fvar_undefined
  3354 000012C0 803804                  	cmp byte [rax], T_closure
  3355 000012C3 0F859D4D0100            	jne L_error_non_closure
  3356 000012C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3357                                  
  3358                                  	; recycling the current frame
  3359 000012CC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3360 000012CF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3361 000012D2 B905000000              	mov rcx, 1 + 4
  3362 000012D7 488B5D18                	mov rbx, COUNT
  3363 000012DB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3364 000012E0 488D55F8                	lea rdx, [rbp - 8 * 1]
  3365                                  .L_tc_recycle_frame_loop_03e1:
  3366 000012E4 4883F900                	cmp rcx, 0
  3367 000012E8 7413                    	je .L_tc_recycle_frame_done_03e1
  3368 000012EA 488B32                  	mov rsi, qword [rdx]
  3369 000012ED 488933                  	mov qword [rbx], rsi
  3370 000012F0 48FFC9                  	dec rcx
  3371 000012F3 4883EB08                	sub rbx, 8 * 1
  3372 000012F7 4883EA08                	sub rdx, 8 * 1
  3373 000012FB EBE7                    	jmp .L_tc_recycle_frame_loop_03e1
  3374                                  .L_tc_recycle_frame_done_03e1:
  3375 000012FD 488D6308                	lea rsp, [rbx + 8 * 1]
  3376 00001301 5D                      	pop rbp	; the proc will restore it!
  3377 00001302 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3378 00001305 C9                      	leave
  3379 00001306 C21800                  	ret AND_KILL_FRAME(1)
  3380                                  .L_lambda_simple_end_02fd:	; new closure is in rax
  3381 00001309 48890425[2B130000]      	mov qword [free_var_83], rax
  3382 00001311 48B8-                   	mov rax, sob_void
  3382 00001313 [0000000000000000] 
  3383                                  
  3384 0000131B 4889C7                  	mov rdi, rax
  3385 0000131E E8FE4E0100              	call print_sexpr_if_not_void
  3386                                  
  3387 00001323 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3388 00001328 E8E24D0100              	call malloc
  3389 0000132D 50                      	push rax
  3390 0000132E BF00000000              	mov rdi, 8 * 0	; new rib
  3391 00001333 E8D74D0100              	call malloc
  3392 00001338 50                      	push rax
  3393 00001339 BF08000000              	mov rdi, 8 * 1	; extended env
  3394 0000133E E8CC4D0100              	call malloc
  3395 00001343 488B7D10                	mov rdi, ENV
  3396 00001347 BE00000000              	mov rsi, 0
  3397 0000134C BA01000000              	mov rdx, 1
  3398                                  .L_lambda_simple_env_loop_02fe:	; ext_env[i + 1] <-- env[i]
  3399 00001351 4883FE00                	cmp rsi, 0
  3400 00001355 7410                    	je .L_lambda_simple_env_end_02fe
  3401 00001357 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3402 0000135B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3403 0000135F 48FFC6                  	inc rsi
  3404 00001362 48FFC2                  	inc rdx
  3405 00001365 EBEA                    	jmp .L_lambda_simple_env_loop_02fe
  3406                                  .L_lambda_simple_env_end_02fe:
  3407 00001367 5B                      	pop rbx
  3408 00001368 BE00000000              	mov rsi, 0
  3409                                  .L_lambda_simple_params_loop_02fe:	; copy params
  3410 0000136D 4883FE00                	cmp rsi, 0
  3411 00001371 740E                    	je .L_lambda_simple_params_end_02fe
  3412 00001373 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3413 00001378 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3414 0000137C 48FFC6                  	inc rsi
  3415 0000137F EBEC                    	jmp .L_lambda_simple_params_loop_02fe
  3416                                  .L_lambda_simple_params_end_02fe:
  3417 00001381 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3418 00001384 4889C3                  	mov rbx, rax
  3419 00001387 58                      	pop rax
  3420 00001388 C60004                  	mov byte [rax], T_closure
  3421 0000138B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3422 0000138F 48C74009[9C130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02fe
  3423 00001397 E99B000000              	jmp .L_lambda_simple_end_02fe
  3424                                  .L_lambda_simple_code_02fe:	; lambda-simple body
  3425 0000139C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3426 000013A2 740B                    	je .L_lambda_simple_arity_check_ok_02fe
  3427 000013A4 FF742410                	push qword [rsp + 8 * 2]
  3428 000013A8 6A01                    	push 1
  3429 000013AA E9194D0100              	jmp L_error_incorrect_arity_simple
  3430                                  .L_lambda_simple_arity_check_ok_02fe:
  3431 000013AF C8000000                	enter 0, 0
  3432                                  	; preparing a tail-call
  3433                                  	; preparing a non tail-call
  3434 000013B3 488B4520                	mov rax, PARAM(0)	; param x
  3435 000013B7 50                      	push rax
  3436 000013B8 6A01                    	push 1	; arg count
  3437 000013BA 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  3438 000013C2 803805                  	cmp byte [rax], T_undefined
  3439 000013C5 0F84174C0100            	je L_error_fvar_undefined
  3440 000013CB 803804                  	cmp byte [rax], T_closure
  3441 000013CE 0F85924C0100            	jne L_error_non_closure
  3442 000013D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3443 000013D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3444 000013DA 50                      	push rax
  3445 000013DB 6A01                    	push 1	; arg count
  3446 000013DD 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3447 000013E5 803805                  	cmp byte [rax], T_undefined
  3448 000013E8 0F84F44B0100            	je L_error_fvar_undefined
  3449 000013EE 803804                  	cmp byte [rax], T_closure
  3450 000013F1 0F856F4C0100            	jne L_error_non_closure
  3451 000013F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3452                                  
  3453                                  	; recycling the current frame
  3454 000013FA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3455 000013FD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3456 00001400 B905000000              	mov rcx, 1 + 4
  3457 00001405 488B5D18                	mov rbx, COUNT
  3458 00001409 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3459 0000140E 488D55F8                	lea rdx, [rbp - 8 * 1]
  3460                                  .L_tc_recycle_frame_loop_03e2:
  3461 00001412 4883F900                	cmp rcx, 0
  3462 00001416 7413                    	je .L_tc_recycle_frame_done_03e2
  3463 00001418 488B32                  	mov rsi, qword [rdx]
  3464 0000141B 488933                  	mov qword [rbx], rsi
  3465 0000141E 48FFC9                  	dec rcx
  3466 00001421 4883EB08                	sub rbx, 8 * 1
  3467 00001425 4883EA08                	sub rdx, 8 * 1
  3468 00001429 EBE7                    	jmp .L_tc_recycle_frame_loop_03e2
  3469                                  .L_tc_recycle_frame_done_03e2:
  3470 0000142B 488D6308                	lea rsp, [rbx + 8 * 1]
  3471 0000142F 5D                      	pop rbp	; the proc will restore it!
  3472 00001430 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3473 00001433 C9                      	leave
  3474 00001434 C21800                  	ret AND_KILL_FRAME(1)
  3475                                  .L_lambda_simple_end_02fe:	; new closure is in rax
  3476 00001437 48890425[3C130000]      	mov qword [free_var_84], rax
  3477 0000143F 48B8-                   	mov rax, sob_void
  3477 00001441 [0000000000000000] 
  3478                                  
  3479 00001449 4889C7                  	mov rdi, rax
  3480 0000144C E8D04D0100              	call print_sexpr_if_not_void
  3481                                  
  3482 00001451 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3483 00001456 E8B44C0100              	call malloc
  3484 0000145B 50                      	push rax
  3485 0000145C BF00000000              	mov rdi, 8 * 0	; new rib
  3486 00001461 E8A94C0100              	call malloc
  3487 00001466 50                      	push rax
  3488 00001467 BF08000000              	mov rdi, 8 * 1	; extended env
  3489 0000146C E89E4C0100              	call malloc
  3490 00001471 488B7D10                	mov rdi, ENV
  3491 00001475 BE00000000              	mov rsi, 0
  3492 0000147A BA01000000              	mov rdx, 1
  3493                                  .L_lambda_simple_env_loop_02ff:	; ext_env[i + 1] <-- env[i]
  3494 0000147F 4883FE00                	cmp rsi, 0
  3495 00001483 7410                    	je .L_lambda_simple_env_end_02ff
  3496 00001485 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3497 00001489 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3498 0000148D 48FFC6                  	inc rsi
  3499 00001490 48FFC2                  	inc rdx
  3500 00001493 EBEA                    	jmp .L_lambda_simple_env_loop_02ff
  3501                                  .L_lambda_simple_env_end_02ff:
  3502 00001495 5B                      	pop rbx
  3503 00001496 BE00000000              	mov rsi, 0
  3504                                  .L_lambda_simple_params_loop_02ff:	; copy params
  3505 0000149B 4883FE00                	cmp rsi, 0
  3506 0000149F 740E                    	je .L_lambda_simple_params_end_02ff
  3507 000014A1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3508 000014A6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3509 000014AA 48FFC6                  	inc rsi
  3510 000014AD EBEC                    	jmp .L_lambda_simple_params_loop_02ff
  3511                                  .L_lambda_simple_params_end_02ff:
  3512 000014AF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3513 000014B2 4889C3                  	mov rbx, rax
  3514 000014B5 58                      	pop rax
  3515 000014B6 C60004                  	mov byte [rax], T_closure
  3516 000014B9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3517 000014BD 48C74009[CA140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_02ff
  3518 000014C5 E99B000000              	jmp .L_lambda_simple_end_02ff
  3519                                  .L_lambda_simple_code_02ff:	; lambda-simple body
  3520 000014CA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3521 000014D0 740B                    	je .L_lambda_simple_arity_check_ok_02ff
  3522 000014D2 FF742410                	push qword [rsp + 8 * 2]
  3523 000014D6 6A01                    	push 1
  3524 000014D8 E9EB4B0100              	jmp L_error_incorrect_arity_simple
  3525                                  .L_lambda_simple_arity_check_ok_02ff:
  3526 000014DD C8000000                	enter 0, 0
  3527                                  	; preparing a tail-call
  3528                                  	; preparing a non tail-call
  3529 000014E1 488B4520                	mov rax, PARAM(0)	; param x
  3530 000014E5 50                      	push rax
  3531 000014E6 6A01                    	push 1	; arg count
  3532 000014E8 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  3533 000014F0 803805                  	cmp byte [rax], T_undefined
  3534 000014F3 0F84E94A0100            	je L_error_fvar_undefined
  3535 000014F9 803804                  	cmp byte [rax], T_closure
  3536 000014FC 0F85644B0100            	jne L_error_non_closure
  3537 00001502 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3538 00001505 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3539 00001508 50                      	push rax
  3540 00001509 6A01                    	push 1	; arg count
  3541 0000150B 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3542 00001513 803805                  	cmp byte [rax], T_undefined
  3543 00001516 0F84C64A0100            	je L_error_fvar_undefined
  3544 0000151C 803804                  	cmp byte [rax], T_closure
  3545 0000151F 0F85414B0100            	jne L_error_non_closure
  3546 00001525 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3547                                  
  3548                                  	; recycling the current frame
  3549 00001528 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3550 0000152B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3551 0000152E B905000000              	mov rcx, 1 + 4
  3552 00001533 488B5D18                	mov rbx, COUNT
  3553 00001537 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3554 0000153C 488D55F8                	lea rdx, [rbp - 8 * 1]
  3555                                  .L_tc_recycle_frame_loop_03e3:
  3556 00001540 4883F900                	cmp rcx, 0
  3557 00001544 7413                    	je .L_tc_recycle_frame_done_03e3
  3558 00001546 488B32                  	mov rsi, qword [rdx]
  3559 00001549 488933                  	mov qword [rbx], rsi
  3560 0000154C 48FFC9                  	dec rcx
  3561 0000154F 4883EB08                	sub rbx, 8 * 1
  3562 00001553 4883EA08                	sub rdx, 8 * 1
  3563 00001557 EBE7                    	jmp .L_tc_recycle_frame_loop_03e3
  3564                                  .L_tc_recycle_frame_done_03e3:
  3565 00001559 488D6308                	lea rsp, [rbx + 8 * 1]
  3566 0000155D 5D                      	pop rbp	; the proc will restore it!
  3567 0000155E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3568 00001561 C9                      	leave
  3569 00001562 C21800                  	ret AND_KILL_FRAME(1)
  3570                                  .L_lambda_simple_end_02ff:	; new closure is in rax
  3571 00001565 48890425[4D130000]      	mov qword [free_var_85], rax
  3572 0000156D 48B8-                   	mov rax, sob_void
  3572 0000156F [0000000000000000] 
  3573                                  
  3574 00001577 4889C7                  	mov rdi, rax
  3575 0000157A E8A24C0100              	call print_sexpr_if_not_void
  3576                                  
  3577 0000157F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3578 00001584 E8864B0100              	call malloc
  3579 00001589 50                      	push rax
  3580 0000158A BF00000000              	mov rdi, 8 * 0	; new rib
  3581 0000158F E87B4B0100              	call malloc
  3582 00001594 50                      	push rax
  3583 00001595 BF08000000              	mov rdi, 8 * 1	; extended env
  3584 0000159A E8704B0100              	call malloc
  3585 0000159F 488B7D10                	mov rdi, ENV
  3586 000015A3 BE00000000              	mov rsi, 0
  3587 000015A8 BA01000000              	mov rdx, 1
  3588                                  .L_lambda_simple_env_loop_0300:	; ext_env[i + 1] <-- env[i]
  3589 000015AD 4883FE00                	cmp rsi, 0
  3590 000015B1 7410                    	je .L_lambda_simple_env_end_0300
  3591 000015B3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3592 000015B7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3593 000015BB 48FFC6                  	inc rsi
  3594 000015BE 48FFC2                  	inc rdx
  3595 000015C1 EBEA                    	jmp .L_lambda_simple_env_loop_0300
  3596                                  .L_lambda_simple_env_end_0300:
  3597 000015C3 5B                      	pop rbx
  3598 000015C4 BE00000000              	mov rsi, 0
  3599                                  .L_lambda_simple_params_loop_0300:	; copy params
  3600 000015C9 4883FE00                	cmp rsi, 0
  3601 000015CD 740E                    	je .L_lambda_simple_params_end_0300
  3602 000015CF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3603 000015D4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3604 000015D8 48FFC6                  	inc rsi
  3605 000015DB EBEC                    	jmp .L_lambda_simple_params_loop_0300
  3606                                  .L_lambda_simple_params_end_0300:
  3607 000015DD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3608 000015E0 4889C3                  	mov rbx, rax
  3609 000015E3 58                      	pop rax
  3610 000015E4 C60004                  	mov byte [rax], T_closure
  3611 000015E7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3612 000015EB 48C74009[F8150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0300
  3613 000015F3 E99B000000              	jmp .L_lambda_simple_end_0300
  3614                                  .L_lambda_simple_code_0300:	; lambda-simple body
  3615 000015F8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3616 000015FE 740B                    	je .L_lambda_simple_arity_check_ok_0300
  3617 00001600 FF742410                	push qword [rsp + 8 * 2]
  3618 00001604 6A01                    	push 1
  3619 00001606 E9BD4A0100              	jmp L_error_incorrect_arity_simple
  3620                                  .L_lambda_simple_arity_check_ok_0300:
  3621 0000160B C8000000                	enter 0, 0
  3622                                  	; preparing a tail-call
  3623                                  	; preparing a non tail-call
  3624 0000160F 488B4520                	mov rax, PARAM(0)	; param x
  3625 00001613 50                      	push rax
  3626 00001614 6A01                    	push 1	; arg count
  3627 00001616 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  3628 0000161E 803805                  	cmp byte [rax], T_undefined
  3629 00001621 0F84BB490100            	je L_error_fvar_undefined
  3630 00001627 803804                  	cmp byte [rax], T_closure
  3631 0000162A 0F85364A0100            	jne L_error_non_closure
  3632 00001630 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3633 00001633 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3634 00001636 50                      	push rax
  3635 00001637 6A01                    	push 1	; arg count
  3636 00001639 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  3637 00001641 803805                  	cmp byte [rax], T_undefined
  3638 00001644 0F8498490100            	je L_error_fvar_undefined
  3639 0000164A 803804                  	cmp byte [rax], T_closure
  3640 0000164D 0F85134A0100            	jne L_error_non_closure
  3641 00001653 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3642                                  
  3643                                  	; recycling the current frame
  3644 00001656 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3645 00001659 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3646 0000165C B905000000              	mov rcx, 1 + 4
  3647 00001661 488B5D18                	mov rbx, COUNT
  3648 00001665 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3649 0000166A 488D55F8                	lea rdx, [rbp - 8 * 1]
  3650                                  .L_tc_recycle_frame_loop_03e4:
  3651 0000166E 4883F900                	cmp rcx, 0
  3652 00001672 7413                    	je .L_tc_recycle_frame_done_03e4
  3653 00001674 488B32                  	mov rsi, qword [rdx]
  3654 00001677 488933                  	mov qword [rbx], rsi
  3655 0000167A 48FFC9                  	dec rcx
  3656 0000167D 4883EB08                	sub rbx, 8 * 1
  3657 00001681 4883EA08                	sub rdx, 8 * 1
  3658 00001685 EBE7                    	jmp .L_tc_recycle_frame_loop_03e4
  3659                                  .L_tc_recycle_frame_done_03e4:
  3660 00001687 488D6308                	lea rsp, [rbx + 8 * 1]
  3661 0000168B 5D                      	pop rbp	; the proc will restore it!
  3662 0000168C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3663 0000168F C9                      	leave
  3664 00001690 C21800                  	ret AND_KILL_FRAME(1)
  3665                                  .L_lambda_simple_end_0300:	; new closure is in rax
  3666 00001693 48890425[5E130000]      	mov qword [free_var_86], rax
  3667 0000169B 48B8-                   	mov rax, sob_void
  3667 0000169D [0000000000000000] 
  3668                                  
  3669 000016A5 4889C7                  	mov rdi, rax
  3670 000016A8 E8744B0100              	call print_sexpr_if_not_void
  3671                                  
  3672 000016AD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3673 000016B2 E8584A0100              	call malloc
  3674 000016B7 50                      	push rax
  3675 000016B8 BF00000000              	mov rdi, 8 * 0	; new rib
  3676 000016BD E84D4A0100              	call malloc
  3677 000016C2 50                      	push rax
  3678 000016C3 BF08000000              	mov rdi, 8 * 1	; extended env
  3679 000016C8 E8424A0100              	call malloc
  3680 000016CD 488B7D10                	mov rdi, ENV
  3681 000016D1 BE00000000              	mov rsi, 0
  3682 000016D6 BA01000000              	mov rdx, 1
  3683                                  .L_lambda_simple_env_loop_0301:	; ext_env[i + 1] <-- env[i]
  3684 000016DB 4883FE00                	cmp rsi, 0
  3685 000016DF 7410                    	je .L_lambda_simple_env_end_0301
  3686 000016E1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3687 000016E5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3688 000016E9 48FFC6                  	inc rsi
  3689 000016EC 48FFC2                  	inc rdx
  3690 000016EF EBEA                    	jmp .L_lambda_simple_env_loop_0301
  3691                                  .L_lambda_simple_env_end_0301:
  3692 000016F1 5B                      	pop rbx
  3693 000016F2 BE00000000              	mov rsi, 0
  3694                                  .L_lambda_simple_params_loop_0301:	; copy params
  3695 000016F7 4883FE00                	cmp rsi, 0
  3696 000016FB 740E                    	je .L_lambda_simple_params_end_0301
  3697 000016FD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3698 00001702 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3699 00001706 48FFC6                  	inc rsi
  3700 00001709 EBEC                    	jmp .L_lambda_simple_params_loop_0301
  3701                                  .L_lambda_simple_params_end_0301:
  3702 0000170B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3703 0000170E 4889C3                  	mov rbx, rax
  3704 00001711 58                      	pop rax
  3705 00001712 C60004                  	mov byte [rax], T_closure
  3706 00001715 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3707 00001719 48C74009[26170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0301
  3708 00001721 E99B000000              	jmp .L_lambda_simple_end_0301
  3709                                  .L_lambda_simple_code_0301:	; lambda-simple body
  3710 00001726 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3711 0000172C 740B                    	je .L_lambda_simple_arity_check_ok_0301
  3712 0000172E FF742410                	push qword [rsp + 8 * 2]
  3713 00001732 6A01                    	push 1
  3714 00001734 E98F490100              	jmp L_error_incorrect_arity_simple
  3715                                  .L_lambda_simple_arity_check_ok_0301:
  3716 00001739 C8000000                	enter 0, 0
  3717                                  	; preparing a tail-call
  3718                                  	; preparing a non tail-call
  3719 0000173D 488B4520                	mov rax, PARAM(0)	; param x
  3720 00001741 50                      	push rax
  3721 00001742 6A01                    	push 1	; arg count
  3722 00001744 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  3723 0000174C 803805                  	cmp byte [rax], T_undefined
  3724 0000174F 0F848D480100            	je L_error_fvar_undefined
  3725 00001755 803804                  	cmp byte [rax], T_closure
  3726 00001758 0F8508490100            	jne L_error_non_closure
  3727 0000175E FF7001                  	push SOB_CLOSURE_ENV(rax)
  3728 00001761 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3729 00001764 50                      	push rax
  3730 00001765 6A01                    	push 1	; arg count
  3731 00001767 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  3732 0000176F 803805                  	cmp byte [rax], T_undefined
  3733 00001772 0F846A480100            	je L_error_fvar_undefined
  3734 00001778 803804                  	cmp byte [rax], T_closure
  3735 0000177B 0F85E5480100            	jne L_error_non_closure
  3736 00001781 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3737                                  
  3738                                  	; recycling the current frame
  3739 00001784 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3740 00001787 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3741 0000178A B905000000              	mov rcx, 1 + 4
  3742 0000178F 488B5D18                	mov rbx, COUNT
  3743 00001793 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3744 00001798 488D55F8                	lea rdx, [rbp - 8 * 1]
  3745                                  .L_tc_recycle_frame_loop_03e5:
  3746 0000179C 4883F900                	cmp rcx, 0
  3747 000017A0 7413                    	je .L_tc_recycle_frame_done_03e5
  3748 000017A2 488B32                  	mov rsi, qword [rdx]
  3749 000017A5 488933                  	mov qword [rbx], rsi
  3750 000017A8 48FFC9                  	dec rcx
  3751 000017AB 4883EB08                	sub rbx, 8 * 1
  3752 000017AF 4883EA08                	sub rdx, 8 * 1
  3753 000017B3 EBE7                    	jmp .L_tc_recycle_frame_loop_03e5
  3754                                  .L_tc_recycle_frame_done_03e5:
  3755 000017B5 488D6308                	lea rsp, [rbx + 8 * 1]
  3756 000017B9 5D                      	pop rbp	; the proc will restore it!
  3757 000017BA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3758 000017BD C9                      	leave
  3759 000017BE C21800                  	ret AND_KILL_FRAME(1)
  3760                                  .L_lambda_simple_end_0301:	; new closure is in rax
  3761 000017C1 48890425[6F130000]      	mov qword [free_var_87], rax
  3762 000017C9 48B8-                   	mov rax, sob_void
  3762 000017CB [0000000000000000] 
  3763                                  
  3764 000017D3 4889C7                  	mov rdi, rax
  3765 000017D6 E8464A0100              	call print_sexpr_if_not_void
  3766                                  
  3767 000017DB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3768 000017E0 E82A490100              	call malloc
  3769 000017E5 50                      	push rax
  3770 000017E6 BF00000000              	mov rdi, 8 * 0	; new rib
  3771 000017EB E81F490100              	call malloc
  3772 000017F0 50                      	push rax
  3773 000017F1 BF08000000              	mov rdi, 8 * 1	; extended env
  3774 000017F6 E814490100              	call malloc
  3775 000017FB 488B7D10                	mov rdi, ENV
  3776 000017FF BE00000000              	mov rsi, 0
  3777 00001804 BA01000000              	mov rdx, 1
  3778                                  .L_lambda_simple_env_loop_0302:	; ext_env[i + 1] <-- env[i]
  3779 00001809 4883FE00                	cmp rsi, 0
  3780 0000180D 7410                    	je .L_lambda_simple_env_end_0302
  3781 0000180F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3782 00001813 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3783 00001817 48FFC6                  	inc rsi
  3784 0000181A 48FFC2                  	inc rdx
  3785 0000181D EBEA                    	jmp .L_lambda_simple_env_loop_0302
  3786                                  .L_lambda_simple_env_end_0302:
  3787 0000181F 5B                      	pop rbx
  3788 00001820 BE00000000              	mov rsi, 0
  3789                                  .L_lambda_simple_params_loop_0302:	; copy params
  3790 00001825 4883FE00                	cmp rsi, 0
  3791 00001829 740E                    	je .L_lambda_simple_params_end_0302
  3792 0000182B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3793 00001830 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3794 00001834 48FFC6                  	inc rsi
  3795 00001837 EBEC                    	jmp .L_lambda_simple_params_loop_0302
  3796                                  .L_lambda_simple_params_end_0302:
  3797 00001839 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3798 0000183C 4889C3                  	mov rbx, rax
  3799 0000183F 58                      	pop rax
  3800 00001840 C60004                  	mov byte [rax], T_closure
  3801 00001843 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3802 00001847 48C74009[54180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0302
  3803 0000184F E99B000000              	jmp .L_lambda_simple_end_0302
  3804                                  .L_lambda_simple_code_0302:	; lambda-simple body
  3805 00001854 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3806 0000185A 740B                    	je .L_lambda_simple_arity_check_ok_0302
  3807 0000185C FF742410                	push qword [rsp + 8 * 2]
  3808 00001860 6A01                    	push 1
  3809 00001862 E961480100              	jmp L_error_incorrect_arity_simple
  3810                                  .L_lambda_simple_arity_check_ok_0302:
  3811 00001867 C8000000                	enter 0, 0
  3812                                  	; preparing a tail-call
  3813                                  	; preparing a non tail-call
  3814 0000186B 488B4520                	mov rax, PARAM(0)	; param x
  3815 0000186F 50                      	push rax
  3816 00001870 6A01                    	push 1	; arg count
  3817 00001872 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  3818 0000187A 803805                  	cmp byte [rax], T_undefined
  3819 0000187D 0F845F470100            	je L_error_fvar_undefined
  3820 00001883 803804                  	cmp byte [rax], T_closure
  3821 00001886 0F85DA470100            	jne L_error_non_closure
  3822 0000188C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3823 0000188F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3824 00001892 50                      	push rax
  3825 00001893 6A01                    	push 1	; arg count
  3826 00001895 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  3827 0000189D 803805                  	cmp byte [rax], T_undefined
  3828 000018A0 0F843C470100            	je L_error_fvar_undefined
  3829 000018A6 803804                  	cmp byte [rax], T_closure
  3830 000018A9 0F85B7470100            	jne L_error_non_closure
  3831 000018AF FF7001                  	push SOB_CLOSURE_ENV(rax)
  3832                                  
  3833                                  	; recycling the current frame
  3834 000018B2 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3835 000018B5 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3836 000018B8 B905000000              	mov rcx, 1 + 4
  3837 000018BD 488B5D18                	mov rbx, COUNT
  3838 000018C1 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3839 000018C6 488D55F8                	lea rdx, [rbp - 8 * 1]
  3840                                  .L_tc_recycle_frame_loop_03e6:
  3841 000018CA 4883F900                	cmp rcx, 0
  3842 000018CE 7413                    	je .L_tc_recycle_frame_done_03e6
  3843 000018D0 488B32                  	mov rsi, qword [rdx]
  3844 000018D3 488933                  	mov qword [rbx], rsi
  3845 000018D6 48FFC9                  	dec rcx
  3846 000018D9 4883EB08                	sub rbx, 8 * 1
  3847 000018DD 4883EA08                	sub rdx, 8 * 1
  3848 000018E1 EBE7                    	jmp .L_tc_recycle_frame_loop_03e6
  3849                                  .L_tc_recycle_frame_done_03e6:
  3850 000018E3 488D6308                	lea rsp, [rbx + 8 * 1]
  3851 000018E7 5D                      	pop rbp	; the proc will restore it!
  3852 000018E8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3853 000018EB C9                      	leave
  3854 000018EC C21800                  	ret AND_KILL_FRAME(1)
  3855                                  .L_lambda_simple_end_0302:	; new closure is in rax
  3856 000018EF 48890425[80130000]      	mov qword [free_var_88], rax
  3857 000018F7 48B8-                   	mov rax, sob_void
  3857 000018F9 [0000000000000000] 
  3858                                  
  3859 00001901 4889C7                  	mov rdi, rax
  3860 00001904 E818490100              	call print_sexpr_if_not_void
  3861                                  
  3862 00001909 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3863 0000190E E8FC470100              	call malloc
  3864 00001913 50                      	push rax
  3865 00001914 BF00000000              	mov rdi, 8 * 0	; new rib
  3866 00001919 E8F1470100              	call malloc
  3867 0000191E 50                      	push rax
  3868 0000191F BF08000000              	mov rdi, 8 * 1	; extended env
  3869 00001924 E8E6470100              	call malloc
  3870 00001929 488B7D10                	mov rdi, ENV
  3871 0000192D BE00000000              	mov rsi, 0
  3872 00001932 BA01000000              	mov rdx, 1
  3873                                  .L_lambda_simple_env_loop_0303:	; ext_env[i + 1] <-- env[i]
  3874 00001937 4883FE00                	cmp rsi, 0
  3875 0000193B 7410                    	je .L_lambda_simple_env_end_0303
  3876 0000193D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3877 00001941 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3878 00001945 48FFC6                  	inc rsi
  3879 00001948 48FFC2                  	inc rdx
  3880 0000194B EBEA                    	jmp .L_lambda_simple_env_loop_0303
  3881                                  .L_lambda_simple_env_end_0303:
  3882 0000194D 5B                      	pop rbx
  3883 0000194E BE00000000              	mov rsi, 0
  3884                                  .L_lambda_simple_params_loop_0303:	; copy params
  3885 00001953 4883FE00                	cmp rsi, 0
  3886 00001957 740E                    	je .L_lambda_simple_params_end_0303
  3887 00001959 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3888 0000195E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3889 00001962 48FFC6                  	inc rsi
  3890 00001965 EBEC                    	jmp .L_lambda_simple_params_loop_0303
  3891                                  .L_lambda_simple_params_end_0303:
  3892 00001967 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3893 0000196A 4889C3                  	mov rbx, rax
  3894 0000196D 58                      	pop rax
  3895 0000196E C60004                  	mov byte [rax], T_closure
  3896 00001971 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3897 00001975 48C74009[82190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0303
  3898 0000197D E99B000000              	jmp .L_lambda_simple_end_0303
  3899                                  .L_lambda_simple_code_0303:	; lambda-simple body
  3900 00001982 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3901 00001988 740B                    	je .L_lambda_simple_arity_check_ok_0303
  3902 0000198A FF742410                	push qword [rsp + 8 * 2]
  3903 0000198E 6A01                    	push 1
  3904 00001990 E933470100              	jmp L_error_incorrect_arity_simple
  3905                                  .L_lambda_simple_arity_check_ok_0303:
  3906 00001995 C8000000                	enter 0, 0
  3907                                  	; preparing a tail-call
  3908                                  	; preparing a non tail-call
  3909 00001999 488B4520                	mov rax, PARAM(0)	; param x
  3910 0000199D 50                      	push rax
  3911 0000199E 6A01                    	push 1	; arg count
  3912 000019A0 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  3913 000019A8 803805                  	cmp byte [rax], T_undefined
  3914 000019AB 0F8431460100            	je L_error_fvar_undefined
  3915 000019B1 803804                  	cmp byte [rax], T_closure
  3916 000019B4 0F85AC460100            	jne L_error_non_closure
  3917 000019BA FF7001                  	push SOB_CLOSURE_ENV(rax)
  3918 000019BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  3919 000019C0 50                      	push rax
  3920 000019C1 6A01                    	push 1	; arg count
  3921 000019C3 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  3922 000019CB 803805                  	cmp byte [rax], T_undefined
  3923 000019CE 0F840E460100            	je L_error_fvar_undefined
  3924 000019D4 803804                  	cmp byte [rax], T_closure
  3925 000019D7 0F8589460100            	jne L_error_non_closure
  3926 000019DD FF7001                  	push SOB_CLOSURE_ENV(rax)
  3927                                  
  3928                                  	; recycling the current frame
  3929 000019E0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3930 000019E3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3931 000019E6 B905000000              	mov rcx, 1 + 4
  3932 000019EB 488B5D18                	mov rbx, COUNT
  3933 000019EF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3934 000019F4 488D55F8                	lea rdx, [rbp - 8 * 1]
  3935                                  .L_tc_recycle_frame_loop_03e7:
  3936 000019F8 4883F900                	cmp rcx, 0
  3937 000019FC 7413                    	je .L_tc_recycle_frame_done_03e7
  3938 000019FE 488B32                  	mov rsi, qword [rdx]
  3939 00001A01 488933                  	mov qword [rbx], rsi
  3940 00001A04 48FFC9                  	dec rcx
  3941 00001A07 4883EB08                	sub rbx, 8 * 1
  3942 00001A0B 4883EA08                	sub rdx, 8 * 1
  3943 00001A0F EBE7                    	jmp .L_tc_recycle_frame_loop_03e7
  3944                                  .L_tc_recycle_frame_done_03e7:
  3945 00001A11 488D6308                	lea rsp, [rbx + 8 * 1]
  3946 00001A15 5D                      	pop rbp	; the proc will restore it!
  3947 00001A16 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3948 00001A19 C9                      	leave
  3949 00001A1A C21800                  	ret AND_KILL_FRAME(1)
  3950                                  .L_lambda_simple_end_0303:	; new closure is in rax
  3951 00001A1D 48890425[91130000]      	mov qword [free_var_89], rax
  3952 00001A25 48B8-                   	mov rax, sob_void
  3952 00001A27 [0000000000000000] 
  3953                                  
  3954 00001A2F 4889C7                  	mov rdi, rax
  3955 00001A32 E8EA470100              	call print_sexpr_if_not_void
  3956                                  
  3957 00001A37 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3958 00001A3C E8CE460100              	call malloc
  3959 00001A41 50                      	push rax
  3960 00001A42 BF00000000              	mov rdi, 8 * 0	; new rib
  3961 00001A47 E8C3460100              	call malloc
  3962 00001A4C 50                      	push rax
  3963 00001A4D BF08000000              	mov rdi, 8 * 1	; extended env
  3964 00001A52 E8B8460100              	call malloc
  3965 00001A57 488B7D10                	mov rdi, ENV
  3966 00001A5B BE00000000              	mov rsi, 0
  3967 00001A60 BA01000000              	mov rdx, 1
  3968                                  .L_lambda_simple_env_loop_0304:	; ext_env[i + 1] <-- env[i]
  3969 00001A65 4883FE00                	cmp rsi, 0
  3970 00001A69 7410                    	je .L_lambda_simple_env_end_0304
  3971 00001A6B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3972 00001A6F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3973 00001A73 48FFC6                  	inc rsi
  3974 00001A76 48FFC2                  	inc rdx
  3975 00001A79 EBEA                    	jmp .L_lambda_simple_env_loop_0304
  3976                                  .L_lambda_simple_env_end_0304:
  3977 00001A7B 5B                      	pop rbx
  3978 00001A7C BE00000000              	mov rsi, 0
  3979                                  .L_lambda_simple_params_loop_0304:	; copy params
  3980 00001A81 4883FE00                	cmp rsi, 0
  3981 00001A85 740E                    	je .L_lambda_simple_params_end_0304
  3982 00001A87 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3983 00001A8C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3984 00001A90 48FFC6                  	inc rsi
  3985 00001A93 EBEC                    	jmp .L_lambda_simple_params_loop_0304
  3986                                  .L_lambda_simple_params_end_0304:
  3987 00001A95 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3988 00001A98 4889C3                  	mov rbx, rax
  3989 00001A9B 58                      	pop rax
  3990 00001A9C C60004                  	mov byte [rax], T_closure
  3991 00001A9F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3992 00001AA3 48C74009[B01A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0304
  3993 00001AAB E99B000000              	jmp .L_lambda_simple_end_0304
  3994                                  .L_lambda_simple_code_0304:	; lambda-simple body
  3995 00001AB0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3996 00001AB6 740B                    	je .L_lambda_simple_arity_check_ok_0304
  3997 00001AB8 FF742410                	push qword [rsp + 8 * 2]
  3998 00001ABC 6A01                    	push 1
  3999 00001ABE E905460100              	jmp L_error_incorrect_arity_simple
  4000                                  .L_lambda_simple_arity_check_ok_0304:
  4001 00001AC3 C8000000                	enter 0, 0
  4002                                  	; preparing a tail-call
  4003                                  	; preparing a non tail-call
  4004 00001AC7 488B4520                	mov rax, PARAM(0)	; param x
  4005 00001ACB 50                      	push rax
  4006 00001ACC 6A01                    	push 1	; arg count
  4007 00001ACE 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  4008 00001AD6 803805                  	cmp byte [rax], T_undefined
  4009 00001AD9 0F8403450100            	je L_error_fvar_undefined
  4010 00001ADF 803804                  	cmp byte [rax], T_closure
  4011 00001AE2 0F857E450100            	jne L_error_non_closure
  4012 00001AE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4013 00001AEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  4014 00001AEE 50                      	push rax
  4015 00001AEF 6A01                    	push 1	; arg count
  4016 00001AF1 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  4017 00001AF9 803805                  	cmp byte [rax], T_undefined
  4018 00001AFC 0F84E0440100            	je L_error_fvar_undefined
  4019 00001B02 803804                  	cmp byte [rax], T_closure
  4020 00001B05 0F855B450100            	jne L_error_non_closure
  4021 00001B0B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4022                                  
  4023                                  	; recycling the current frame
  4024 00001B0E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4025 00001B11 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4026 00001B14 B905000000              	mov rcx, 1 + 4
  4027 00001B19 488B5D18                	mov rbx, COUNT
  4028 00001B1D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4029 00001B22 488D55F8                	lea rdx, [rbp - 8 * 1]
  4030                                  .L_tc_recycle_frame_loop_03e8:
  4031 00001B26 4883F900                	cmp rcx, 0
  4032 00001B2A 7413                    	je .L_tc_recycle_frame_done_03e8
  4033 00001B2C 488B32                  	mov rsi, qword [rdx]
  4034 00001B2F 488933                  	mov qword [rbx], rsi
  4035 00001B32 48FFC9                  	dec rcx
  4036 00001B35 4883EB08                	sub rbx, 8 * 1
  4037 00001B39 4883EA08                	sub rdx, 8 * 1
  4038 00001B3D EBE7                    	jmp .L_tc_recycle_frame_loop_03e8
  4039                                  .L_tc_recycle_frame_done_03e8:
  4040 00001B3F 488D6308                	lea rsp, [rbx + 8 * 1]
  4041 00001B43 5D                      	pop rbp	; the proc will restore it!
  4042 00001B44 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4043 00001B47 C9                      	leave
  4044 00001B48 C21800                  	ret AND_KILL_FRAME(1)
  4045                                  .L_lambda_simple_end_0304:	; new closure is in rax
  4046 00001B4B 48890425[A2130000]      	mov qword [free_var_90], rax
  4047 00001B53 48B8-                   	mov rax, sob_void
  4047 00001B55 [0000000000000000] 
  4048                                  
  4049 00001B5D 4889C7                  	mov rdi, rax
  4050 00001B60 E8BC460100              	call print_sexpr_if_not_void
  4051                                  
  4052 00001B65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4053 00001B6A E8A0450100              	call malloc
  4054 00001B6F 50                      	push rax
  4055 00001B70 BF00000000              	mov rdi, 8 * 0	; new rib
  4056 00001B75 E895450100              	call malloc
  4057 00001B7A 50                      	push rax
  4058 00001B7B BF08000000              	mov rdi, 8 * 1	; extended env
  4059 00001B80 E88A450100              	call malloc
  4060 00001B85 488B7D10                	mov rdi, ENV
  4061 00001B89 BE00000000              	mov rsi, 0
  4062 00001B8E BA01000000              	mov rdx, 1
  4063                                  .L_lambda_simple_env_loop_0305:	; ext_env[i + 1] <-- env[i]
  4064 00001B93 4883FE00                	cmp rsi, 0
  4065 00001B97 7410                    	je .L_lambda_simple_env_end_0305
  4066 00001B99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4067 00001B9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4068 00001BA1 48FFC6                  	inc rsi
  4069 00001BA4 48FFC2                  	inc rdx
  4070 00001BA7 EBEA                    	jmp .L_lambda_simple_env_loop_0305
  4071                                  .L_lambda_simple_env_end_0305:
  4072 00001BA9 5B                      	pop rbx
  4073 00001BAA BE00000000              	mov rsi, 0
  4074                                  .L_lambda_simple_params_loop_0305:	; copy params
  4075 00001BAF 4883FE00                	cmp rsi, 0
  4076 00001BB3 740E                    	je .L_lambda_simple_params_end_0305
  4077 00001BB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4078 00001BBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4079 00001BBE 48FFC6                  	inc rsi
  4080 00001BC1 EBEC                    	jmp .L_lambda_simple_params_loop_0305
  4081                                  .L_lambda_simple_params_end_0305:
  4082 00001BC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4083 00001BC6 4889C3                  	mov rbx, rax
  4084 00001BC9 58                      	pop rax
  4085 00001BCA C60004                  	mov byte [rax], T_closure
  4086 00001BCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4087 00001BD1 48C74009[DE1B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0305
  4088 00001BD9 E99B000000              	jmp .L_lambda_simple_end_0305
  4089                                  .L_lambda_simple_code_0305:	; lambda-simple body
  4090 00001BDE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4091 00001BE4 740B                    	je .L_lambda_simple_arity_check_ok_0305
  4092 00001BE6 FF742410                	push qword [rsp + 8 * 2]
  4093 00001BEA 6A01                    	push 1
  4094 00001BEC E9D7440100              	jmp L_error_incorrect_arity_simple
  4095                                  .L_lambda_simple_arity_check_ok_0305:
  4096 00001BF1 C8000000                	enter 0, 0
  4097                                  	; preparing a tail-call
  4098                                  	; preparing a non tail-call
  4099 00001BF5 488B4520                	mov rax, PARAM(0)	; param x
  4100 00001BF9 50                      	push rax
  4101 00001BFA 6A01                    	push 1	; arg count
  4102 00001BFC 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  4103 00001C04 803805                  	cmp byte [rax], T_undefined
  4104 00001C07 0F84D5430100            	je L_error_fvar_undefined
  4105 00001C0D 803804                  	cmp byte [rax], T_closure
  4106 00001C10 0F8550440100            	jne L_error_non_closure
  4107 00001C16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4108 00001C19 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4109 00001C1C 50                      	push rax
  4110 00001C1D 6A01                    	push 1	; arg count
  4111 00001C1F 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  4112 00001C27 803805                  	cmp byte [rax], T_undefined
  4113 00001C2A 0F84B2430100            	je L_error_fvar_undefined
  4114 00001C30 803804                  	cmp byte [rax], T_closure
  4115 00001C33 0F852D440100            	jne L_error_non_closure
  4116 00001C39 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4117                                  
  4118                                  	; recycling the current frame
  4119 00001C3C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4120 00001C3F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4121 00001C42 B905000000              	mov rcx, 1 + 4
  4122 00001C47 488B5D18                	mov rbx, COUNT
  4123 00001C4B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4124 00001C50 488D55F8                	lea rdx, [rbp - 8 * 1]
  4125                                  .L_tc_recycle_frame_loop_03e9:
  4126 00001C54 4883F900                	cmp rcx, 0
  4127 00001C58 7413                    	je .L_tc_recycle_frame_done_03e9
  4128 00001C5A 488B32                  	mov rsi, qword [rdx]
  4129 00001C5D 488933                  	mov qword [rbx], rsi
  4130 00001C60 48FFC9                  	dec rcx
  4131 00001C63 4883EB08                	sub rbx, 8 * 1
  4132 00001C67 4883EA08                	sub rdx, 8 * 1
  4133 00001C6B EBE7                    	jmp .L_tc_recycle_frame_loop_03e9
  4134                                  .L_tc_recycle_frame_done_03e9:
  4135 00001C6D 488D6308                	lea rsp, [rbx + 8 * 1]
  4136 00001C71 5D                      	pop rbp	; the proc will restore it!
  4137 00001C72 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4138 00001C75 C9                      	leave
  4139 00001C76 C21800                  	ret AND_KILL_FRAME(1)
  4140                                  .L_lambda_simple_end_0305:	; new closure is in rax
  4141 00001C79 48890425[B3130000]      	mov qword [free_var_91], rax
  4142 00001C81 48B8-                   	mov rax, sob_void
  4142 00001C83 [0000000000000000] 
  4143                                  
  4144 00001C8B 4889C7                  	mov rdi, rax
  4145 00001C8E E88E450100              	call print_sexpr_if_not_void
  4146                                  
  4147 00001C93 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4148 00001C98 E872440100              	call malloc
  4149 00001C9D 50                      	push rax
  4150 00001C9E BF00000000              	mov rdi, 8 * 0	; new rib
  4151 00001CA3 E867440100              	call malloc
  4152 00001CA8 50                      	push rax
  4153 00001CA9 BF08000000              	mov rdi, 8 * 1	; extended env
  4154 00001CAE E85C440100              	call malloc
  4155 00001CB3 488B7D10                	mov rdi, ENV
  4156 00001CB7 BE00000000              	mov rsi, 0
  4157 00001CBC BA01000000              	mov rdx, 1
  4158                                  .L_lambda_simple_env_loop_0306:	; ext_env[i + 1] <-- env[i]
  4159 00001CC1 4883FE00                	cmp rsi, 0
  4160 00001CC5 7410                    	je .L_lambda_simple_env_end_0306
  4161 00001CC7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4162 00001CCB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4163 00001CCF 48FFC6                  	inc rsi
  4164 00001CD2 48FFC2                  	inc rdx
  4165 00001CD5 EBEA                    	jmp .L_lambda_simple_env_loop_0306
  4166                                  .L_lambda_simple_env_end_0306:
  4167 00001CD7 5B                      	pop rbx
  4168 00001CD8 BE00000000              	mov rsi, 0
  4169                                  .L_lambda_simple_params_loop_0306:	; copy params
  4170 00001CDD 4883FE00                	cmp rsi, 0
  4171 00001CE1 740E                    	je .L_lambda_simple_params_end_0306
  4172 00001CE3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4173 00001CE8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4174 00001CEC 48FFC6                  	inc rsi
  4175 00001CEF EBEC                    	jmp .L_lambda_simple_params_loop_0306
  4176                                  .L_lambda_simple_params_end_0306:
  4177 00001CF1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4178 00001CF4 4889C3                  	mov rbx, rax
  4179 00001CF7 58                      	pop rax
  4180 00001CF8 C60004                  	mov byte [rax], T_closure
  4181 00001CFB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4182 00001CFF 48C74009[0C1D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0306
  4183 00001D07 E99B000000              	jmp .L_lambda_simple_end_0306
  4184                                  .L_lambda_simple_code_0306:	; lambda-simple body
  4185 00001D0C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4186 00001D12 740B                    	je .L_lambda_simple_arity_check_ok_0306
  4187 00001D14 FF742410                	push qword [rsp + 8 * 2]
  4188 00001D18 6A01                    	push 1
  4189 00001D1A E9A9430100              	jmp L_error_incorrect_arity_simple
  4190                                  .L_lambda_simple_arity_check_ok_0306:
  4191 00001D1F C8000000                	enter 0, 0
  4192                                  	; preparing a tail-call
  4193                                  	; preparing a non tail-call
  4194 00001D23 488B4520                	mov rax, PARAM(0)	; param x
  4195 00001D27 50                      	push rax
  4196 00001D28 6A01                    	push 1	; arg count
  4197 00001D2A 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  4198 00001D32 803805                  	cmp byte [rax], T_undefined
  4199 00001D35 0F84A7420100            	je L_error_fvar_undefined
  4200 00001D3B 803804                  	cmp byte [rax], T_closure
  4201 00001D3E 0F8522430100            	jne L_error_non_closure
  4202 00001D44 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4203 00001D47 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4204 00001D4A 50                      	push rax
  4205 00001D4B 6A01                    	push 1	; arg count
  4206 00001D4D 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  4207 00001D55 803805                  	cmp byte [rax], T_undefined
  4208 00001D58 0F8484420100            	je L_error_fvar_undefined
  4209 00001D5E 803804                  	cmp byte [rax], T_closure
  4210 00001D61 0F85FF420100            	jne L_error_non_closure
  4211 00001D67 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4212                                  
  4213                                  	; recycling the current frame
  4214 00001D6A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4215 00001D6D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4216 00001D70 B905000000              	mov rcx, 1 + 4
  4217 00001D75 488B5D18                	mov rbx, COUNT
  4218 00001D79 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4219 00001D7E 488D55F8                	lea rdx, [rbp - 8 * 1]
  4220                                  .L_tc_recycle_frame_loop_03ea:
  4221 00001D82 4883F900                	cmp rcx, 0
  4222 00001D86 7413                    	je .L_tc_recycle_frame_done_03ea
  4223 00001D88 488B32                  	mov rsi, qword [rdx]
  4224 00001D8B 488933                  	mov qword [rbx], rsi
  4225 00001D8E 48FFC9                  	dec rcx
  4226 00001D91 4883EB08                	sub rbx, 8 * 1
  4227 00001D95 4883EA08                	sub rdx, 8 * 1
  4228 00001D99 EBE7                    	jmp .L_tc_recycle_frame_loop_03ea
  4229                                  .L_tc_recycle_frame_done_03ea:
  4230 00001D9B 488D6308                	lea rsp, [rbx + 8 * 1]
  4231 00001D9F 5D                      	pop rbp	; the proc will restore it!
  4232 00001DA0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4233 00001DA3 C9                      	leave
  4234 00001DA4 C21800                  	ret AND_KILL_FRAME(1)
  4235                                  .L_lambda_simple_end_0306:	; new closure is in rax
  4236 00001DA7 48890425[C4130000]      	mov qword [free_var_92], rax
  4237 00001DAF 48B8-                   	mov rax, sob_void
  4237 00001DB1 [0000000000000000] 
  4238                                  
  4239 00001DB9 4889C7                  	mov rdi, rax
  4240 00001DBC E860440100              	call print_sexpr_if_not_void
  4241                                  
  4242 00001DC1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4243 00001DC6 E844430100              	call malloc
  4244 00001DCB 50                      	push rax
  4245 00001DCC BF00000000              	mov rdi, 8 * 0	; new rib
  4246 00001DD1 E839430100              	call malloc
  4247 00001DD6 50                      	push rax
  4248 00001DD7 BF08000000              	mov rdi, 8 * 1	; extended env
  4249 00001DDC E82E430100              	call malloc
  4250 00001DE1 488B7D10                	mov rdi, ENV
  4251 00001DE5 BE00000000              	mov rsi, 0
  4252 00001DEA BA01000000              	mov rdx, 1
  4253                                  .L_lambda_simple_env_loop_0307:	; ext_env[i + 1] <-- env[i]
  4254 00001DEF 4883FE00                	cmp rsi, 0
  4255 00001DF3 7410                    	je .L_lambda_simple_env_end_0307
  4256 00001DF5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4257 00001DF9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4258 00001DFD 48FFC6                  	inc rsi
  4259 00001E00 48FFC2                  	inc rdx
  4260 00001E03 EBEA                    	jmp .L_lambda_simple_env_loop_0307
  4261                                  .L_lambda_simple_env_end_0307:
  4262 00001E05 5B                      	pop rbx
  4263 00001E06 BE00000000              	mov rsi, 0
  4264                                  .L_lambda_simple_params_loop_0307:	; copy params
  4265 00001E0B 4883FE00                	cmp rsi, 0
  4266 00001E0F 740E                    	je .L_lambda_simple_params_end_0307
  4267 00001E11 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4268 00001E16 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4269 00001E1A 48FFC6                  	inc rsi
  4270 00001E1D EBEC                    	jmp .L_lambda_simple_params_loop_0307
  4271                                  .L_lambda_simple_params_end_0307:
  4272 00001E1F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4273 00001E22 4889C3                  	mov rbx, rax
  4274 00001E25 58                      	pop rax
  4275 00001E26 C60004                  	mov byte [rax], T_closure
  4276 00001E29 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4277 00001E2D 48C74009[3A1E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0307
  4278 00001E35 E99B000000              	jmp .L_lambda_simple_end_0307
  4279                                  .L_lambda_simple_code_0307:	; lambda-simple body
  4280 00001E3A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4281 00001E40 740B                    	je .L_lambda_simple_arity_check_ok_0307
  4282 00001E42 FF742410                	push qword [rsp + 8 * 2]
  4283 00001E46 6A01                    	push 1
  4284 00001E48 E97B420100              	jmp L_error_incorrect_arity_simple
  4285                                  .L_lambda_simple_arity_check_ok_0307:
  4286 00001E4D C8000000                	enter 0, 0
  4287                                  	; preparing a tail-call
  4288                                  	; preparing a non tail-call
  4289 00001E51 488B4520                	mov rax, PARAM(0)	; param x
  4290 00001E55 50                      	push rax
  4291 00001E56 6A01                    	push 1	; arg count
  4292 00001E58 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  4293 00001E60 803805                  	cmp byte [rax], T_undefined
  4294 00001E63 0F8479410100            	je L_error_fvar_undefined
  4295 00001E69 803804                  	cmp byte [rax], T_closure
  4296 00001E6C 0F85F4410100            	jne L_error_non_closure
  4297 00001E72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4298 00001E75 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4299 00001E78 50                      	push rax
  4300 00001E79 6A01                    	push 1	; arg count
  4301 00001E7B 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  4302 00001E83 803805                  	cmp byte [rax], T_undefined
  4303 00001E86 0F8456410100            	je L_error_fvar_undefined
  4304 00001E8C 803804                  	cmp byte [rax], T_closure
  4305 00001E8F 0F85D1410100            	jne L_error_non_closure
  4306 00001E95 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4307                                  
  4308                                  	; recycling the current frame
  4309 00001E98 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4310 00001E9B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4311 00001E9E B905000000              	mov rcx, 1 + 4
  4312 00001EA3 488B5D18                	mov rbx, COUNT
  4313 00001EA7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4314 00001EAC 488D55F8                	lea rdx, [rbp - 8 * 1]
  4315                                  .L_tc_recycle_frame_loop_03eb:
  4316 00001EB0 4883F900                	cmp rcx, 0
  4317 00001EB4 7413                    	je .L_tc_recycle_frame_done_03eb
  4318 00001EB6 488B32                  	mov rsi, qword [rdx]
  4319 00001EB9 488933                  	mov qword [rbx], rsi
  4320 00001EBC 48FFC9                  	dec rcx
  4321 00001EBF 4883EB08                	sub rbx, 8 * 1
  4322 00001EC3 4883EA08                	sub rdx, 8 * 1
  4323 00001EC7 EBE7                    	jmp .L_tc_recycle_frame_loop_03eb
  4324                                  .L_tc_recycle_frame_done_03eb:
  4325 00001EC9 488D6308                	lea rsp, [rbx + 8 * 1]
  4326 00001ECD 5D                      	pop rbp	; the proc will restore it!
  4327 00001ECE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4328 00001ED1 C9                      	leave
  4329 00001ED2 C21800                  	ret AND_KILL_FRAME(1)
  4330                                  .L_lambda_simple_end_0307:	; new closure is in rax
  4331 00001ED5 48890425[D5130000]      	mov qword [free_var_93], rax
  4332 00001EDD 48B8-                   	mov rax, sob_void
  4332 00001EDF [0000000000000000] 
  4333                                  
  4334 00001EE7 4889C7                  	mov rdi, rax
  4335 00001EEA E832430100              	call print_sexpr_if_not_void
  4336                                  
  4337 00001EEF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4338 00001EF4 E816420100              	call malloc
  4339 00001EF9 50                      	push rax
  4340 00001EFA BF00000000              	mov rdi, 8 * 0	; new rib
  4341 00001EFF E80B420100              	call malloc
  4342 00001F04 50                      	push rax
  4343 00001F05 BF08000000              	mov rdi, 8 * 1	; extended env
  4344 00001F0A E800420100              	call malloc
  4345 00001F0F 488B7D10                	mov rdi, ENV
  4346 00001F13 BE00000000              	mov rsi, 0
  4347 00001F18 BA01000000              	mov rdx, 1
  4348                                  .L_lambda_simple_env_loop_0308:	; ext_env[i + 1] <-- env[i]
  4349 00001F1D 4883FE00                	cmp rsi, 0
  4350 00001F21 7410                    	je .L_lambda_simple_env_end_0308
  4351 00001F23 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4352 00001F27 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4353 00001F2B 48FFC6                  	inc rsi
  4354 00001F2E 48FFC2                  	inc rdx
  4355 00001F31 EBEA                    	jmp .L_lambda_simple_env_loop_0308
  4356                                  .L_lambda_simple_env_end_0308:
  4357 00001F33 5B                      	pop rbx
  4358 00001F34 BE00000000              	mov rsi, 0
  4359                                  .L_lambda_simple_params_loop_0308:	; copy params
  4360 00001F39 4883FE00                	cmp rsi, 0
  4361 00001F3D 740E                    	je .L_lambda_simple_params_end_0308
  4362 00001F3F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4363 00001F44 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4364 00001F48 48FFC6                  	inc rsi
  4365 00001F4B EBEC                    	jmp .L_lambda_simple_params_loop_0308
  4366                                  .L_lambda_simple_params_end_0308:
  4367 00001F4D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4368 00001F50 4889C3                  	mov rbx, rax
  4369 00001F53 58                      	pop rax
  4370 00001F54 C60004                  	mov byte [rax], T_closure
  4371 00001F57 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4372 00001F5B 48C74009[681F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0308
  4373 00001F63 E99B000000              	jmp .L_lambda_simple_end_0308
  4374                                  .L_lambda_simple_code_0308:	; lambda-simple body
  4375 00001F68 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4376 00001F6E 740B                    	je .L_lambda_simple_arity_check_ok_0308
  4377 00001F70 FF742410                	push qword [rsp + 8 * 2]
  4378 00001F74 6A01                    	push 1
  4379 00001F76 E94D410100              	jmp L_error_incorrect_arity_simple
  4380                                  .L_lambda_simple_arity_check_ok_0308:
  4381 00001F7B C8000000                	enter 0, 0
  4382                                  	; preparing a tail-call
  4383                                  	; preparing a non tail-call
  4384 00001F7F 488B4520                	mov rax, PARAM(0)	; param x
  4385 00001F83 50                      	push rax
  4386 00001F84 6A01                    	push 1	; arg count
  4387 00001F86 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  4388 00001F8E 803805                  	cmp byte [rax], T_undefined
  4389 00001F91 0F844B400100            	je L_error_fvar_undefined
  4390 00001F97 803804                  	cmp byte [rax], T_closure
  4391 00001F9A 0F85C6400100            	jne L_error_non_closure
  4392 00001FA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4393 00001FA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4394 00001FA6 50                      	push rax
  4395 00001FA7 6A01                    	push 1	; arg count
  4396 00001FA9 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  4397 00001FB1 803805                  	cmp byte [rax], T_undefined
  4398 00001FB4 0F8428400100            	je L_error_fvar_undefined
  4399 00001FBA 803804                  	cmp byte [rax], T_closure
  4400 00001FBD 0F85A3400100            	jne L_error_non_closure
  4401 00001FC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4402                                  
  4403                                  	; recycling the current frame
  4404 00001FC6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4405 00001FC9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4406 00001FCC B905000000              	mov rcx, 1 + 4
  4407 00001FD1 488B5D18                	mov rbx, COUNT
  4408 00001FD5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4409 00001FDA 488D55F8                	lea rdx, [rbp - 8 * 1]
  4410                                  .L_tc_recycle_frame_loop_03ec:
  4411 00001FDE 4883F900                	cmp rcx, 0
  4412 00001FE2 7413                    	je .L_tc_recycle_frame_done_03ec
  4413 00001FE4 488B32                  	mov rsi, qword [rdx]
  4414 00001FE7 488933                  	mov qword [rbx], rsi
  4415 00001FEA 48FFC9                  	dec rcx
  4416 00001FED 4883EB08                	sub rbx, 8 * 1
  4417 00001FF1 4883EA08                	sub rdx, 8 * 1
  4418 00001FF5 EBE7                    	jmp .L_tc_recycle_frame_loop_03ec
  4419                                  .L_tc_recycle_frame_done_03ec:
  4420 00001FF7 488D6308                	lea rsp, [rbx + 8 * 1]
  4421 00001FFB 5D                      	pop rbp	; the proc will restore it!
  4422 00001FFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4423 00001FFF C9                      	leave
  4424 00002000 C21800                  	ret AND_KILL_FRAME(1)
  4425                                  .L_lambda_simple_end_0308:	; new closure is in rax
  4426 00002003 48890425[E6130000]      	mov qword [free_var_94], rax
  4427 0000200B 48B8-                   	mov rax, sob_void
  4427 0000200D [0000000000000000] 
  4428                                  
  4429 00002015 4889C7                  	mov rdi, rax
  4430 00002018 E804420100              	call print_sexpr_if_not_void
  4431                                  
  4432 0000201D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4433 00002022 E8E8400100              	call malloc
  4434 00002027 50                      	push rax
  4435 00002028 BF00000000              	mov rdi, 8 * 0	; new rib
  4436 0000202D E8DD400100              	call malloc
  4437 00002032 50                      	push rax
  4438 00002033 BF08000000              	mov rdi, 8 * 1	; extended env
  4439 00002038 E8D2400100              	call malloc
  4440 0000203D 488B7D10                	mov rdi, ENV
  4441 00002041 BE00000000              	mov rsi, 0
  4442 00002046 BA01000000              	mov rdx, 1
  4443                                  .L_lambda_simple_env_loop_0309:	; ext_env[i + 1] <-- env[i]
  4444 0000204B 4883FE00                	cmp rsi, 0
  4445 0000204F 7410                    	je .L_lambda_simple_env_end_0309
  4446 00002051 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4447 00002055 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4448 00002059 48FFC6                  	inc rsi
  4449 0000205C 48FFC2                  	inc rdx
  4450 0000205F EBEA                    	jmp .L_lambda_simple_env_loop_0309
  4451                                  .L_lambda_simple_env_end_0309:
  4452 00002061 5B                      	pop rbx
  4453 00002062 BE00000000              	mov rsi, 0
  4454                                  .L_lambda_simple_params_loop_0309:	; copy params
  4455 00002067 4883FE00                	cmp rsi, 0
  4456 0000206B 740E                    	je .L_lambda_simple_params_end_0309
  4457 0000206D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4458 00002072 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4459 00002076 48FFC6                  	inc rsi
  4460 00002079 EBEC                    	jmp .L_lambda_simple_params_loop_0309
  4461                                  .L_lambda_simple_params_end_0309:
  4462 0000207B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4463 0000207E 4889C3                  	mov rbx, rax
  4464 00002081 58                      	pop rax
  4465 00002082 C60004                  	mov byte [rax], T_closure
  4466 00002085 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4467 00002089 48C74009[96200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0309
  4468 00002091 E99B000000              	jmp .L_lambda_simple_end_0309
  4469                                  .L_lambda_simple_code_0309:	; lambda-simple body
  4470 00002096 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4471 0000209C 740B                    	je .L_lambda_simple_arity_check_ok_0309
  4472 0000209E FF742410                	push qword [rsp + 8 * 2]
  4473 000020A2 6A01                    	push 1
  4474 000020A4 E91F400100              	jmp L_error_incorrect_arity_simple
  4475                                  .L_lambda_simple_arity_check_ok_0309:
  4476 000020A9 C8000000                	enter 0, 0
  4477                                  	; preparing a tail-call
  4478                                  	; preparing a non tail-call
  4479 000020AD 488B4520                	mov rax, PARAM(0)	; param x
  4480 000020B1 50                      	push rax
  4481 000020B2 6A01                    	push 1	; arg count
  4482 000020B4 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  4483 000020BC 803805                  	cmp byte [rax], T_undefined
  4484 000020BF 0F841D3F0100            	je L_error_fvar_undefined
  4485 000020C5 803804                  	cmp byte [rax], T_closure
  4486 000020C8 0F85983F0100            	jne L_error_non_closure
  4487 000020CE FF7001                  	push SOB_CLOSURE_ENV(rax)
  4488 000020D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4489 000020D4 50                      	push rax
  4490 000020D5 6A01                    	push 1	; arg count
  4491 000020D7 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  4492 000020DF 803805                  	cmp byte [rax], T_undefined
  4493 000020E2 0F84FA3E0100            	je L_error_fvar_undefined
  4494 000020E8 803804                  	cmp byte [rax], T_closure
  4495 000020EB 0F85753F0100            	jne L_error_non_closure
  4496 000020F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4497                                  
  4498                                  	; recycling the current frame
  4499 000020F4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4500 000020F7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4501 000020FA B905000000              	mov rcx, 1 + 4
  4502 000020FF 488B5D18                	mov rbx, COUNT
  4503 00002103 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4504 00002108 488D55F8                	lea rdx, [rbp - 8 * 1]
  4505                                  .L_tc_recycle_frame_loop_03ed:
  4506 0000210C 4883F900                	cmp rcx, 0
  4507 00002110 7413                    	je .L_tc_recycle_frame_done_03ed
  4508 00002112 488B32                  	mov rsi, qword [rdx]
  4509 00002115 488933                  	mov qword [rbx], rsi
  4510 00002118 48FFC9                  	dec rcx
  4511 0000211B 4883EB08                	sub rbx, 8 * 1
  4512 0000211F 4883EA08                	sub rdx, 8 * 1
  4513 00002123 EBE7                    	jmp .L_tc_recycle_frame_loop_03ed
  4514                                  .L_tc_recycle_frame_done_03ed:
  4515 00002125 488D6308                	lea rsp, [rbx + 8 * 1]
  4516 00002129 5D                      	pop rbp	; the proc will restore it!
  4517 0000212A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4518 0000212D C9                      	leave
  4519 0000212E C21800                  	ret AND_KILL_FRAME(1)
  4520                                  .L_lambda_simple_end_0309:	; new closure is in rax
  4521 00002131 48890425[F7130000]      	mov qword [free_var_95], rax
  4522 00002139 48B8-                   	mov rax, sob_void
  4522 0000213B [0000000000000000] 
  4523                                  
  4524 00002143 4889C7                  	mov rdi, rax
  4525 00002146 E8D6400100              	call print_sexpr_if_not_void
  4526                                  
  4527 0000214B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4528 00002150 E8BA3F0100              	call malloc
  4529 00002155 50                      	push rax
  4530 00002156 BF00000000              	mov rdi, 8 * 0	; new rib
  4531 0000215B E8AF3F0100              	call malloc
  4532 00002160 50                      	push rax
  4533 00002161 BF08000000              	mov rdi, 8 * 1	; extended env
  4534 00002166 E8A43F0100              	call malloc
  4535 0000216B 488B7D10                	mov rdi, ENV
  4536 0000216F BE00000000              	mov rsi, 0
  4537 00002174 BA01000000              	mov rdx, 1
  4538                                  .L_lambda_simple_env_loop_030a:	; ext_env[i + 1] <-- env[i]
  4539 00002179 4883FE00                	cmp rsi, 0
  4540 0000217D 7410                    	je .L_lambda_simple_env_end_030a
  4541 0000217F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4542 00002183 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4543 00002187 48FFC6                  	inc rsi
  4544 0000218A 48FFC2                  	inc rdx
  4545 0000218D EBEA                    	jmp .L_lambda_simple_env_loop_030a
  4546                                  .L_lambda_simple_env_end_030a:
  4547 0000218F 5B                      	pop rbx
  4548 00002190 BE00000000              	mov rsi, 0
  4549                                  .L_lambda_simple_params_loop_030a:	; copy params
  4550 00002195 4883FE00                	cmp rsi, 0
  4551 00002199 740E                    	je .L_lambda_simple_params_end_030a
  4552 0000219B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4553 000021A0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4554 000021A4 48FFC6                  	inc rsi
  4555 000021A7 EBEC                    	jmp .L_lambda_simple_params_loop_030a
  4556                                  .L_lambda_simple_params_end_030a:
  4557 000021A9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4558 000021AC 4889C3                  	mov rbx, rax
  4559 000021AF 58                      	pop rax
  4560 000021B0 C60004                  	mov byte [rax], T_closure
  4561 000021B3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4562 000021B7 48C74009[C4210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_030a
  4563 000021BF E99B000000              	jmp .L_lambda_simple_end_030a
  4564                                  .L_lambda_simple_code_030a:	; lambda-simple body
  4565 000021C4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4566 000021CA 740B                    	je .L_lambda_simple_arity_check_ok_030a
  4567 000021CC FF742410                	push qword [rsp + 8 * 2]
  4568 000021D0 6A01                    	push 1
  4569 000021D2 E9F13E0100              	jmp L_error_incorrect_arity_simple
  4570                                  .L_lambda_simple_arity_check_ok_030a:
  4571 000021D7 C8000000                	enter 0, 0
  4572                                  	; preparing a tail-call
  4573                                  	; preparing a non tail-call
  4574 000021DB 488B4520                	mov rax, PARAM(0)	; param x
  4575 000021DF 50                      	push rax
  4576 000021E0 6A01                    	push 1	; arg count
  4577 000021E2 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  4578 000021EA 803805                  	cmp byte [rax], T_undefined
  4579 000021ED 0F84EF3D0100            	je L_error_fvar_undefined
  4580 000021F3 803804                  	cmp byte [rax], T_closure
  4581 000021F6 0F856A3E0100            	jne L_error_non_closure
  4582 000021FC FF7001                  	push SOB_CLOSURE_ENV(rax)
  4583 000021FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  4584 00002202 50                      	push rax
  4585 00002203 6A01                    	push 1	; arg count
  4586 00002205 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  4587 0000220D 803805                  	cmp byte [rax], T_undefined
  4588 00002210 0F84CC3D0100            	je L_error_fvar_undefined
  4589 00002216 803804                  	cmp byte [rax], T_closure
  4590 00002219 0F85473E0100            	jne L_error_non_closure
  4591 0000221F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4592                                  
  4593                                  	; recycling the current frame
  4594 00002222 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4595 00002225 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4596 00002228 B905000000              	mov rcx, 1 + 4
  4597 0000222D 488B5D18                	mov rbx, COUNT
  4598 00002231 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4599 00002236 488D55F8                	lea rdx, [rbp - 8 * 1]
  4600                                  .L_tc_recycle_frame_loop_03ee:
  4601 0000223A 4883F900                	cmp rcx, 0
  4602 0000223E 7413                    	je .L_tc_recycle_frame_done_03ee
  4603 00002240 488B32                  	mov rsi, qword [rdx]
  4604 00002243 488933                  	mov qword [rbx], rsi
  4605 00002246 48FFC9                  	dec rcx
  4606 00002249 4883EB08                	sub rbx, 8 * 1
  4607 0000224D 4883EA08                	sub rdx, 8 * 1
  4608 00002251 EBE7                    	jmp .L_tc_recycle_frame_loop_03ee
  4609                                  .L_tc_recycle_frame_done_03ee:
  4610 00002253 488D6308                	lea rsp, [rbx + 8 * 1]
  4611 00002257 5D                      	pop rbp	; the proc will restore it!
  4612 00002258 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4613 0000225B C9                      	leave
  4614 0000225C C21800                  	ret AND_KILL_FRAME(1)
  4615                                  .L_lambda_simple_end_030a:	; new closure is in rax
  4616 0000225F 48890425[08140000]      	mov qword [free_var_96], rax
  4617 00002267 48B8-                   	mov rax, sob_void
  4617 00002269 [0000000000000000] 
  4618                                  
  4619 00002271 4889C7                  	mov rdi, rax
  4620 00002274 E8A83F0100              	call print_sexpr_if_not_void
  4621                                  
  4622 00002279 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4623 0000227E E88C3E0100              	call malloc
  4624 00002283 50                      	push rax
  4625 00002284 BF00000000              	mov rdi, 8 * 0	; new rib
  4626 00002289 E8813E0100              	call malloc
  4627 0000228E 50                      	push rax
  4628 0000228F BF08000000              	mov rdi, 8 * 1	; extended env
  4629 00002294 E8763E0100              	call malloc
  4630 00002299 488B7D10                	mov rdi, ENV
  4631 0000229D BE00000000              	mov rsi, 0
  4632 000022A2 BA01000000              	mov rdx, 1
  4633                                  .L_lambda_simple_env_loop_030b:	; ext_env[i + 1] <-- env[i]
  4634 000022A7 4883FE00                	cmp rsi, 0
  4635 000022AB 7410                    	je .L_lambda_simple_env_end_030b
  4636 000022AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4637 000022B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4638 000022B5 48FFC6                  	inc rsi
  4639 000022B8 48FFC2                  	inc rdx
  4640 000022BB EBEA                    	jmp .L_lambda_simple_env_loop_030b
  4641                                  .L_lambda_simple_env_end_030b:
  4642 000022BD 5B                      	pop rbx
  4643 000022BE BE00000000              	mov rsi, 0
  4644                                  .L_lambda_simple_params_loop_030b:	; copy params
  4645 000022C3 4883FE00                	cmp rsi, 0
  4646 000022C7 740E                    	je .L_lambda_simple_params_end_030b
  4647 000022C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4648 000022CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4649 000022D2 48FFC6                  	inc rsi
  4650 000022D5 EBEC                    	jmp .L_lambda_simple_params_loop_030b
  4651                                  .L_lambda_simple_params_end_030b:
  4652 000022D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4653 000022DA 4889C3                  	mov rbx, rax
  4654 000022DD 58                      	pop rax
  4655 000022DE C60004                  	mov byte [rax], T_closure
  4656 000022E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4657 000022E5 48C74009[F2220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_030b
  4658 000022ED E99B000000              	jmp .L_lambda_simple_end_030b
  4659                                  .L_lambda_simple_code_030b:	; lambda-simple body
  4660 000022F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4661 000022F8 740B                    	je .L_lambda_simple_arity_check_ok_030b
  4662 000022FA FF742410                	push qword [rsp + 8 * 2]
  4663 000022FE 6A01                    	push 1
  4664 00002300 E9C33D0100              	jmp L_error_incorrect_arity_simple
  4665                                  .L_lambda_simple_arity_check_ok_030b:
  4666 00002305 C8000000                	enter 0, 0
  4667                                  	; preparing a tail-call
  4668                                  	; preparing a non tail-call
  4669 00002309 488B4520                	mov rax, PARAM(0)	; param x
  4670 0000230D 50                      	push rax
  4671 0000230E 6A01                    	push 1	; arg count
  4672 00002310 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  4673 00002318 803805                  	cmp byte [rax], T_undefined
  4674 0000231B 0F84C13C0100            	je L_error_fvar_undefined
  4675 00002321 803804                  	cmp byte [rax], T_closure
  4676 00002324 0F853C3D0100            	jne L_error_non_closure
  4677 0000232A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4678 0000232D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4679 00002330 50                      	push rax
  4680 00002331 6A01                    	push 1	; arg count
  4681 00002333 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  4682 0000233B 803805                  	cmp byte [rax], T_undefined
  4683 0000233E 0F849E3C0100            	je L_error_fvar_undefined
  4684 00002344 803804                  	cmp byte [rax], T_closure
  4685 00002347 0F85193D0100            	jne L_error_non_closure
  4686 0000234D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4687                                  
  4688                                  	; recycling the current frame
  4689 00002350 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4690 00002353 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4691 00002356 B905000000              	mov rcx, 1 + 4
  4692 0000235B 488B5D18                	mov rbx, COUNT
  4693 0000235F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4694 00002364 488D55F8                	lea rdx, [rbp - 8 * 1]
  4695                                  .L_tc_recycle_frame_loop_03ef:
  4696 00002368 4883F900                	cmp rcx, 0
  4697 0000236C 7413                    	je .L_tc_recycle_frame_done_03ef
  4698 0000236E 488B32                  	mov rsi, qword [rdx]
  4699 00002371 488933                  	mov qword [rbx], rsi
  4700 00002374 48FFC9                  	dec rcx
  4701 00002377 4883EB08                	sub rbx, 8 * 1
  4702 0000237B 4883EA08                	sub rdx, 8 * 1
  4703 0000237F EBE7                    	jmp .L_tc_recycle_frame_loop_03ef
  4704                                  .L_tc_recycle_frame_done_03ef:
  4705 00002381 488D6308                	lea rsp, [rbx + 8 * 1]
  4706 00002385 5D                      	pop rbp	; the proc will restore it!
  4707 00002386 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4708 00002389 C9                      	leave
  4709 0000238A C21800                  	ret AND_KILL_FRAME(1)
  4710                                  .L_lambda_simple_end_030b:	; new closure is in rax
  4711 0000238D 48890425[19140000]      	mov qword [free_var_97], rax
  4712 00002395 48B8-                   	mov rax, sob_void
  4712 00002397 [0000000000000000] 
  4713                                  
  4714 0000239F 4889C7                  	mov rdi, rax
  4715 000023A2 E87A3E0100              	call print_sexpr_if_not_void
  4716                                  
  4717 000023A7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4718 000023AC E85E3D0100              	call malloc
  4719 000023B1 50                      	push rax
  4720 000023B2 BF00000000              	mov rdi, 8 * 0	; new rib
  4721 000023B7 E8533D0100              	call malloc
  4722 000023BC 50                      	push rax
  4723 000023BD BF08000000              	mov rdi, 8 * 1	; extended env
  4724 000023C2 E8483D0100              	call malloc
  4725 000023C7 488B7D10                	mov rdi, ENV
  4726 000023CB BE00000000              	mov rsi, 0
  4727 000023D0 BA01000000              	mov rdx, 1
  4728                                  .L_lambda_simple_env_loop_030c:	; ext_env[i + 1] <-- env[i]
  4729 000023D5 4883FE00                	cmp rsi, 0
  4730 000023D9 7410                    	je .L_lambda_simple_env_end_030c
  4731 000023DB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4732 000023DF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4733 000023E3 48FFC6                  	inc rsi
  4734 000023E6 48FFC2                  	inc rdx
  4735 000023E9 EBEA                    	jmp .L_lambda_simple_env_loop_030c
  4736                                  .L_lambda_simple_env_end_030c:
  4737 000023EB 5B                      	pop rbx
  4738 000023EC BE00000000              	mov rsi, 0
  4739                                  .L_lambda_simple_params_loop_030c:	; copy params
  4740 000023F1 4883FE00                	cmp rsi, 0
  4741 000023F5 740E                    	je .L_lambda_simple_params_end_030c
  4742 000023F7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4743 000023FC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4744 00002400 48FFC6                  	inc rsi
  4745 00002403 EBEC                    	jmp .L_lambda_simple_params_loop_030c
  4746                                  .L_lambda_simple_params_end_030c:
  4747 00002405 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4748 00002408 4889C3                  	mov rbx, rax
  4749 0000240B 58                      	pop rax
  4750 0000240C C60004                  	mov byte [rax], T_closure
  4751 0000240F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4752 00002413 48C74009[20240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_030c
  4753 0000241B E99B000000              	jmp .L_lambda_simple_end_030c
  4754                                  .L_lambda_simple_code_030c:	; lambda-simple body
  4755 00002420 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4756 00002426 740B                    	je .L_lambda_simple_arity_check_ok_030c
  4757 00002428 FF742410                	push qword [rsp + 8 * 2]
  4758 0000242C 6A01                    	push 1
  4759 0000242E E9953C0100              	jmp L_error_incorrect_arity_simple
  4760                                  .L_lambda_simple_arity_check_ok_030c:
  4761 00002433 C8000000                	enter 0, 0
  4762                                  	; preparing a tail-call
  4763                                  	; preparing a non tail-call
  4764 00002437 488B4520                	mov rax, PARAM(0)	; param x
  4765 0000243B 50                      	push rax
  4766 0000243C 6A01                    	push 1	; arg count
  4767 0000243E 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  4768 00002446 803805                  	cmp byte [rax], T_undefined
  4769 00002449 0F84933B0100            	je L_error_fvar_undefined
  4770 0000244F 803804                  	cmp byte [rax], T_closure
  4771 00002452 0F850E3C0100            	jne L_error_non_closure
  4772 00002458 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4773 0000245B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4774 0000245E 50                      	push rax
  4775 0000245F 6A01                    	push 1	; arg count
  4776 00002461 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  4777 00002469 803805                  	cmp byte [rax], T_undefined
  4778 0000246C 0F84703B0100            	je L_error_fvar_undefined
  4779 00002472 803804                  	cmp byte [rax], T_closure
  4780 00002475 0F85EB3B0100            	jne L_error_non_closure
  4781 0000247B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4782                                  
  4783                                  	; recycling the current frame
  4784 0000247E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4785 00002481 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4786 00002484 B905000000              	mov rcx, 1 + 4
  4787 00002489 488B5D18                	mov rbx, COUNT
  4788 0000248D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4789 00002492 488D55F8                	lea rdx, [rbp - 8 * 1]
  4790                                  .L_tc_recycle_frame_loop_03f0:
  4791 00002496 4883F900                	cmp rcx, 0
  4792 0000249A 7413                    	je .L_tc_recycle_frame_done_03f0
  4793 0000249C 488B32                  	mov rsi, qword [rdx]
  4794 0000249F 488933                  	mov qword [rbx], rsi
  4795 000024A2 48FFC9                  	dec rcx
  4796 000024A5 4883EB08                	sub rbx, 8 * 1
  4797 000024A9 4883EA08                	sub rdx, 8 * 1
  4798 000024AD EBE7                    	jmp .L_tc_recycle_frame_loop_03f0
  4799                                  .L_tc_recycle_frame_done_03f0:
  4800 000024AF 488D6308                	lea rsp, [rbx + 8 * 1]
  4801 000024B3 5D                      	pop rbp	; the proc will restore it!
  4802 000024B4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4803 000024B7 C9                      	leave
  4804 000024B8 C21800                  	ret AND_KILL_FRAME(1)
  4805                                  .L_lambda_simple_end_030c:	; new closure is in rax
  4806 000024BB 48890425[2A140000]      	mov qword [free_var_98], rax
  4807 000024C3 48B8-                   	mov rax, sob_void
  4807 000024C5 [0000000000000000] 
  4808                                  
  4809 000024CD 4889C7                  	mov rdi, rax
  4810 000024D0 E84C3D0100              	call print_sexpr_if_not_void
  4811                                  
  4812 000024D5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4813 000024DA E8303C0100              	call malloc
  4814 000024DF 50                      	push rax
  4815 000024E0 BF00000000              	mov rdi, 8 * 0	; new rib
  4816 000024E5 E8253C0100              	call malloc
  4817 000024EA 50                      	push rax
  4818 000024EB BF08000000              	mov rdi, 8 * 1	; extended env
  4819 000024F0 E81A3C0100              	call malloc
  4820 000024F5 488B7D10                	mov rdi, ENV
  4821 000024F9 BE00000000              	mov rsi, 0
  4822 000024FE BA01000000              	mov rdx, 1
  4823                                  .L_lambda_simple_env_loop_030d:	; ext_env[i + 1] <-- env[i]
  4824 00002503 4883FE00                	cmp rsi, 0
  4825 00002507 7410                    	je .L_lambda_simple_env_end_030d
  4826 00002509 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4827 0000250D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4828 00002511 48FFC6                  	inc rsi
  4829 00002514 48FFC2                  	inc rdx
  4830 00002517 EBEA                    	jmp .L_lambda_simple_env_loop_030d
  4831                                  .L_lambda_simple_env_end_030d:
  4832 00002519 5B                      	pop rbx
  4833 0000251A BE00000000              	mov rsi, 0
  4834                                  .L_lambda_simple_params_loop_030d:	; copy params
  4835 0000251F 4883FE00                	cmp rsi, 0
  4836 00002523 740E                    	je .L_lambda_simple_params_end_030d
  4837 00002525 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4838 0000252A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4839 0000252E 48FFC6                  	inc rsi
  4840 00002531 EBEC                    	jmp .L_lambda_simple_params_loop_030d
  4841                                  .L_lambda_simple_params_end_030d:
  4842 00002533 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4843 00002536 4889C3                  	mov rbx, rax
  4844 00002539 58                      	pop rax
  4845 0000253A C60004                  	mov byte [rax], T_closure
  4846 0000253D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4847 00002541 48C74009[4E250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_030d
  4848 00002549 E99B000000              	jmp .L_lambda_simple_end_030d
  4849                                  .L_lambda_simple_code_030d:	; lambda-simple body
  4850 0000254E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4851 00002554 740B                    	je .L_lambda_simple_arity_check_ok_030d
  4852 00002556 FF742410                	push qword [rsp + 8 * 2]
  4853 0000255A 6A01                    	push 1
  4854 0000255C E9673B0100              	jmp L_error_incorrect_arity_simple
  4855                                  .L_lambda_simple_arity_check_ok_030d:
  4856 00002561 C8000000                	enter 0, 0
  4857                                  	; preparing a tail-call
  4858                                  	; preparing a non tail-call
  4859 00002565 488B4520                	mov rax, PARAM(0)	; param x
  4860 00002569 50                      	push rax
  4861 0000256A 6A01                    	push 1	; arg count
  4862 0000256C 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  4863 00002574 803805                  	cmp byte [rax], T_undefined
  4864 00002577 0F84653A0100            	je L_error_fvar_undefined
  4865 0000257D 803804                  	cmp byte [rax], T_closure
  4866 00002580 0F85E03A0100            	jne L_error_non_closure
  4867 00002586 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4868 00002589 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4869 0000258C 50                      	push rax
  4870 0000258D 6A01                    	push 1	; arg count
  4871 0000258F 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  4872 00002597 803805                  	cmp byte [rax], T_undefined
  4873 0000259A 0F84423A0100            	je L_error_fvar_undefined
  4874 000025A0 803804                  	cmp byte [rax], T_closure
  4875 000025A3 0F85BD3A0100            	jne L_error_non_closure
  4876 000025A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4877                                  
  4878                                  	; recycling the current frame
  4879 000025AC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4880 000025AF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4881 000025B2 B905000000              	mov rcx, 1 + 4
  4882 000025B7 488B5D18                	mov rbx, COUNT
  4883 000025BB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4884 000025C0 488D55F8                	lea rdx, [rbp - 8 * 1]
  4885                                  .L_tc_recycle_frame_loop_03f1:
  4886 000025C4 4883F900                	cmp rcx, 0
  4887 000025C8 7413                    	je .L_tc_recycle_frame_done_03f1
  4888 000025CA 488B32                  	mov rsi, qword [rdx]
  4889 000025CD 488933                  	mov qword [rbx], rsi
  4890 000025D0 48FFC9                  	dec rcx
  4891 000025D3 4883EB08                	sub rbx, 8 * 1
  4892 000025D7 4883EA08                	sub rdx, 8 * 1
  4893 000025DB EBE7                    	jmp .L_tc_recycle_frame_loop_03f1
  4894                                  .L_tc_recycle_frame_done_03f1:
  4895 000025DD 488D6308                	lea rsp, [rbx + 8 * 1]
  4896 000025E1 5D                      	pop rbp	; the proc will restore it!
  4897 000025E2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4898 000025E5 C9                      	leave
  4899 000025E6 C21800                  	ret AND_KILL_FRAME(1)
  4900                                  .L_lambda_simple_end_030d:	; new closure is in rax
  4901 000025E9 48890425[3B140000]      	mov qword [free_var_99], rax
  4902 000025F1 48B8-                   	mov rax, sob_void
  4902 000025F3 [0000000000000000] 
  4903                                  
  4904 000025FB 4889C7                  	mov rdi, rax
  4905 000025FE E81E3C0100              	call print_sexpr_if_not_void
  4906                                  
  4907 00002603 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4908 00002608 E8023B0100              	call malloc
  4909 0000260D 50                      	push rax
  4910 0000260E BF00000000              	mov rdi, 8 * 0	; new rib
  4911 00002613 E8F73A0100              	call malloc
  4912 00002618 50                      	push rax
  4913 00002619 BF08000000              	mov rdi, 8 * 1	; extended env
  4914 0000261E E8EC3A0100              	call malloc
  4915 00002623 488B7D10                	mov rdi, ENV
  4916 00002627 BE00000000              	mov rsi, 0
  4917 0000262C BA01000000              	mov rdx, 1
  4918                                  .L_lambda_simple_env_loop_030e:	; ext_env[i + 1] <-- env[i]
  4919 00002631 4883FE00                	cmp rsi, 0
  4920 00002635 7410                    	je .L_lambda_simple_env_end_030e
  4921 00002637 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4922 0000263B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4923 0000263F 48FFC6                  	inc rsi
  4924 00002642 48FFC2                  	inc rdx
  4925 00002645 EBEA                    	jmp .L_lambda_simple_env_loop_030e
  4926                                  .L_lambda_simple_env_end_030e:
  4927 00002647 5B                      	pop rbx
  4928 00002648 BE00000000              	mov rsi, 0
  4929                                  .L_lambda_simple_params_loop_030e:	; copy params
  4930 0000264D 4883FE00                	cmp rsi, 0
  4931 00002651 740E                    	je .L_lambda_simple_params_end_030e
  4932 00002653 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4933 00002658 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4934 0000265C 48FFC6                  	inc rsi
  4935 0000265F EBEC                    	jmp .L_lambda_simple_params_loop_030e
  4936                                  .L_lambda_simple_params_end_030e:
  4937 00002661 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4938 00002664 4889C3                  	mov rbx, rax
  4939 00002667 58                      	pop rax
  4940 00002668 C60004                  	mov byte [rax], T_closure
  4941 0000266B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4942 0000266F 48C74009[7C260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_030e
  4943 00002677 E99B000000              	jmp .L_lambda_simple_end_030e
  4944                                  .L_lambda_simple_code_030e:	; lambda-simple body
  4945 0000267C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4946 00002682 740B                    	je .L_lambda_simple_arity_check_ok_030e
  4947 00002684 FF742410                	push qword [rsp + 8 * 2]
  4948 00002688 6A01                    	push 1
  4949 0000268A E9393A0100              	jmp L_error_incorrect_arity_simple
  4950                                  .L_lambda_simple_arity_check_ok_030e:
  4951 0000268F C8000000                	enter 0, 0
  4952                                  	; preparing a tail-call
  4953                                  	; preparing a non tail-call
  4954 00002693 488B4520                	mov rax, PARAM(0)	; param x
  4955 00002697 50                      	push rax
  4956 00002698 6A01                    	push 1	; arg count
  4957 0000269A 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  4958 000026A2 803805                  	cmp byte [rax], T_undefined
  4959 000026A5 0F8437390100            	je L_error_fvar_undefined
  4960 000026AB 803804                  	cmp byte [rax], T_closure
  4961 000026AE 0F85B2390100            	jne L_error_non_closure
  4962 000026B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4963 000026B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4964 000026BA 50                      	push rax
  4965 000026BB 6A01                    	push 1	; arg count
  4966 000026BD 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  4967 000026C5 803805                  	cmp byte [rax], T_undefined
  4968 000026C8 0F8414390100            	je L_error_fvar_undefined
  4969 000026CE 803804                  	cmp byte [rax], T_closure
  4970 000026D1 0F858F390100            	jne L_error_non_closure
  4971 000026D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4972                                  
  4973                                  	; recycling the current frame
  4974 000026DA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4975 000026DD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4976 000026E0 B905000000              	mov rcx, 1 + 4
  4977 000026E5 488B5D18                	mov rbx, COUNT
  4978 000026E9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4979 000026EE 488D55F8                	lea rdx, [rbp - 8 * 1]
  4980                                  .L_tc_recycle_frame_loop_03f2:
  4981 000026F2 4883F900                	cmp rcx, 0
  4982 000026F6 7413                    	je .L_tc_recycle_frame_done_03f2
  4983 000026F8 488B32                  	mov rsi, qword [rdx]
  4984 000026FB 488933                  	mov qword [rbx], rsi
  4985 000026FE 48FFC9                  	dec rcx
  4986 00002701 4883EB08                	sub rbx, 8 * 1
  4987 00002705 4883EA08                	sub rdx, 8 * 1
  4988 00002709 EBE7                    	jmp .L_tc_recycle_frame_loop_03f2
  4989                                  .L_tc_recycle_frame_done_03f2:
  4990 0000270B 488D6308                	lea rsp, [rbx + 8 * 1]
  4991 0000270F 5D                      	pop rbp	; the proc will restore it!
  4992 00002710 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4993 00002713 C9                      	leave
  4994 00002714 C21800                  	ret AND_KILL_FRAME(1)
  4995                                  .L_lambda_simple_end_030e:	; new closure is in rax
  4996 00002717 48890425[4C140000]      	mov qword [free_var_100], rax
  4997 0000271F 48B8-                   	mov rax, sob_void
  4997 00002721 [0000000000000000] 
  4998                                  
  4999 00002729 4889C7                  	mov rdi, rax
  5000 0000272C E8F03A0100              	call print_sexpr_if_not_void
  5001                                  
  5002 00002731 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5003 00002736 E8D4390100              	call malloc
  5004 0000273B 50                      	push rax
  5005 0000273C BF00000000              	mov rdi, 8 * 0	; new rib
  5006 00002741 E8C9390100              	call malloc
  5007 00002746 50                      	push rax
  5008 00002747 BF08000000              	mov rdi, 8 * 1	; extended env
  5009 0000274C E8BE390100              	call malloc
  5010 00002751 488B7D10                	mov rdi, ENV
  5011 00002755 BE00000000              	mov rsi, 0
  5012 0000275A BA01000000              	mov rdx, 1
  5013                                  .L_lambda_simple_env_loop_030f:	; ext_env[i + 1] <-- env[i]
  5014 0000275F 4883FE00                	cmp rsi, 0
  5015 00002763 7410                    	je .L_lambda_simple_env_end_030f
  5016 00002765 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5017 00002769 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5018 0000276D 48FFC6                  	inc rsi
  5019 00002770 48FFC2                  	inc rdx
  5020 00002773 EBEA                    	jmp .L_lambda_simple_env_loop_030f
  5021                                  .L_lambda_simple_env_end_030f:
  5022 00002775 5B                      	pop rbx
  5023 00002776 BE00000000              	mov rsi, 0
  5024                                  .L_lambda_simple_params_loop_030f:	; copy params
  5025 0000277B 4883FE00                	cmp rsi, 0
  5026 0000277F 740E                    	je .L_lambda_simple_params_end_030f
  5027 00002781 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5028 00002786 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5029 0000278A 48FFC6                  	inc rsi
  5030 0000278D EBEC                    	jmp .L_lambda_simple_params_loop_030f
  5031                                  .L_lambda_simple_params_end_030f:
  5032 0000278F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5033 00002792 4889C3                  	mov rbx, rax
  5034 00002795 58                      	pop rax
  5035 00002796 C60004                  	mov byte [rax], T_closure
  5036 00002799 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5037 0000279D 48C74009[AA270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_030f
  5038 000027A5 E99B000000              	jmp .L_lambda_simple_end_030f
  5039                                  .L_lambda_simple_code_030f:	; lambda-simple body
  5040 000027AA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5041 000027B0 740B                    	je .L_lambda_simple_arity_check_ok_030f
  5042 000027B2 FF742410                	push qword [rsp + 8 * 2]
  5043 000027B6 6A01                    	push 1
  5044 000027B8 E90B390100              	jmp L_error_incorrect_arity_simple
  5045                                  .L_lambda_simple_arity_check_ok_030f:
  5046 000027BD C8000000                	enter 0, 0
  5047                                  	; preparing a tail-call
  5048                                  	; preparing a non tail-call
  5049 000027C1 488B4520                	mov rax, PARAM(0)	; param x
  5050 000027C5 50                      	push rax
  5051 000027C6 6A01                    	push 1	; arg count
  5052 000027C8 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  5053 000027D0 803805                  	cmp byte [rax], T_undefined
  5054 000027D3 0F8409380100            	je L_error_fvar_undefined
  5055 000027D9 803804                  	cmp byte [rax], T_closure
  5056 000027DC 0F8584380100            	jne L_error_non_closure
  5057 000027E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5058 000027E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5059 000027E8 50                      	push rax
  5060 000027E9 6A01                    	push 1	; arg count
  5061 000027EB 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  5062 000027F3 803805                  	cmp byte [rax], T_undefined
  5063 000027F6 0F84E6370100            	je L_error_fvar_undefined
  5064 000027FC 803804                  	cmp byte [rax], T_closure
  5065 000027FF 0F8561380100            	jne L_error_non_closure
  5066 00002805 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5067                                  
  5068                                  	; recycling the current frame
  5069 00002808 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5070 0000280B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5071 0000280E B905000000              	mov rcx, 1 + 4
  5072 00002813 488B5D18                	mov rbx, COUNT
  5073 00002817 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5074 0000281C 488D55F8                	lea rdx, [rbp - 8 * 1]
  5075                                  .L_tc_recycle_frame_loop_03f3:
  5076 00002820 4883F900                	cmp rcx, 0
  5077 00002824 7413                    	je .L_tc_recycle_frame_done_03f3
  5078 00002826 488B32                  	mov rsi, qword [rdx]
  5079 00002829 488933                  	mov qword [rbx], rsi
  5080 0000282C 48FFC9                  	dec rcx
  5081 0000282F 4883EB08                	sub rbx, 8 * 1
  5082 00002833 4883EA08                	sub rdx, 8 * 1
  5083 00002837 EBE7                    	jmp .L_tc_recycle_frame_loop_03f3
  5084                                  .L_tc_recycle_frame_done_03f3:
  5085 00002839 488D6308                	lea rsp, [rbx + 8 * 1]
  5086 0000283D 5D                      	pop rbp	; the proc will restore it!
  5087 0000283E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5088 00002841 C9                      	leave
  5089 00002842 C21800                  	ret AND_KILL_FRAME(1)
  5090                                  .L_lambda_simple_end_030f:	; new closure is in rax
  5091 00002845 48890425[5D140000]      	mov qword [free_var_101], rax
  5092 0000284D 48B8-                   	mov rax, sob_void
  5092 0000284F [0000000000000000] 
  5093                                  
  5094 00002857 4889C7                  	mov rdi, rax
  5095 0000285A E8C2390100              	call print_sexpr_if_not_void
  5096                                  
  5097 0000285F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5098 00002864 E8A6380100              	call malloc
  5099 00002869 50                      	push rax
  5100 0000286A BF00000000              	mov rdi, 8 * 0	; new rib
  5101 0000286F E89B380100              	call malloc
  5102 00002874 50                      	push rax
  5103 00002875 BF08000000              	mov rdi, 8 * 1	; extended env
  5104 0000287A E890380100              	call malloc
  5105 0000287F 488B7D10                	mov rdi, ENV
  5106 00002883 BE00000000              	mov rsi, 0
  5107 00002888 BA01000000              	mov rdx, 1
  5108                                  .L_lambda_simple_env_loop_0310:	; ext_env[i + 1] <-- env[i]
  5109 0000288D 4883FE00                	cmp rsi, 0
  5110 00002891 7410                    	je .L_lambda_simple_env_end_0310
  5111 00002893 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5112 00002897 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5113 0000289B 48FFC6                  	inc rsi
  5114 0000289E 48FFC2                  	inc rdx
  5115 000028A1 EBEA                    	jmp .L_lambda_simple_env_loop_0310
  5116                                  .L_lambda_simple_env_end_0310:
  5117 000028A3 5B                      	pop rbx
  5118 000028A4 BE00000000              	mov rsi, 0
  5119                                  .L_lambda_simple_params_loop_0310:	; copy params
  5120 000028A9 4883FE00                	cmp rsi, 0
  5121 000028AD 740E                    	je .L_lambda_simple_params_end_0310
  5122 000028AF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5123 000028B4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5124 000028B8 48FFC6                  	inc rsi
  5125 000028BB EBEC                    	jmp .L_lambda_simple_params_loop_0310
  5126                                  .L_lambda_simple_params_end_0310:
  5127 000028BD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5128 000028C0 4889C3                  	mov rbx, rax
  5129 000028C3 58                      	pop rax
  5130 000028C4 C60004                  	mov byte [rax], T_closure
  5131 000028C7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5132 000028CB 48C74009[D8280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0310
  5133 000028D3 E90D010000              	jmp .L_lambda_simple_end_0310
  5134                                  .L_lambda_simple_code_0310:	; lambda-simple body
  5135 000028D8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5136 000028DE 740B                    	je .L_lambda_simple_arity_check_ok_0310
  5137 000028E0 FF742410                	push qword [rsp + 8 * 2]
  5138 000028E4 6A01                    	push 1
  5139 000028E6 E9DD370100              	jmp L_error_incorrect_arity_simple
  5140                                  .L_lambda_simple_arity_check_ok_0310:
  5141 000028EB C8000000                	enter 0, 0
  5142                                  	; preparing a non tail-call
  5143 000028EF 488B4520                	mov rax, PARAM(0)	; param e
  5144 000028F3 50                      	push rax
  5145 000028F4 6A01                    	push 1	; arg count
  5146 000028F6 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  5147 000028FE 803805                  	cmp byte [rax], T_undefined
  5148 00002901 0F84DB360100            	je L_error_fvar_undefined
  5149 00002907 803804                  	cmp byte [rax], T_closure
  5150 0000290A 0F8556370100            	jne L_error_non_closure
  5151 00002910 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5152 00002913 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5153 00002916 483D[02000000]          	cmp rax, sob_boolean_false
  5154 0000291C 0F85BF000000            	jne .L_or_end_0035
  5155                                  	; preparing a non tail-call
  5156 00002922 488B4520                	mov rax, PARAM(0)	; param e
  5157 00002926 50                      	push rax
  5158 00002927 6A01                    	push 1	; arg count
  5159 00002929 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
  5160 00002931 803805                  	cmp byte [rax], T_undefined
  5161 00002934 0F84A8360100            	je L_error_fvar_undefined
  5162 0000293A 803804                  	cmp byte [rax], T_closure
  5163 0000293D 0F8523370100            	jne L_error_non_closure
  5164 00002943 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5165 00002946 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5166 00002949 483D[02000000]          	cmp rax, sob_boolean_false
  5167 0000294F 0F8482000000            	je .L_if_else_021d
  5168                                  	; preparing a tail-call
  5169                                  	; preparing a non tail-call
  5170 00002955 488B4520                	mov rax, PARAM(0)	; param e
  5171 00002959 50                      	push rax
  5172 0000295A 6A01                    	push 1	; arg count
  5173 0000295C 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  5174 00002964 803805                  	cmp byte [rax], T_undefined
  5175 00002967 0F8475360100            	je L_error_fvar_undefined
  5176 0000296D 803804                  	cmp byte [rax], T_closure
  5177 00002970 0F85F0360100            	jne L_error_non_closure
  5178 00002976 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5179 00002979 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5180 0000297C 50                      	push rax
  5181 0000297D 6A01                    	push 1	; arg count
  5182 0000297F 488B0425[6E140000]      	mov rax, qword [free_var_102]	; free var list?
  5183 00002987 803805                  	cmp byte [rax], T_undefined
  5184 0000298A 0F8452360100            	je L_error_fvar_undefined
  5185 00002990 803804                  	cmp byte [rax], T_closure
  5186 00002993 0F85CD360100            	jne L_error_non_closure
  5187 00002999 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5188                                  
  5189                                  	; recycling the current frame
  5190 0000299C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5191 0000299F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5192 000029A2 B905000000              	mov rcx, 1 + 4
  5193 000029A7 488B5D18                	mov rbx, COUNT
  5194 000029AB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5195 000029B0 488D55F8                	lea rdx, [rbp - 8 * 1]
  5196                                  .L_tc_recycle_frame_loop_03f4:
  5197 000029B4 4883F900                	cmp rcx, 0
  5198 000029B8 7413                    	je .L_tc_recycle_frame_done_03f4
  5199 000029BA 488B32                  	mov rsi, qword [rdx]
  5200 000029BD 488933                  	mov qword [rbx], rsi
  5201 000029C0 48FFC9                  	dec rcx
  5202 000029C3 4883EB08                	sub rbx, 8 * 1
  5203 000029C7 4883EA08                	sub rdx, 8 * 1
  5204 000029CB EBE7                    	jmp .L_tc_recycle_frame_loop_03f4
  5205                                  .L_tc_recycle_frame_done_03f4:
  5206 000029CD 488D6308                	lea rsp, [rbx + 8 * 1]
  5207 000029D1 5D                      	pop rbp	; the proc will restore it!
  5208 000029D2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5209 000029D5 EB0A                    	jmp .L_if_end_021d
  5210                                  .L_if_else_021d:
  5211 000029D7 48B8-                   	mov rax, L_constants + 2
  5211 000029D9 [0200000000000000] 
  5212                                  .L_if_end_021d:
  5213                                  .L_or_end_0035:
  5214 000029E1 C9                      	leave
  5215 000029E2 C21800                  	ret AND_KILL_FRAME(1)
  5216                                  .L_lambda_simple_end_0310:	; new closure is in rax
  5217 000029E5 48890425[6E140000]      	mov qword [free_var_102], rax
  5218 000029ED 48B8-                   	mov rax, sob_void
  5218 000029EF [0000000000000000] 
  5219                                  
  5220 000029F7 4889C7                  	mov rdi, rax
  5221 000029FA E822380100              	call print_sexpr_if_not_void
  5222                                  
  5223 000029FF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5224 00002A04 E806370100              	call malloc
  5225 00002A09 50                      	push rax
  5226 00002A0A BF00000000              	mov rdi, 8 * 0	; new rib
  5227 00002A0F E8FB360100              	call malloc
  5228 00002A14 50                      	push rax
  5229 00002A15 BF08000000              	mov rdi, 8 * 1	; extended env
  5230 00002A1A E8F0360100              	call malloc
  5231 00002A1F 488B7D10                	mov rdi, ENV
  5232 00002A23 BE00000000              	mov rsi, 0
  5233 00002A28 BA01000000              	mov rdx, 1
  5234                                  .L_lambda_opt_env_loop_0065:	; ext_env[i + 1] <-- env[i]
  5235 00002A2D 4883FE00                	cmp rsi, 0
  5236 00002A31 7410                    	je .L_lambda_opt_env_end_0065
  5237 00002A33 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5238 00002A37 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5239 00002A3B 48FFC6                  	inc rsi
  5240 00002A3E 48FFC2                  	inc rdx
  5241 00002A41 EBEA                    	jmp .L_lambda_opt_env_loop_0065
  5242                                  .L_lambda_opt_env_end_0065:
  5243 00002A43 5B                      	pop rbx
  5244 00002A44 BE00000000              	mov rsi, 0
  5245                                  .L_lambda_opt_params_loop_0065:	; copy params
  5246 00002A49 4883FE00                	cmp rsi, 0
  5247 00002A4D 740E                    	je .L_lambda_opt_params_end_0065
  5248 00002A4F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5249 00002A54 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5250 00002A58 48FFC6                  	inc rsi
  5251 00002A5B EBEC                    	jmp .L_lambda_opt_params_loop_0065
  5252                                  .L_lambda_opt_params_end_0065:
  5253 00002A5D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5254 00002A60 4889C3                  	mov rbx, rax
  5255 00002A63 58                      	pop rax
  5256 00002A64 C60004                  	mov byte [rax], T_closure
  5257 00002A67 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5258 00002A6B 48C74009[782A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0065
  5259 00002A73 E956010000              	jmp .L_lambda_opt_end_0065
  5260                                  .L_lambda_opt_code_0065:	; lambda-opt body
  5261 00002A78 48837C241000            	cmp qword [rsp + 8 * 2], 0
  5262 00002A7E 0F8404010000            	je .L_lambda_opt_arity_check_exact_0065
  5263 00002A84 48837C241000            	cmp qword [rsp + 8 * 2], 0
  5264 00002A8A 7F0B                    	jg .L_lambda_opt_arity_check_more_0065
  5265 00002A8C FF742410                	push qword [rsp + 8 * 2]
  5266 00002A90 6A00                    	push 0
  5267 00002A92 E945360100              	jmp L_error_incorrect_arity_opt
  5268                                  .L_lambda_opt_arity_check_more_0065:
  5269 00002A97 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  5270 00002A9C 41B900000000            	mov r9 , 0
  5271 00002AA2 4989E7                  	mov r15, rsp
  5272 00002AA5 4D29C8                  	sub r8, r9
  5273 00002AA8 41B900000000            	mov r9, 0
  5274 00002AAE 498D5F10                	lea rbx, [r15 + 8 * 2]
  5275 00002AB2 498B4710                	mov rax, qword [r15 + 8 * 2]
  5276 00002AB6 486BC008                	imul rax, 8
  5277 00002ABA 4801C3                  	add rbx, rax
  5278 00002ABD 488B13                  	mov rdx , qword [rbx]
  5279 00002AC0 4989DA                  	mov r10 , rbx
  5280 00002AC3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
  5281 00002AC8 52                      	push rdx
  5282 00002AC9 53                      	push rbx
  5283 00002ACA 4150                    	push r8
  5284 00002ACC 4151                    	push r9
  5285 00002ACE 4152                    	push r10
  5286 00002AD0 4157                    	push r15
  5287 00002AD2 E838360100              	call malloc
  5288 00002AD7 415F                    	pop r15
  5289 00002AD9 415A                    	pop r10
  5290 00002ADB 4159                    	pop r9
  5291 00002ADD 4158                    	pop r8
  5292 00002ADF 5B                      	pop rbx
  5293 00002AE0 5A                      	pop rdx
  5294 00002AE1 C60021                  	mov byte qword [rax], T_pair
  5295 00002AE4 48895001                	mov SOB_PAIR_CAR(rax), rdx
  5296 00002AE8 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
  5297 00002AF0 498902                  	mov qword [r10], rax
  5298 00002AF3 49FFC1                  	inc r9
  5299 00002AF6 4883EB08                	sub rbx, 8
  5300 00002AFA 4D39C1                  	cmp r9, r8
  5301 00002AFD 743E                    	je .L_lambda_opt_stack_shrink_loop_01f7
  5302                                  .L_lambda_opt_stack_shrink_loop_01f6:
  5303 00002AFF 488B13                  	mov rdx, qword [rbx]
  5304 00002B02 53                      	push rbx
  5305 00002B03 4150                    	push r8
  5306 00002B05 4151                    	push r9
  5307 00002B07 4152                    	push r10
  5308 00002B09 4157                    	push r15
  5309 00002B0B 52                      	push rdx
  5310 00002B0C BF11000000              	mov rdi, (1 + 8 + 8)
  5311 00002B11 E8F9350100              	call malloc
  5312 00002B16 5A                      	pop rdx
  5313 00002B17 415F                    	pop r15
  5314 00002B19 415A                    	pop r10
  5315 00002B1B 4159                    	pop r9
  5316 00002B1D 4158                    	pop r8
  5317 00002B1F 5B                      	pop rbx
  5318 00002B20 C60021                  	mov byte [rax], T_pair
  5319 00002B23 48895001                	mov SOB_PAIR_CAR(rax), rdx
  5320 00002B27 4D8B32                  	mov r14, qword [r10]
  5321 00002B2A 4C897009                	mov SOB_PAIR_CDR(rax), r14
  5322 00002B2E 498902                  	mov qword [r10], rax
  5323 00002B31 49FFC1                  	inc r9
  5324 00002B34 4883EB08                	sub rbx, 8
  5325 00002B38 4D39C1                  	cmp r9, r8
  5326 00002B3B 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_01f6
  5327                                  .L_lambda_opt_stack_shrink_loop_01f7:
  5328 00002B3D 498D5710                	lea rdx, [r15 + 8 * 2]
  5329 00002B41 48C70200000000          	mov qword [rdx], 0
  5330 00002B48 48830201                	add qword [rdx] , 1
  5331 00002B4C 4D89C1                  	mov r9, r8
  5332 00002B4F 49FFC9                  	dec r9
  5333 00002B52 4E8D0CCB                	lea r9, [rbx + 8 * r9]
  5334                                  .L_lambda_opt_stack_shrink_loop_01f8:
  5335 00002B56 488B03                  	mov rax, qword [rbx]
  5336 00002B59 498901                  	mov qword [r9], rax
  5337 00002B5C 4983E908                	sub r9 , 8
  5338 00002B60 4883EB08                	sub rbx, 8
  5339 00002B64 4C39FB                  	cmp rbx, r15
  5340 00002B67 75ED                    	jne .L_lambda_opt_stack_shrink_loop_01f8
  5341 00002B69 488B03                  	mov rax, qword [rbx]
  5342 00002B6C 498901                  	mov qword [r9], rax
  5343 00002B6F 4D89C1                  	mov r9, r8
  5344 00002B72 4983E901                	sub r9 , 1
  5345 00002B76 4983F900                	cmp r9, 0
  5346 00002B7A 7446                    je .L_lambda_opt_stack_adjusted_0065
  5347                                  .L_lambda_opt_stack_shrink_loop_01f9:
  5348 00002B7C 58                      	pop rax
  5349 00002B7D 49FFC9                  	dec r9
  5350 00002B80 4983F900                	cmp r9, 0
  5351 00002B84 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_01f9
  5352 00002B86 EB3A                    jmp .L_lambda_opt_stack_adjusted_0065
  5353                                  .L_lambda_opt_arity_check_exact_0065:
  5354 00002B88 4989E7                  	mov r15, rsp
  5355 00002B8B 498D5F10                	lea rbx, [r15 + 8 * 2 + 8 * 0]
  5356 00002B8F 488B0B                  	mov rcx, qword [rbx]
  5357 00002B92 48C703[01000000]        	mov qword [rbx], sob_nil
  5358 00002B99 4883EB08                	sub rbx, 8
  5359                                  .L_lambda_opt_stack_shrink_loop_01f5:
  5360 00002B9D 488B13                  	mov rdx, qword [rbx]
  5361 00002BA0 48890B                  	mov qword [rbx], rcx
  5362 00002BA3 4C39FB                  	cmp rbx, r15
  5363 00002BA6 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0065
  5364 00002BA8 4889D1                  	mov rcx, rdx
  5365 00002BAB 4883EB08                	sub rbx, 8
  5366 00002BAF EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_01f5
  5367                                  .L_lambda_opt_stack_shrink_loop_exit_0065:
  5368 00002BB1 52                      	push rdx
  5369 00002BB2 4989E7                  	mov r15, rsp
  5370 00002BB5 4983C710                	add r15, 16
  5371 00002BB9 498B1F                  	mov rbx, qword [r15]
  5372 00002BBC 48FFC3                  	inc rbx
  5373 00002BBF 49891F                  	mov qword [r15], rbx
  5374                                  .L_lambda_opt_stack_adjusted_0065:
  5375 00002BC2 C8000000                	enter 0, 0
  5376 00002BC6 488B4520                	mov rax, PARAM(0)	; param args
  5377 00002BCA C9                      	leave
  5378 00002BCB C21800                  	ret AND_KILL_FRAME(1)
  5379                                  .L_lambda_opt_end_0065:	; new closure is in rax
  5380 00002BCE 48890425[7F140000]      	mov qword [free_var_103], rax
  5381 00002BD6 48B8-                   	mov rax, sob_void
  5381 00002BD8 [0000000000000000] 
  5382                                  
  5383 00002BE0 4889C7                  	mov rdi, rax
  5384 00002BE3 E839360100              	call print_sexpr_if_not_void
  5385                                  
  5386 00002BE8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5387 00002BED E81D350100              	call malloc
  5388 00002BF2 50                      	push rax
  5389 00002BF3 BF00000000              	mov rdi, 8 * 0	; new rib
  5390 00002BF8 E812350100              	call malloc
  5391 00002BFD 50                      	push rax
  5392 00002BFE BF08000000              	mov rdi, 8 * 1	; extended env
  5393 00002C03 E807350100              	call malloc
  5394 00002C08 488B7D10                	mov rdi, ENV
  5395 00002C0C BE00000000              	mov rsi, 0
  5396 00002C11 BA01000000              	mov rdx, 1
  5397                                  .L_lambda_simple_env_loop_0311:	; ext_env[i + 1] <-- env[i]
  5398 00002C16 4883FE00                	cmp rsi, 0
  5399 00002C1A 7410                    	je .L_lambda_simple_env_end_0311
  5400 00002C1C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5401 00002C20 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5402 00002C24 48FFC6                  	inc rsi
  5403 00002C27 48FFC2                  	inc rdx
  5404 00002C2A EBEA                    	jmp .L_lambda_simple_env_loop_0311
  5405                                  .L_lambda_simple_env_end_0311:
  5406 00002C2C 5B                      	pop rbx
  5407 00002C2D BE00000000              	mov rsi, 0
  5408                                  .L_lambda_simple_params_loop_0311:	; copy params
  5409 00002C32 4883FE00                	cmp rsi, 0
  5410 00002C36 740E                    	je .L_lambda_simple_params_end_0311
  5411 00002C38 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5412 00002C3D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5413 00002C41 48FFC6                  	inc rsi
  5414 00002C44 EBEC                    	jmp .L_lambda_simple_params_loop_0311
  5415                                  .L_lambda_simple_params_end_0311:
  5416 00002C46 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5417 00002C49 4889C3                  	mov rbx, rax
  5418 00002C4C 58                      	pop rax
  5419 00002C4D C60004                  	mov byte [rax], T_closure
  5420 00002C50 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5421 00002C54 48C74009[5E2C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0311
  5422 00002C5C EB3D                    	jmp .L_lambda_simple_end_0311
  5423                                  .L_lambda_simple_code_0311:	; lambda-simple body
  5424 00002C5E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5425 00002C64 740B                    	je .L_lambda_simple_arity_check_ok_0311
  5426 00002C66 FF742410                	push qword [rsp + 8 * 2]
  5427 00002C6A 6A01                    	push 1
  5428 00002C6C E957340100              	jmp L_error_incorrect_arity_simple
  5429                                  .L_lambda_simple_arity_check_ok_0311:
  5430 00002C71 C8000000                	enter 0, 0
  5431 00002C75 488B4520                	mov rax, PARAM(0)	; param x
  5432 00002C79 483D[02000000]          	cmp rax, sob_boolean_false
  5433 00002C7F 740C                    	je .L_if_else_021e
  5434 00002C81 48B8-                   	mov rax, L_constants + 2
  5434 00002C83 [0200000000000000] 
  5435 00002C8B EB0A                    	jmp .L_if_end_021e
  5436                                  .L_if_else_021e:
  5437 00002C8D 48B8-                   	mov rax, L_constants + 3
  5437 00002C8F [0300000000000000] 
  5438                                  .L_if_end_021e:
  5439 00002C97 C9                      	leave
  5440 00002C98 C21800                  	ret AND_KILL_FRAME(1)
  5441                                  .L_lambda_simple_end_0311:	; new closure is in rax
  5442 00002C9B 48890425[90140000]      	mov qword [free_var_104], rax
  5443 00002CA3 48B8-                   	mov rax, sob_void
  5443 00002CA5 [0000000000000000] 
  5444                                  
  5445 00002CAD 4889C7                  	mov rdi, rax
  5446 00002CB0 E86C350100              	call print_sexpr_if_not_void
  5447                                  
  5448 00002CB5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5449 00002CBA E850340100              	call malloc
  5450 00002CBF 50                      	push rax
  5451 00002CC0 BF00000000              	mov rdi, 8 * 0	; new rib
  5452 00002CC5 E845340100              	call malloc
  5453 00002CCA 50                      	push rax
  5454 00002CCB BF08000000              	mov rdi, 8 * 1	; extended env
  5455 00002CD0 E83A340100              	call malloc
  5456 00002CD5 488B7D10                	mov rdi, ENV
  5457 00002CD9 BE00000000              	mov rsi, 0
  5458 00002CDE BA01000000              	mov rdx, 1
  5459                                  .L_lambda_simple_env_loop_0312:	; ext_env[i + 1] <-- env[i]
  5460 00002CE3 4883FE00                	cmp rsi, 0
  5461 00002CE7 7410                    	je .L_lambda_simple_env_end_0312
  5462 00002CE9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5463 00002CED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5464 00002CF1 48FFC6                  	inc rsi
  5465 00002CF4 48FFC2                  	inc rdx
  5466 00002CF7 EBEA                    	jmp .L_lambda_simple_env_loop_0312
  5467                                  .L_lambda_simple_env_end_0312:
  5468 00002CF9 5B                      	pop rbx
  5469 00002CFA BE00000000              	mov rsi, 0
  5470                                  .L_lambda_simple_params_loop_0312:	; copy params
  5471 00002CFF 4883FE00                	cmp rsi, 0
  5472 00002D03 740E                    	je .L_lambda_simple_params_end_0312
  5473 00002D05 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5474 00002D0A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5475 00002D0E 48FFC6                  	inc rsi
  5476 00002D11 EBEC                    	jmp .L_lambda_simple_params_loop_0312
  5477                                  .L_lambda_simple_params_end_0312:
  5478 00002D13 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5479 00002D16 4889C3                  	mov rbx, rax
  5480 00002D19 58                      	pop rax
  5481 00002D1A C60004                  	mov byte [rax], T_closure
  5482 00002D1D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5483 00002D21 48C74009[2E2D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0312
  5484 00002D29 E9A7000000              	jmp .L_lambda_simple_end_0312
  5485                                  .L_lambda_simple_code_0312:	; lambda-simple body
  5486 00002D2E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5487 00002D34 740B                    	je .L_lambda_simple_arity_check_ok_0312
  5488 00002D36 FF742410                	push qword [rsp + 8 * 2]
  5489 00002D3A 6A01                    	push 1
  5490 00002D3C E987330100              	jmp L_error_incorrect_arity_simple
  5491                                  .L_lambda_simple_arity_check_ok_0312:
  5492 00002D41 C8000000                	enter 0, 0
  5493                                  	; preparing a non tail-call
  5494 00002D45 488B4520                	mov rax, PARAM(0)	; param q
  5495 00002D49 50                      	push rax
  5496 00002D4A 6A01                    	push 1	; arg count
  5497 00002D4C 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
  5498 00002D54 803805                  	cmp byte [rax], T_undefined
  5499 00002D57 0F8485320100            	je L_error_fvar_undefined
  5500 00002D5D 803804                  	cmp byte [rax], T_closure
  5501 00002D60 0F8500330100            	jne L_error_non_closure
  5502 00002D66 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5503 00002D69 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5504 00002D6C 483D[02000000]          	cmp rax, sob_boolean_false
  5505 00002D72 755D                    	jne .L_or_end_0036
  5506                                  	; preparing a tail-call
  5507 00002D74 488B4520                	mov rax, PARAM(0)	; param q
  5508 00002D78 50                      	push rax
  5509 00002D79 6A01                    	push 1	; arg count
  5510 00002D7B 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  5511 00002D83 803805                  	cmp byte [rax], T_undefined
  5512 00002D86 0F8456320100            	je L_error_fvar_undefined
  5513 00002D8C 803804                  	cmp byte [rax], T_closure
  5514 00002D8F 0F85D1320100            	jne L_error_non_closure
  5515 00002D95 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5516                                  
  5517                                  	; recycling the current frame
  5518 00002D98 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5519 00002D9B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5520 00002D9E B905000000              	mov rcx, 1 + 4
  5521 00002DA3 488B5D18                	mov rbx, COUNT
  5522 00002DA7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5523 00002DAC 488D55F8                	lea rdx, [rbp - 8 * 1]
  5524                                  .L_tc_recycle_frame_loop_03f5:
  5525 00002DB0 4883F900                	cmp rcx, 0
  5526 00002DB4 7413                    	je .L_tc_recycle_frame_done_03f5
  5527 00002DB6 488B32                  	mov rsi, qword [rdx]
  5528 00002DB9 488933                  	mov qword [rbx], rsi
  5529 00002DBC 48FFC9                  	dec rcx
  5530 00002DBF 4883EB08                	sub rbx, 8 * 1
  5531 00002DC3 4883EA08                	sub rdx, 8 * 1
  5532 00002DC7 EBE7                    	jmp .L_tc_recycle_frame_loop_03f5
  5533                                  .L_tc_recycle_frame_done_03f5:
  5534 00002DC9 488D6308                	lea rsp, [rbx + 8 * 1]
  5535 00002DCD 5D                      	pop rbp	; the proc will restore it!
  5536 00002DCE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5537                                  .L_or_end_0036:
  5538 00002DD1 C9                      	leave
  5539 00002DD2 C21800                  	ret AND_KILL_FRAME(1)
  5540                                  .L_lambda_simple_end_0312:	; new closure is in rax
  5541 00002DD5 48890425[A1140000]      	mov qword [free_var_105], rax
  5542 00002DDD 48B8-                   	mov rax, sob_void
  5542 00002DDF [0000000000000000] 
  5543                                  
  5544 00002DE7 4889C7                  	mov rdi, rax
  5545 00002DEA E832340100              	call print_sexpr_if_not_void
  5546                                  
  5547                                  	; preparing a non tail-call
  5548 00002DEF 48B8-                   	mov rax, L_constants + 1881
  5548 00002DF1 [5907000000000000] 
  5549 00002DF9 50                      	push rax
  5550 00002DFA 6A01                    	push 1	; arg count
  5551 00002DFC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5552 00002E01 E809330100              	call malloc
  5553 00002E06 50                      	push rax
  5554 00002E07 BF00000000              	mov rdi, 8 * 0	; new rib
  5555 00002E0C E8FE320100              	call malloc
  5556 00002E11 50                      	push rax
  5557 00002E12 BF08000000              	mov rdi, 8 * 1	; extended env
  5558 00002E17 E8F3320100              	call malloc
  5559 00002E1C 488B7D10                	mov rdi, ENV
  5560 00002E20 BE00000000              	mov rsi, 0
  5561 00002E25 BA01000000              	mov rdx, 1
  5562                                  .L_lambda_simple_env_loop_0313:	; ext_env[i + 1] <-- env[i]
  5563 00002E2A 4883FE00                	cmp rsi, 0
  5564 00002E2E 7410                    	je .L_lambda_simple_env_end_0313
  5565 00002E30 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5566 00002E34 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5567 00002E38 48FFC6                  	inc rsi
  5568 00002E3B 48FFC2                  	inc rdx
  5569 00002E3E EBEA                    	jmp .L_lambda_simple_env_loop_0313
  5570                                  .L_lambda_simple_env_end_0313:
  5571 00002E40 5B                      	pop rbx
  5572 00002E41 BE00000000              	mov rsi, 0
  5573                                  .L_lambda_simple_params_loop_0313:	; copy params
  5574 00002E46 4883FE00                	cmp rsi, 0
  5575 00002E4A 740E                    	je .L_lambda_simple_params_end_0313
  5576 00002E4C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5577 00002E51 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5578 00002E55 48FFC6                  	inc rsi
  5579 00002E58 EBEC                    	jmp .L_lambda_simple_params_loop_0313
  5580                                  .L_lambda_simple_params_end_0313:
  5581 00002E5A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5582 00002E5D 4889C3                  	mov rbx, rax
  5583 00002E60 58                      	pop rax
  5584 00002E61 C60004                  	mov byte [rax], T_closure
  5585 00002E64 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5586 00002E68 48C74009[752E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0313
  5587 00002E70 E90C040000              	jmp .L_lambda_simple_end_0313
  5588                                  .L_lambda_simple_code_0313:	; lambda-simple body
  5589 00002E75 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5590 00002E7B 740B                    	je .L_lambda_simple_arity_check_ok_0313
  5591 00002E7D FF742410                	push qword [rsp + 8 * 2]
  5592 00002E81 6A01                    	push 1
  5593 00002E83 E940320100              	jmp L_error_incorrect_arity_simple
  5594                                  .L_lambda_simple_arity_check_ok_0313:
  5595 00002E88 C8000000                	enter 0, 0
  5596 00002E8C BF08000000              	mov rdi, 8	; sob_box
  5597 00002E91 E879320100              	call malloc
  5598 00002E96 488B5D20                	mov rbx, PARAM(0)
  5599 00002E9A 488918                  	mov [rax], rbx
  5600 00002E9D 48894520                	mov PARAM(0), rax
  5601 00002EA1 48B8-                   	mov rax, sob_void
  5601 00002EA3 [0000000000000000] 
  5602                                  
  5603 00002EAB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5604 00002EB0 E85A320100              	call malloc
  5605 00002EB5 50                      	push rax
  5606 00002EB6 BF08000000              	mov rdi, 8 * 1	; new rib
  5607 00002EBB E84F320100              	call malloc
  5608 00002EC0 50                      	push rax
  5609 00002EC1 BF10000000              	mov rdi, 8 * 2	; extended env
  5610 00002EC6 E844320100              	call malloc
  5611 00002ECB 488B7D10                	mov rdi, ENV
  5612 00002ECF BE00000000              	mov rsi, 0
  5613 00002ED4 BA01000000              	mov rdx, 1
  5614                                  .L_lambda_simple_env_loop_0314:	; ext_env[i + 1] <-- env[i]
  5615 00002ED9 4883FE01                	cmp rsi, 1
  5616 00002EDD 7410                    	je .L_lambda_simple_env_end_0314
  5617 00002EDF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5618 00002EE3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5619 00002EE7 48FFC6                  	inc rsi
  5620 00002EEA 48FFC2                  	inc rdx
  5621 00002EED EBEA                    	jmp .L_lambda_simple_env_loop_0314
  5622                                  .L_lambda_simple_env_end_0314:
  5623 00002EEF 5B                      	pop rbx
  5624 00002EF0 BE00000000              	mov rsi, 0
  5625                                  .L_lambda_simple_params_loop_0314:	; copy params
  5626 00002EF5 4883FE01                	cmp rsi, 1
  5627 00002EF9 740E                    	je .L_lambda_simple_params_end_0314
  5628 00002EFB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5629 00002F00 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5630 00002F04 48FFC6                  	inc rsi
  5631 00002F07 EBEC                    	jmp .L_lambda_simple_params_loop_0314
  5632                                  .L_lambda_simple_params_end_0314:
  5633 00002F09 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5634 00002F0C 4889C3                  	mov rbx, rax
  5635 00002F0F 58                      	pop rax
  5636 00002F10 C60004                  	mov byte [rax], T_closure
  5637 00002F13 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5638 00002F17 48C74009[242F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0314
  5639 00002F1F E91F010000              	jmp .L_lambda_simple_end_0314
  5640                                  .L_lambda_simple_code_0314:	; lambda-simple body
  5641 00002F24 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5642 00002F2A 740B                    	je .L_lambda_simple_arity_check_ok_0314
  5643 00002F2C FF742410                	push qword [rsp + 8 * 2]
  5644 00002F30 6A02                    	push 2
  5645 00002F32 E991310100              	jmp L_error_incorrect_arity_simple
  5646                                  .L_lambda_simple_arity_check_ok_0314:
  5647 00002F37 C8000000                	enter 0, 0
  5648                                  	; preparing a non tail-call
  5649 00002F3B 488B4528                	mov rax, PARAM(1)	; param s
  5650 00002F3F 50                      	push rax
  5651 00002F40 6A01                    	push 1	; arg count
  5652 00002F42 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  5653 00002F4A 803805                  	cmp byte [rax], T_undefined
  5654 00002F4D 0F848F300100            	je L_error_fvar_undefined
  5655 00002F53 803804                  	cmp byte [rax], T_closure
  5656 00002F56 0F850A310100            	jne L_error_non_closure
  5657 00002F5C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5658 00002F5F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5659 00002F62 483D[02000000]          	cmp rax, sob_boolean_false
  5660 00002F68 7409                    	je .L_if_else_021f
  5661 00002F6A 488B4520                	mov rax, PARAM(0)	; param a
  5662 00002F6E E9CC000000              	jmp .L_if_end_021f
  5663                                  .L_if_else_021f:
  5664                                  	; preparing a tail-call
  5665                                  	; preparing a non tail-call
  5666                                  	; preparing a non tail-call
  5667 00002F73 488B4528                	mov rax, PARAM(1)	; param s
  5668 00002F77 50                      	push rax
  5669 00002F78 6A01                    	push 1	; arg count
  5670 00002F7A 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  5671 00002F82 803805                  	cmp byte [rax], T_undefined
  5672 00002F85 0F8457300100            	je L_error_fvar_undefined
  5673 00002F8B 803804                  	cmp byte [rax], T_closure
  5674 00002F8E 0F85D2300100            	jne L_error_non_closure
  5675 00002F94 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5676 00002F97 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5677 00002F9A 50                      	push rax
  5678                                  	; preparing a non tail-call
  5679 00002F9B 488B4528                	mov rax, PARAM(1)	; param s
  5680 00002F9F 50                      	push rax
  5681 00002FA0 6A01                    	push 1	; arg count
  5682 00002FA2 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  5683 00002FAA 803805                  	cmp byte [rax], T_undefined
  5684 00002FAD 0F842F300100            	je L_error_fvar_undefined
  5685 00002FB3 803804                  	cmp byte [rax], T_closure
  5686 00002FB6 0F85AA300100            	jne L_error_non_closure
  5687 00002FBC FF7001                  	push SOB_CLOSURE_ENV(rax)
  5688 00002FBF FF5009                  	call SOB_CLOSURE_CODE(rax)
  5689 00002FC2 50                      	push rax
  5690 00002FC3 6A02                    	push 2	; arg count
  5691 00002FC5 488B4510                	mov rax, ENV
  5692 00002FC9 488B00                  	mov rax, qword [rax + 8 * 0]
  5693 00002FCC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5694 00002FCF 488B00                  	mov rax, qword [rax]
  5695 00002FD2 803804                  	cmp byte [rax], T_closure
  5696 00002FD5 0F858B300100            	jne L_error_non_closure
  5697 00002FDB FF7001                  	push SOB_CLOSURE_ENV(rax)
  5698 00002FDE FF5009                  	call SOB_CLOSURE_CODE(rax)
  5699 00002FE1 50                      	push rax
  5700 00002FE2 488B4520                	mov rax, PARAM(0)	; param a
  5701 00002FE6 50                      	push rax
  5702 00002FE7 6A02                    	push 2	; arg count
  5703 00002FE9 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
  5704 00002FF1 803805                  	cmp byte [rax], T_undefined
  5705 00002FF4 0F84E82F0100            	je L_error_fvar_undefined
  5706 00002FFA 803804                  	cmp byte [rax], T_closure
  5707 00002FFD 0F8563300100            	jne L_error_non_closure
  5708 00003003 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5709                                  
  5710                                  	; recycling the current frame
  5711 00003006 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5712 00003009 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5713 0000300C B906000000              	mov rcx, 2 + 4
  5714 00003011 488B5D18                	mov rbx, COUNT
  5715 00003015 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5716 0000301A 488D55F8                	lea rdx, [rbp - 8 * 1]
  5717                                  .L_tc_recycle_frame_loop_03f6:
  5718 0000301E 4883F900                	cmp rcx, 0
  5719 00003022 7413                    	je .L_tc_recycle_frame_done_03f6
  5720 00003024 488B32                  	mov rsi, qword [rdx]
  5721 00003027 488933                  	mov qword [rbx], rsi
  5722 0000302A 48FFC9                  	dec rcx
  5723 0000302D 4883EB08                	sub rbx, 8 * 1
  5724 00003031 4883EA08                	sub rdx, 8 * 1
  5725 00003035 EBE7                    	jmp .L_tc_recycle_frame_loop_03f6
  5726                                  .L_tc_recycle_frame_done_03f6:
  5727 00003037 488D6308                	lea rsp, [rbx + 8 * 1]
  5728 0000303B 5D                      	pop rbp	; the proc will restore it!
  5729 0000303C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5730                                  .L_if_end_021f:
  5731 0000303F C9                      	leave
  5732 00003040 C22000                  	ret AND_KILL_FRAME(2)
  5733                                  .L_lambda_simple_end_0314:	; new closure is in rax
  5734 00003043 50                      	push rax
  5735 00003044 488B4520                	mov rax, PARAM(0)	; param run
  5736 00003048 8F00                    	pop qword [rax]
  5737 0000304A 48B8-                   	mov rax, sob_void
  5737 0000304C [0000000000000000] 
  5738                                  
  5739 00003054 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5740 00003059 E8B1300100              	call malloc
  5741 0000305E 50                      	push rax
  5742 0000305F BF08000000              	mov rdi, 8 * 1	; new rib
  5743 00003064 E8A6300100              	call malloc
  5744 00003069 50                      	push rax
  5745 0000306A BF10000000              	mov rdi, 8 * 2	; extended env
  5746 0000306F E89B300100              	call malloc
  5747 00003074 488B7D10                	mov rdi, ENV
  5748 00003078 BE00000000              	mov rsi, 0
  5749 0000307D BA01000000              	mov rdx, 1
  5750                                  .L_lambda_opt_env_loop_0066:	; ext_env[i + 1] <-- env[i]
  5751 00003082 4883FE01                	cmp rsi, 1
  5752 00003086 7410                    	je .L_lambda_opt_env_end_0066
  5753 00003088 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5754 0000308C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5755 00003090 48FFC6                  	inc rsi
  5756 00003093 48FFC2                  	inc rdx
  5757 00003096 EBEA                    	jmp .L_lambda_opt_env_loop_0066
  5758                                  .L_lambda_opt_env_end_0066:
  5759 00003098 5B                      	pop rbx
  5760 00003099 BE00000000              	mov rsi, 0
  5761                                  .L_lambda_opt_params_loop_0066:	; copy params
  5762 0000309E 4883FE01                	cmp rsi, 1
  5763 000030A2 740E                    	je .L_lambda_opt_params_end_0066
  5764 000030A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5765 000030A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5766 000030AD 48FFC6                  	inc rsi
  5767 000030B0 EBEC                    	jmp .L_lambda_opt_params_loop_0066
  5768                                  .L_lambda_opt_params_end_0066:
  5769 000030B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5770 000030B5 4889C3                  	mov rbx, rax
  5771 000030B8 58                      	pop rax
  5772 000030B9 C60004                  	mov byte [rax], T_closure
  5773 000030BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5774 000030C0 48C74009[CD300000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0066
  5775 000030C8 E9B0010000              	jmp .L_lambda_opt_end_0066
  5776                                  .L_lambda_opt_code_0066:	; lambda-opt body
  5777 000030CD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5778 000030D3 0F8404010000            	je .L_lambda_opt_arity_check_exact_0066
  5779 000030D9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5780 000030DF 7F0B                    	jg .L_lambda_opt_arity_check_more_0066
  5781 000030E1 FF742410                	push qword [rsp + 8 * 2]
  5782 000030E5 6A01                    	push 1
  5783 000030E7 E9F02F0100              	jmp L_error_incorrect_arity_opt
  5784                                  .L_lambda_opt_arity_check_more_0066:
  5785 000030EC 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  5786 000030F1 41B901000000            	mov r9 , 1
  5787 000030F7 4989E7                  	mov r15, rsp
  5788 000030FA 4D29C8                  	sub r8, r9
  5789 000030FD 41B900000000            	mov r9, 0
  5790 00003103 498D5F10                	lea rbx, [r15 + 8 * 2]
  5791 00003107 498B4710                	mov rax, qword [r15 + 8 * 2]
  5792 0000310B 486BC008                	imul rax, 8
  5793 0000310F 4801C3                  	add rbx, rax
  5794 00003112 488B13                  	mov rdx , qword [rbx]
  5795 00003115 4989DA                  	mov r10 , rbx
  5796 00003118 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
  5797 0000311D 52                      	push rdx
  5798 0000311E 53                      	push rbx
  5799 0000311F 4150                    	push r8
  5800 00003121 4151                    	push r9
  5801 00003123 4152                    	push r10
  5802 00003125 4157                    	push r15
  5803 00003127 E8E32F0100              	call malloc
  5804 0000312C 415F                    	pop r15
  5805 0000312E 415A                    	pop r10
  5806 00003130 4159                    	pop r9
  5807 00003132 4158                    	pop r8
  5808 00003134 5B                      	pop rbx
  5809 00003135 5A                      	pop rdx
  5810 00003136 C60021                  	mov byte qword [rax], T_pair
  5811 00003139 48895001                	mov SOB_PAIR_CAR(rax), rdx
  5812 0000313D 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
  5813 00003145 498902                  	mov qword [r10], rax
  5814 00003148 49FFC1                  	inc r9
  5815 0000314B 4883EB08                	sub rbx, 8
  5816 0000314F 4D39C1                  	cmp r9, r8
  5817 00003152 743E                    	je .L_lambda_opt_stack_shrink_loop_01fc
  5818                                  .L_lambda_opt_stack_shrink_loop_01fb:
  5819 00003154 488B13                  	mov rdx, qword [rbx]
  5820 00003157 53                      	push rbx
  5821 00003158 4150                    	push r8
  5822 0000315A 4151                    	push r9
  5823 0000315C 4152                    	push r10
  5824 0000315E 4157                    	push r15
  5825 00003160 52                      	push rdx
  5826 00003161 BF11000000              	mov rdi, (1 + 8 + 8)
  5827 00003166 E8A42F0100              	call malloc
  5828 0000316B 5A                      	pop rdx
  5829 0000316C 415F                    	pop r15
  5830 0000316E 415A                    	pop r10
  5831 00003170 4159                    	pop r9
  5832 00003172 4158                    	pop r8
  5833 00003174 5B                      	pop rbx
  5834 00003175 C60021                  	mov byte [rax], T_pair
  5835 00003178 48895001                	mov SOB_PAIR_CAR(rax), rdx
  5836 0000317C 4D8B32                  	mov r14, qword [r10]
  5837 0000317F 4C897009                	mov SOB_PAIR_CDR(rax), r14
  5838 00003183 498902                  	mov qword [r10], rax
  5839 00003186 49FFC1                  	inc r9
  5840 00003189 4883EB08                	sub rbx, 8
  5841 0000318D 4D39C1                  	cmp r9, r8
  5842 00003190 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_01fb
  5843                                  .L_lambda_opt_stack_shrink_loop_01fc:
  5844 00003192 498D5710                	lea rdx, [r15 + 8 * 2]
  5845 00003196 48C70201000000          	mov qword [rdx], 1
  5846 0000319D 48830201                	add qword [rdx] , 1
  5847 000031A1 4D89C1                  	mov r9, r8
  5848 000031A4 49FFC9                  	dec r9
  5849 000031A7 4E8D0CCB                	lea r9, [rbx + 8 * r9]
  5850                                  .L_lambda_opt_stack_shrink_loop_01fd:
  5851 000031AB 488B03                  	mov rax, qword [rbx]
  5852 000031AE 498901                  	mov qword [r9], rax
  5853 000031B1 4983E908                	sub r9 , 8
  5854 000031B5 4883EB08                	sub rbx, 8
  5855 000031B9 4C39FB                  	cmp rbx, r15
  5856 000031BC 75ED                    	jne .L_lambda_opt_stack_shrink_loop_01fd
  5857 000031BE 488B03                  	mov rax, qword [rbx]
  5858 000031C1 498901                  	mov qword [r9], rax
  5859 000031C4 4D89C1                  	mov r9, r8
  5860 000031C7 4983E901                	sub r9 , 1
  5861 000031CB 4983F900                	cmp r9, 0
  5862 000031CF 7446                    je .L_lambda_opt_stack_adjusted_0066
  5863                                  .L_lambda_opt_stack_shrink_loop_01fe:
  5864 000031D1 58                      	pop rax
  5865 000031D2 49FFC9                  	dec r9
  5866 000031D5 4983F900                	cmp r9, 0
  5867 000031D9 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_01fe
  5868 000031DB EB3A                    jmp .L_lambda_opt_stack_adjusted_0066
  5869                                  .L_lambda_opt_arity_check_exact_0066:
  5870 000031DD 4989E7                  	mov r15, rsp
  5871 000031E0 498D5F18                	lea rbx, [r15 + 8 * 2 + 8 * 1]
  5872 000031E4 488B0B                  	mov rcx, qword [rbx]
  5873 000031E7 48C703[01000000]        	mov qword [rbx], sob_nil
  5874 000031EE 4883EB08                	sub rbx, 8
  5875                                  .L_lambda_opt_stack_shrink_loop_01fa:
  5876 000031F2 488B13                  	mov rdx, qword [rbx]
  5877 000031F5 48890B                  	mov qword [rbx], rcx
  5878 000031F8 4C39FB                  	cmp rbx, r15
  5879 000031FB 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0066
  5880 000031FD 4889D1                  	mov rcx, rdx
  5881 00003200 4883EB08                	sub rbx, 8
  5882 00003204 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_01fa
  5883                                  .L_lambda_opt_stack_shrink_loop_exit_0066:
  5884 00003206 52                      	push rdx
  5885 00003207 4989E7                  	mov r15, rsp
  5886 0000320A 4983C710                	add r15, 16
  5887 0000320E 498B1F                  	mov rbx, qword [r15]
  5888 00003211 48FFC3                  	inc rbx
  5889 00003214 49891F                  	mov qword [r15], rbx
  5890                                  .L_lambda_opt_stack_adjusted_0066:
  5891 00003217 C8000000                	enter 0, 0
  5892                                  	; preparing a tail-call
  5893 0000321B 488B4528                	mov rax, PARAM(1)	; param s
  5894 0000321F 50                      	push rax
  5895 00003220 488B4520                	mov rax, PARAM(0)	; param a
  5896 00003224 50                      	push rax
  5897 00003225 6A02                    	push 2	; arg count
  5898 00003227 488B4510                	mov rax, ENV
  5899 0000322B 488B00                  	mov rax, qword [rax + 8 * 0]
  5900 0000322E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5901 00003231 488B00                  	mov rax, qword [rax]
  5902 00003234 803804                  	cmp byte [rax], T_closure
  5903 00003237 0F85292E0100            	jne L_error_non_closure
  5904 0000323D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5905                                  
  5906                                  	; recycling the current frame
  5907 00003240 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5908 00003243 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5909 00003246 B906000000              	mov rcx, 2 + 4
  5910 0000324B 488B5D18                	mov rbx, COUNT
  5911 0000324F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5912 00003254 488D55F8                	lea rdx, [rbp - 8 * 1]
  5913                                  .L_tc_recycle_frame_loop_03f7:
  5914 00003258 4883F900                	cmp rcx, 0
  5915 0000325C 7413                    	je .L_tc_recycle_frame_done_03f7
  5916 0000325E 488B32                  	mov rsi, qword [rdx]
  5917 00003261 488933                  	mov qword [rbx], rsi
  5918 00003264 48FFC9                  	dec rcx
  5919 00003267 4883EB08                	sub rbx, 8 * 1
  5920 0000326B 4883EA08                	sub rdx, 8 * 1
  5921 0000326F EBE7                    	jmp .L_tc_recycle_frame_loop_03f7
  5922                                  .L_tc_recycle_frame_done_03f7:
  5923 00003271 488D6308                	lea rsp, [rbx + 8 * 1]
  5924 00003275 5D                      	pop rbp	; the proc will restore it!
  5925 00003276 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5926 00003279 C9                      	leave
  5927 0000327A C22000                  	ret AND_KILL_FRAME(2)
  5928                                  .L_lambda_opt_end_0066:	; new closure is in rax
  5929 0000327D C9                      	leave
  5930 0000327E C21800                  	ret AND_KILL_FRAME(1)
  5931                                  .L_lambda_simple_end_0313:	; new closure is in rax
  5932 00003281 803804                  	cmp byte [rax], T_closure
  5933 00003284 0F85DC2D0100            	jne L_error_non_closure
  5934 0000328A FF7001                  	push SOB_CLOSURE_ENV(rax)
  5935 0000328D FF5009                  	call SOB_CLOSURE_CODE(rax)
  5936 00003290 48890425[B2140000]      	mov qword [free_var_106], rax
  5937 00003298 48B8-                   	mov rax, sob_void
  5937 0000329A [0000000000000000] 
  5938                                  
  5939 000032A2 4889C7                  	mov rdi, rax
  5940 000032A5 E8772F0100              	call print_sexpr_if_not_void
  5941                                  
  5942                                  	; preparing a non tail-call
  5943 000032AA 48B8-                   	mov rax, L_constants + 1881
  5943 000032AC [5907000000000000] 
  5944 000032B4 50                      	push rax
  5945 000032B5 6A01                    	push 1	; arg count
  5946 000032B7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5947 000032BC E84E2E0100              	call malloc
  5948 000032C1 50                      	push rax
  5949 000032C2 BF00000000              	mov rdi, 8 * 0	; new rib
  5950 000032C7 E8432E0100              	call malloc
  5951 000032CC 50                      	push rax
  5952 000032CD BF08000000              	mov rdi, 8 * 1	; extended env
  5953 000032D2 E8382E0100              	call malloc
  5954 000032D7 488B7D10                	mov rdi, ENV
  5955 000032DB BE00000000              	mov rsi, 0
  5956 000032E0 BA01000000              	mov rdx, 1
  5957                                  .L_lambda_simple_env_loop_0315:	; ext_env[i + 1] <-- env[i]
  5958 000032E5 4883FE00                	cmp rsi, 0
  5959 000032E9 7410                    	je .L_lambda_simple_env_end_0315
  5960 000032EB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5961 000032EF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5962 000032F3 48FFC6                  	inc rsi
  5963 000032F6 48FFC2                  	inc rdx
  5964 000032F9 EBEA                    	jmp .L_lambda_simple_env_loop_0315
  5965                                  .L_lambda_simple_env_end_0315:
  5966 000032FB 5B                      	pop rbx
  5967 000032FC BE00000000              	mov rsi, 0
  5968                                  .L_lambda_simple_params_loop_0315:	; copy params
  5969 00003301 4883FE00                	cmp rsi, 0
  5970 00003305 740E                    	je .L_lambda_simple_params_end_0315
  5971 00003307 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5972 0000330C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5973 00003310 48FFC6                  	inc rsi
  5974 00003313 EBEC                    	jmp .L_lambda_simple_params_loop_0315
  5975                                  .L_lambda_simple_params_end_0315:
  5976 00003315 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5977 00003318 4889C3                  	mov rbx, rax
  5978 0000331B 58                      	pop rax
  5979 0000331C C60004                  	mov byte [rax], T_closure
  5980 0000331F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5981 00003323 48C74009[30330000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0315
  5982 0000332B E97B040000              	jmp .L_lambda_simple_end_0315
  5983                                  .L_lambda_simple_code_0315:	; lambda-simple body
  5984 00003330 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5985 00003336 740B                    	je .L_lambda_simple_arity_check_ok_0315
  5986 00003338 FF742410                	push qword [rsp + 8 * 2]
  5987 0000333C 6A01                    	push 1
  5988 0000333E E9852D0100              	jmp L_error_incorrect_arity_simple
  5989                                  .L_lambda_simple_arity_check_ok_0315:
  5990 00003343 C8000000                	enter 0, 0
  5991 00003347 BF08000000              	mov rdi, 8	; sob_box
  5992 0000334C E8BE2D0100              	call malloc
  5993 00003351 488B5D20                	mov rbx, PARAM(0)
  5994 00003355 488918                  	mov [rax], rbx
  5995 00003358 48894520                	mov PARAM(0), rax
  5996 0000335C 48B8-                   	mov rax, sob_void
  5996 0000335E [0000000000000000] 
  5997                                  
  5998 00003366 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5999 0000336B E89F2D0100              	call malloc
  6000 00003370 50                      	push rax
  6001 00003371 BF08000000              	mov rdi, 8 * 1	; new rib
  6002 00003376 E8942D0100              	call malloc
  6003 0000337B 50                      	push rax
  6004 0000337C BF10000000              	mov rdi, 8 * 2	; extended env
  6005 00003381 E8892D0100              	call malloc
  6006 00003386 488B7D10                	mov rdi, ENV
  6007 0000338A BE00000000              	mov rsi, 0
  6008 0000338F BA01000000              	mov rdx, 1
  6009                                  .L_lambda_simple_env_loop_0316:	; ext_env[i + 1] <-- env[i]
  6010 00003394 4883FE01                	cmp rsi, 1
  6011 00003398 7410                    	je .L_lambda_simple_env_end_0316
  6012 0000339A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6013 0000339E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6014 000033A2 48FFC6                  	inc rsi
  6015 000033A5 48FFC2                  	inc rdx
  6016 000033A8 EBEA                    	jmp .L_lambda_simple_env_loop_0316
  6017                                  .L_lambda_simple_env_end_0316:
  6018 000033AA 5B                      	pop rbx
  6019 000033AB BE00000000              	mov rsi, 0
  6020                                  .L_lambda_simple_params_loop_0316:	; copy params
  6021 000033B0 4883FE01                	cmp rsi, 1
  6022 000033B4 740E                    	je .L_lambda_simple_params_end_0316
  6023 000033B6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6024 000033BB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6025 000033BF 48FFC6                  	inc rsi
  6026 000033C2 EBEC                    	jmp .L_lambda_simple_params_loop_0316
  6027                                  .L_lambda_simple_params_end_0316:
  6028 000033C4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6029 000033C7 4889C3                  	mov rbx, rax
  6030 000033CA 58                      	pop rax
  6031 000033CB C60004                  	mov byte [rax], T_closure
  6032 000033CE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6033 000033D2 48C74009[DF330000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0316
  6034 000033DA E920010000              	jmp .L_lambda_simple_end_0316
  6035                                  .L_lambda_simple_code_0316:	; lambda-simple body
  6036 000033DF 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6037 000033E5 740B                    	je .L_lambda_simple_arity_check_ok_0316
  6038 000033E7 FF742410                	push qword [rsp + 8 * 2]
  6039 000033EB 6A02                    	push 2
  6040 000033ED E9D62C0100              	jmp L_error_incorrect_arity_simple
  6041                                  .L_lambda_simple_arity_check_ok_0316:
  6042 000033F2 C8000000                	enter 0, 0
  6043                                  	; preparing a non tail-call
  6044 000033F6 488B4528                	mov rax, PARAM(1)	; param s
  6045 000033FA 50                      	push rax
  6046 000033FB 6A01                    	push 1	; arg count
  6047 000033FD 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
  6048 00003405 803805                  	cmp byte [rax], T_undefined
  6049 00003408 0F84D42B0100            	je L_error_fvar_undefined
  6050 0000340E 803804                  	cmp byte [rax], T_closure
  6051 00003411 0F854F2C0100            	jne L_error_non_closure
  6052 00003417 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6053 0000341A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6054 0000341D 483D[02000000]          	cmp rax, sob_boolean_false
  6055 00003423 0F84CE000000            	je .L_if_else_0220
  6056                                  	; preparing a tail-call
  6057                                  	; preparing a non tail-call
  6058                                  	; preparing a non tail-call
  6059 00003429 488B4528                	mov rax, PARAM(1)	; param s
  6060 0000342D 50                      	push rax
  6061 0000342E 6A01                    	push 1	; arg count
  6062 00003430 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  6063 00003438 803805                  	cmp byte [rax], T_undefined
  6064 0000343B 0F84A12B0100            	je L_error_fvar_undefined
  6065 00003441 803804                  	cmp byte [rax], T_closure
  6066 00003444 0F851C2C0100            	jne L_error_non_closure
  6067 0000344A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6068 0000344D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6069 00003450 50                      	push rax
  6070                                  	; preparing a non tail-call
  6071 00003451 488B4528                	mov rax, PARAM(1)	; param s
  6072 00003455 50                      	push rax
  6073 00003456 6A01                    	push 1	; arg count
  6074 00003458 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  6075 00003460 803805                  	cmp byte [rax], T_undefined
  6076 00003463 0F84792B0100            	je L_error_fvar_undefined
  6077 00003469 803804                  	cmp byte [rax], T_closure
  6078 0000346C 0F85F42B0100            	jne L_error_non_closure
  6079 00003472 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6080 00003475 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6081 00003478 50                      	push rax
  6082 00003479 6A02                    	push 2	; arg count
  6083 0000347B 488B4510                	mov rax, ENV
  6084 0000347F 488B00                  	mov rax, qword [rax + 8 * 0]
  6085 00003482 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  6086 00003485 488B00                  	mov rax, qword [rax]
  6087 00003488 803804                  	cmp byte [rax], T_closure
  6088 0000348B 0F85D52B0100            	jne L_error_non_closure
  6089 00003491 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6090 00003494 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6091 00003497 50                      	push rax
  6092 00003498 488B4520                	mov rax, PARAM(0)	; param a
  6093 0000349C 50                      	push rax
  6094 0000349D 6A02                    	push 2	; arg count
  6095 0000349F 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
  6096 000034A7 803805                  	cmp byte [rax], T_undefined
  6097 000034AA 0F84322B0100            	je L_error_fvar_undefined
  6098 000034B0 803804                  	cmp byte [rax], T_closure
  6099 000034B3 0F85AD2B0100            	jne L_error_non_closure
  6100 000034B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6101                                  
  6102                                  	; recycling the current frame
  6103 000034BC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6104 000034BF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6105 000034C2 B906000000              	mov rcx, 2 + 4
  6106 000034C7 488B5D18                	mov rbx, COUNT
  6107 000034CB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6108 000034D0 488D55F8                	lea rdx, [rbp - 8 * 1]
  6109                                  .L_tc_recycle_frame_loop_03f8:
  6110 000034D4 4883F900                	cmp rcx, 0
  6111 000034D8 7413                    	je .L_tc_recycle_frame_done_03f8
  6112 000034DA 488B32                  	mov rsi, qword [rdx]
  6113 000034DD 488933                  	mov qword [rbx], rsi
  6114 000034E0 48FFC9                  	dec rcx
  6115 000034E3 4883EB08                	sub rbx, 8 * 1
  6116 000034E7 4883EA08                	sub rdx, 8 * 1
  6117 000034EB EBE7                    	jmp .L_tc_recycle_frame_loop_03f8
  6118                                  .L_tc_recycle_frame_done_03f8:
  6119 000034ED 488D6308                	lea rsp, [rbx + 8 * 1]
  6120 000034F1 5D                      	pop rbp	; the proc will restore it!
  6121 000034F2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6122 000034F5 EB04                    	jmp .L_if_end_0220
  6123                                  .L_if_else_0220:
  6124 000034F7 488B4520                	mov rax, PARAM(0)	; param a
  6125                                  .L_if_end_0220:
  6126 000034FB C9                      	leave
  6127 000034FC C22000                  	ret AND_KILL_FRAME(2)
  6128                                  .L_lambda_simple_end_0316:	; new closure is in rax
  6129 000034FF 50                      	push rax
  6130 00003500 488B4520                	mov rax, PARAM(0)	; param run
  6131 00003504 8F00                    	pop qword [rax]
  6132 00003506 48B8-                   	mov rax, sob_void
  6132 00003508 [0000000000000000] 
  6133                                  
  6134 00003510 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6135 00003515 E8F52B0100              	call malloc
  6136 0000351A 50                      	push rax
  6137 0000351B BF08000000              	mov rdi, 8 * 1	; new rib
  6138 00003520 E8EA2B0100              	call malloc
  6139 00003525 50                      	push rax
  6140 00003526 BF10000000              	mov rdi, 8 * 2	; extended env
  6141 0000352B E8DF2B0100              	call malloc
  6142 00003530 488B7D10                	mov rdi, ENV
  6143 00003534 BE00000000              	mov rsi, 0
  6144 00003539 BA01000000              	mov rdx, 1
  6145                                  .L_lambda_opt_env_loop_0067:	; ext_env[i + 1] <-- env[i]
  6146 0000353E 4883FE01                	cmp rsi, 1
  6147 00003542 7410                    	je .L_lambda_opt_env_end_0067
  6148 00003544 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6149 00003548 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6150 0000354C 48FFC6                  	inc rsi
  6151 0000354F 48FFC2                  	inc rdx
  6152 00003552 EBEA                    	jmp .L_lambda_opt_env_loop_0067
  6153                                  .L_lambda_opt_env_end_0067:
  6154 00003554 5B                      	pop rbx
  6155 00003555 BE00000000              	mov rsi, 0
  6156                                  .L_lambda_opt_params_loop_0067:	; copy params
  6157 0000355A 4883FE01                	cmp rsi, 1
  6158 0000355E 740E                    	je .L_lambda_opt_params_end_0067
  6159 00003560 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6160 00003565 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6161 00003569 48FFC6                  	inc rsi
  6162 0000356C EBEC                    	jmp .L_lambda_opt_params_loop_0067
  6163                                  .L_lambda_opt_params_end_0067:
  6164 0000356E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6165 00003571 4889C3                  	mov rbx, rax
  6166 00003574 58                      	pop rax
  6167 00003575 C60004                  	mov byte [rax], T_closure
  6168 00003578 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6169 0000357C 48C74009[89350000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0067
  6170 00003584 E91E020000              	jmp .L_lambda_opt_end_0067
  6171                                  .L_lambda_opt_code_0067:	; lambda-opt body
  6172 00003589 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6173 0000358F 0F8404010000            	je .L_lambda_opt_arity_check_exact_0067
  6174 00003595 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6175 0000359B 7F0B                    	jg .L_lambda_opt_arity_check_more_0067
  6176 0000359D FF742410                	push qword [rsp + 8 * 2]
  6177 000035A1 6A01                    	push 1
  6178 000035A3 E9342B0100              	jmp L_error_incorrect_arity_opt
  6179                                  .L_lambda_opt_arity_check_more_0067:
  6180 000035A8 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  6181 000035AD 41B901000000            	mov r9 , 1
  6182 000035B3 4989E7                  	mov r15, rsp
  6183 000035B6 4D29C8                  	sub r8, r9
  6184 000035B9 41B900000000            	mov r9, 0
  6185 000035BF 498D5F10                	lea rbx, [r15 + 8 * 2]
  6186 000035C3 498B4710                	mov rax, qword [r15 + 8 * 2]
  6187 000035C7 486BC008                	imul rax, 8
  6188 000035CB 4801C3                  	add rbx, rax
  6189 000035CE 488B13                  	mov rdx , qword [rbx]
  6190 000035D1 4989DA                  	mov r10 , rbx
  6191 000035D4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
  6192 000035D9 52                      	push rdx
  6193 000035DA 53                      	push rbx
  6194 000035DB 4150                    	push r8
  6195 000035DD 4151                    	push r9
  6196 000035DF 4152                    	push r10
  6197 000035E1 4157                    	push r15
  6198 000035E3 E8272B0100              	call malloc
  6199 000035E8 415F                    	pop r15
  6200 000035EA 415A                    	pop r10
  6201 000035EC 4159                    	pop r9
  6202 000035EE 4158                    	pop r8
  6203 000035F0 5B                      	pop rbx
  6204 000035F1 5A                      	pop rdx
  6205 000035F2 C60021                  	mov byte qword [rax], T_pair
  6206 000035F5 48895001                	mov SOB_PAIR_CAR(rax), rdx
  6207 000035F9 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
  6208 00003601 498902                  	mov qword [r10], rax
  6209 00003604 49FFC1                  	inc r9
  6210 00003607 4883EB08                	sub rbx, 8
  6211 0000360B 4D39C1                  	cmp r9, r8
  6212 0000360E 743E                    	je .L_lambda_opt_stack_shrink_loop_0201
  6213                                  .L_lambda_opt_stack_shrink_loop_0200:
  6214 00003610 488B13                  	mov rdx, qword [rbx]
  6215 00003613 53                      	push rbx
  6216 00003614 4150                    	push r8
  6217 00003616 4151                    	push r9
  6218 00003618 4152                    	push r10
  6219 0000361A 4157                    	push r15
  6220 0000361C 52                      	push rdx
  6221 0000361D BF11000000              	mov rdi, (1 + 8 + 8)
  6222 00003622 E8E82A0100              	call malloc
  6223 00003627 5A                      	pop rdx
  6224 00003628 415F                    	pop r15
  6225 0000362A 415A                    	pop r10
  6226 0000362C 4159                    	pop r9
  6227 0000362E 4158                    	pop r8
  6228 00003630 5B                      	pop rbx
  6229 00003631 C60021                  	mov byte [rax], T_pair
  6230 00003634 48895001                	mov SOB_PAIR_CAR(rax), rdx
  6231 00003638 4D8B32                  	mov r14, qword [r10]
  6232 0000363B 4C897009                	mov SOB_PAIR_CDR(rax), r14
  6233 0000363F 498902                  	mov qword [r10], rax
  6234 00003642 49FFC1                  	inc r9
  6235 00003645 4883EB08                	sub rbx, 8
  6236 00003649 4D39C1                  	cmp r9, r8
  6237 0000364C 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_0200
  6238                                  .L_lambda_opt_stack_shrink_loop_0201:
  6239 0000364E 498D5710                	lea rdx, [r15 + 8 * 2]
  6240 00003652 48C70201000000          	mov qword [rdx], 1
  6241 00003659 48830201                	add qword [rdx] , 1
  6242 0000365D 4D89C1                  	mov r9, r8
  6243 00003660 49FFC9                  	dec r9
  6244 00003663 4E8D0CCB                	lea r9, [rbx + 8 * r9]
  6245                                  .L_lambda_opt_stack_shrink_loop_0202:
  6246 00003667 488B03                  	mov rax, qword [rbx]
  6247 0000366A 498901                  	mov qword [r9], rax
  6248 0000366D 4983E908                	sub r9 , 8
  6249 00003671 4883EB08                	sub rbx, 8
  6250 00003675 4C39FB                  	cmp rbx, r15
  6251 00003678 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0202
  6252 0000367A 488B03                  	mov rax, qword [rbx]
  6253 0000367D 498901                  	mov qword [r9], rax
  6254 00003680 4D89C1                  	mov r9, r8
  6255 00003683 4983E901                	sub r9 , 1
  6256 00003687 4983F900                	cmp r9, 0
  6257 0000368B 7446                    je .L_lambda_opt_stack_adjusted_0067
  6258                                  .L_lambda_opt_stack_shrink_loop_0203:
  6259 0000368D 58                      	pop rax
  6260 0000368E 49FFC9                  	dec r9
  6261 00003691 4983F900                	cmp r9, 0
  6262 00003695 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0203
  6263 00003697 EB3A                    jmp .L_lambda_opt_stack_adjusted_0067
  6264                                  .L_lambda_opt_arity_check_exact_0067:
  6265 00003699 4989E7                  	mov r15, rsp
  6266 0000369C 498D5F18                	lea rbx, [r15 + 8 * 2 + 8 * 1]
  6267 000036A0 488B0B                  	mov rcx, qword [rbx]
  6268 000036A3 48C703[01000000]        	mov qword [rbx], sob_nil
  6269 000036AA 4883EB08                	sub rbx, 8
  6270                                  .L_lambda_opt_stack_shrink_loop_01ff:
  6271 000036AE 488B13                  	mov rdx, qword [rbx]
  6272 000036B1 48890B                  	mov qword [rbx], rcx
  6273 000036B4 4C39FB                  	cmp rbx, r15
  6274 000036B7 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0067
  6275 000036B9 4889D1                  	mov rcx, rdx
  6276 000036BC 4883EB08                	sub rbx, 8
  6277 000036C0 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_01ff
  6278                                  .L_lambda_opt_stack_shrink_loop_exit_0067:
  6279 000036C2 52                      	push rdx
  6280 000036C3 4989E7                  	mov r15, rsp
  6281 000036C6 4983C710                	add r15, 16
  6282 000036CA 498B1F                  	mov rbx, qword [r15]
  6283 000036CD 48FFC3                  	inc rbx
  6284 000036D0 49891F                  	mov qword [r15], rbx
  6285                                  .L_lambda_opt_stack_adjusted_0067:
  6286 000036D3 C8000000                	enter 0, 0
  6287                                  	; preparing a tail-call
  6288                                  	; preparing a non tail-call
  6289                                  	; preparing a non tail-call
  6290 000036D7 488B4528                	mov rax, PARAM(1)	; param s
  6291 000036DB 50                      	push rax
  6292 000036DC 6A01                    	push 1	; arg count
  6293 000036DE 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  6294 000036E6 803805                  	cmp byte [rax], T_undefined
  6295 000036E9 0F84F3280100            	je L_error_fvar_undefined
  6296 000036EF 803804                  	cmp byte [rax], T_closure
  6297 000036F2 0F856E290100            	jne L_error_non_closure
  6298 000036F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6299 000036FB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6300 000036FE 50                      	push rax
  6301                                  	; preparing a non tail-call
  6302 000036FF 488B4528                	mov rax, PARAM(1)	; param s
  6303 00003703 50                      	push rax
  6304 00003704 6A01                    	push 1	; arg count
  6305 00003706 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  6306 0000370E 803805                  	cmp byte [rax], T_undefined
  6307 00003711 0F84CB280100            	je L_error_fvar_undefined
  6308 00003717 803804                  	cmp byte [rax], T_closure
  6309 0000371A 0F8546290100            	jne L_error_non_closure
  6310 00003720 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6311 00003723 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6312 00003726 50                      	push rax
  6313 00003727 6A02                    	push 2	; arg count
  6314 00003729 488B4510                	mov rax, ENV
  6315 0000372D 488B00                  	mov rax, qword [rax + 8 * 0]
  6316 00003730 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  6317 00003733 488B00                  	mov rax, qword [rax]
  6318 00003736 803804                  	cmp byte [rax], T_closure
  6319 00003739 0F8527290100            	jne L_error_non_closure
  6320 0000373F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6321 00003742 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6322 00003745 50                      	push rax
  6323 00003746 488B4520                	mov rax, PARAM(0)	; param f
  6324 0000374A 50                      	push rax
  6325 0000374B 6A02                    	push 2	; arg count
  6326 0000374D 488B0425[950F0000]      	mov rax, qword [free_var_29]	; free var __bin-apply
  6327 00003755 803805                  	cmp byte [rax], T_undefined
  6328 00003758 0F8484280100            	je L_error_fvar_undefined
  6329 0000375E 803804                  	cmp byte [rax], T_closure
  6330 00003761 0F85FF280100            	jne L_error_non_closure
  6331 00003767 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6332                                  
  6333                                  	; recycling the current frame
  6334 0000376A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6335 0000376D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6336 00003770 B906000000              	mov rcx, 2 + 4
  6337 00003775 488B5D18                	mov rbx, COUNT
  6338 00003779 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6339 0000377E 488D55F8                	lea rdx, [rbp - 8 * 1]
  6340                                  .L_tc_recycle_frame_loop_03f9:
  6341 00003782 4883F900                	cmp rcx, 0
  6342 00003786 7413                    	je .L_tc_recycle_frame_done_03f9
  6343 00003788 488B32                  	mov rsi, qword [rdx]
  6344 0000378B 488933                  	mov qword [rbx], rsi
  6345 0000378E 48FFC9                  	dec rcx
  6346 00003791 4883EB08                	sub rbx, 8 * 1
  6347 00003795 4883EA08                	sub rdx, 8 * 1
  6348 00003799 EBE7                    	jmp .L_tc_recycle_frame_loop_03f9
  6349                                  .L_tc_recycle_frame_done_03f9:
  6350 0000379B 488D6308                	lea rsp, [rbx + 8 * 1]
  6351 0000379F 5D                      	pop rbp	; the proc will restore it!
  6352 000037A0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6353 000037A3 C9                      	leave
  6354 000037A4 C22000                  	ret AND_KILL_FRAME(2)
  6355                                  .L_lambda_opt_end_0067:	; new closure is in rax
  6356 000037A7 C9                      	leave
  6357 000037A8 C21800                  	ret AND_KILL_FRAME(1)
  6358                                  .L_lambda_simple_end_0315:	; new closure is in rax
  6359 000037AB 803804                  	cmp byte [rax], T_closure
  6360 000037AE 0F85B2280100            	jne L_error_non_closure
  6361 000037B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6362 000037B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6363 000037BA 48890425[C3140000]      	mov qword [free_var_107], rax
  6364 000037C2 48B8-                   	mov rax, sob_void
  6364 000037C4 [0000000000000000] 
  6365                                  
  6366 000037CC 4889C7                  	mov rdi, rax
  6367 000037CF E84D2A0100              	call print_sexpr_if_not_void
  6368                                  
  6369 000037D4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6370 000037D9 E831290100              	call malloc
  6371 000037DE 50                      	push rax
  6372 000037DF BF00000000              	mov rdi, 8 * 0	; new rib
  6373 000037E4 E826290100              	call malloc
  6374 000037E9 50                      	push rax
  6375 000037EA BF08000000              	mov rdi, 8 * 1	; extended env
  6376 000037EF E81B290100              	call malloc
  6377 000037F4 488B7D10                	mov rdi, ENV
  6378 000037F8 BE00000000              	mov rsi, 0
  6379 000037FD BA01000000              	mov rdx, 1
  6380                                  .L_lambda_opt_env_loop_0068:	; ext_env[i + 1] <-- env[i]
  6381 00003802 4883FE00                	cmp rsi, 0
  6382 00003806 7410                    	je .L_lambda_opt_env_end_0068
  6383 00003808 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6384 0000380C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6385 00003810 48FFC6                  	inc rsi
  6386 00003813 48FFC2                  	inc rdx
  6387 00003816 EBEA                    	jmp .L_lambda_opt_env_loop_0068
  6388                                  .L_lambda_opt_env_end_0068:
  6389 00003818 5B                      	pop rbx
  6390 00003819 BE00000000              	mov rsi, 0
  6391                                  .L_lambda_opt_params_loop_0068:	; copy params
  6392 0000381E 4883FE00                	cmp rsi, 0
  6393 00003822 740E                    	je .L_lambda_opt_params_end_0068
  6394 00003824 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6395 00003829 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6396 0000382D 48FFC6                  	inc rsi
  6397 00003830 EBEC                    	jmp .L_lambda_opt_params_loop_0068
  6398                                  .L_lambda_opt_params_end_0068:
  6399 00003832 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6400 00003835 4889C3                  	mov rbx, rax
  6401 00003838 58                      	pop rax
  6402 00003839 C60004                  	mov byte [rax], T_closure
  6403 0000383C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6404 00003840 48C74009[4D380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0068
  6405 00003848 E9BA040000              	jmp .L_lambda_opt_end_0068
  6406                                  .L_lambda_opt_code_0068:	; lambda-opt body
  6407 0000384D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6408 00003853 0F8404010000            	je .L_lambda_opt_arity_check_exact_0068
  6409 00003859 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6410 0000385F 7F0B                    	jg .L_lambda_opt_arity_check_more_0068
  6411 00003861 FF742410                	push qword [rsp + 8 * 2]
  6412 00003865 6A01                    	push 1
  6413 00003867 E970280100              	jmp L_error_incorrect_arity_opt
  6414                                  .L_lambda_opt_arity_check_more_0068:
  6415 0000386C 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  6416 00003871 41B901000000            	mov r9 , 1
  6417 00003877 4989E7                  	mov r15, rsp
  6418 0000387A 4D29C8                  	sub r8, r9
  6419 0000387D 41B900000000            	mov r9, 0
  6420 00003883 498D5F10                	lea rbx, [r15 + 8 * 2]
  6421 00003887 498B4710                	mov rax, qword [r15 + 8 * 2]
  6422 0000388B 486BC008                	imul rax, 8
  6423 0000388F 4801C3                  	add rbx, rax
  6424 00003892 488B13                  	mov rdx , qword [rbx]
  6425 00003895 4989DA                  	mov r10 , rbx
  6426 00003898 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
  6427 0000389D 52                      	push rdx
  6428 0000389E 53                      	push rbx
  6429 0000389F 4150                    	push r8
  6430 000038A1 4151                    	push r9
  6431 000038A3 4152                    	push r10
  6432 000038A5 4157                    	push r15
  6433 000038A7 E863280100              	call malloc
  6434 000038AC 415F                    	pop r15
  6435 000038AE 415A                    	pop r10
  6436 000038B0 4159                    	pop r9
  6437 000038B2 4158                    	pop r8
  6438 000038B4 5B                      	pop rbx
  6439 000038B5 5A                      	pop rdx
  6440 000038B6 C60021                  	mov byte qword [rax], T_pair
  6441 000038B9 48895001                	mov SOB_PAIR_CAR(rax), rdx
  6442 000038BD 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
  6443 000038C5 498902                  	mov qword [r10], rax
  6444 000038C8 49FFC1                  	inc r9
  6445 000038CB 4883EB08                	sub rbx, 8
  6446 000038CF 4D39C1                  	cmp r9, r8
  6447 000038D2 743E                    	je .L_lambda_opt_stack_shrink_loop_0206
  6448                                  .L_lambda_opt_stack_shrink_loop_0205:
  6449 000038D4 488B13                  	mov rdx, qword [rbx]
  6450 000038D7 53                      	push rbx
  6451 000038D8 4150                    	push r8
  6452 000038DA 4151                    	push r9
  6453 000038DC 4152                    	push r10
  6454 000038DE 4157                    	push r15
  6455 000038E0 52                      	push rdx
  6456 000038E1 BF11000000              	mov rdi, (1 + 8 + 8)
  6457 000038E6 E824280100              	call malloc
  6458 000038EB 5A                      	pop rdx
  6459 000038EC 415F                    	pop r15
  6460 000038EE 415A                    	pop r10
  6461 000038F0 4159                    	pop r9
  6462 000038F2 4158                    	pop r8
  6463 000038F4 5B                      	pop rbx
  6464 000038F5 C60021                  	mov byte [rax], T_pair
  6465 000038F8 48895001                	mov SOB_PAIR_CAR(rax), rdx
  6466 000038FC 4D8B32                  	mov r14, qword [r10]
  6467 000038FF 4C897009                	mov SOB_PAIR_CDR(rax), r14
  6468 00003903 498902                  	mov qword [r10], rax
  6469 00003906 49FFC1                  	inc r9
  6470 00003909 4883EB08                	sub rbx, 8
  6471 0000390D 4D39C1                  	cmp r9, r8
  6472 00003910 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_0205
  6473                                  .L_lambda_opt_stack_shrink_loop_0206:
  6474 00003912 498D5710                	lea rdx, [r15 + 8 * 2]
  6475 00003916 48C70201000000          	mov qword [rdx], 1
  6476 0000391D 48830201                	add qword [rdx] , 1
  6477 00003921 4D89C1                  	mov r9, r8
  6478 00003924 49FFC9                  	dec r9
  6479 00003927 4E8D0CCB                	lea r9, [rbx + 8 * r9]
  6480                                  .L_lambda_opt_stack_shrink_loop_0207:
  6481 0000392B 488B03                  	mov rax, qword [rbx]
  6482 0000392E 498901                  	mov qword [r9], rax
  6483 00003931 4983E908                	sub r9 , 8
  6484 00003935 4883EB08                	sub rbx, 8
  6485 00003939 4C39FB                  	cmp rbx, r15
  6486 0000393C 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0207
  6487 0000393E 488B03                  	mov rax, qword [rbx]
  6488 00003941 498901                  	mov qword [r9], rax
  6489 00003944 4D89C1                  	mov r9, r8
  6490 00003947 4983E901                	sub r9 , 1
  6491 0000394B 4983F900                	cmp r9, 0
  6492 0000394F 7446                    je .L_lambda_opt_stack_adjusted_0068
  6493                                  .L_lambda_opt_stack_shrink_loop_0208:
  6494 00003951 58                      	pop rax
  6495 00003952 49FFC9                  	dec r9
  6496 00003955 4983F900                	cmp r9, 0
  6497 00003959 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0208
  6498 0000395B EB3A                    jmp .L_lambda_opt_stack_adjusted_0068
  6499                                  .L_lambda_opt_arity_check_exact_0068:
  6500 0000395D 4989E7                  	mov r15, rsp
  6501 00003960 498D5F18                	lea rbx, [r15 + 8 * 2 + 8 * 1]
  6502 00003964 488B0B                  	mov rcx, qword [rbx]
  6503 00003967 48C703[01000000]        	mov qword [rbx], sob_nil
  6504 0000396E 4883EB08                	sub rbx, 8
  6505                                  .L_lambda_opt_stack_shrink_loop_0204:
  6506 00003972 488B13                  	mov rdx, qword [rbx]
  6507 00003975 48890B                  	mov qword [rbx], rcx
  6508 00003978 4C39FB                  	cmp rbx, r15
  6509 0000397B 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0068
  6510 0000397D 4889D1                  	mov rcx, rdx
  6511 00003980 4883EB08                	sub rbx, 8
  6512 00003984 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_0204
  6513                                  .L_lambda_opt_stack_shrink_loop_exit_0068:
  6514 00003986 52                      	push rdx
  6515 00003987 4989E7                  	mov r15, rsp
  6516 0000398A 4983C710                	add r15, 16
  6517 0000398E 498B1F                  	mov rbx, qword [r15]
  6518 00003991 48FFC3                  	inc rbx
  6519 00003994 49891F                  	mov qword [r15], rbx
  6520                                  .L_lambda_opt_stack_adjusted_0068:
  6521 00003997 C8000000                	enter 0, 0
  6522                                  	; preparing a tail-call
  6523 0000399B 48B8-                   	mov rax, L_constants + 1881
  6523 0000399D [5907000000000000] 
  6524 000039A5 50                      	push rax
  6525 000039A6 6A01                    	push 1	; arg count
  6526 000039A8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6527 000039AD E85D270100              	call malloc
  6528 000039B2 50                      	push rax
  6529 000039B3 BF10000000              	mov rdi, 8 * 2	; new rib
  6530 000039B8 E852270100              	call malloc
  6531 000039BD 50                      	push rax
  6532 000039BE BF10000000              	mov rdi, 8 * 2	; extended env
  6533 000039C3 E847270100              	call malloc
  6534 000039C8 488B7D10                	mov rdi, ENV
  6535 000039CC BE00000000              	mov rsi, 0
  6536 000039D1 BA01000000              	mov rdx, 1
  6537                                  .L_lambda_simple_env_loop_0317:	; ext_env[i + 1] <-- env[i]
  6538 000039D6 4883FE01                	cmp rsi, 1
  6539 000039DA 7410                    	je .L_lambda_simple_env_end_0317
  6540 000039DC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6541 000039E0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6542 000039E4 48FFC6                  	inc rsi
  6543 000039E7 48FFC2                  	inc rdx
  6544 000039EA EBEA                    	jmp .L_lambda_simple_env_loop_0317
  6545                                  .L_lambda_simple_env_end_0317:
  6546 000039EC 5B                      	pop rbx
  6547 000039ED BE00000000              	mov rsi, 0
  6548                                  .L_lambda_simple_params_loop_0317:	; copy params
  6549 000039F2 4883FE02                	cmp rsi, 2
  6550 000039F6 740E                    	je .L_lambda_simple_params_end_0317
  6551 000039F8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6552 000039FD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6553 00003A01 48FFC6                  	inc rsi
  6554 00003A04 EBEC                    	jmp .L_lambda_simple_params_loop_0317
  6555                                  .L_lambda_simple_params_end_0317:
  6556 00003A06 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6557 00003A09 4889C3                  	mov rbx, rax
  6558 00003A0C 58                      	pop rax
  6559 00003A0D C60004                  	mov byte [rax], T_closure
  6560 00003A10 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6561 00003A14 48C74009[213A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0317
  6562 00003A1C E99D020000              	jmp .L_lambda_simple_end_0317
  6563                                  .L_lambda_simple_code_0317:	; lambda-simple body
  6564 00003A21 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6565 00003A27 740B                    	je .L_lambda_simple_arity_check_ok_0317
  6566 00003A29 FF742410                	push qword [rsp + 8 * 2]
  6567 00003A2D 6A01                    	push 1
  6568 00003A2F E994260100              	jmp L_error_incorrect_arity_simple
  6569                                  .L_lambda_simple_arity_check_ok_0317:
  6570 00003A34 C8000000                	enter 0, 0
  6571 00003A38 BF08000000              	mov rdi, 8	; sob_box
  6572 00003A3D E8CD260100              	call malloc
  6573 00003A42 488B5D20                	mov rbx, PARAM(0)
  6574 00003A46 488918                  	mov [rax], rbx
  6575 00003A49 48894520                	mov PARAM(0), rax
  6576 00003A4D 48B8-                   	mov rax, sob_void
  6576 00003A4F [0000000000000000] 
  6577                                  
  6578 00003A57 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6579 00003A5C E8AE260100              	call malloc
  6580 00003A61 50                      	push rax
  6581 00003A62 BF08000000              	mov rdi, 8 * 1	; new rib
  6582 00003A67 E8A3260100              	call malloc
  6583 00003A6C 50                      	push rax
  6584 00003A6D BF18000000              	mov rdi, 8 * 3	; extended env
  6585 00003A72 E898260100              	call malloc
  6586 00003A77 488B7D10                	mov rdi, ENV
  6587 00003A7B BE00000000              	mov rsi, 0
  6588 00003A80 BA01000000              	mov rdx, 1
  6589                                  .L_lambda_simple_env_loop_0318:	; ext_env[i + 1] <-- env[i]
  6590 00003A85 4883FE02                	cmp rsi, 2
  6591 00003A89 7410                    	je .L_lambda_simple_env_end_0318
  6592 00003A8B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6593 00003A8F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6594 00003A93 48FFC6                  	inc rsi
  6595 00003A96 48FFC2                  	inc rdx
  6596 00003A99 EBEA                    	jmp .L_lambda_simple_env_loop_0318
  6597                                  .L_lambda_simple_env_end_0318:
  6598 00003A9B 5B                      	pop rbx
  6599 00003A9C BE00000000              	mov rsi, 0
  6600                                  .L_lambda_simple_params_loop_0318:	; copy params
  6601 00003AA1 4883FE01                	cmp rsi, 1
  6602 00003AA5 740E                    	je .L_lambda_simple_params_end_0318
  6603 00003AA7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6604 00003AAC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6605 00003AB0 48FFC6                  	inc rsi
  6606 00003AB3 EBEC                    	jmp .L_lambda_simple_params_loop_0318
  6607                                  .L_lambda_simple_params_end_0318:
  6608 00003AB5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6609 00003AB8 4889C3                  	mov rbx, rax
  6610 00003ABB 58                      	pop rax
  6611 00003ABC C60004                  	mov byte [rax], T_closure
  6612 00003ABF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6613 00003AC3 48C74009[D03A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0318
  6614 00003ACB E97F010000              	jmp .L_lambda_simple_end_0318
  6615                                  .L_lambda_simple_code_0318:	; lambda-simple body
  6616 00003AD0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6617 00003AD6 740B                    	je .L_lambda_simple_arity_check_ok_0318
  6618 00003AD8 FF742410                	push qword [rsp + 8 * 2]
  6619 00003ADC 6A01                    	push 1
  6620 00003ADE E9E5250100              	jmp L_error_incorrect_arity_simple
  6621                                  .L_lambda_simple_arity_check_ok_0318:
  6622 00003AE3 C8000000                	enter 0, 0
  6623                                  	; preparing a non tail-call
  6624                                  	; preparing a non tail-call
  6625 00003AE7 488B4520                	mov rax, PARAM(0)	; param s
  6626 00003AEB 50                      	push rax
  6627 00003AEC 6A01                    	push 1	; arg count
  6628 00003AEE 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  6629 00003AF6 803805                  	cmp byte [rax], T_undefined
  6630 00003AF9 0F84E3240100            	je L_error_fvar_undefined
  6631 00003AFF 803804                  	cmp byte [rax], T_closure
  6632 00003B02 0F855E250100            	jne L_error_non_closure
  6633 00003B08 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6634 00003B0B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6635 00003B0E 50                      	push rax
  6636 00003B0F 6A01                    	push 1	; arg count
  6637 00003B11 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
  6638 00003B19 803805                  	cmp byte [rax], T_undefined
  6639 00003B1C 0F84C0240100            	je L_error_fvar_undefined
  6640 00003B22 803804                  	cmp byte [rax], T_closure
  6641 00003B25 0F853B250100            	jne L_error_non_closure
  6642 00003B2B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6643 00003B2E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6644 00003B31 483D[02000000]          	cmp rax, sob_boolean_false
  6645 00003B37 0F8404010000            	je .L_if_else_0221
  6646                                  	; preparing a non tail-call
  6647                                  	; preparing a non tail-call
  6648 00003B3D 488B4520                	mov rax, PARAM(0)	; param s
  6649 00003B41 50                      	push rax
  6650 00003B42 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  6651 00003B4A 803805                  	cmp byte [rax], T_undefined
  6652 00003B4D 0F848F240100            	je L_error_fvar_undefined
  6653 00003B53 50                      	push rax
  6654 00003B54 6A02                    	push 2	; arg count
  6655 00003B56 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  6656 00003B5E 803805                  	cmp byte [rax], T_undefined
  6657 00003B61 0F847B240100            	je L_error_fvar_undefined
  6658 00003B67 803804                  	cmp byte [rax], T_closure
  6659 00003B6A 0F85F6240100            	jne L_error_non_closure
  6660 00003B70 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6661 00003B73 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6662 00003B76 50                      	push rax
  6663 00003B77 488B4510                	mov rax, ENV
  6664 00003B7B 488B4008                	mov rax, qword [rax + 8 * 1]
  6665 00003B7F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6666 00003B82 50                      	push rax
  6667 00003B83 6A02                    	push 2	; arg count
  6668 00003B85 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
  6669 00003B8D 803805                  	cmp byte [rax], T_undefined
  6670 00003B90 0F844C240100            	je L_error_fvar_undefined
  6671 00003B96 803804                  	cmp byte [rax], T_closure
  6672 00003B99 0F85C7240100            	jne L_error_non_closure
  6673 00003B9F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6674 00003BA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6675 00003BA5 483D[02000000]          	cmp rax, sob_boolean_false
  6676 00003BAB 0F858E000000            	jne .L_or_end_0037
  6677                                  	; preparing a tail-call
  6678                                  	; preparing a non tail-call
  6679 00003BB1 488B4520                	mov rax, PARAM(0)	; param s
  6680 00003BB5 50                      	push rax
  6681 00003BB6 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  6682 00003BBE 803805                  	cmp byte [rax], T_undefined
  6683 00003BC1 0F841B240100            	je L_error_fvar_undefined
  6684 00003BC7 50                      	push rax
  6685 00003BC8 6A02                    	push 2	; arg count
  6686 00003BCA 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  6687 00003BD2 803805                  	cmp byte [rax], T_undefined
  6688 00003BD5 0F8407240100            	je L_error_fvar_undefined
  6689 00003BDB 803804                  	cmp byte [rax], T_closure
  6690 00003BDE 0F8582240100            	jne L_error_non_closure
  6691 00003BE4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6692 00003BE7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6693 00003BEA 50                      	push rax
  6694 00003BEB 6A01                    	push 1	; arg count
  6695 00003BED 488B4510                	mov rax, ENV
  6696 00003BF1 488B00                  	mov rax, qword [rax + 8 * 0]
  6697 00003BF4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6698 00003BF7 488B00                  	mov rax, qword [rax]
  6699 00003BFA 803804                  	cmp byte [rax], T_closure
  6700 00003BFD 0F8563240100            	jne L_error_non_closure
  6701 00003C03 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6702                                  
  6703                                  	; recycling the current frame
  6704 00003C06 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6705 00003C09 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6706 00003C0C B905000000              	mov rcx, 1 + 4
  6707 00003C11 488B5D18                	mov rbx, COUNT
  6708 00003C15 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6709 00003C1A 488D55F8                	lea rdx, [rbp - 8 * 1]
  6710                                  .L_tc_recycle_frame_loop_03fa:
  6711 00003C1E 4883F900                	cmp rcx, 0
  6712 00003C22 7413                    	je .L_tc_recycle_frame_done_03fa
  6713 00003C24 488B32                  	mov rsi, qword [rdx]
  6714 00003C27 488933                  	mov qword [rbx], rsi
  6715 00003C2A 48FFC9                  	dec rcx
  6716 00003C2D 4883EB08                	sub rbx, 8 * 1
  6717 00003C31 4883EA08                	sub rdx, 8 * 1
  6718 00003C35 EBE7                    	jmp .L_tc_recycle_frame_loop_03fa
  6719                                  .L_tc_recycle_frame_done_03fa:
  6720 00003C37 488D6308                	lea rsp, [rbx + 8 * 1]
  6721 00003C3B 5D                      	pop rbp	; the proc will restore it!
  6722 00003C3C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6723                                  .L_or_end_0037:
  6724 00003C3F EB0A                    	jmp .L_if_end_0221
  6725                                  .L_if_else_0221:
  6726 00003C41 48B8-                   	mov rax, L_constants + 2
  6726 00003C43 [0200000000000000] 
  6727                                  .L_if_end_0221:
  6728 00003C4B C9                      	leave
  6729 00003C4C C21800                  	ret AND_KILL_FRAME(1)
  6730                                  .L_lambda_simple_end_0318:	; new closure is in rax
  6731 00003C4F 50                      	push rax
  6732 00003C50 488B4520                	mov rax, PARAM(0)	; param loop
  6733 00003C54 8F00                    	pop qword [rax]
  6734 00003C56 48B8-                   	mov rax, sob_void
  6734 00003C58 [0000000000000000] 
  6735                                  
  6736                                  	; preparing a tail-call
  6737 00003C60 488B4510                	mov rax, ENV
  6738 00003C64 488B00                  	mov rax, qword [rax + 8 * 0]
  6739 00003C67 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6740 00003C6B 50                      	push rax
  6741 00003C6C 6A01                    	push 1	; arg count
  6742 00003C6E 488B4520                	mov rax, PARAM(0)	; param loop
  6743 00003C72 488B00                  	mov rax, qword [rax]
  6744 00003C75 803804                  	cmp byte [rax], T_closure
  6745 00003C78 0F85E8230100            	jne L_error_non_closure
  6746 00003C7E FF7001                  	push SOB_CLOSURE_ENV(rax)
  6747                                  
  6748                                  	; recycling the current frame
  6749 00003C81 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6750 00003C84 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6751 00003C87 B905000000              	mov rcx, 1 + 4
  6752 00003C8C 488B5D18                	mov rbx, COUNT
  6753 00003C90 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6754 00003C95 488D55F8                	lea rdx, [rbp - 8 * 1]
  6755                                  .L_tc_recycle_frame_loop_03fb:
  6756 00003C99 4883F900                	cmp rcx, 0
  6757 00003C9D 7413                    	je .L_tc_recycle_frame_done_03fb
  6758 00003C9F 488B32                  	mov rsi, qword [rdx]
  6759 00003CA2 488933                  	mov qword [rbx], rsi
  6760 00003CA5 48FFC9                  	dec rcx
  6761 00003CA8 4883EB08                	sub rbx, 8 * 1
  6762 00003CAC 4883EA08                	sub rdx, 8 * 1
  6763 00003CB0 EBE7                    	jmp .L_tc_recycle_frame_loop_03fb
  6764                                  .L_tc_recycle_frame_done_03fb:
  6765 00003CB2 488D6308                	lea rsp, [rbx + 8 * 1]
  6766 00003CB6 5D                      	pop rbp	; the proc will restore it!
  6767 00003CB7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6768 00003CBA C9                      	leave
  6769 00003CBB C21800                  	ret AND_KILL_FRAME(1)
  6770                                  .L_lambda_simple_end_0317:	; new closure is in rax
  6771 00003CBE 803804                  	cmp byte [rax], T_closure
  6772 00003CC1 0F859F230100            	jne L_error_non_closure
  6773 00003CC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6774                                  
  6775                                  	; recycling the current frame
  6776 00003CCA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6777 00003CCD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6778 00003CD0 B905000000              	mov rcx, 1 + 4
  6779 00003CD5 488B5D18                	mov rbx, COUNT
  6780 00003CD9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6781 00003CDE 488D55F8                	lea rdx, [rbp - 8 * 1]
  6782                                  .L_tc_recycle_frame_loop_03fc:
  6783 00003CE2 4883F900                	cmp rcx, 0
  6784 00003CE6 7413                    	je .L_tc_recycle_frame_done_03fc
  6785 00003CE8 488B32                  	mov rsi, qword [rdx]
  6786 00003CEB 488933                  	mov qword [rbx], rsi
  6787 00003CEE 48FFC9                  	dec rcx
  6788 00003CF1 4883EB08                	sub rbx, 8 * 1
  6789 00003CF5 4883EA08                	sub rdx, 8 * 1
  6790 00003CF9 EBE7                    	jmp .L_tc_recycle_frame_loop_03fc
  6791                                  .L_tc_recycle_frame_done_03fc:
  6792 00003CFB 488D6308                	lea rsp, [rbx + 8 * 1]
  6793 00003CFF 5D                      	pop rbp	; the proc will restore it!
  6794 00003D00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6795 00003D03 C9                      	leave
  6796 00003D04 C22000                  	ret AND_KILL_FRAME(2)
  6797                                  .L_lambda_opt_end_0068:	; new closure is in rax
  6798 00003D07 48890425[D4140000]      	mov qword [free_var_108], rax
  6799 00003D0F 48B8-                   	mov rax, sob_void
  6799 00003D11 [0000000000000000] 
  6800                                  
  6801 00003D19 4889C7                  	mov rdi, rax
  6802 00003D1C E800250100              	call print_sexpr_if_not_void
  6803                                  
  6804 00003D21 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6805 00003D26 E8E4230100              	call malloc
  6806 00003D2B 50                      	push rax
  6807 00003D2C BF00000000              	mov rdi, 8 * 0	; new rib
  6808 00003D31 E8D9230100              	call malloc
  6809 00003D36 50                      	push rax
  6810 00003D37 BF08000000              	mov rdi, 8 * 1	; extended env
  6811 00003D3C E8CE230100              	call malloc
  6812 00003D41 488B7D10                	mov rdi, ENV
  6813 00003D45 BE00000000              	mov rsi, 0
  6814 00003D4A BA01000000              	mov rdx, 1
  6815                                  .L_lambda_opt_env_loop_0069:	; ext_env[i + 1] <-- env[i]
  6816 00003D4F 4883FE00                	cmp rsi, 0
  6817 00003D53 7410                    	je .L_lambda_opt_env_end_0069
  6818 00003D55 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6819 00003D59 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6820 00003D5D 48FFC6                  	inc rsi
  6821 00003D60 48FFC2                  	inc rdx
  6822 00003D63 EBEA                    	jmp .L_lambda_opt_env_loop_0069
  6823                                  .L_lambda_opt_env_end_0069:
  6824 00003D65 5B                      	pop rbx
  6825 00003D66 BE00000000              	mov rsi, 0
  6826                                  .L_lambda_opt_params_loop_0069:	; copy params
  6827 00003D6B 4883FE00                	cmp rsi, 0
  6828 00003D6F 740E                    	je .L_lambda_opt_params_end_0069
  6829 00003D71 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6830 00003D76 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6831 00003D7A 48FFC6                  	inc rsi
  6832 00003D7D EBEC                    	jmp .L_lambda_opt_params_loop_0069
  6833                                  .L_lambda_opt_params_end_0069:
  6834 00003D7F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6835 00003D82 4889C3                  	mov rbx, rax
  6836 00003D85 58                      	pop rax
  6837 00003D86 C60004                  	mov byte [rax], T_closure
  6838 00003D89 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6839 00003D8D 48C74009[9A3D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0069
  6840 00003D95 E9BA040000              	jmp .L_lambda_opt_end_0069
  6841                                  .L_lambda_opt_code_0069:	; lambda-opt body
  6842 00003D9A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6843 00003DA0 0F8404010000            	je .L_lambda_opt_arity_check_exact_0069
  6844 00003DA6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6845 00003DAC 7F0B                    	jg .L_lambda_opt_arity_check_more_0069
  6846 00003DAE FF742410                	push qword [rsp + 8 * 2]
  6847 00003DB2 6A01                    	push 1
  6848 00003DB4 E923230100              	jmp L_error_incorrect_arity_opt
  6849                                  .L_lambda_opt_arity_check_more_0069:
  6850 00003DB9 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  6851 00003DBE 41B901000000            	mov r9 , 1
  6852 00003DC4 4989E7                  	mov r15, rsp
  6853 00003DC7 4D29C8                  	sub r8, r9
  6854 00003DCA 41B900000000            	mov r9, 0
  6855 00003DD0 498D5F10                	lea rbx, [r15 + 8 * 2]
  6856 00003DD4 498B4710                	mov rax, qword [r15 + 8 * 2]
  6857 00003DD8 486BC008                	imul rax, 8
  6858 00003DDC 4801C3                  	add rbx, rax
  6859 00003DDF 488B13                  	mov rdx , qword [rbx]
  6860 00003DE2 4989DA                  	mov r10 , rbx
  6861 00003DE5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
  6862 00003DEA 52                      	push rdx
  6863 00003DEB 53                      	push rbx
  6864 00003DEC 4150                    	push r8
  6865 00003DEE 4151                    	push r9
  6866 00003DF0 4152                    	push r10
  6867 00003DF2 4157                    	push r15
  6868 00003DF4 E816230100              	call malloc
  6869 00003DF9 415F                    	pop r15
  6870 00003DFB 415A                    	pop r10
  6871 00003DFD 4159                    	pop r9
  6872 00003DFF 4158                    	pop r8
  6873 00003E01 5B                      	pop rbx
  6874 00003E02 5A                      	pop rdx
  6875 00003E03 C60021                  	mov byte qword [rax], T_pair
  6876 00003E06 48895001                	mov SOB_PAIR_CAR(rax), rdx
  6877 00003E0A 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
  6878 00003E12 498902                  	mov qword [r10], rax
  6879 00003E15 49FFC1                  	inc r9
  6880 00003E18 4883EB08                	sub rbx, 8
  6881 00003E1C 4D39C1                  	cmp r9, r8
  6882 00003E1F 743E                    	je .L_lambda_opt_stack_shrink_loop_020b
  6883                                  .L_lambda_opt_stack_shrink_loop_020a:
  6884 00003E21 488B13                  	mov rdx, qword [rbx]
  6885 00003E24 53                      	push rbx
  6886 00003E25 4150                    	push r8
  6887 00003E27 4151                    	push r9
  6888 00003E29 4152                    	push r10
  6889 00003E2B 4157                    	push r15
  6890 00003E2D 52                      	push rdx
  6891 00003E2E BF11000000              	mov rdi, (1 + 8 + 8)
  6892 00003E33 E8D7220100              	call malloc
  6893 00003E38 5A                      	pop rdx
  6894 00003E39 415F                    	pop r15
  6895 00003E3B 415A                    	pop r10
  6896 00003E3D 4159                    	pop r9
  6897 00003E3F 4158                    	pop r8
  6898 00003E41 5B                      	pop rbx
  6899 00003E42 C60021                  	mov byte [rax], T_pair
  6900 00003E45 48895001                	mov SOB_PAIR_CAR(rax), rdx
  6901 00003E49 4D8B32                  	mov r14, qword [r10]
  6902 00003E4C 4C897009                	mov SOB_PAIR_CDR(rax), r14
  6903 00003E50 498902                  	mov qword [r10], rax
  6904 00003E53 49FFC1                  	inc r9
  6905 00003E56 4883EB08                	sub rbx, 8
  6906 00003E5A 4D39C1                  	cmp r9, r8
  6907 00003E5D 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_020a
  6908                                  .L_lambda_opt_stack_shrink_loop_020b:
  6909 00003E5F 498D5710                	lea rdx, [r15 + 8 * 2]
  6910 00003E63 48C70201000000          	mov qword [rdx], 1
  6911 00003E6A 48830201                	add qword [rdx] , 1
  6912 00003E6E 4D89C1                  	mov r9, r8
  6913 00003E71 49FFC9                  	dec r9
  6914 00003E74 4E8D0CCB                	lea r9, [rbx + 8 * r9]
  6915                                  .L_lambda_opt_stack_shrink_loop_020c:
  6916 00003E78 488B03                  	mov rax, qword [rbx]
  6917 00003E7B 498901                  	mov qword [r9], rax
  6918 00003E7E 4983E908                	sub r9 , 8
  6919 00003E82 4883EB08                	sub rbx, 8
  6920 00003E86 4C39FB                  	cmp rbx, r15
  6921 00003E89 75ED                    	jne .L_lambda_opt_stack_shrink_loop_020c
  6922 00003E8B 488B03                  	mov rax, qword [rbx]
  6923 00003E8E 498901                  	mov qword [r9], rax
  6924 00003E91 4D89C1                  	mov r9, r8
  6925 00003E94 4983E901                	sub r9 , 1
  6926 00003E98 4983F900                	cmp r9, 0
  6927 00003E9C 7446                    je .L_lambda_opt_stack_adjusted_0069
  6928                                  .L_lambda_opt_stack_shrink_loop_020d:
  6929 00003E9E 58                      	pop rax
  6930 00003E9F 49FFC9                  	dec r9
  6931 00003EA2 4983F900                	cmp r9, 0
  6932 00003EA6 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_020d
  6933 00003EA8 EB3A                    jmp .L_lambda_opt_stack_adjusted_0069
  6934                                  .L_lambda_opt_arity_check_exact_0069:
  6935 00003EAA 4989E7                  	mov r15, rsp
  6936 00003EAD 498D5F18                	lea rbx, [r15 + 8 * 2 + 8 * 1]
  6937 00003EB1 488B0B                  	mov rcx, qword [rbx]
  6938 00003EB4 48C703[01000000]        	mov qword [rbx], sob_nil
  6939 00003EBB 4883EB08                	sub rbx, 8
  6940                                  .L_lambda_opt_stack_shrink_loop_0209:
  6941 00003EBF 488B13                  	mov rdx, qword [rbx]
  6942 00003EC2 48890B                  	mov qword [rbx], rcx
  6943 00003EC5 4C39FB                  	cmp rbx, r15
  6944 00003EC8 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0069
  6945 00003ECA 4889D1                  	mov rcx, rdx
  6946 00003ECD 4883EB08                	sub rbx, 8
  6947 00003ED1 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_0209
  6948                                  .L_lambda_opt_stack_shrink_loop_exit_0069:
  6949 00003ED3 52                      	push rdx
  6950 00003ED4 4989E7                  	mov r15, rsp
  6951 00003ED7 4983C710                	add r15, 16
  6952 00003EDB 498B1F                  	mov rbx, qword [r15]
  6953 00003EDE 48FFC3                  	inc rbx
  6954 00003EE1 49891F                  	mov qword [r15], rbx
  6955                                  .L_lambda_opt_stack_adjusted_0069:
  6956 00003EE4 C8000000                	enter 0, 0
  6957                                  	; preparing a tail-call
  6958 00003EE8 48B8-                   	mov rax, L_constants + 1881
  6958 00003EEA [5907000000000000] 
  6959 00003EF2 50                      	push rax
  6960 00003EF3 6A01                    	push 1	; arg count
  6961 00003EF5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6962 00003EFA E810220100              	call malloc
  6963 00003EFF 50                      	push rax
  6964 00003F00 BF10000000              	mov rdi, 8 * 2	; new rib
  6965 00003F05 E805220100              	call malloc
  6966 00003F0A 50                      	push rax
  6967 00003F0B BF10000000              	mov rdi, 8 * 2	; extended env
  6968 00003F10 E8FA210100              	call malloc
  6969 00003F15 488B7D10                	mov rdi, ENV
  6970 00003F19 BE00000000              	mov rsi, 0
  6971 00003F1E BA01000000              	mov rdx, 1
  6972                                  .L_lambda_simple_env_loop_0319:	; ext_env[i + 1] <-- env[i]
  6973 00003F23 4883FE01                	cmp rsi, 1
  6974 00003F27 7410                    	je .L_lambda_simple_env_end_0319
  6975 00003F29 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6976 00003F2D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6977 00003F31 48FFC6                  	inc rsi
  6978 00003F34 48FFC2                  	inc rdx
  6979 00003F37 EBEA                    	jmp .L_lambda_simple_env_loop_0319
  6980                                  .L_lambda_simple_env_end_0319:
  6981 00003F39 5B                      	pop rbx
  6982 00003F3A BE00000000              	mov rsi, 0
  6983                                  .L_lambda_simple_params_loop_0319:	; copy params
  6984 00003F3F 4883FE02                	cmp rsi, 2
  6985 00003F43 740E                    	je .L_lambda_simple_params_end_0319
  6986 00003F45 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6987 00003F4A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6988 00003F4E 48FFC6                  	inc rsi
  6989 00003F51 EBEC                    	jmp .L_lambda_simple_params_loop_0319
  6990                                  .L_lambda_simple_params_end_0319:
  6991 00003F53 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6992 00003F56 4889C3                  	mov rbx, rax
  6993 00003F59 58                      	pop rax
  6994 00003F5A C60004                  	mov byte [rax], T_closure
  6995 00003F5D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6996 00003F61 48C74009[6E3F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0319
  6997 00003F69 E99D020000              	jmp .L_lambda_simple_end_0319
  6998                                  .L_lambda_simple_code_0319:	; lambda-simple body
  6999 00003F6E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7000 00003F74 740B                    	je .L_lambda_simple_arity_check_ok_0319
  7001 00003F76 FF742410                	push qword [rsp + 8 * 2]
  7002 00003F7A 6A01                    	push 1
  7003 00003F7C E947210100              	jmp L_error_incorrect_arity_simple
  7004                                  .L_lambda_simple_arity_check_ok_0319:
  7005 00003F81 C8000000                	enter 0, 0
  7006 00003F85 BF08000000              	mov rdi, 8	; sob_box
  7007 00003F8A E880210100              	call malloc
  7008 00003F8F 488B5D20                	mov rbx, PARAM(0)
  7009 00003F93 488918                  	mov [rax], rbx
  7010 00003F96 48894520                	mov PARAM(0), rax
  7011 00003F9A 48B8-                   	mov rax, sob_void
  7011 00003F9C [0000000000000000] 
  7012                                  
  7013 00003FA4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7014 00003FA9 E861210100              	call malloc
  7015 00003FAE 50                      	push rax
  7016 00003FAF BF08000000              	mov rdi, 8 * 1	; new rib
  7017 00003FB4 E856210100              	call malloc
  7018 00003FB9 50                      	push rax
  7019 00003FBA BF18000000              	mov rdi, 8 * 3	; extended env
  7020 00003FBF E84B210100              	call malloc
  7021 00003FC4 488B7D10                	mov rdi, ENV
  7022 00003FC8 BE00000000              	mov rsi, 0
  7023 00003FCD BA01000000              	mov rdx, 1
  7024                                  .L_lambda_simple_env_loop_031a:	; ext_env[i + 1] <-- env[i]
  7025 00003FD2 4883FE02                	cmp rsi, 2
  7026 00003FD6 7410                    	je .L_lambda_simple_env_end_031a
  7027 00003FD8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7028 00003FDC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7029 00003FE0 48FFC6                  	inc rsi
  7030 00003FE3 48FFC2                  	inc rdx
  7031 00003FE6 EBEA                    	jmp .L_lambda_simple_env_loop_031a
  7032                                  .L_lambda_simple_env_end_031a:
  7033 00003FE8 5B                      	pop rbx
  7034 00003FE9 BE00000000              	mov rsi, 0
  7035                                  .L_lambda_simple_params_loop_031a:	; copy params
  7036 00003FEE 4883FE01                	cmp rsi, 1
  7037 00003FF2 740E                    	je .L_lambda_simple_params_end_031a
  7038 00003FF4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7039 00003FF9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7040 00003FFD 48FFC6                  	inc rsi
  7041 00004000 EBEC                    	jmp .L_lambda_simple_params_loop_031a
  7042                                  .L_lambda_simple_params_end_031a:
  7043 00004002 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7044 00004005 4889C3                  	mov rbx, rax
  7045 00004008 58                      	pop rax
  7046 00004009 C60004                  	mov byte [rax], T_closure
  7047 0000400C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7048 00004010 48C74009[1D400000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_031a
  7049 00004018 E97F010000              	jmp .L_lambda_simple_end_031a
  7050                                  .L_lambda_simple_code_031a:	; lambda-simple body
  7051 0000401D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7052 00004023 740B                    	je .L_lambda_simple_arity_check_ok_031a
  7053 00004025 FF742410                	push qword [rsp + 8 * 2]
  7054 00004029 6A01                    	push 1
  7055 0000402B E998200100              	jmp L_error_incorrect_arity_simple
  7056                                  .L_lambda_simple_arity_check_ok_031a:
  7057 00004030 C8000000                	enter 0, 0
  7058                                  	; preparing a non tail-call
  7059                                  	; preparing a non tail-call
  7060 00004034 488B4520                	mov rax, PARAM(0)	; param s
  7061 00004038 50                      	push rax
  7062 00004039 6A01                    	push 1	; arg count
  7063 0000403B 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  7064 00004043 803805                  	cmp byte [rax], T_undefined
  7065 00004046 0F84961F0100            	je L_error_fvar_undefined
  7066 0000404C 803804                  	cmp byte [rax], T_closure
  7067 0000404F 0F8511200100            	jne L_error_non_closure
  7068 00004055 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7069 00004058 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7070 0000405B 50                      	push rax
  7071 0000405C 6A01                    	push 1	; arg count
  7072 0000405E 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  7073 00004066 803805                  	cmp byte [rax], T_undefined
  7074 00004069 0F84731F0100            	je L_error_fvar_undefined
  7075 0000406F 803804                  	cmp byte [rax], T_closure
  7076 00004072 0F85EE1F0100            	jne L_error_non_closure
  7077 00004078 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7078 0000407B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7079 0000407E 483D[02000000]          	cmp rax, sob_boolean_false
  7080 00004084 0F850E010000            	jne .L_or_end_0038
  7081                                  	; preparing a non tail-call
  7082                                  	; preparing a non tail-call
  7083 0000408A 488B4520                	mov rax, PARAM(0)	; param s
  7084 0000408E 50                      	push rax
  7085 0000408F 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  7086 00004097 803805                  	cmp byte [rax], T_undefined
  7087 0000409A 0F84421F0100            	je L_error_fvar_undefined
  7088 000040A0 50                      	push rax
  7089 000040A1 6A02                    	push 2	; arg count
  7090 000040A3 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  7091 000040AB 803805                  	cmp byte [rax], T_undefined
  7092 000040AE 0F842E1F0100            	je L_error_fvar_undefined
  7093 000040B4 803804                  	cmp byte [rax], T_closure
  7094 000040B7 0F85A91F0100            	jne L_error_non_closure
  7095 000040BD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7096 000040C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7097 000040C3 50                      	push rax
  7098 000040C4 488B4510                	mov rax, ENV
  7099 000040C8 488B4008                	mov rax, qword [rax + 8 * 1]
  7100 000040CC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  7101 000040CF 50                      	push rax
  7102 000040D0 6A02                    	push 2	; arg count
  7103 000040D2 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
  7104 000040DA 803805                  	cmp byte [rax], T_undefined
  7105 000040DD 0F84FF1E0100            	je L_error_fvar_undefined
  7106 000040E3 803804                  	cmp byte [rax], T_closure
  7107 000040E6 0F857A1F0100            	jne L_error_non_closure
  7108 000040EC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7109 000040EF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7110 000040F2 483D[02000000]          	cmp rax, sob_boolean_false
  7111 000040F8 0F8490000000            	je .L_if_else_0222
  7112                                  	; preparing a tail-call
  7113                                  	; preparing a non tail-call
  7114 000040FE 488B4520                	mov rax, PARAM(0)	; param s
  7115 00004102 50                      	push rax
  7116 00004103 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7117 0000410B 803805                  	cmp byte [rax], T_undefined
  7118 0000410E 0F84CE1E0100            	je L_error_fvar_undefined
  7119 00004114 50                      	push rax
  7120 00004115 6A02                    	push 2	; arg count
  7121 00004117 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  7122 0000411F 803805                  	cmp byte [rax], T_undefined
  7123 00004122 0F84BA1E0100            	je L_error_fvar_undefined
  7124 00004128 803804                  	cmp byte [rax], T_closure
  7125 0000412B 0F85351F0100            	jne L_error_non_closure
  7126 00004131 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7127 00004134 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7128 00004137 50                      	push rax
  7129 00004138 6A01                    	push 1	; arg count
  7130 0000413A 488B4510                	mov rax, ENV
  7131 0000413E 488B00                  	mov rax, qword [rax + 8 * 0]
  7132 00004141 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  7133 00004144 488B00                  	mov rax, qword [rax]
  7134 00004147 803804                  	cmp byte [rax], T_closure
  7135 0000414A 0F85161F0100            	jne L_error_non_closure
  7136 00004150 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7137                                  
  7138                                  	; recycling the current frame
  7139 00004153 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7140 00004156 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7141 00004159 B905000000              	mov rcx, 1 + 4
  7142 0000415E 488B5D18                	mov rbx, COUNT
  7143 00004162 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7144 00004167 488D55F8                	lea rdx, [rbp - 8 * 1]
  7145                                  .L_tc_recycle_frame_loop_03fd:
  7146 0000416B 4883F900                	cmp rcx, 0
  7147 0000416F 7413                    	je .L_tc_recycle_frame_done_03fd
  7148 00004171 488B32                  	mov rsi, qword [rdx]
  7149 00004174 488933                  	mov qword [rbx], rsi
  7150 00004177 48FFC9                  	dec rcx
  7151 0000417A 4883EB08                	sub rbx, 8 * 1
  7152 0000417E 4883EA08                	sub rdx, 8 * 1
  7153 00004182 EBE7                    	jmp .L_tc_recycle_frame_loop_03fd
  7154                                  .L_tc_recycle_frame_done_03fd:
  7155 00004184 488D6308                	lea rsp, [rbx + 8 * 1]
  7156 00004188 5D                      	pop rbp	; the proc will restore it!
  7157 00004189 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7158 0000418C EB0A                    	jmp .L_if_end_0222
  7159                                  .L_if_else_0222:
  7160 0000418E 48B8-                   	mov rax, L_constants + 2
  7160 00004190 [0200000000000000] 
  7161                                  .L_if_end_0222:
  7162                                  .L_or_end_0038:
  7163 00004198 C9                      	leave
  7164 00004199 C21800                  	ret AND_KILL_FRAME(1)
  7165                                  .L_lambda_simple_end_031a:	; new closure is in rax
  7166 0000419C 50                      	push rax
  7167 0000419D 488B4520                	mov rax, PARAM(0)	; param loop
  7168 000041A1 8F00                    	pop qword [rax]
  7169 000041A3 48B8-                   	mov rax, sob_void
  7169 000041A5 [0000000000000000] 
  7170                                  
  7171                                  	; preparing a tail-call
  7172 000041AD 488B4510                	mov rax, ENV
  7173 000041B1 488B00                  	mov rax, qword [rax + 8 * 0]
  7174 000041B4 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7175 000041B8 50                      	push rax
  7176 000041B9 6A01                    	push 1	; arg count
  7177 000041BB 488B4520                	mov rax, PARAM(0)	; param loop
  7178 000041BF 488B00                  	mov rax, qword [rax]
  7179 000041C2 803804                  	cmp byte [rax], T_closure
  7180 000041C5 0F859B1E0100            	jne L_error_non_closure
  7181 000041CB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7182                                  
  7183                                  	; recycling the current frame
  7184 000041CE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7185 000041D1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7186 000041D4 B905000000              	mov rcx, 1 + 4
  7187 000041D9 488B5D18                	mov rbx, COUNT
  7188 000041DD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7189 000041E2 488D55F8                	lea rdx, [rbp - 8 * 1]
  7190                                  .L_tc_recycle_frame_loop_03fe:
  7191 000041E6 4883F900                	cmp rcx, 0
  7192 000041EA 7413                    	je .L_tc_recycle_frame_done_03fe
  7193 000041EC 488B32                  	mov rsi, qword [rdx]
  7194 000041EF 488933                  	mov qword [rbx], rsi
  7195 000041F2 48FFC9                  	dec rcx
  7196 000041F5 4883EB08                	sub rbx, 8 * 1
  7197 000041F9 4883EA08                	sub rdx, 8 * 1
  7198 000041FD EBE7                    	jmp .L_tc_recycle_frame_loop_03fe
  7199                                  .L_tc_recycle_frame_done_03fe:
  7200 000041FF 488D6308                	lea rsp, [rbx + 8 * 1]
  7201 00004203 5D                      	pop rbp	; the proc will restore it!
  7202 00004204 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7203 00004207 C9                      	leave
  7204 00004208 C21800                  	ret AND_KILL_FRAME(1)
  7205                                  .L_lambda_simple_end_0319:	; new closure is in rax
  7206 0000420B 803804                  	cmp byte [rax], T_closure
  7207 0000420E 0F85521E0100            	jne L_error_non_closure
  7208 00004214 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7209                                  
  7210                                  	; recycling the current frame
  7211 00004217 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7212 0000421A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7213 0000421D B905000000              	mov rcx, 1 + 4
  7214 00004222 488B5D18                	mov rbx, COUNT
  7215 00004226 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7216 0000422B 488D55F8                	lea rdx, [rbp - 8 * 1]
  7217                                  .L_tc_recycle_frame_loop_03ff:
  7218 0000422F 4883F900                	cmp rcx, 0
  7219 00004233 7413                    	je .L_tc_recycle_frame_done_03ff
  7220 00004235 488B32                  	mov rsi, qword [rdx]
  7221 00004238 488933                  	mov qword [rbx], rsi
  7222 0000423B 48FFC9                  	dec rcx
  7223 0000423E 4883EB08                	sub rbx, 8 * 1
  7224 00004242 4883EA08                	sub rdx, 8 * 1
  7225 00004246 EBE7                    	jmp .L_tc_recycle_frame_loop_03ff
  7226                                  .L_tc_recycle_frame_done_03ff:
  7227 00004248 488D6308                	lea rsp, [rbx + 8 * 1]
  7228 0000424C 5D                      	pop rbp	; the proc will restore it!
  7229 0000424D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7230 00004250 C9                      	leave
  7231 00004251 C22000                  	ret AND_KILL_FRAME(2)
  7232                                  .L_lambda_opt_end_0069:	; new closure is in rax
  7233 00004254 48890425[F6140000]      	mov qword [free_var_110], rax
  7234 0000425C 48B8-                   	mov rax, sob_void
  7234 0000425E [0000000000000000] 
  7235                                  
  7236 00004266 4889C7                  	mov rdi, rax
  7237 00004269 E8B31F0100              	call print_sexpr_if_not_void
  7238                                  
  7239                                  	; preparing a non tail-call
  7240 0000426E 48B8-                   	mov rax, L_constants + 1881
  7240 00004270 [5907000000000000] 
  7241 00004278 50                      	push rax
  7242 00004279 48B8-                   	mov rax, L_constants + 1881
  7242 0000427B [5907000000000000] 
  7243 00004283 50                      	push rax
  7244 00004284 6A02                    	push 2	; arg count
  7245 00004286 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7246 0000428B E87F1E0100              	call malloc
  7247 00004290 50                      	push rax
  7248 00004291 BF00000000              	mov rdi, 8 * 0	; new rib
  7249 00004296 E8741E0100              	call malloc
  7250 0000429B 50                      	push rax
  7251 0000429C BF08000000              	mov rdi, 8 * 1	; extended env
  7252 000042A1 E8691E0100              	call malloc
  7253 000042A6 488B7D10                	mov rdi, ENV
  7254 000042AA BE00000000              	mov rsi, 0
  7255 000042AF BA01000000              	mov rdx, 1
  7256                                  .L_lambda_simple_env_loop_031b:	; ext_env[i + 1] <-- env[i]
  7257 000042B4 4883FE00                	cmp rsi, 0
  7258 000042B8 7410                    	je .L_lambda_simple_env_end_031b
  7259 000042BA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7260 000042BE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7261 000042C2 48FFC6                  	inc rsi
  7262 000042C5 48FFC2                  	inc rdx
  7263 000042C8 EBEA                    	jmp .L_lambda_simple_env_loop_031b
  7264                                  .L_lambda_simple_env_end_031b:
  7265 000042CA 5B                      	pop rbx
  7266 000042CB BE00000000              	mov rsi, 0
  7267                                  .L_lambda_simple_params_loop_031b:	; copy params
  7268 000042D0 4883FE00                	cmp rsi, 0
  7269 000042D4 740E                    	je .L_lambda_simple_params_end_031b
  7270 000042D6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7271 000042DB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7272 000042DF 48FFC6                  	inc rsi
  7273 000042E2 EBEC                    	jmp .L_lambda_simple_params_loop_031b
  7274                                  .L_lambda_simple_params_end_031b:
  7275 000042E4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7276 000042E7 4889C3                  	mov rbx, rax
  7277 000042EA 58                      	pop rax
  7278 000042EB C60004                  	mov byte [rax], T_closure
  7279 000042EE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7280 000042F2 48C74009[FF420000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_031b
  7281 000042FA E99A060000              	jmp .L_lambda_simple_end_031b
  7282                                  .L_lambda_simple_code_031b:	; lambda-simple body
  7283 000042FF 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7284 00004305 740B                    	je .L_lambda_simple_arity_check_ok_031b
  7285 00004307 FF742410                	push qword [rsp + 8 * 2]
  7286 0000430B 6A02                    	push 2
  7287 0000430D E9B61D0100              	jmp L_error_incorrect_arity_simple
  7288                                  .L_lambda_simple_arity_check_ok_031b:
  7289 00004312 C8000000                	enter 0, 0
  7290 00004316 BF08000000              	mov rdi, 8	; sob_box
  7291 0000431B E8EF1D0100              	call malloc
  7292 00004320 488B5D20                	mov rbx, PARAM(0)
  7293 00004324 488918                  	mov [rax], rbx
  7294 00004327 48894520                	mov PARAM(0), rax
  7295 0000432B 48B8-                   	mov rax, sob_void
  7295 0000432D [0000000000000000] 
  7296                                  
  7297 00004335 BF08000000              	mov rdi, 8	; sob_box
  7298 0000433A E8D01D0100              	call malloc
  7299 0000433F 488B5D28                	mov rbx, PARAM(1)
  7300 00004343 488918                  	mov [rax], rbx
  7301 00004346 48894528                	mov PARAM(1), rax
  7302 0000434A 48B8-                   	mov rax, sob_void
  7302 0000434C [0000000000000000] 
  7303                                  
  7304 00004354 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7305 00004359 E8B11D0100              	call malloc
  7306 0000435E 50                      	push rax
  7307 0000435F BF10000000              	mov rdi, 8 * 2	; new rib
  7308 00004364 E8A61D0100              	call malloc
  7309 00004369 50                      	push rax
  7310 0000436A BF10000000              	mov rdi, 8 * 2	; extended env
  7311 0000436F E89B1D0100              	call malloc
  7312 00004374 488B7D10                	mov rdi, ENV
  7313 00004378 BE00000000              	mov rsi, 0
  7314 0000437D BA01000000              	mov rdx, 1
  7315                                  .L_lambda_simple_env_loop_031c:	; ext_env[i + 1] <-- env[i]
  7316 00004382 4883FE01                	cmp rsi, 1
  7317 00004386 7410                    	je .L_lambda_simple_env_end_031c
  7318 00004388 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7319 0000438C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7320 00004390 48FFC6                  	inc rsi
  7321 00004393 48FFC2                  	inc rdx
  7322 00004396 EBEA                    	jmp .L_lambda_simple_env_loop_031c
  7323                                  .L_lambda_simple_env_end_031c:
  7324 00004398 5B                      	pop rbx
  7325 00004399 BE00000000              	mov rsi, 0
  7326                                  .L_lambda_simple_params_loop_031c:	; copy params
  7327 0000439E 4883FE02                	cmp rsi, 2
  7328 000043A2 740E                    	je .L_lambda_simple_params_end_031c
  7329 000043A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7330 000043A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7331 000043AD 48FFC6                  	inc rsi
  7332 000043B0 EBEC                    	jmp .L_lambda_simple_params_loop_031c
  7333                                  .L_lambda_simple_params_end_031c:
  7334 000043B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7335 000043B5 4889C3                  	mov rbx, rax
  7336 000043B8 58                      	pop rax
  7337 000043B9 C60004                  	mov byte [rax], T_closure
  7338 000043BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7339 000043C0 48C74009[CD430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_031c
  7340 000043C8 E93B010000              	jmp .L_lambda_simple_end_031c
  7341                                  .L_lambda_simple_code_031c:	; lambda-simple body
  7342 000043CD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7343 000043D3 740B                    	je .L_lambda_simple_arity_check_ok_031c
  7344 000043D5 FF742410                	push qword [rsp + 8 * 2]
  7345 000043D9 6A02                    	push 2
  7346 000043DB E9E81C0100              	jmp L_error_incorrect_arity_simple
  7347                                  .L_lambda_simple_arity_check_ok_031c:
  7348 000043E0 C8000000                	enter 0, 0
  7349                                  	; preparing a non tail-call
  7350 000043E4 488B4528                	mov rax, PARAM(1)	; param s
  7351 000043E8 50                      	push rax
  7352 000043E9 6A01                    	push 1	; arg count
  7353 000043EB 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  7354 000043F3 803805                  	cmp byte [rax], T_undefined
  7355 000043F6 0F84E61B0100            	je L_error_fvar_undefined
  7356 000043FC 803804                  	cmp byte [rax], T_closure
  7357 000043FF 0F85611C0100            	jne L_error_non_closure
  7358 00004405 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7359 00004408 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7360 0000440B 483D[02000000]          	cmp rax, sob_boolean_false
  7361 00004411 740F                    	je .L_if_else_0223
  7362 00004413 48B8-                   	mov rax, L_constants + 1
  7362 00004415 [0100000000000000] 
  7363 0000441D E9E2000000              	jmp .L_if_end_0223
  7364                                  .L_if_else_0223:
  7365                                  	; preparing a tail-call
  7366                                  	; preparing a non tail-call
  7367                                  	; preparing a non tail-call
  7368 00004422 488B4528                	mov rax, PARAM(1)	; param s
  7369 00004426 50                      	push rax
  7370 00004427 6A01                    	push 1	; arg count
  7371 00004429 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7372 00004431 803805                  	cmp byte [rax], T_undefined
  7373 00004434 0F84A81B0100            	je L_error_fvar_undefined
  7374 0000443A 803804                  	cmp byte [rax], T_closure
  7375 0000443D 0F85231C0100            	jne L_error_non_closure
  7376 00004443 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7377 00004446 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7378 00004449 50                      	push rax
  7379 0000444A 488B4520                	mov rax, PARAM(0)	; param f
  7380 0000444E 50                      	push rax
  7381 0000444F 6A02                    	push 2	; arg count
  7382 00004451 488B4510                	mov rax, ENV
  7383 00004455 488B00                  	mov rax, qword [rax + 8 * 0]
  7384 00004458 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7385 0000445B 488B00                  	mov rax, qword [rax]
  7386 0000445E 803804                  	cmp byte [rax], T_closure
  7387 00004461 0F85FF1B0100            	jne L_error_non_closure
  7388 00004467 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7389 0000446A FF5009                  	call SOB_CLOSURE_CODE(rax)
  7390 0000446D 50                      	push rax
  7391                                  	; preparing a non tail-call
  7392                                  	; preparing a non tail-call
  7393 0000446E 488B4528                	mov rax, PARAM(1)	; param s
  7394 00004472 50                      	push rax
  7395 00004473 6A01                    	push 1	; arg count
  7396 00004475 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  7397 0000447D 803805                  	cmp byte [rax], T_undefined
  7398 00004480 0F845C1B0100            	je L_error_fvar_undefined
  7399 00004486 803804                  	cmp byte [rax], T_closure
  7400 00004489 0F85D71B0100            	jne L_error_non_closure
  7401 0000448F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7402 00004492 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7403 00004495 50                      	push rax
  7404 00004496 6A01                    	push 1	; arg count
  7405 00004498 488B4520                	mov rax, PARAM(0)	; param f
  7406 0000449C 803804                  	cmp byte [rax], T_closure
  7407 0000449F 0F85C11B0100            	jne L_error_non_closure
  7408 000044A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7409 000044A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7410 000044AB 50                      	push rax
  7411 000044AC 6A02                    	push 2	; arg count
  7412 000044AE 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
  7413 000044B6 803805                  	cmp byte [rax], T_undefined
  7414 000044B9 0F84231B0100            	je L_error_fvar_undefined
  7415 000044BF 803804                  	cmp byte [rax], T_closure
  7416 000044C2 0F859E1B0100            	jne L_error_non_closure
  7417 000044C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7418                                  
  7419                                  	; recycling the current frame
  7420 000044CB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7421 000044CE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7422 000044D1 B906000000              	mov rcx, 2 + 4
  7423 000044D6 488B5D18                	mov rbx, COUNT
  7424 000044DA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7425 000044DF 488D55F8                	lea rdx, [rbp - 8 * 1]
  7426                                  .L_tc_recycle_frame_loop_0400:
  7427 000044E3 4883F900                	cmp rcx, 0
  7428 000044E7 7413                    	je .L_tc_recycle_frame_done_0400
  7429 000044E9 488B32                  	mov rsi, qword [rdx]
  7430 000044EC 488933                  	mov qword [rbx], rsi
  7431 000044EF 48FFC9                  	dec rcx
  7432 000044F2 4883EB08                	sub rbx, 8 * 1
  7433 000044F6 4883EA08                	sub rdx, 8 * 1
  7434 000044FA EBE7                    	jmp .L_tc_recycle_frame_loop_0400
  7435                                  .L_tc_recycle_frame_done_0400:
  7436 000044FC 488D6308                	lea rsp, [rbx + 8 * 1]
  7437 00004500 5D                      	pop rbp	; the proc will restore it!
  7438 00004501 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7439                                  .L_if_end_0223:
  7440 00004504 C9                      	leave
  7441 00004505 C22000                  	ret AND_KILL_FRAME(2)
  7442                                  .L_lambda_simple_end_031c:	; new closure is in rax
  7443 00004508 50                      	push rax
  7444 00004509 488B4520                	mov rax, PARAM(0)	; param map1
  7445 0000450D 8F00                    	pop qword [rax]
  7446 0000450F 48B8-                   	mov rax, sob_void
  7446 00004511 [0000000000000000] 
  7447                                  
  7448 00004519 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7449 0000451E E8EC1B0100              	call malloc
  7450 00004523 50                      	push rax
  7451 00004524 BF10000000              	mov rdi, 8 * 2	; new rib
  7452 00004529 E8E11B0100              	call malloc
  7453 0000452E 50                      	push rax
  7454 0000452F BF10000000              	mov rdi, 8 * 2	; extended env
  7455 00004534 E8D61B0100              	call malloc
  7456 00004539 488B7D10                	mov rdi, ENV
  7457 0000453D BE00000000              	mov rsi, 0
  7458 00004542 BA01000000              	mov rdx, 1
  7459                                  .L_lambda_simple_env_loop_031d:	; ext_env[i + 1] <-- env[i]
  7460 00004547 4883FE01                	cmp rsi, 1
  7461 0000454B 7410                    	je .L_lambda_simple_env_end_031d
  7462 0000454D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7463 00004551 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7464 00004555 48FFC6                  	inc rsi
  7465 00004558 48FFC2                  	inc rdx
  7466 0000455B EBEA                    	jmp .L_lambda_simple_env_loop_031d
  7467                                  .L_lambda_simple_env_end_031d:
  7468 0000455D 5B                      	pop rbx
  7469 0000455E BE00000000              	mov rsi, 0
  7470                                  .L_lambda_simple_params_loop_031d:	; copy params
  7471 00004563 4883FE02                	cmp rsi, 2
  7472 00004567 740E                    	je .L_lambda_simple_params_end_031d
  7473 00004569 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7474 0000456E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7475 00004572 48FFC6                  	inc rsi
  7476 00004575 EBEC                    	jmp .L_lambda_simple_params_loop_031d
  7477                                  .L_lambda_simple_params_end_031d:
  7478 00004577 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7479 0000457A 4889C3                  	mov rbx, rax
  7480 0000457D 58                      	pop rax
  7481 0000457E C60004                  	mov byte [rax], T_closure
  7482 00004581 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7483 00004585 48C74009[92450000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_031d
  7484 0000458D E98D010000              	jmp .L_lambda_simple_end_031d
  7485                                  .L_lambda_simple_code_031d:	; lambda-simple body
  7486 00004592 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7487 00004598 740B                    	je .L_lambda_simple_arity_check_ok_031d
  7488 0000459A FF742410                	push qword [rsp + 8 * 2]
  7489 0000459E 6A02                    	push 2
  7490 000045A0 E9231B0100              	jmp L_error_incorrect_arity_simple
  7491                                  .L_lambda_simple_arity_check_ok_031d:
  7492 000045A5 C8000000                	enter 0, 0
  7493                                  	; preparing a non tail-call
  7494                                  	; preparing a non tail-call
  7495 000045A9 488B4528                	mov rax, PARAM(1)	; param s
  7496 000045AD 50                      	push rax
  7497 000045AE 6A01                    	push 1	; arg count
  7498 000045B0 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  7499 000045B8 803805                  	cmp byte [rax], T_undefined
  7500 000045BB 0F84211A0100            	je L_error_fvar_undefined
  7501 000045C1 803804                  	cmp byte [rax], T_closure
  7502 000045C4 0F859C1A0100            	jne L_error_non_closure
  7503 000045CA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7504 000045CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  7505 000045D0 50                      	push rax
  7506 000045D1 6A01                    	push 1	; arg count
  7507 000045D3 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  7508 000045DB 803805                  	cmp byte [rax], T_undefined
  7509 000045DE 0F84FE190100            	je L_error_fvar_undefined
  7510 000045E4 803804                  	cmp byte [rax], T_closure
  7511 000045E7 0F85791A0100            	jne L_error_non_closure
  7512 000045ED FF7001                  	push SOB_CLOSURE_ENV(rax)
  7513 000045F0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7514 000045F3 483D[02000000]          	cmp rax, sob_boolean_false
  7515 000045F9 740F                    	je .L_if_else_0224
  7516 000045FB 48B8-                   	mov rax, L_constants + 1
  7516 000045FD [0100000000000000] 
  7517 00004605 E911010000              	jmp .L_if_end_0224
  7518                                  .L_if_else_0224:
  7519                                  	; preparing a tail-call
  7520                                  	; preparing a non tail-call
  7521                                  	; preparing a non tail-call
  7522 0000460A 488B4528                	mov rax, PARAM(1)	; param s
  7523 0000460E 50                      	push rax
  7524 0000460F 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7525 00004617 803805                  	cmp byte [rax], T_undefined
  7526 0000461A 0F84C2190100            	je L_error_fvar_undefined
  7527 00004620 50                      	push rax
  7528 00004621 6A02                    	push 2	; arg count
  7529 00004623 488B4510                	mov rax, ENV
  7530 00004627 488B00                  	mov rax, qword [rax + 8 * 0]
  7531 0000462A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7532 0000462D 488B00                  	mov rax, qword [rax]
  7533 00004630 803804                  	cmp byte [rax], T_closure
  7534 00004633 0F852D1A0100            	jne L_error_non_closure
  7535 00004639 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7536 0000463C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7537 0000463F 50                      	push rax
  7538 00004640 488B4520                	mov rax, PARAM(0)	; param f
  7539 00004644 50                      	push rax
  7540 00004645 6A02                    	push 2	; arg count
  7541 00004647 488B4510                	mov rax, ENV
  7542 0000464B 488B00                  	mov rax, qword [rax + 8 * 0]
  7543 0000464E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  7544 00004652 488B00                  	mov rax, qword [rax]
  7545 00004655 803804                  	cmp byte [rax], T_closure
  7546 00004658 0F85081A0100            	jne L_error_non_closure
  7547 0000465E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7548 00004661 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7549 00004664 50                      	push rax
  7550                                  	; preparing a non tail-call
  7551                                  	; preparing a non tail-call
  7552 00004665 488B4528                	mov rax, PARAM(1)	; param s
  7553 00004669 50                      	push rax
  7554 0000466A 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  7555 00004672 803805                  	cmp byte [rax], T_undefined
  7556 00004675 0F8467190100            	je L_error_fvar_undefined
  7557 0000467B 50                      	push rax
  7558 0000467C 6A02                    	push 2	; arg count
  7559 0000467E 488B4510                	mov rax, ENV
  7560 00004682 488B00                  	mov rax, qword [rax + 8 * 0]
  7561 00004685 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7562 00004688 488B00                  	mov rax, qword [rax]
  7563 0000468B 803804                  	cmp byte [rax], T_closure
  7564 0000468E 0F85D2190100            	jne L_error_non_closure
  7565 00004694 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7566 00004697 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7567 0000469A 50                      	push rax
  7568 0000469B 488B4520                	mov rax, PARAM(0)	; param f
  7569 0000469F 50                      	push rax
  7570 000046A0 6A02                    	push 2	; arg count
  7571 000046A2 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
  7572 000046AA 803805                  	cmp byte [rax], T_undefined
  7573 000046AD 0F842F190100            	je L_error_fvar_undefined
  7574 000046B3 803804                  	cmp byte [rax], T_closure
  7575 000046B6 0F85AA190100            	jne L_error_non_closure
  7576 000046BC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7577 000046BF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7578 000046C2 50                      	push rax
  7579 000046C3 6A02                    	push 2	; arg count
  7580 000046C5 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
  7581 000046CD 803805                  	cmp byte [rax], T_undefined
  7582 000046D0 0F840C190100            	je L_error_fvar_undefined
  7583 000046D6 803804                  	cmp byte [rax], T_closure
  7584 000046D9 0F8587190100            	jne L_error_non_closure
  7585 000046DF FF7001                  	push SOB_CLOSURE_ENV(rax)
  7586                                  
  7587                                  	; recycling the current frame
  7588 000046E2 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7589 000046E5 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7590 000046E8 B906000000              	mov rcx, 2 + 4
  7591 000046ED 488B5D18                	mov rbx, COUNT
  7592 000046F1 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7593 000046F6 488D55F8                	lea rdx, [rbp - 8 * 1]
  7594                                  .L_tc_recycle_frame_loop_0401:
  7595 000046FA 4883F900                	cmp rcx, 0
  7596 000046FE 7413                    	je .L_tc_recycle_frame_done_0401
  7597 00004700 488B32                  	mov rsi, qword [rdx]
  7598 00004703 488933                  	mov qword [rbx], rsi
  7599 00004706 48FFC9                  	dec rcx
  7600 00004709 4883EB08                	sub rbx, 8 * 1
  7601 0000470D 4883EA08                	sub rdx, 8 * 1
  7602 00004711 EBE7                    	jmp .L_tc_recycle_frame_loop_0401
  7603                                  .L_tc_recycle_frame_done_0401:
  7604 00004713 488D6308                	lea rsp, [rbx + 8 * 1]
  7605 00004717 5D                      	pop rbp	; the proc will restore it!
  7606 00004718 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7607                                  .L_if_end_0224:
  7608 0000471B C9                      	leave
  7609 0000471C C22000                  	ret AND_KILL_FRAME(2)
  7610                                  .L_lambda_simple_end_031d:	; new closure is in rax
  7611 0000471F 50                      	push rax
  7612 00004720 488B4528                	mov rax, PARAM(1)	; param map-list
  7613 00004724 8F00                    	pop qword [rax]
  7614 00004726 48B8-                   	mov rax, sob_void
  7614 00004728 [0000000000000000] 
  7615                                  
  7616 00004730 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7617 00004735 E8D5190100              	call malloc
  7618 0000473A 50                      	push rax
  7619 0000473B BF10000000              	mov rdi, 8 * 2	; new rib
  7620 00004740 E8CA190100              	call malloc
  7621 00004745 50                      	push rax
  7622 00004746 BF10000000              	mov rdi, 8 * 2	; extended env
  7623 0000474B E8BF190100              	call malloc
  7624 00004750 488B7D10                	mov rdi, ENV
  7625 00004754 BE00000000              	mov rsi, 0
  7626 00004759 BA01000000              	mov rdx, 1
  7627                                  .L_lambda_opt_env_loop_006a:	; ext_env[i + 1] <-- env[i]
  7628 0000475E 4883FE01                	cmp rsi, 1
  7629 00004762 7410                    	je .L_lambda_opt_env_end_006a
  7630 00004764 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7631 00004768 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7632 0000476C 48FFC6                  	inc rsi
  7633 0000476F 48FFC2                  	inc rdx
  7634 00004772 EBEA                    	jmp .L_lambda_opt_env_loop_006a
  7635                                  .L_lambda_opt_env_end_006a:
  7636 00004774 5B                      	pop rbx
  7637 00004775 BE00000000              	mov rsi, 0
  7638                                  .L_lambda_opt_params_loop_006a:	; copy params
  7639 0000477A 4883FE02                	cmp rsi, 2
  7640 0000477E 740E                    	je .L_lambda_opt_params_end_006a
  7641 00004780 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7642 00004785 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7643 00004789 48FFC6                  	inc rsi
  7644 0000478C EBEC                    	jmp .L_lambda_opt_params_loop_006a
  7645                                  .L_lambda_opt_params_end_006a:
  7646 0000478E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7647 00004791 4889C3                  	mov rbx, rax
  7648 00004794 58                      	pop rax
  7649 00004795 C60004                  	mov byte [rax], T_closure
  7650 00004798 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7651 0000479C 48C74009[A9470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_006a
  7652 000047A4 E9EC010000              	jmp .L_lambda_opt_end_006a
  7653                                  .L_lambda_opt_code_006a:	; lambda-opt body
  7654 000047A9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7655 000047AF 0F8404010000            	je .L_lambda_opt_arity_check_exact_006a
  7656 000047B5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7657 000047BB 7F0B                    	jg .L_lambda_opt_arity_check_more_006a
  7658 000047BD FF742410                	push qword [rsp + 8 * 2]
  7659 000047C1 6A01                    	push 1
  7660 000047C3 E914190100              	jmp L_error_incorrect_arity_opt
  7661                                  .L_lambda_opt_arity_check_more_006a:
  7662 000047C8 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  7663 000047CD 41B901000000            	mov r9 , 1
  7664 000047D3 4989E7                  	mov r15, rsp
  7665 000047D6 4D29C8                  	sub r8, r9
  7666 000047D9 41B900000000            	mov r9, 0
  7667 000047DF 498D5F10                	lea rbx, [r15 + 8 * 2]
  7668 000047E3 498B4710                	mov rax, qword [r15 + 8 * 2]
  7669 000047E7 486BC008                	imul rax, 8
  7670 000047EB 4801C3                  	add rbx, rax
  7671 000047EE 488B13                  	mov rdx , qword [rbx]
  7672 000047F1 4989DA                  	mov r10 , rbx
  7673 000047F4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
  7674 000047F9 52                      	push rdx
  7675 000047FA 53                      	push rbx
  7676 000047FB 4150                    	push r8
  7677 000047FD 4151                    	push r9
  7678 000047FF 4152                    	push r10
  7679 00004801 4157                    	push r15
  7680 00004803 E807190100              	call malloc
  7681 00004808 415F                    	pop r15
  7682 0000480A 415A                    	pop r10
  7683 0000480C 4159                    	pop r9
  7684 0000480E 4158                    	pop r8
  7685 00004810 5B                      	pop rbx
  7686 00004811 5A                      	pop rdx
  7687 00004812 C60021                  	mov byte qword [rax], T_pair
  7688 00004815 48895001                	mov SOB_PAIR_CAR(rax), rdx
  7689 00004819 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
  7690 00004821 498902                  	mov qword [r10], rax
  7691 00004824 49FFC1                  	inc r9
  7692 00004827 4883EB08                	sub rbx, 8
  7693 0000482B 4D39C1                  	cmp r9, r8
  7694 0000482E 743E                    	je .L_lambda_opt_stack_shrink_loop_0210
  7695                                  .L_lambda_opt_stack_shrink_loop_020f:
  7696 00004830 488B13                  	mov rdx, qword [rbx]
  7697 00004833 53                      	push rbx
  7698 00004834 4150                    	push r8
  7699 00004836 4151                    	push r9
  7700 00004838 4152                    	push r10
  7701 0000483A 4157                    	push r15
  7702 0000483C 52                      	push rdx
  7703 0000483D BF11000000              	mov rdi, (1 + 8 + 8)
  7704 00004842 E8C8180100              	call malloc
  7705 00004847 5A                      	pop rdx
  7706 00004848 415F                    	pop r15
  7707 0000484A 415A                    	pop r10
  7708 0000484C 4159                    	pop r9
  7709 0000484E 4158                    	pop r8
  7710 00004850 5B                      	pop rbx
  7711 00004851 C60021                  	mov byte [rax], T_pair
  7712 00004854 48895001                	mov SOB_PAIR_CAR(rax), rdx
  7713 00004858 4D8B32                  	mov r14, qword [r10]
  7714 0000485B 4C897009                	mov SOB_PAIR_CDR(rax), r14
  7715 0000485F 498902                  	mov qword [r10], rax
  7716 00004862 49FFC1                  	inc r9
  7717 00004865 4883EB08                	sub rbx, 8
  7718 00004869 4D39C1                  	cmp r9, r8
  7719 0000486C 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_020f
  7720                                  .L_lambda_opt_stack_shrink_loop_0210:
  7721 0000486E 498D5710                	lea rdx, [r15 + 8 * 2]
  7722 00004872 48C70201000000          	mov qword [rdx], 1
  7723 00004879 48830201                	add qword [rdx] , 1
  7724 0000487D 4D89C1                  	mov r9, r8
  7725 00004880 49FFC9                  	dec r9
  7726 00004883 4E8D0CCB                	lea r9, [rbx + 8 * r9]
  7727                                  .L_lambda_opt_stack_shrink_loop_0211:
  7728 00004887 488B03                  	mov rax, qword [rbx]
  7729 0000488A 498901                  	mov qword [r9], rax
  7730 0000488D 4983E908                	sub r9 , 8
  7731 00004891 4883EB08                	sub rbx, 8
  7732 00004895 4C39FB                  	cmp rbx, r15
  7733 00004898 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0211
  7734 0000489A 488B03                  	mov rax, qword [rbx]
  7735 0000489D 498901                  	mov qword [r9], rax
  7736 000048A0 4D89C1                  	mov r9, r8
  7737 000048A3 4983E901                	sub r9 , 1
  7738 000048A7 4983F900                	cmp r9, 0
  7739 000048AB 7446                    je .L_lambda_opt_stack_adjusted_006a
  7740                                  .L_lambda_opt_stack_shrink_loop_0212:
  7741 000048AD 58                      	pop rax
  7742 000048AE 49FFC9                  	dec r9
  7743 000048B1 4983F900                	cmp r9, 0
  7744 000048B5 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0212
  7745 000048B7 EB3A                    jmp .L_lambda_opt_stack_adjusted_006a
  7746                                  .L_lambda_opt_arity_check_exact_006a:
  7747 000048B9 4989E7                  	mov r15, rsp
  7748 000048BC 498D5F18                	lea rbx, [r15 + 8 * 2 + 8 * 1]
  7749 000048C0 488B0B                  	mov rcx, qword [rbx]
  7750 000048C3 48C703[01000000]        	mov qword [rbx], sob_nil
  7751 000048CA 4883EB08                	sub rbx, 8
  7752                                  .L_lambda_opt_stack_shrink_loop_020e:
  7753 000048CE 488B13                  	mov rdx, qword [rbx]
  7754 000048D1 48890B                  	mov qword [rbx], rcx
  7755 000048D4 4C39FB                  	cmp rbx, r15
  7756 000048D7 7409                    je .L_lambda_opt_stack_shrink_loop_exit_006a
  7757 000048D9 4889D1                  	mov rcx, rdx
  7758 000048DC 4883EB08                	sub rbx, 8
  7759 000048E0 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_020e
  7760                                  .L_lambda_opt_stack_shrink_loop_exit_006a:
  7761 000048E2 52                      	push rdx
  7762 000048E3 4989E7                  	mov r15, rsp
  7763 000048E6 4983C710                	add r15, 16
  7764 000048EA 498B1F                  	mov rbx, qword [r15]
  7765 000048ED 48FFC3                  	inc rbx
  7766 000048F0 49891F                  	mov qword [r15], rbx
  7767                                  .L_lambda_opt_stack_adjusted_006a:
  7768 000048F3 C8000000                	enter 0, 0
  7769                                  	; preparing a non tail-call
  7770 000048F7 488B4528                	mov rax, PARAM(1)	; param s
  7771 000048FB 50                      	push rax
  7772 000048FC 6A01                    	push 1	; arg count
  7773 000048FE 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  7774 00004906 803805                  	cmp byte [rax], T_undefined
  7775 00004909 0F84D3160100            	je L_error_fvar_undefined
  7776 0000490F 803804                  	cmp byte [rax], T_closure
  7777 00004912 0F854E170100            	jne L_error_non_closure
  7778 00004918 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7779 0000491B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7780 0000491E 483D[02000000]          	cmp rax, sob_boolean_false
  7781 00004924 740C                    	je .L_if_else_0225
  7782 00004926 48B8-                   	mov rax, L_constants + 1
  7782 00004928 [0100000000000000] 
  7783 00004930 EB5F                    	jmp .L_if_end_0225
  7784                                  .L_if_else_0225:
  7785                                  	; preparing a tail-call
  7786 00004932 488B4528                	mov rax, PARAM(1)	; param s
  7787 00004936 50                      	push rax
  7788 00004937 488B4520                	mov rax, PARAM(0)	; param f
  7789 0000493B 50                      	push rax
  7790 0000493C 6A02                    	push 2	; arg count
  7791 0000493E 488B4510                	mov rax, ENV
  7792 00004942 488B00                  	mov rax, qword [rax + 8 * 0]
  7793 00004945 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  7794 00004949 488B00                  	mov rax, qword [rax]
  7795 0000494C 803804                  	cmp byte [rax], T_closure
  7796 0000494F 0F8511170100            	jne L_error_non_closure
  7797 00004955 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7798                                  
  7799                                  	; recycling the current frame
  7800 00004958 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7801 0000495B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7802 0000495E B906000000              	mov rcx, 2 + 4
  7803 00004963 488B5D18                	mov rbx, COUNT
  7804 00004967 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7805 0000496C 488D55F8                	lea rdx, [rbp - 8 * 1]
  7806                                  .L_tc_recycle_frame_loop_0402:
  7807 00004970 4883F900                	cmp rcx, 0
  7808 00004974 7413                    	je .L_tc_recycle_frame_done_0402
  7809 00004976 488B32                  	mov rsi, qword [rdx]
  7810 00004979 488933                  	mov qword [rbx], rsi
  7811 0000497C 48FFC9                  	dec rcx
  7812 0000497F 4883EB08                	sub rbx, 8 * 1
  7813 00004983 4883EA08                	sub rdx, 8 * 1
  7814 00004987 EBE7                    	jmp .L_tc_recycle_frame_loop_0402
  7815                                  .L_tc_recycle_frame_done_0402:
  7816 00004989 488D6308                	lea rsp, [rbx + 8 * 1]
  7817 0000498D 5D                      	pop rbp	; the proc will restore it!
  7818 0000498E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7819                                  .L_if_end_0225:
  7820 00004991 C9                      	leave
  7821 00004992 C22000                  	ret AND_KILL_FRAME(2)
  7822                                  .L_lambda_opt_end_006a:	; new closure is in rax
  7823 00004995 C9                      	leave
  7824 00004996 C22000                  	ret AND_KILL_FRAME(2)
  7825                                  .L_lambda_simple_end_031b:	; new closure is in rax
  7826 00004999 803804                  	cmp byte [rax], T_closure
  7827 0000499C 0F85C4160100            	jne L_error_non_closure
  7828 000049A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7829 000049A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7830 000049A8 48890425[E5140000]      	mov qword [free_var_109], rax
  7831 000049B0 48B8-                   	mov rax, sob_void
  7831 000049B2 [0000000000000000] 
  7832                                  
  7833 000049BA 4889C7                  	mov rdi, rax
  7834 000049BD E85F180100              	call print_sexpr_if_not_void
  7835                                  
  7836 000049C2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7837 000049C7 E843170100              	call malloc
  7838 000049CC 50                      	push rax
  7839 000049CD BF00000000              	mov rdi, 8 * 0	; new rib
  7840 000049D2 E838170100              	call malloc
  7841 000049D7 50                      	push rax
  7842 000049D8 BF08000000              	mov rdi, 8 * 1	; extended env
  7843 000049DD E82D170100              	call malloc
  7844 000049E2 488B7D10                	mov rdi, ENV
  7845 000049E6 BE00000000              	mov rsi, 0
  7846 000049EB BA01000000              	mov rdx, 1
  7847                                  .L_lambda_simple_env_loop_031e:	; ext_env[i + 1] <-- env[i]
  7848 000049F0 4883FE00                	cmp rsi, 0
  7849 000049F4 7410                    	je .L_lambda_simple_env_end_031e
  7850 000049F6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7851 000049FA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7852 000049FE 48FFC6                  	inc rsi
  7853 00004A01 48FFC2                  	inc rdx
  7854 00004A04 EBEA                    	jmp .L_lambda_simple_env_loop_031e
  7855                                  .L_lambda_simple_env_end_031e:
  7856 00004A06 5B                      	pop rbx
  7857 00004A07 BE00000000              	mov rsi, 0
  7858                                  .L_lambda_simple_params_loop_031e:	; copy params
  7859 00004A0C 4883FE00                	cmp rsi, 0
  7860 00004A10 740E                    	je .L_lambda_simple_params_end_031e
  7861 00004A12 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7862 00004A17 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7863 00004A1B 48FFC6                  	inc rsi
  7864 00004A1E EBEC                    	jmp .L_lambda_simple_params_loop_031e
  7865                                  .L_lambda_simple_params_end_031e:
  7866 00004A20 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7867 00004A23 4889C3                  	mov rbx, rax
  7868 00004A26 58                      	pop rax
  7869 00004A27 C60004                  	mov byte [rax], T_closure
  7870 00004A2A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7871 00004A2E 48C74009[3B4A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_031e
  7872 00004A36 E97A010000              	jmp .L_lambda_simple_end_031e
  7873                                  .L_lambda_simple_code_031e:	; lambda-simple body
  7874 00004A3B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7875 00004A41 740B                    	je .L_lambda_simple_arity_check_ok_031e
  7876 00004A43 FF742410                	push qword [rsp + 8 * 2]
  7877 00004A47 6A01                    	push 1
  7878 00004A49 E97A160100              	jmp L_error_incorrect_arity_simple
  7879                                  .L_lambda_simple_arity_check_ok_031e:
  7880 00004A4E C8000000                	enter 0, 0
  7881                                  	; preparing a tail-call
  7882 00004A52 488B4520                	mov rax, PARAM(0)	; param s
  7883 00004A56 50                      	push rax
  7884 00004A57 48B8-                   	mov rax, L_constants + 1
  7884 00004A59 [0100000000000000] 
  7885 00004A61 50                      	push rax
  7886 00004A62 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7887 00004A67 E8A3160100              	call malloc
  7888 00004A6C 50                      	push rax
  7889 00004A6D BF08000000              	mov rdi, 8 * 1	; new rib
  7890 00004A72 E898160100              	call malloc
  7891 00004A77 50                      	push rax
  7892 00004A78 BF10000000              	mov rdi, 8 * 2	; extended env
  7893 00004A7D E88D160100              	call malloc
  7894 00004A82 488B7D10                	mov rdi, ENV
  7895 00004A86 BE00000000              	mov rsi, 0
  7896 00004A8B BA01000000              	mov rdx, 1
  7897                                  .L_lambda_simple_env_loop_031f:	; ext_env[i + 1] <-- env[i]
  7898 00004A90 4883FE01                	cmp rsi, 1
  7899 00004A94 7410                    	je .L_lambda_simple_env_end_031f
  7900 00004A96 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7901 00004A9A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7902 00004A9E 48FFC6                  	inc rsi
  7903 00004AA1 48FFC2                  	inc rdx
  7904 00004AA4 EBEA                    	jmp .L_lambda_simple_env_loop_031f
  7905                                  .L_lambda_simple_env_end_031f:
  7906 00004AA6 5B                      	pop rbx
  7907 00004AA7 BE00000000              	mov rsi, 0
  7908                                  .L_lambda_simple_params_loop_031f:	; copy params
  7909 00004AAC 4883FE01                	cmp rsi, 1
  7910 00004AB0 740E                    	je .L_lambda_simple_params_end_031f
  7911 00004AB2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7912 00004AB7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7913 00004ABB 48FFC6                  	inc rsi
  7914 00004ABE EBEC                    	jmp .L_lambda_simple_params_loop_031f
  7915                                  .L_lambda_simple_params_end_031f:
  7916 00004AC0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7917 00004AC3 4889C3                  	mov rbx, rax
  7918 00004AC6 58                      	pop rax
  7919 00004AC7 C60004                  	mov byte [rax], T_closure
  7920 00004ACA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7921 00004ACE 48C74009[DB4A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_031f
  7922 00004AD6 E97D000000              	jmp .L_lambda_simple_end_031f
  7923                                  .L_lambda_simple_code_031f:	; lambda-simple body
  7924 00004ADB 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7925 00004AE1 740B                    	je .L_lambda_simple_arity_check_ok_031f
  7926 00004AE3 FF742410                	push qword [rsp + 8 * 2]
  7927 00004AE7 6A02                    	push 2
  7928 00004AE9 E9DA150100              	jmp L_error_incorrect_arity_simple
  7929                                  .L_lambda_simple_arity_check_ok_031f:
  7930 00004AEE C8000000                	enter 0, 0
  7931                                  	; preparing a tail-call
  7932 00004AF2 488B4520                	mov rax, PARAM(0)	; param r
  7933 00004AF6 50                      	push rax
  7934 00004AF7 488B4528                	mov rax, PARAM(1)	; param a
  7935 00004AFB 50                      	push rax
  7936 00004AFC 6A02                    	push 2	; arg count
  7937 00004AFE 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
  7938 00004B06 803805                  	cmp byte [rax], T_undefined
  7939 00004B09 0F84D3140100            	je L_error_fvar_undefined
  7940 00004B0F 803804                  	cmp byte [rax], T_closure
  7941 00004B12 0F854E150100            	jne L_error_non_closure
  7942 00004B18 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7943                                  
  7944                                  	; recycling the current frame
  7945 00004B1B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7946 00004B1E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7947 00004B21 B906000000              	mov rcx, 2 + 4
  7948 00004B26 488B5D18                	mov rbx, COUNT
  7949 00004B2A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7950 00004B2F 488D55F8                	lea rdx, [rbp - 8 * 1]
  7951                                  .L_tc_recycle_frame_loop_0403:
  7952 00004B33 4883F900                	cmp rcx, 0
  7953 00004B37 7413                    	je .L_tc_recycle_frame_done_0403
  7954 00004B39 488B32                  	mov rsi, qword [rdx]
  7955 00004B3C 488933                  	mov qword [rbx], rsi
  7956 00004B3F 48FFC9                  	dec rcx
  7957 00004B42 4883EB08                	sub rbx, 8 * 1
  7958 00004B46 4883EA08                	sub rdx, 8 * 1
  7959 00004B4A EBE7                    	jmp .L_tc_recycle_frame_loop_0403
  7960                                  .L_tc_recycle_frame_done_0403:
  7961 00004B4C 488D6308                	lea rsp, [rbx + 8 * 1]
  7962 00004B50 5D                      	pop rbp	; the proc will restore it!
  7963 00004B51 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7964 00004B54 C9                      	leave
  7965 00004B55 C22000                  	ret AND_KILL_FRAME(2)
  7966                                  .L_lambda_simple_end_031f:	; new closure is in rax
  7967 00004B58 50                      	push rax
  7968 00004B59 6A03                    	push 3	; arg count
  7969 00004B5B 488B0425[18150000]      	mov rax, qword [free_var_112]	; free var fold-left
  7970 00004B63 803805                  	cmp byte [rax], T_undefined
  7971 00004B66 0F8476140100            	je L_error_fvar_undefined
  7972 00004B6C 803804                  	cmp byte [rax], T_closure
  7973 00004B6F 0F85F1140100            	jne L_error_non_closure
  7974 00004B75 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7975                                  
  7976                                  	; recycling the current frame
  7977 00004B78 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7978 00004B7B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7979 00004B7E B907000000              	mov rcx, 3 + 4
  7980 00004B83 488B5D18                	mov rbx, COUNT
  7981 00004B87 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7982 00004B8C 488D55F8                	lea rdx, [rbp - 8 * 1]
  7983                                  .L_tc_recycle_frame_loop_0404:
  7984 00004B90 4883F900                	cmp rcx, 0
  7985 00004B94 7413                    	je .L_tc_recycle_frame_done_0404
  7986 00004B96 488B32                  	mov rsi, qword [rdx]
  7987 00004B99 488933                  	mov qword [rbx], rsi
  7988 00004B9C 48FFC9                  	dec rcx
  7989 00004B9F 4883EB08                	sub rbx, 8 * 1
  7990 00004BA3 4883EA08                	sub rdx, 8 * 1
  7991 00004BA7 EBE7                    	jmp .L_tc_recycle_frame_loop_0404
  7992                                  .L_tc_recycle_frame_done_0404:
  7993 00004BA9 488D6308                	lea rsp, [rbx + 8 * 1]
  7994 00004BAD 5D                      	pop rbp	; the proc will restore it!
  7995 00004BAE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7996 00004BB1 C9                      	leave
  7997 00004BB2 C21800                  	ret AND_KILL_FRAME(1)
  7998                                  .L_lambda_simple_end_031e:	; new closure is in rax
  7999 00004BB5 48890425[07150000]      	mov qword [free_var_111], rax
  8000 00004BBD 48B8-                   	mov rax, sob_void
  8000 00004BBF [0000000000000000] 
  8001                                  
  8002 00004BC7 4889C7                  	mov rdi, rax
  8003 00004BCA E852160100              	call print_sexpr_if_not_void
  8004                                  
  8005                                  	; preparing a non tail-call
  8006 00004BCF 48B8-                   	mov rax, L_constants + 1881
  8006 00004BD1 [5907000000000000] 
  8007 00004BD9 50                      	push rax
  8008 00004BDA 48B8-                   	mov rax, L_constants + 1881
  8008 00004BDC [5907000000000000] 
  8009 00004BE4 50                      	push rax
  8010 00004BE5 6A02                    	push 2	; arg count
  8011 00004BE7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8012 00004BEC E81E150100              	call malloc
  8013 00004BF1 50                      	push rax
  8014 00004BF2 BF00000000              	mov rdi, 8 * 0	; new rib
  8015 00004BF7 E813150100              	call malloc
  8016 00004BFC 50                      	push rax
  8017 00004BFD BF08000000              	mov rdi, 8 * 1	; extended env
  8018 00004C02 E808150100              	call malloc
  8019 00004C07 488B7D10                	mov rdi, ENV
  8020 00004C0B BE00000000              	mov rsi, 0
  8021 00004C10 BA01000000              	mov rdx, 1
  8022                                  .L_lambda_simple_env_loop_0320:	; ext_env[i + 1] <-- env[i]
  8023 00004C15 4883FE00                	cmp rsi, 0
  8024 00004C19 7410                    	je .L_lambda_simple_env_end_0320
  8025 00004C1B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8026 00004C1F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8027 00004C23 48FFC6                  	inc rsi
  8028 00004C26 48FFC2                  	inc rdx
  8029 00004C29 EBEA                    	jmp .L_lambda_simple_env_loop_0320
  8030                                  .L_lambda_simple_env_end_0320:
  8031 00004C2B 5B                      	pop rbx
  8032 00004C2C BE00000000              	mov rsi, 0
  8033                                  .L_lambda_simple_params_loop_0320:	; copy params
  8034 00004C31 4883FE00                	cmp rsi, 0
  8035 00004C35 740E                    	je .L_lambda_simple_params_end_0320
  8036 00004C37 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8037 00004C3C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8038 00004C40 48FFC6                  	inc rsi
  8039 00004C43 EBEC                    	jmp .L_lambda_simple_params_loop_0320
  8040                                  .L_lambda_simple_params_end_0320:
  8041 00004C45 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8042 00004C48 4889C3                  	mov rbx, rax
  8043 00004C4B 58                      	pop rax
  8044 00004C4C C60004                  	mov byte [rax], T_closure
  8045 00004C4F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8046 00004C53 48C74009[604C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0320
  8047 00004C5B E956060000              	jmp .L_lambda_simple_end_0320
  8048                                  .L_lambda_simple_code_0320:	; lambda-simple body
  8049 00004C60 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8050 00004C66 740B                    	je .L_lambda_simple_arity_check_ok_0320
  8051 00004C68 FF742410                	push qword [rsp + 8 * 2]
  8052 00004C6C 6A02                    	push 2
  8053 00004C6E E955140100              	jmp L_error_incorrect_arity_simple
  8054                                  .L_lambda_simple_arity_check_ok_0320:
  8055 00004C73 C8000000                	enter 0, 0
  8056 00004C77 BF08000000              	mov rdi, 8	; sob_box
  8057 00004C7C E88E140100              	call malloc
  8058 00004C81 488B5D20                	mov rbx, PARAM(0)
  8059 00004C85 488918                  	mov [rax], rbx
  8060 00004C88 48894520                	mov PARAM(0), rax
  8061 00004C8C 48B8-                   	mov rax, sob_void
  8061 00004C8E [0000000000000000] 
  8062                                  
  8063 00004C96 BF08000000              	mov rdi, 8	; sob_box
  8064 00004C9B E86F140100              	call malloc
  8065 00004CA0 488B5D28                	mov rbx, PARAM(1)
  8066 00004CA4 488918                  	mov [rax], rbx
  8067 00004CA7 48894528                	mov PARAM(1), rax
  8068 00004CAB 48B8-                   	mov rax, sob_void
  8068 00004CAD [0000000000000000] 
  8069                                  
  8070 00004CB5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8071 00004CBA E850140100              	call malloc
  8072 00004CBF 50                      	push rax
  8073 00004CC0 BF10000000              	mov rdi, 8 * 2	; new rib
  8074 00004CC5 E845140100              	call malloc
  8075 00004CCA 50                      	push rax
  8076 00004CCB BF10000000              	mov rdi, 8 * 2	; extended env
  8077 00004CD0 E83A140100              	call malloc
  8078 00004CD5 488B7D10                	mov rdi, ENV
  8079 00004CD9 BE00000000              	mov rsi, 0
  8080 00004CDE BA01000000              	mov rdx, 1
  8081                                  .L_lambda_simple_env_loop_0321:	; ext_env[i + 1] <-- env[i]
  8082 00004CE3 4883FE01                	cmp rsi, 1
  8083 00004CE7 7410                    	je .L_lambda_simple_env_end_0321
  8084 00004CE9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8085 00004CED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8086 00004CF1 48FFC6                  	inc rsi
  8087 00004CF4 48FFC2                  	inc rdx
  8088 00004CF7 EBEA                    	jmp .L_lambda_simple_env_loop_0321
  8089                                  .L_lambda_simple_env_end_0321:
  8090 00004CF9 5B                      	pop rbx
  8091 00004CFA BE00000000              	mov rsi, 0
  8092                                  .L_lambda_simple_params_loop_0321:	; copy params
  8093 00004CFF 4883FE02                	cmp rsi, 2
  8094 00004D03 740E                    	je .L_lambda_simple_params_end_0321
  8095 00004D05 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8096 00004D0A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8097 00004D0E 48FFC6                  	inc rsi
  8098 00004D11 EBEC                    	jmp .L_lambda_simple_params_loop_0321
  8099                                  .L_lambda_simple_params_end_0321:
  8100 00004D13 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8101 00004D16 4889C3                  	mov rbx, rax
  8102 00004D19 58                      	pop rax
  8103 00004D1A C60004                  	mov byte [rax], T_closure
  8104 00004D1D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8105 00004D21 48C74009[2E4D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0321
  8106 00004D29 E91C010000              	jmp .L_lambda_simple_end_0321
  8107                                  .L_lambda_simple_code_0321:	; lambda-simple body
  8108 00004D2E 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8109 00004D34 740B                    	je .L_lambda_simple_arity_check_ok_0321
  8110 00004D36 FF742410                	push qword [rsp + 8 * 2]
  8111 00004D3A 6A02                    	push 2
  8112 00004D3C E987130100              	jmp L_error_incorrect_arity_simple
  8113                                  .L_lambda_simple_arity_check_ok_0321:
  8114 00004D41 C8000000                	enter 0, 0
  8115                                  	; preparing a non tail-call
  8116 00004D45 488B4528                	mov rax, PARAM(1)	; param sr
  8117 00004D49 50                      	push rax
  8118 00004D4A 6A01                    	push 1	; arg count
  8119 00004D4C 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  8120 00004D54 803805                  	cmp byte [rax], T_undefined
  8121 00004D57 0F8485120100            	je L_error_fvar_undefined
  8122 00004D5D 803804                  	cmp byte [rax], T_closure
  8123 00004D60 0F8500130100            	jne L_error_non_closure
  8124 00004D66 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8125 00004D69 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8126 00004D6C 483D[02000000]          	cmp rax, sob_boolean_false
  8127 00004D72 7409                    	je .L_if_else_0226
  8128 00004D74 488B4520                	mov rax, PARAM(0)	; param s1
  8129 00004D78 E9C9000000              	jmp .L_if_end_0226
  8130                                  .L_if_else_0226:
  8131                                  	; preparing a tail-call
  8132                                  	; preparing a non tail-call
  8133                                  	; preparing a non tail-call
  8134 00004D7D 488B4528                	mov rax, PARAM(1)	; param sr
  8135 00004D81 50                      	push rax
  8136 00004D82 6A01                    	push 1	; arg count
  8137 00004D84 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  8138 00004D8C 803805                  	cmp byte [rax], T_undefined
  8139 00004D8F 0F844D120100            	je L_error_fvar_undefined
  8140 00004D95 803804                  	cmp byte [rax], T_closure
  8141 00004D98 0F85C8120100            	jne L_error_non_closure
  8142 00004D9E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8143 00004DA1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8144 00004DA4 50                      	push rax
  8145                                  	; preparing a non tail-call
  8146 00004DA5 488B4528                	mov rax, PARAM(1)	; param sr
  8147 00004DA9 50                      	push rax
  8148 00004DAA 6A01                    	push 1	; arg count
  8149 00004DAC 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  8150 00004DB4 803805                  	cmp byte [rax], T_undefined
  8151 00004DB7 0F8425120100            	je L_error_fvar_undefined
  8152 00004DBD 803804                  	cmp byte [rax], T_closure
  8153 00004DC0 0F85A0120100            	jne L_error_non_closure
  8154 00004DC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8155 00004DC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8156 00004DCC 50                      	push rax
  8157 00004DCD 6A02                    	push 2	; arg count
  8158 00004DCF 488B4510                	mov rax, ENV
  8159 00004DD3 488B00                  	mov rax, qword [rax + 8 * 0]
  8160 00004DD6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8161 00004DD9 488B00                  	mov rax, qword [rax]
  8162 00004DDC 803804                  	cmp byte [rax], T_closure
  8163 00004DDF 0F8581120100            	jne L_error_non_closure
  8164 00004DE5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8165 00004DE8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8166 00004DEB 50                      	push rax
  8167 00004DEC 488B4520                	mov rax, PARAM(0)	; param s1
  8168 00004DF0 50                      	push rax
  8169 00004DF1 6A02                    	push 2	; arg count
  8170 00004DF3 488B4510                	mov rax, ENV
  8171 00004DF7 488B00                  	mov rax, qword [rax + 8 * 0]
  8172 00004DFA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  8173 00004DFE 488B00                  	mov rax, qword [rax]
  8174 00004E01 803804                  	cmp byte [rax], T_closure
  8175 00004E04 0F855C120100            	jne L_error_non_closure
  8176 00004E0A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8177                                  
  8178                                  	; recycling the current frame
  8179 00004E0D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8180 00004E10 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8181 00004E13 B906000000              	mov rcx, 2 + 4
  8182 00004E18 488B5D18                	mov rbx, COUNT
  8183 00004E1C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8184 00004E21 488D55F8                	lea rdx, [rbp - 8 * 1]
  8185                                  .L_tc_recycle_frame_loop_0405:
  8186 00004E25 4883F900                	cmp rcx, 0
  8187 00004E29 7413                    	je .L_tc_recycle_frame_done_0405
  8188 00004E2B 488B32                  	mov rsi, qword [rdx]
  8189 00004E2E 488933                  	mov qword [rbx], rsi
  8190 00004E31 48FFC9                  	dec rcx
  8191 00004E34 4883EB08                	sub rbx, 8 * 1
  8192 00004E38 4883EA08                	sub rdx, 8 * 1
  8193 00004E3C EBE7                    	jmp .L_tc_recycle_frame_loop_0405
  8194                                  .L_tc_recycle_frame_done_0405:
  8195 00004E3E 488D6308                	lea rsp, [rbx + 8 * 1]
  8196 00004E42 5D                      	pop rbp	; the proc will restore it!
  8197 00004E43 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8198                                  .L_if_end_0226:
  8199 00004E46 C9                      	leave
  8200 00004E47 C22000                  	ret AND_KILL_FRAME(2)
  8201                                  .L_lambda_simple_end_0321:	; new closure is in rax
  8202 00004E4A 50                      	push rax
  8203 00004E4B 488B4520                	mov rax, PARAM(0)	; param run-1
  8204 00004E4F 8F00                    	pop qword [rax]
  8205 00004E51 48B8-                   	mov rax, sob_void
  8205 00004E53 [0000000000000000] 
  8206                                  
  8207 00004E5B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8208 00004E60 E8AA120100              	call malloc
  8209 00004E65 50                      	push rax
  8210 00004E66 BF10000000              	mov rdi, 8 * 2	; new rib
  8211 00004E6B E89F120100              	call malloc
  8212 00004E70 50                      	push rax
  8213 00004E71 BF10000000              	mov rdi, 8 * 2	; extended env
  8214 00004E76 E894120100              	call malloc
  8215 00004E7B 488B7D10                	mov rdi, ENV
  8216 00004E7F BE00000000              	mov rsi, 0
  8217 00004E84 BA01000000              	mov rdx, 1
  8218                                  .L_lambda_simple_env_loop_0322:	; ext_env[i + 1] <-- env[i]
  8219 00004E89 4883FE01                	cmp rsi, 1
  8220 00004E8D 7410                    	je .L_lambda_simple_env_end_0322
  8221 00004E8F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8222 00004E93 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8223 00004E97 48FFC6                  	inc rsi
  8224 00004E9A 48FFC2                  	inc rdx
  8225 00004E9D EBEA                    	jmp .L_lambda_simple_env_loop_0322
  8226                                  .L_lambda_simple_env_end_0322:
  8227 00004E9F 5B                      	pop rbx
  8228 00004EA0 BE00000000              	mov rsi, 0
  8229                                  .L_lambda_simple_params_loop_0322:	; copy params
  8230 00004EA5 4883FE02                	cmp rsi, 2
  8231 00004EA9 740E                    	je .L_lambda_simple_params_end_0322
  8232 00004EAB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8233 00004EB0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8234 00004EB4 48FFC6                  	inc rsi
  8235 00004EB7 EBEC                    	jmp .L_lambda_simple_params_loop_0322
  8236                                  .L_lambda_simple_params_end_0322:
  8237 00004EB9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8238 00004EBC 4889C3                  	mov rbx, rax
  8239 00004EBF 58                      	pop rax
  8240 00004EC0 C60004                  	mov byte [rax], T_closure
  8241 00004EC3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8242 00004EC7 48C74009[D44E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0322
  8243 00004ECF E920010000              	jmp .L_lambda_simple_end_0322
  8244                                  .L_lambda_simple_code_0322:	; lambda-simple body
  8245 00004ED4 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8246 00004EDA 740B                    	je .L_lambda_simple_arity_check_ok_0322
  8247 00004EDC FF742410                	push qword [rsp + 8 * 2]
  8248 00004EE0 6A02                    	push 2
  8249 00004EE2 E9E1110100              	jmp L_error_incorrect_arity_simple
  8250                                  .L_lambda_simple_arity_check_ok_0322:
  8251 00004EE7 C8000000                	enter 0, 0
  8252                                  	; preparing a non tail-call
  8253 00004EEB 488B4520                	mov rax, PARAM(0)	; param s1
  8254 00004EEF 50                      	push rax
  8255 00004EF0 6A01                    	push 1	; arg count
  8256 00004EF2 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  8257 00004EFA 803805                  	cmp byte [rax], T_undefined
  8258 00004EFD 0F84DF100100            	je L_error_fvar_undefined
  8259 00004F03 803804                  	cmp byte [rax], T_closure
  8260 00004F06 0F855A110100            	jne L_error_non_closure
  8261 00004F0C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8262 00004F0F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8263 00004F12 483D[02000000]          	cmp rax, sob_boolean_false
  8264 00004F18 7409                    	je .L_if_else_0227
  8265 00004F1A 488B4528                	mov rax, PARAM(1)	; param s2
  8266 00004F1E E9CD000000              	jmp .L_if_end_0227
  8267                                  .L_if_else_0227:
  8268                                  	; preparing a tail-call
  8269                                  	; preparing a non tail-call
  8270 00004F23 488B4528                	mov rax, PARAM(1)	; param s2
  8271 00004F27 50                      	push rax
  8272                                  	; preparing a non tail-call
  8273 00004F28 488B4520                	mov rax, PARAM(0)	; param s1
  8274 00004F2C 50                      	push rax
  8275 00004F2D 6A01                    	push 1	; arg count
  8276 00004F2F 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  8277 00004F37 803805                  	cmp byte [rax], T_undefined
  8278 00004F3A 0F84A2100100            	je L_error_fvar_undefined
  8279 00004F40 803804                  	cmp byte [rax], T_closure
  8280 00004F43 0F851D110100            	jne L_error_non_closure
  8281 00004F49 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8282 00004F4C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8283 00004F4F 50                      	push rax
  8284 00004F50 6A02                    	push 2	; arg count
  8285 00004F52 488B4510                	mov rax, ENV
  8286 00004F56 488B00                  	mov rax, qword [rax + 8 * 0]
  8287 00004F59 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  8288 00004F5D 488B00                  	mov rax, qword [rax]
  8289 00004F60 803804                  	cmp byte [rax], T_closure
  8290 00004F63 0F85FD100100            	jne L_error_non_closure
  8291 00004F69 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8292 00004F6C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8293 00004F6F 50                      	push rax
  8294                                  	; preparing a non tail-call
  8295 00004F70 488B4520                	mov rax, PARAM(0)	; param s1
  8296 00004F74 50                      	push rax
  8297 00004F75 6A01                    	push 1	; arg count
  8298 00004F77 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  8299 00004F7F 803805                  	cmp byte [rax], T_undefined
  8300 00004F82 0F845A100100            	je L_error_fvar_undefined
  8301 00004F88 803804                  	cmp byte [rax], T_closure
  8302 00004F8B 0F85D5100100            	jne L_error_non_closure
  8303 00004F91 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8304 00004F94 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8305 00004F97 50                      	push rax
  8306 00004F98 6A02                    	push 2	; arg count
  8307 00004F9A 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
  8308 00004FA2 803805                  	cmp byte [rax], T_undefined
  8309 00004FA5 0F8437100100            	je L_error_fvar_undefined
  8310 00004FAB 803804                  	cmp byte [rax], T_closure
  8311 00004FAE 0F85B2100100            	jne L_error_non_closure
  8312 00004FB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8313                                  
  8314                                  	; recycling the current frame
  8315 00004FB7 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8316 00004FBA FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8317 00004FBD B906000000              	mov rcx, 2 + 4
  8318 00004FC2 488B5D18                	mov rbx, COUNT
  8319 00004FC6 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8320 00004FCB 488D55F8                	lea rdx, [rbp - 8 * 1]
  8321                                  .L_tc_recycle_frame_loop_0406:
  8322 00004FCF 4883F900                	cmp rcx, 0
  8323 00004FD3 7413                    	je .L_tc_recycle_frame_done_0406
  8324 00004FD5 488B32                  	mov rsi, qword [rdx]
  8325 00004FD8 488933                  	mov qword [rbx], rsi
  8326 00004FDB 48FFC9                  	dec rcx
  8327 00004FDE 4883EB08                	sub rbx, 8 * 1
  8328 00004FE2 4883EA08                	sub rdx, 8 * 1
  8329 00004FE6 EBE7                    	jmp .L_tc_recycle_frame_loop_0406
  8330                                  .L_tc_recycle_frame_done_0406:
  8331 00004FE8 488D6308                	lea rsp, [rbx + 8 * 1]
  8332 00004FEC 5D                      	pop rbp	; the proc will restore it!
  8333 00004FED FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8334                                  .L_if_end_0227:
  8335 00004FF0 C9                      	leave
  8336 00004FF1 C22000                  	ret AND_KILL_FRAME(2)
  8337                                  .L_lambda_simple_end_0322:	; new closure is in rax
  8338 00004FF4 50                      	push rax
  8339 00004FF5 488B4528                	mov rax, PARAM(1)	; param run-2
  8340 00004FF9 8F00                    	pop qword [rax]
  8341 00004FFB 48B8-                   	mov rax, sob_void
  8341 00004FFD [0000000000000000] 
  8342                                  
  8343 00005005 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8344 0000500A E800110100              	call malloc
  8345 0000500F 50                      	push rax
  8346 00005010 BF10000000              	mov rdi, 8 * 2	; new rib
  8347 00005015 E8F5100100              	call malloc
  8348 0000501A 50                      	push rax
  8349 0000501B BF10000000              	mov rdi, 8 * 2	; extended env
  8350 00005020 E8EA100100              	call malloc
  8351 00005025 488B7D10                	mov rdi, ENV
  8352 00005029 BE00000000              	mov rsi, 0
  8353 0000502E BA01000000              	mov rdx, 1
  8354                                  .L_lambda_opt_env_loop_006b:	; ext_env[i + 1] <-- env[i]
  8355 00005033 4883FE01                	cmp rsi, 1
  8356 00005037 7410                    	je .L_lambda_opt_env_end_006b
  8357 00005039 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8358 0000503D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8359 00005041 48FFC6                  	inc rsi
  8360 00005044 48FFC2                  	inc rdx
  8361 00005047 EBEA                    	jmp .L_lambda_opt_env_loop_006b
  8362                                  .L_lambda_opt_env_end_006b:
  8363 00005049 5B                      	pop rbx
  8364 0000504A BE00000000              	mov rsi, 0
  8365                                  .L_lambda_opt_params_loop_006b:	; copy params
  8366 0000504F 4883FE02                	cmp rsi, 2
  8367 00005053 740E                    	je .L_lambda_opt_params_end_006b
  8368 00005055 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8369 0000505A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8370 0000505E 48FFC6                  	inc rsi
  8371 00005061 EBEC                    	jmp .L_lambda_opt_params_loop_006b
  8372                                  .L_lambda_opt_params_end_006b:
  8373 00005063 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8374 00005066 4889C3                  	mov rbx, rax
  8375 00005069 58                      	pop rax
  8376 0000506A C60004                  	mov byte [rax], T_closure
  8377 0000506D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8378 00005071 48C74009[7E500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_006b
  8379 00005079 E934020000              	jmp .L_lambda_opt_end_006b
  8380                                  .L_lambda_opt_code_006b:	; lambda-opt body
  8381 0000507E 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8382 00005084 0F8404010000            	je .L_lambda_opt_arity_check_exact_006b
  8383 0000508A 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8384 00005090 7F0B                    	jg .L_lambda_opt_arity_check_more_006b
  8385 00005092 FF742410                	push qword [rsp + 8 * 2]
  8386 00005096 6A00                    	push 0
  8387 00005098 E93F100100              	jmp L_error_incorrect_arity_opt
  8388                                  .L_lambda_opt_arity_check_more_006b:
  8389 0000509D 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  8390 000050A2 41B900000000            	mov r9 , 0
  8391 000050A8 4989E7                  	mov r15, rsp
  8392 000050AB 4D29C8                  	sub r8, r9
  8393 000050AE 41B900000000            	mov r9, 0
  8394 000050B4 498D5F10                	lea rbx, [r15 + 8 * 2]
  8395 000050B8 498B4710                	mov rax, qword [r15 + 8 * 2]
  8396 000050BC 486BC008                	imul rax, 8
  8397 000050C0 4801C3                  	add rbx, rax
  8398 000050C3 488B13                  	mov rdx , qword [rbx]
  8399 000050C6 4989DA                  	mov r10 , rbx
  8400 000050C9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
  8401 000050CE 52                      	push rdx
  8402 000050CF 53                      	push rbx
  8403 000050D0 4150                    	push r8
  8404 000050D2 4151                    	push r9
  8405 000050D4 4152                    	push r10
  8406 000050D6 4157                    	push r15
  8407 000050D8 E832100100              	call malloc
  8408 000050DD 415F                    	pop r15
  8409 000050DF 415A                    	pop r10
  8410 000050E1 4159                    	pop r9
  8411 000050E3 4158                    	pop r8
  8412 000050E5 5B                      	pop rbx
  8413 000050E6 5A                      	pop rdx
  8414 000050E7 C60021                  	mov byte qword [rax], T_pair
  8415 000050EA 48895001                	mov SOB_PAIR_CAR(rax), rdx
  8416 000050EE 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
  8417 000050F6 498902                  	mov qword [r10], rax
  8418 000050F9 49FFC1                  	inc r9
  8419 000050FC 4883EB08                	sub rbx, 8
  8420 00005100 4D39C1                  	cmp r9, r8
  8421 00005103 743E                    	je .L_lambda_opt_stack_shrink_loop_0215
  8422                                  .L_lambda_opt_stack_shrink_loop_0214:
  8423 00005105 488B13                  	mov rdx, qword [rbx]
  8424 00005108 53                      	push rbx
  8425 00005109 4150                    	push r8
  8426 0000510B 4151                    	push r9
  8427 0000510D 4152                    	push r10
  8428 0000510F 4157                    	push r15
  8429 00005111 52                      	push rdx
  8430 00005112 BF11000000              	mov rdi, (1 + 8 + 8)
  8431 00005117 E8F30F0100              	call malloc
  8432 0000511C 5A                      	pop rdx
  8433 0000511D 415F                    	pop r15
  8434 0000511F 415A                    	pop r10
  8435 00005121 4159                    	pop r9
  8436 00005123 4158                    	pop r8
  8437 00005125 5B                      	pop rbx
  8438 00005126 C60021                  	mov byte [rax], T_pair
  8439 00005129 48895001                	mov SOB_PAIR_CAR(rax), rdx
  8440 0000512D 4D8B32                  	mov r14, qword [r10]
  8441 00005130 4C897009                	mov SOB_PAIR_CDR(rax), r14
  8442 00005134 498902                  	mov qword [r10], rax
  8443 00005137 49FFC1                  	inc r9
  8444 0000513A 4883EB08                	sub rbx, 8
  8445 0000513E 4D39C1                  	cmp r9, r8
  8446 00005141 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_0214
  8447                                  .L_lambda_opt_stack_shrink_loop_0215:
  8448 00005143 498D5710                	lea rdx, [r15 + 8 * 2]
  8449 00005147 48C70200000000          	mov qword [rdx], 0
  8450 0000514E 48830201                	add qword [rdx] , 1
  8451 00005152 4D89C1                  	mov r9, r8
  8452 00005155 49FFC9                  	dec r9
  8453 00005158 4E8D0CCB                	lea r9, [rbx + 8 * r9]
  8454                                  .L_lambda_opt_stack_shrink_loop_0216:
  8455 0000515C 488B03                  	mov rax, qword [rbx]
  8456 0000515F 498901                  	mov qword [r9], rax
  8457 00005162 4983E908                	sub r9 , 8
  8458 00005166 4883EB08                	sub rbx, 8
  8459 0000516A 4C39FB                  	cmp rbx, r15
  8460 0000516D 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0216
  8461 0000516F 488B03                  	mov rax, qword [rbx]
  8462 00005172 498901                  	mov qword [r9], rax
  8463 00005175 4D89C1                  	mov r9, r8
  8464 00005178 4983E901                	sub r9 , 1
  8465 0000517C 4983F900                	cmp r9, 0
  8466 00005180 7446                    je .L_lambda_opt_stack_adjusted_006b
  8467                                  .L_lambda_opt_stack_shrink_loop_0217:
  8468 00005182 58                      	pop rax
  8469 00005183 49FFC9                  	dec r9
  8470 00005186 4983F900                	cmp r9, 0
  8471 0000518A 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0217
  8472 0000518C EB3A                    jmp .L_lambda_opt_stack_adjusted_006b
  8473                                  .L_lambda_opt_arity_check_exact_006b:
  8474 0000518E 4989E7                  	mov r15, rsp
  8475 00005191 498D5F10                	lea rbx, [r15 + 8 * 2 + 8 * 0]
  8476 00005195 488B0B                  	mov rcx, qword [rbx]
  8477 00005198 48C703[01000000]        	mov qword [rbx], sob_nil
  8478 0000519F 4883EB08                	sub rbx, 8
  8479                                  .L_lambda_opt_stack_shrink_loop_0213:
  8480 000051A3 488B13                  	mov rdx, qword [rbx]
  8481 000051A6 48890B                  	mov qword [rbx], rcx
  8482 000051A9 4C39FB                  	cmp rbx, r15
  8483 000051AC 7409                    je .L_lambda_opt_stack_shrink_loop_exit_006b
  8484 000051AE 4889D1                  	mov rcx, rdx
  8485 000051B1 4883EB08                	sub rbx, 8
  8486 000051B5 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_0213
  8487                                  .L_lambda_opt_stack_shrink_loop_exit_006b:
  8488 000051B7 52                      	push rdx
  8489 000051B8 4989E7                  	mov r15, rsp
  8490 000051BB 4983C710                	add r15, 16
  8491 000051BF 498B1F                  	mov rbx, qword [r15]
  8492 000051C2 48FFC3                  	inc rbx
  8493 000051C5 49891F                  	mov qword [r15], rbx
  8494                                  .L_lambda_opt_stack_adjusted_006b:
  8495 000051C8 C8000000                	enter 0, 0
  8496                                  	; preparing a non tail-call
  8497 000051CC 488B4520                	mov rax, PARAM(0)	; param s
  8498 000051D0 50                      	push rax
  8499 000051D1 6A01                    	push 1	; arg count
  8500 000051D3 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  8501 000051DB 803805                  	cmp byte [rax], T_undefined
  8502 000051DE 0F84FE0D0100            	je L_error_fvar_undefined
  8503 000051E4 803804                  	cmp byte [rax], T_closure
  8504 000051E7 0F85790E0100            	jne L_error_non_closure
  8505 000051ED FF7001                  	push SOB_CLOSURE_ENV(rax)
  8506 000051F0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8507 000051F3 483D[02000000]          	cmp rax, sob_boolean_false
  8508 000051F9 740F                    	je .L_if_else_0228
  8509 000051FB 48B8-                   	mov rax, L_constants + 1
  8509 000051FD [0100000000000000] 
  8510 00005205 E9A4000000              	jmp .L_if_end_0228
  8511                                  .L_if_else_0228:
  8512                                  	; preparing a tail-call
  8513                                  	; preparing a non tail-call
  8514 0000520A 488B4520                	mov rax, PARAM(0)	; param s
  8515 0000520E 50                      	push rax
  8516 0000520F 6A01                    	push 1	; arg count
  8517 00005211 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  8518 00005219 803805                  	cmp byte [rax], T_undefined
  8519 0000521C 0F84C00D0100            	je L_error_fvar_undefined
  8520 00005222 803804                  	cmp byte [rax], T_closure
  8521 00005225 0F853B0E0100            	jne L_error_non_closure
  8522 0000522B FF7001                  	push SOB_CLOSURE_ENV(rax)
  8523 0000522E FF5009                  	call SOB_CLOSURE_CODE(rax)
  8524 00005231 50                      	push rax
  8525                                  	; preparing a non tail-call
  8526 00005232 488B4520                	mov rax, PARAM(0)	; param s
  8527 00005236 50                      	push rax
  8528 00005237 6A01                    	push 1	; arg count
  8529 00005239 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  8530 00005241 803805                  	cmp byte [rax], T_undefined
  8531 00005244 0F84980D0100            	je L_error_fvar_undefined
  8532 0000524A 803804                  	cmp byte [rax], T_closure
  8533 0000524D 0F85130E0100            	jne L_error_non_closure
  8534 00005253 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8535 00005256 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8536 00005259 50                      	push rax
  8537 0000525A 6A02                    	push 2	; arg count
  8538 0000525C 488B4510                	mov rax, ENV
  8539 00005260 488B00                  	mov rax, qword [rax + 8 * 0]
  8540 00005263 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8541 00005266 488B00                  	mov rax, qword [rax]
  8542 00005269 803804                  	cmp byte [rax], T_closure
  8543 0000526C 0F85F40D0100            	jne L_error_non_closure
  8544 00005272 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8545                                  
  8546                                  	; recycling the current frame
  8547 00005275 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8548 00005278 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8549 0000527B B906000000              	mov rcx, 2 + 4
  8550 00005280 488B5D18                	mov rbx, COUNT
  8551 00005284 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8552 00005289 488D55F8                	lea rdx, [rbp - 8 * 1]
  8553                                  .L_tc_recycle_frame_loop_0407:
  8554 0000528D 4883F900                	cmp rcx, 0
  8555 00005291 7413                    	je .L_tc_recycle_frame_done_0407
  8556 00005293 488B32                  	mov rsi, qword [rdx]
  8557 00005296 488933                  	mov qword [rbx], rsi
  8558 00005299 48FFC9                  	dec rcx
  8559 0000529C 4883EB08                	sub rbx, 8 * 1
  8560 000052A0 4883EA08                	sub rdx, 8 * 1
  8561 000052A4 EBE7                    	jmp .L_tc_recycle_frame_loop_0407
  8562                                  .L_tc_recycle_frame_done_0407:
  8563 000052A6 488D6308                	lea rsp, [rbx + 8 * 1]
  8564 000052AA 5D                      	pop rbp	; the proc will restore it!
  8565 000052AB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8566                                  .L_if_end_0228:
  8567 000052AE C9                      	leave
  8568 000052AF C21800                  	ret AND_KILL_FRAME(1)
  8569                                  .L_lambda_opt_end_006b:	; new closure is in rax
  8570 000052B2 C9                      	leave
  8571 000052B3 C22000                  	ret AND_KILL_FRAME(2)
  8572                                  .L_lambda_simple_end_0320:	; new closure is in rax
  8573 000052B6 803804                  	cmp byte [rax], T_closure
  8574 000052B9 0F85A70D0100            	jne L_error_non_closure
  8575 000052BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  8576 000052C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8577 000052C5 48890425[29150000]      	mov qword [free_var_113], rax
  8578 000052CD 48B8-                   	mov rax, sob_void
  8578 000052CF [0000000000000000] 
  8579                                  
  8580 000052D7 4889C7                  	mov rdi, rax
  8581 000052DA E8420F0100              	call print_sexpr_if_not_void
  8582                                  
  8583                                  	; preparing a non tail-call
  8584 000052DF 48B8-                   	mov rax, L_constants + 1881
  8584 000052E1 [5907000000000000] 
  8585 000052E9 50                      	push rax
  8586 000052EA 6A01                    	push 1	; arg count
  8587 000052EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8588 000052F1 E8190E0100              	call malloc
  8589 000052F6 50                      	push rax
  8590 000052F7 BF00000000              	mov rdi, 8 * 0	; new rib
  8591 000052FC E80E0E0100              	call malloc
  8592 00005301 50                      	push rax
  8593 00005302 BF08000000              	mov rdi, 8 * 1	; extended env
  8594 00005307 E8030E0100              	call malloc
  8595 0000530C 488B7D10                	mov rdi, ENV
  8596 00005310 BE00000000              	mov rsi, 0
  8597 00005315 BA01000000              	mov rdx, 1
  8598                                  .L_lambda_simple_env_loop_0323:	; ext_env[i + 1] <-- env[i]
  8599 0000531A 4883FE00                	cmp rsi, 0
  8600 0000531E 7410                    	je .L_lambda_simple_env_end_0323
  8601 00005320 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8602 00005324 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8603 00005328 48FFC6                  	inc rsi
  8604 0000532B 48FFC2                  	inc rdx
  8605 0000532E EBEA                    	jmp .L_lambda_simple_env_loop_0323
  8606                                  .L_lambda_simple_env_end_0323:
  8607 00005330 5B                      	pop rbx
  8608 00005331 BE00000000              	mov rsi, 0
  8609                                  .L_lambda_simple_params_loop_0323:	; copy params
  8610 00005336 4883FE00                	cmp rsi, 0
  8611 0000533A 740E                    	je .L_lambda_simple_params_end_0323
  8612 0000533C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8613 00005341 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8614 00005345 48FFC6                  	inc rsi
  8615 00005348 EBEC                    	jmp .L_lambda_simple_params_loop_0323
  8616                                  .L_lambda_simple_params_end_0323:
  8617 0000534A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8618 0000534D 4889C3                  	mov rbx, rax
  8619 00005350 58                      	pop rax
  8620 00005351 C60004                  	mov byte [rax], T_closure
  8621 00005354 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8622 00005358 48C74009[65530000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0323
  8623 00005360 E951040000              	jmp .L_lambda_simple_end_0323
  8624                                  .L_lambda_simple_code_0323:	; lambda-simple body
  8625 00005365 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8626 0000536B 740B                    	je .L_lambda_simple_arity_check_ok_0323
  8627 0000536D FF742410                	push qword [rsp + 8 * 2]
  8628 00005371 6A01                    	push 1
  8629 00005373 E9500D0100              	jmp L_error_incorrect_arity_simple
  8630                                  .L_lambda_simple_arity_check_ok_0323:
  8631 00005378 C8000000                	enter 0, 0
  8632 0000537C BF08000000              	mov rdi, 8	; sob_box
  8633 00005381 E8890D0100              	call malloc
  8634 00005386 488B5D20                	mov rbx, PARAM(0)
  8635 0000538A 488918                  	mov [rax], rbx
  8636 0000538D 48894520                	mov PARAM(0), rax
  8637 00005391 48B8-                   	mov rax, sob_void
  8637 00005393 [0000000000000000] 
  8638                                  
  8639 0000539B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8640 000053A0 E86A0D0100              	call malloc
  8641 000053A5 50                      	push rax
  8642 000053A6 BF08000000              	mov rdi, 8 * 1	; new rib
  8643 000053AB E85F0D0100              	call malloc
  8644 000053B0 50                      	push rax
  8645 000053B1 BF10000000              	mov rdi, 8 * 2	; extended env
  8646 000053B6 E8540D0100              	call malloc
  8647 000053BB 488B7D10                	mov rdi, ENV
  8648 000053BF BE00000000              	mov rsi, 0
  8649 000053C4 BA01000000              	mov rdx, 1
  8650                                  .L_lambda_simple_env_loop_0324:	; ext_env[i + 1] <-- env[i]
  8651 000053C9 4883FE01                	cmp rsi, 1
  8652 000053CD 7410                    	je .L_lambda_simple_env_end_0324
  8653 000053CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8654 000053D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8655 000053D7 48FFC6                  	inc rsi
  8656 000053DA 48FFC2                  	inc rdx
  8657 000053DD EBEA                    	jmp .L_lambda_simple_env_loop_0324
  8658                                  .L_lambda_simple_env_end_0324:
  8659 000053DF 5B                      	pop rbx
  8660 000053E0 BE00000000              	mov rsi, 0
  8661                                  .L_lambda_simple_params_loop_0324:	; copy params
  8662 000053E5 4883FE01                	cmp rsi, 1
  8663 000053E9 740E                    	je .L_lambda_simple_params_end_0324
  8664 000053EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8665 000053F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8666 000053F4 48FFC6                  	inc rsi
  8667 000053F7 EBEC                    	jmp .L_lambda_simple_params_loop_0324
  8668                                  .L_lambda_simple_params_end_0324:
  8669 000053F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8670 000053FC 4889C3                  	mov rbx, rax
  8671 000053FF 58                      	pop rax
  8672 00005400 C60004                  	mov byte [rax], T_closure
  8673 00005403 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8674 00005407 48C74009[14540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0324
  8675 0000540F E95F010000              	jmp .L_lambda_simple_end_0324
  8676                                  .L_lambda_simple_code_0324:	; lambda-simple body
  8677 00005414 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8678 0000541A 740B                    	je .L_lambda_simple_arity_check_ok_0324
  8679 0000541C FF742410                	push qword [rsp + 8 * 2]
  8680 00005420 6A03                    	push 3
  8681 00005422 E9A10C0100              	jmp L_error_incorrect_arity_simple
  8682                                  .L_lambda_simple_arity_check_ok_0324:
  8683 00005427 C8000000                	enter 0, 0
  8684                                  	; preparing a non tail-call
  8685 0000542B 488B4530                	mov rax, PARAM(2)	; param ss
  8686 0000542F 50                      	push rax
  8687 00005430 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  8688 00005438 803805                  	cmp byte [rax], T_undefined
  8689 0000543B 0F84A10B0100            	je L_error_fvar_undefined
  8690 00005441 50                      	push rax
  8691 00005442 6A02                    	push 2	; arg count
  8692 00005444 488B0425[D4140000]      	mov rax, qword [free_var_108]	; free var ormap
  8693 0000544C 803805                  	cmp byte [rax], T_undefined
  8694 0000544F 0F848D0B0100            	je L_error_fvar_undefined
  8695 00005455 803804                  	cmp byte [rax], T_closure
  8696 00005458 0F85080C0100            	jne L_error_non_closure
  8697 0000545E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8698 00005461 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8699 00005464 483D[02000000]          	cmp rax, sob_boolean_false
  8700 0000546A 7409                    	je .L_if_else_0229
  8701 0000546C 488B4528                	mov rax, PARAM(1)	; param unit
  8702 00005470 E9FA000000              	jmp .L_if_end_0229
  8703                                  .L_if_else_0229:
  8704                                  	; preparing a tail-call
  8705                                  	; preparing a non tail-call
  8706 00005475 488B4530                	mov rax, PARAM(2)	; param ss
  8707 00005479 50                      	push rax
  8708 0000547A 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  8709 00005482 803805                  	cmp byte [rax], T_undefined
  8710 00005485 0F84570B0100            	je L_error_fvar_undefined
  8711 0000548B 50                      	push rax
  8712 0000548C 6A02                    	push 2	; arg count
  8713 0000548E 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  8714 00005496 803805                  	cmp byte [rax], T_undefined
  8715 00005499 0F84430B0100            	je L_error_fvar_undefined
  8716 0000549F 803804                  	cmp byte [rax], T_closure
  8717 000054A2 0F85BE0B0100            	jne L_error_non_closure
  8718 000054A8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8719 000054AB FF5009                  	call SOB_CLOSURE_CODE(rax)
  8720 000054AE 50                      	push rax
  8721                                  	; preparing a non tail-call
  8722                                  	; preparing a non tail-call
  8723 000054AF 488B4530                	mov rax, PARAM(2)	; param ss
  8724 000054B3 50                      	push rax
  8725 000054B4 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  8726 000054BC 803805                  	cmp byte [rax], T_undefined
  8727 000054BF 0F841D0B0100            	je L_error_fvar_undefined
  8728 000054C5 50                      	push rax
  8729 000054C6 6A02                    	push 2	; arg count
  8730 000054C8 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  8731 000054D0 803805                  	cmp byte [rax], T_undefined
  8732 000054D3 0F84090B0100            	je L_error_fvar_undefined
  8733 000054D9 803804                  	cmp byte [rax], T_closure
  8734 000054DC 0F85840B0100            	jne L_error_non_closure
  8735 000054E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8736 000054E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8737 000054E8 50                      	push rax
  8738 000054E9 488B4528                	mov rax, PARAM(1)	; param unit
  8739 000054ED 50                      	push rax
  8740 000054EE 488B4520                	mov rax, PARAM(0)	; param f
  8741 000054F2 50                      	push rax
  8742 000054F3 6A03                    	push 3	; arg count
  8743 000054F5 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
  8744 000054FD 803805                  	cmp byte [rax], T_undefined
  8745 00005500 0F84DC0A0100            	je L_error_fvar_undefined
  8746 00005506 803804                  	cmp byte [rax], T_closure
  8747 00005509 0F85570B0100            	jne L_error_non_closure
  8748 0000550F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8749 00005512 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8750 00005515 50                      	push rax
  8751 00005516 488B4520                	mov rax, PARAM(0)	; param f
  8752 0000551A 50                      	push rax
  8753 0000551B 6A03                    	push 3	; arg count
  8754 0000551D 488B4510                	mov rax, ENV
  8755 00005521 488B00                  	mov rax, qword [rax + 8 * 0]
  8756 00005524 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8757 00005527 488B00                  	mov rax, qword [rax]
  8758 0000552A 803804                  	cmp byte [rax], T_closure
  8759 0000552D 0F85330B0100            	jne L_error_non_closure
  8760 00005533 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8761                                  
  8762                                  	; recycling the current frame
  8763 00005536 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8764 00005539 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8765 0000553C B907000000              	mov rcx, 3 + 4
  8766 00005541 488B5D18                	mov rbx, COUNT
  8767 00005545 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8768 0000554A 488D55F8                	lea rdx, [rbp - 8 * 1]
  8769                                  .L_tc_recycle_frame_loop_0408:
  8770 0000554E 4883F900                	cmp rcx, 0
  8771 00005552 7413                    	je .L_tc_recycle_frame_done_0408
  8772 00005554 488B32                  	mov rsi, qword [rdx]
  8773 00005557 488933                  	mov qword [rbx], rsi
  8774 0000555A 48FFC9                  	dec rcx
  8775 0000555D 4883EB08                	sub rbx, 8 * 1
  8776 00005561 4883EA08                	sub rdx, 8 * 1
  8777 00005565 EBE7                    	jmp .L_tc_recycle_frame_loop_0408
  8778                                  .L_tc_recycle_frame_done_0408:
  8779 00005567 488D6308                	lea rsp, [rbx + 8 * 1]
  8780 0000556B 5D                      	pop rbp	; the proc will restore it!
  8781 0000556C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8782                                  .L_if_end_0229:
  8783 0000556F C9                      	leave
  8784 00005570 C22800                  	ret AND_KILL_FRAME(3)
  8785                                  .L_lambda_simple_end_0324:	; new closure is in rax
  8786 00005573 50                      	push rax
  8787 00005574 488B4520                	mov rax, PARAM(0)	; param run
  8788 00005578 8F00                    	pop qword [rax]
  8789 0000557A 48B8-                   	mov rax, sob_void
  8789 0000557C [0000000000000000] 
  8790                                  
  8791 00005584 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8792 00005589 E8810B0100              	call malloc
  8793 0000558E 50                      	push rax
  8794 0000558F BF08000000              	mov rdi, 8 * 1	; new rib
  8795 00005594 E8760B0100              	call malloc
  8796 00005599 50                      	push rax
  8797 0000559A BF10000000              	mov rdi, 8 * 2	; extended env
  8798 0000559F E86B0B0100              	call malloc
  8799 000055A4 488B7D10                	mov rdi, ENV
  8800 000055A8 BE00000000              	mov rsi, 0
  8801 000055AD BA01000000              	mov rdx, 1
  8802                                  .L_lambda_opt_env_loop_006c:	; ext_env[i + 1] <-- env[i]
  8803 000055B2 4883FE01                	cmp rsi, 1
  8804 000055B6 7410                    	je .L_lambda_opt_env_end_006c
  8805 000055B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8806 000055BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8807 000055C0 48FFC6                  	inc rsi
  8808 000055C3 48FFC2                  	inc rdx
  8809 000055C6 EBEA                    	jmp .L_lambda_opt_env_loop_006c
  8810                                  .L_lambda_opt_env_end_006c:
  8811 000055C8 5B                      	pop rbx
  8812 000055C9 BE00000000              	mov rsi, 0
  8813                                  .L_lambda_opt_params_loop_006c:	; copy params
  8814 000055CE 4883FE01                	cmp rsi, 1
  8815 000055D2 740E                    	je .L_lambda_opt_params_end_006c
  8816 000055D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8817 000055D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8818 000055DD 48FFC6                  	inc rsi
  8819 000055E0 EBEC                    	jmp .L_lambda_opt_params_loop_006c
  8820                                  .L_lambda_opt_params_end_006c:
  8821 000055E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8822 000055E5 4889C3                  	mov rbx, rax
  8823 000055E8 58                      	pop rax
  8824 000055E9 C60004                  	mov byte [rax], T_closure
  8825 000055EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8826 000055F0 48C74009[FD550000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_006c
  8827 000055F8 E9B5010000              	jmp .L_lambda_opt_end_006c
  8828                                  .L_lambda_opt_code_006c:	; lambda-opt body
  8829 000055FD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8830 00005603 0F8404010000            	je .L_lambda_opt_arity_check_exact_006c
  8831 00005609 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8832 0000560F 7F0B                    	jg .L_lambda_opt_arity_check_more_006c
  8833 00005611 FF742410                	push qword [rsp + 8 * 2]
  8834 00005615 6A02                    	push 2
  8835 00005617 E9C00A0100              	jmp L_error_incorrect_arity_opt
  8836                                  .L_lambda_opt_arity_check_more_006c:
  8837 0000561C 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  8838 00005621 41B902000000            	mov r9 , 2
  8839 00005627 4989E7                  	mov r15, rsp
  8840 0000562A 4D29C8                  	sub r8, r9
  8841 0000562D 41B900000000            	mov r9, 0
  8842 00005633 498D5F10                	lea rbx, [r15 + 8 * 2]
  8843 00005637 498B4710                	mov rax, qword [r15 + 8 * 2]
  8844 0000563B 486BC008                	imul rax, 8
  8845 0000563F 4801C3                  	add rbx, rax
  8846 00005642 488B13                  	mov rdx , qword [rbx]
  8847 00005645 4989DA                  	mov r10 , rbx
  8848 00005648 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
  8849 0000564D 52                      	push rdx
  8850 0000564E 53                      	push rbx
  8851 0000564F 4150                    	push r8
  8852 00005651 4151                    	push r9
  8853 00005653 4152                    	push r10
  8854 00005655 4157                    	push r15
  8855 00005657 E8B30A0100              	call malloc
  8856 0000565C 415F                    	pop r15
  8857 0000565E 415A                    	pop r10
  8858 00005660 4159                    	pop r9
  8859 00005662 4158                    	pop r8
  8860 00005664 5B                      	pop rbx
  8861 00005665 5A                      	pop rdx
  8862 00005666 C60021                  	mov byte qword [rax], T_pair
  8863 00005669 48895001                	mov SOB_PAIR_CAR(rax), rdx
  8864 0000566D 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
  8865 00005675 498902                  	mov qword [r10], rax
  8866 00005678 49FFC1                  	inc r9
  8867 0000567B 4883EB08                	sub rbx, 8
  8868 0000567F 4D39C1                  	cmp r9, r8
  8869 00005682 743E                    	je .L_lambda_opt_stack_shrink_loop_021a
  8870                                  .L_lambda_opt_stack_shrink_loop_0219:
  8871 00005684 488B13                  	mov rdx, qword [rbx]
  8872 00005687 53                      	push rbx
  8873 00005688 4150                    	push r8
  8874 0000568A 4151                    	push r9
  8875 0000568C 4152                    	push r10
  8876 0000568E 4157                    	push r15
  8877 00005690 52                      	push rdx
  8878 00005691 BF11000000              	mov rdi, (1 + 8 + 8)
  8879 00005696 E8740A0100              	call malloc
  8880 0000569B 5A                      	pop rdx
  8881 0000569C 415F                    	pop r15
  8882 0000569E 415A                    	pop r10
  8883 000056A0 4159                    	pop r9
  8884 000056A2 4158                    	pop r8
  8885 000056A4 5B                      	pop rbx
  8886 000056A5 C60021                  	mov byte [rax], T_pair
  8887 000056A8 48895001                	mov SOB_PAIR_CAR(rax), rdx
  8888 000056AC 4D8B32                  	mov r14, qword [r10]
  8889 000056AF 4C897009                	mov SOB_PAIR_CDR(rax), r14
  8890 000056B3 498902                  	mov qword [r10], rax
  8891 000056B6 49FFC1                  	inc r9
  8892 000056B9 4883EB08                	sub rbx, 8
  8893 000056BD 4D39C1                  	cmp r9, r8
  8894 000056C0 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_0219
  8895                                  .L_lambda_opt_stack_shrink_loop_021a:
  8896 000056C2 498D5710                	lea rdx, [r15 + 8 * 2]
  8897 000056C6 48C70202000000          	mov qword [rdx], 2
  8898 000056CD 48830201                	add qword [rdx] , 1
  8899 000056D1 4D89C1                  	mov r9, r8
  8900 000056D4 49FFC9                  	dec r9
  8901 000056D7 4E8D0CCB                	lea r9, [rbx + 8 * r9]
  8902                                  .L_lambda_opt_stack_shrink_loop_021b:
  8903 000056DB 488B03                  	mov rax, qword [rbx]
  8904 000056DE 498901                  	mov qword [r9], rax
  8905 000056E1 4983E908                	sub r9 , 8
  8906 000056E5 4883EB08                	sub rbx, 8
  8907 000056E9 4C39FB                  	cmp rbx, r15
  8908 000056EC 75ED                    	jne .L_lambda_opt_stack_shrink_loop_021b
  8909 000056EE 488B03                  	mov rax, qword [rbx]
  8910 000056F1 498901                  	mov qword [r9], rax
  8911 000056F4 4D89C1                  	mov r9, r8
  8912 000056F7 4983E901                	sub r9 , 1
  8913 000056FB 4983F900                	cmp r9, 0
  8914 000056FF 7446                    je .L_lambda_opt_stack_adjusted_006c
  8915                                  .L_lambda_opt_stack_shrink_loop_021c:
  8916 00005701 58                      	pop rax
  8917 00005702 49FFC9                  	dec r9
  8918 00005705 4983F900                	cmp r9, 0
  8919 00005709 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_021c
  8920 0000570B EB3A                    jmp .L_lambda_opt_stack_adjusted_006c
  8921                                  .L_lambda_opt_arity_check_exact_006c:
  8922 0000570D 4989E7                  	mov r15, rsp
  8923 00005710 498D5F20                	lea rbx, [r15 + 8 * 2 + 8 * 2]
  8924 00005714 488B0B                  	mov rcx, qword [rbx]
  8925 00005717 48C703[01000000]        	mov qword [rbx], sob_nil
  8926 0000571E 4883EB08                	sub rbx, 8
  8927                                  .L_lambda_opt_stack_shrink_loop_0218:
  8928 00005722 488B13                  	mov rdx, qword [rbx]
  8929 00005725 48890B                  	mov qword [rbx], rcx
  8930 00005728 4C39FB                  	cmp rbx, r15
  8931 0000572B 7409                    je .L_lambda_opt_stack_shrink_loop_exit_006c
  8932 0000572D 4889D1                  	mov rcx, rdx
  8933 00005730 4883EB08                	sub rbx, 8
  8934 00005734 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_0218
  8935                                  .L_lambda_opt_stack_shrink_loop_exit_006c:
  8936 00005736 52                      	push rdx
  8937 00005737 4989E7                  	mov r15, rsp
  8938 0000573A 4983C710                	add r15, 16
  8939 0000573E 498B1F                  	mov rbx, qword [r15]
  8940 00005741 48FFC3                  	inc rbx
  8941 00005744 49891F                  	mov qword [r15], rbx
  8942                                  .L_lambda_opt_stack_adjusted_006c:
  8943 00005747 C8000000                	enter 0, 0
  8944                                  	; preparing a tail-call
  8945 0000574B 488B4530                	mov rax, PARAM(2)	; param ss
  8946 0000574F 50                      	push rax
  8947 00005750 488B4528                	mov rax, PARAM(1)	; param unit
  8948 00005754 50                      	push rax
  8949 00005755 488B4520                	mov rax, PARAM(0)	; param f
  8950 00005759 50                      	push rax
  8951 0000575A 6A03                    	push 3	; arg count
  8952 0000575C 488B4510                	mov rax, ENV
  8953 00005760 488B00                  	mov rax, qword [rax + 8 * 0]
  8954 00005763 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8955 00005766 488B00                  	mov rax, qword [rax]
  8956 00005769 803804                  	cmp byte [rax], T_closure
  8957 0000576C 0F85F4080100            	jne L_error_non_closure
  8958 00005772 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8959                                  
  8960                                  	; recycling the current frame
  8961 00005775 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8962 00005778 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8963 0000577B B907000000              	mov rcx, 3 + 4
  8964 00005780 488B5D18                	mov rbx, COUNT
  8965 00005784 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8966 00005789 488D55F8                	lea rdx, [rbp - 8 * 1]
  8967                                  .L_tc_recycle_frame_loop_0409:
  8968 0000578D 4883F900                	cmp rcx, 0
  8969 00005791 7413                    	je .L_tc_recycle_frame_done_0409
  8970 00005793 488B32                  	mov rsi, qword [rdx]
  8971 00005796 488933                  	mov qword [rbx], rsi
  8972 00005799 48FFC9                  	dec rcx
  8973 0000579C 4883EB08                	sub rbx, 8 * 1
  8974 000057A0 4883EA08                	sub rdx, 8 * 1
  8975 000057A4 EBE7                    	jmp .L_tc_recycle_frame_loop_0409
  8976                                  .L_tc_recycle_frame_done_0409:
  8977 000057A6 488D6308                	lea rsp, [rbx + 8 * 1]
  8978 000057AA 5D                      	pop rbp	; the proc will restore it!
  8979 000057AB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8980 000057AE C9                      	leave
  8981 000057AF C22800                  	ret AND_KILL_FRAME(3)
  8982                                  .L_lambda_opt_end_006c:	; new closure is in rax
  8983 000057B2 C9                      	leave
  8984 000057B3 C21800                  	ret AND_KILL_FRAME(1)
  8985                                  .L_lambda_simple_end_0323:	; new closure is in rax
  8986 000057B6 803804                  	cmp byte [rax], T_closure
  8987 000057B9 0F85A7080100            	jne L_error_non_closure
  8988 000057BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  8989 000057C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8990 000057C5 48890425[18150000]      	mov qword [free_var_112], rax
  8991 000057CD 48B8-                   	mov rax, sob_void
  8991 000057CF [0000000000000000] 
  8992                                  
  8993 000057D7 4889C7                  	mov rdi, rax
  8994 000057DA E8420A0100              	call print_sexpr_if_not_void
  8995                                  
  8996                                  	; preparing a non tail-call
  8997 000057DF 48B8-                   	mov rax, L_constants + 1881
  8997 000057E1 [5907000000000000] 
  8998 000057E9 50                      	push rax
  8999 000057EA 6A01                    	push 1	; arg count
  9000 000057EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9001 000057F1 E819090100              	call malloc
  9002 000057F6 50                      	push rax
  9003 000057F7 BF00000000              	mov rdi, 8 * 0	; new rib
  9004 000057FC E80E090100              	call malloc
  9005 00005801 50                      	push rax
  9006 00005802 BF08000000              	mov rdi, 8 * 1	; extended env
  9007 00005807 E803090100              	call malloc
  9008 0000580C 488B7D10                	mov rdi, ENV
  9009 00005810 BE00000000              	mov rsi, 0
  9010 00005815 BA01000000              	mov rdx, 1
  9011                                  .L_lambda_simple_env_loop_0325:	; ext_env[i + 1] <-- env[i]
  9012 0000581A 4883FE00                	cmp rsi, 0
  9013 0000581E 7410                    	je .L_lambda_simple_env_end_0325
  9014 00005820 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9015 00005824 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9016 00005828 48FFC6                  	inc rsi
  9017 0000582B 48FFC2                  	inc rdx
  9018 0000582E EBEA                    	jmp .L_lambda_simple_env_loop_0325
  9019                                  .L_lambda_simple_env_end_0325:
  9020 00005830 5B                      	pop rbx
  9021 00005831 BE00000000              	mov rsi, 0
  9022                                  .L_lambda_simple_params_loop_0325:	; copy params
  9023 00005836 4883FE00                	cmp rsi, 0
  9024 0000583A 740E                    	je .L_lambda_simple_params_end_0325
  9025 0000583C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9026 00005841 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9027 00005845 48FFC6                  	inc rsi
  9028 00005848 EBEC                    	jmp .L_lambda_simple_params_loop_0325
  9029                                  .L_lambda_simple_params_end_0325:
  9030 0000584A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9031 0000584D 4889C3                  	mov rbx, rax
  9032 00005850 58                      	pop rax
  9033 00005851 C60004                  	mov byte [rax], T_closure
  9034 00005854 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9035 00005858 48C74009[65580000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0325
  9036 00005860 E9A2040000              	jmp .L_lambda_simple_end_0325
  9037                                  .L_lambda_simple_code_0325:	; lambda-simple body
  9038 00005865 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9039 0000586B 740B                    	je .L_lambda_simple_arity_check_ok_0325
  9040 0000586D FF742410                	push qword [rsp + 8 * 2]
  9041 00005871 6A01                    	push 1
  9042 00005873 E950080100              	jmp L_error_incorrect_arity_simple
  9043                                  .L_lambda_simple_arity_check_ok_0325:
  9044 00005878 C8000000                	enter 0, 0
  9045 0000587C BF08000000              	mov rdi, 8	; sob_box
  9046 00005881 E889080100              	call malloc
  9047 00005886 488B5D20                	mov rbx, PARAM(0)
  9048 0000588A 488918                  	mov [rax], rbx
  9049 0000588D 48894520                	mov PARAM(0), rax
  9050 00005891 48B8-                   	mov rax, sob_void
  9050 00005893 [0000000000000000] 
  9051                                  
  9052 0000589B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9053 000058A0 E86A080100              	call malloc
  9054 000058A5 50                      	push rax
  9055 000058A6 BF08000000              	mov rdi, 8 * 1	; new rib
  9056 000058AB E85F080100              	call malloc
  9057 000058B0 50                      	push rax
  9058 000058B1 BF10000000              	mov rdi, 8 * 2	; extended env
  9059 000058B6 E854080100              	call malloc
  9060 000058BB 488B7D10                	mov rdi, ENV
  9061 000058BF BE00000000              	mov rsi, 0
  9062 000058C4 BA01000000              	mov rdx, 1
  9063                                  .L_lambda_simple_env_loop_0326:	; ext_env[i + 1] <-- env[i]
  9064 000058C9 4883FE01                	cmp rsi, 1
  9065 000058CD 7410                    	je .L_lambda_simple_env_end_0326
  9066 000058CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9067 000058D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9068 000058D7 48FFC6                  	inc rsi
  9069 000058DA 48FFC2                  	inc rdx
  9070 000058DD EBEA                    	jmp .L_lambda_simple_env_loop_0326
  9071                                  .L_lambda_simple_env_end_0326:
  9072 000058DF 5B                      	pop rbx
  9073 000058E0 BE00000000              	mov rsi, 0
  9074                                  .L_lambda_simple_params_loop_0326:	; copy params
  9075 000058E5 4883FE01                	cmp rsi, 1
  9076 000058E9 740E                    	je .L_lambda_simple_params_end_0326
  9077 000058EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9078 000058F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9079 000058F4 48FFC6                  	inc rsi
  9080 000058F7 EBEC                    	jmp .L_lambda_simple_params_loop_0326
  9081                                  .L_lambda_simple_params_end_0326:
  9082 000058F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9083 000058FC 4889C3                  	mov rbx, rax
  9084 000058FF 58                      	pop rax
  9085 00005900 C60004                  	mov byte [rax], T_closure
  9086 00005903 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9087 00005907 48C74009[14590000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0326
  9088 0000590F E9B0010000              	jmp .L_lambda_simple_end_0326
  9089                                  .L_lambda_simple_code_0326:	; lambda-simple body
  9090 00005914 48837C241003            	cmp qword [rsp + 8 * 2], 3
  9091 0000591A 740B                    	je .L_lambda_simple_arity_check_ok_0326
  9092 0000591C FF742410                	push qword [rsp + 8 * 2]
  9093 00005920 6A03                    	push 3
  9094 00005922 E9A1070100              	jmp L_error_incorrect_arity_simple
  9095                                  .L_lambda_simple_arity_check_ok_0326:
  9096 00005927 C8000000                	enter 0, 0
  9097                                  	; preparing a non tail-call
  9098 0000592B 488B4530                	mov rax, PARAM(2)	; param ss
  9099 0000592F 50                      	push rax
  9100 00005930 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  9101 00005938 803805                  	cmp byte [rax], T_undefined
  9102 0000593B 0F84A1060100            	je L_error_fvar_undefined
  9103 00005941 50                      	push rax
  9104 00005942 6A02                    	push 2	; arg count
  9105 00005944 488B0425[D4140000]      	mov rax, qword [free_var_108]	; free var ormap
  9106 0000594C 803805                  	cmp byte [rax], T_undefined
  9107 0000594F 0F848D060100            	je L_error_fvar_undefined
  9108 00005955 803804                  	cmp byte [rax], T_closure
  9109 00005958 0F8508070100            	jne L_error_non_closure
  9110 0000595E FF7001                  	push SOB_CLOSURE_ENV(rax)
  9111 00005961 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9112 00005964 483D[02000000]          	cmp rax, sob_boolean_false
  9113 0000596A 7409                    	je .L_if_else_022a
  9114 0000596C 488B4528                	mov rax, PARAM(1)	; param unit
  9115 00005970 E94B010000              	jmp .L_if_end_022a
  9116                                  .L_if_else_022a:
  9117                                  	; preparing a tail-call
  9118                                  	; preparing a non tail-call
  9119                                  	; preparing a non tail-call
  9120 00005975 48B8-                   	mov rax, L_constants + 1
  9120 00005977 [0100000000000000] 
  9121 0000597F 50                      	push rax
  9122                                  	; preparing a non tail-call
  9123                                  	; preparing a non tail-call
  9124 00005980 488B4530                	mov rax, PARAM(2)	; param ss
  9125 00005984 50                      	push rax
  9126 00005985 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  9127 0000598D 803805                  	cmp byte [rax], T_undefined
  9128 00005990 0F844C060100            	je L_error_fvar_undefined
  9129 00005996 50                      	push rax
  9130 00005997 6A02                    	push 2	; arg count
  9131 00005999 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  9132 000059A1 803805                  	cmp byte [rax], T_undefined
  9133 000059A4 0F8438060100            	je L_error_fvar_undefined
  9134 000059AA 803804                  	cmp byte [rax], T_closure
  9135 000059AD 0F85B3060100            	jne L_error_non_closure
  9136 000059B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9137 000059B6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9138 000059B9 50                      	push rax
  9139 000059BA 488B4528                	mov rax, PARAM(1)	; param unit
  9140 000059BE 50                      	push rax
  9141 000059BF 488B4520                	mov rax, PARAM(0)	; param f
  9142 000059C3 50                      	push rax
  9143 000059C4 6A03                    	push 3	; arg count
  9144 000059C6 488B4510                	mov rax, ENV
  9145 000059CA 488B00                  	mov rax, qword [rax + 8 * 0]
  9146 000059CD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9147 000059D0 488B00                  	mov rax, qword [rax]
  9148 000059D3 803804                  	cmp byte [rax], T_closure
  9149 000059D6 0F858A060100            	jne L_error_non_closure
  9150 000059DC FF7001                  	push SOB_CLOSURE_ENV(rax)
  9151 000059DF FF5009                  	call SOB_CLOSURE_CODE(rax)
  9152 000059E2 50                      	push rax
  9153 000059E3 6A02                    	push 2	; arg count
  9154 000059E5 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
  9155 000059ED 803805                  	cmp byte [rax], T_undefined
  9156 000059F0 0F84EC050100            	je L_error_fvar_undefined
  9157 000059F6 803804                  	cmp byte [rax], T_closure
  9158 000059F9 0F8567060100            	jne L_error_non_closure
  9159 000059FF FF7001                  	push SOB_CLOSURE_ENV(rax)
  9160 00005A02 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9161 00005A05 50                      	push rax
  9162                                  	; preparing a non tail-call
  9163 00005A06 488B4530                	mov rax, PARAM(2)	; param ss
  9164 00005A0A 50                      	push rax
  9165 00005A0B 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  9166 00005A13 803805                  	cmp byte [rax], T_undefined
  9167 00005A16 0F84C6050100            	je L_error_fvar_undefined
  9168 00005A1C 50                      	push rax
  9169 00005A1D 6A02                    	push 2	; arg count
  9170 00005A1F 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  9171 00005A27 803805                  	cmp byte [rax], T_undefined
  9172 00005A2A 0F84B2050100            	je L_error_fvar_undefined
  9173 00005A30 803804                  	cmp byte [rax], T_closure
  9174 00005A33 0F852D060100            	jne L_error_non_closure
  9175 00005A39 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9176 00005A3C FF5009                  	call SOB_CLOSURE_CODE(rax)
  9177 00005A3F 50                      	push rax
  9178 00005A40 6A02                    	push 2	; arg count
  9179 00005A42 488B0425[29150000]      	mov rax, qword [free_var_113]	; free var append
  9180 00005A4A 803805                  	cmp byte [rax], T_undefined
  9181 00005A4D 0F848F050100            	je L_error_fvar_undefined
  9182 00005A53 803804                  	cmp byte [rax], T_closure
  9183 00005A56 0F850A060100            	jne L_error_non_closure
  9184 00005A5C FF7001                  	push SOB_CLOSURE_ENV(rax)
  9185 00005A5F FF5009                  	call SOB_CLOSURE_CODE(rax)
  9186 00005A62 50                      	push rax
  9187 00005A63 488B4520                	mov rax, PARAM(0)	; param f
  9188 00005A67 50                      	push rax
  9189 00005A68 6A02                    	push 2	; arg count
  9190 00005A6A 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
  9191 00005A72 803805                  	cmp byte [rax], T_undefined
  9192 00005A75 0F8467050100            	je L_error_fvar_undefined
  9193 00005A7B 803804                  	cmp byte [rax], T_closure
  9194 00005A7E 0F85E2050100            	jne L_error_non_closure
  9195 00005A84 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9196                                  
  9197                                  	; recycling the current frame
  9198 00005A87 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9199 00005A8A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9200 00005A8D B906000000              	mov rcx, 2 + 4
  9201 00005A92 488B5D18                	mov rbx, COUNT
  9202 00005A96 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9203 00005A9B 488D55F8                	lea rdx, [rbp - 8 * 1]
  9204                                  .L_tc_recycle_frame_loop_040a:
  9205 00005A9F 4883F900                	cmp rcx, 0
  9206 00005AA3 7413                    	je .L_tc_recycle_frame_done_040a
  9207 00005AA5 488B32                  	mov rsi, qword [rdx]
  9208 00005AA8 488933                  	mov qword [rbx], rsi
  9209 00005AAB 48FFC9                  	dec rcx
  9210 00005AAE 4883EB08                	sub rbx, 8 * 1
  9211 00005AB2 4883EA08                	sub rdx, 8 * 1
  9212 00005AB6 EBE7                    	jmp .L_tc_recycle_frame_loop_040a
  9213                                  .L_tc_recycle_frame_done_040a:
  9214 00005AB8 488D6308                	lea rsp, [rbx + 8 * 1]
  9215 00005ABC 5D                      	pop rbp	; the proc will restore it!
  9216 00005ABD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9217                                  .L_if_end_022a:
  9218 00005AC0 C9                      	leave
  9219 00005AC1 C22800                  	ret AND_KILL_FRAME(3)
  9220                                  .L_lambda_simple_end_0326:	; new closure is in rax
  9221 00005AC4 50                      	push rax
  9222 00005AC5 488B4520                	mov rax, PARAM(0)	; param run
  9223 00005AC9 8F00                    	pop qword [rax]
  9224 00005ACB 48B8-                   	mov rax, sob_void
  9224 00005ACD [0000000000000000] 
  9225                                  
  9226 00005AD5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9227 00005ADA E830060100              	call malloc
  9228 00005ADF 50                      	push rax
  9229 00005AE0 BF08000000              	mov rdi, 8 * 1	; new rib
  9230 00005AE5 E825060100              	call malloc
  9231 00005AEA 50                      	push rax
  9232 00005AEB BF10000000              	mov rdi, 8 * 2	; extended env
  9233 00005AF0 E81A060100              	call malloc
  9234 00005AF5 488B7D10                	mov rdi, ENV
  9235 00005AF9 BE00000000              	mov rsi, 0
  9236 00005AFE BA01000000              	mov rdx, 1
  9237                                  .L_lambda_opt_env_loop_006d:	; ext_env[i + 1] <-- env[i]
  9238 00005B03 4883FE01                	cmp rsi, 1
  9239 00005B07 7410                    	je .L_lambda_opt_env_end_006d
  9240 00005B09 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9241 00005B0D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9242 00005B11 48FFC6                  	inc rsi
  9243 00005B14 48FFC2                  	inc rdx
  9244 00005B17 EBEA                    	jmp .L_lambda_opt_env_loop_006d
  9245                                  .L_lambda_opt_env_end_006d:
  9246 00005B19 5B                      	pop rbx
  9247 00005B1A BE00000000              	mov rsi, 0
  9248                                  .L_lambda_opt_params_loop_006d:	; copy params
  9249 00005B1F 4883FE01                	cmp rsi, 1
  9250 00005B23 740E                    	je .L_lambda_opt_params_end_006d
  9251 00005B25 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9252 00005B2A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9253 00005B2E 48FFC6                  	inc rsi
  9254 00005B31 EBEC                    	jmp .L_lambda_opt_params_loop_006d
  9255                                  .L_lambda_opt_params_end_006d:
  9256 00005B33 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9257 00005B36 4889C3                  	mov rbx, rax
  9258 00005B39 58                      	pop rax
  9259 00005B3A C60004                  	mov byte [rax], T_closure
  9260 00005B3D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9261 00005B41 48C74009[4E5B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_006d
  9262 00005B49 E9B5010000              	jmp .L_lambda_opt_end_006d
  9263                                  .L_lambda_opt_code_006d:	; lambda-opt body
  9264 00005B4E 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9265 00005B54 0F8404010000            	je .L_lambda_opt_arity_check_exact_006d
  9266 00005B5A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9267 00005B60 7F0B                    	jg .L_lambda_opt_arity_check_more_006d
  9268 00005B62 FF742410                	push qword [rsp + 8 * 2]
  9269 00005B66 6A02                    	push 2
  9270 00005B68 E96F050100              	jmp L_error_incorrect_arity_opt
  9271                                  .L_lambda_opt_arity_check_more_006d:
  9272 00005B6D 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  9273 00005B72 41B902000000            	mov r9 , 2
  9274 00005B78 4989E7                  	mov r15, rsp
  9275 00005B7B 4D29C8                  	sub r8, r9
  9276 00005B7E 41B900000000            	mov r9, 0
  9277 00005B84 498D5F10                	lea rbx, [r15 + 8 * 2]
  9278 00005B88 498B4710                	mov rax, qword [r15 + 8 * 2]
  9279 00005B8C 486BC008                	imul rax, 8
  9280 00005B90 4801C3                  	add rbx, rax
  9281 00005B93 488B13                  	mov rdx , qword [rbx]
  9282 00005B96 4989DA                  	mov r10 , rbx
  9283 00005B99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
  9284 00005B9E 52                      	push rdx
  9285 00005B9F 53                      	push rbx
  9286 00005BA0 4150                    	push r8
  9287 00005BA2 4151                    	push r9
  9288 00005BA4 4152                    	push r10
  9289 00005BA6 4157                    	push r15
  9290 00005BA8 E862050100              	call malloc
  9291 00005BAD 415F                    	pop r15
  9292 00005BAF 415A                    	pop r10
  9293 00005BB1 4159                    	pop r9
  9294 00005BB3 4158                    	pop r8
  9295 00005BB5 5B                      	pop rbx
  9296 00005BB6 5A                      	pop rdx
  9297 00005BB7 C60021                  	mov byte qword [rax], T_pair
  9298 00005BBA 48895001                	mov SOB_PAIR_CAR(rax), rdx
  9299 00005BBE 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
  9300 00005BC6 498902                  	mov qword [r10], rax
  9301 00005BC9 49FFC1                  	inc r9
  9302 00005BCC 4883EB08                	sub rbx, 8
  9303 00005BD0 4D39C1                  	cmp r9, r8
  9304 00005BD3 743E                    	je .L_lambda_opt_stack_shrink_loop_021f
  9305                                  .L_lambda_opt_stack_shrink_loop_021e:
  9306 00005BD5 488B13                  	mov rdx, qword [rbx]
  9307 00005BD8 53                      	push rbx
  9308 00005BD9 4150                    	push r8
  9309 00005BDB 4151                    	push r9
  9310 00005BDD 4152                    	push r10
  9311 00005BDF 4157                    	push r15
  9312 00005BE1 52                      	push rdx
  9313 00005BE2 BF11000000              	mov rdi, (1 + 8 + 8)
  9314 00005BE7 E823050100              	call malloc
  9315 00005BEC 5A                      	pop rdx
  9316 00005BED 415F                    	pop r15
  9317 00005BEF 415A                    	pop r10
  9318 00005BF1 4159                    	pop r9
  9319 00005BF3 4158                    	pop r8
  9320 00005BF5 5B                      	pop rbx
  9321 00005BF6 C60021                  	mov byte [rax], T_pair
  9322 00005BF9 48895001                	mov SOB_PAIR_CAR(rax), rdx
  9323 00005BFD 4D8B32                  	mov r14, qword [r10]
  9324 00005C00 4C897009                	mov SOB_PAIR_CDR(rax), r14
  9325 00005C04 498902                  	mov qword [r10], rax
  9326 00005C07 49FFC1                  	inc r9
  9327 00005C0A 4883EB08                	sub rbx, 8
  9328 00005C0E 4D39C1                  	cmp r9, r8
  9329 00005C11 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_021e
  9330                                  .L_lambda_opt_stack_shrink_loop_021f:
  9331 00005C13 498D5710                	lea rdx, [r15 + 8 * 2]
  9332 00005C17 48C70202000000          	mov qword [rdx], 2
  9333 00005C1E 48830201                	add qword [rdx] , 1
  9334 00005C22 4D89C1                  	mov r9, r8
  9335 00005C25 49FFC9                  	dec r9
  9336 00005C28 4E8D0CCB                	lea r9, [rbx + 8 * r9]
  9337                                  .L_lambda_opt_stack_shrink_loop_0220:
  9338 00005C2C 488B03                  	mov rax, qword [rbx]
  9339 00005C2F 498901                  	mov qword [r9], rax
  9340 00005C32 4983E908                	sub r9 , 8
  9341 00005C36 4883EB08                	sub rbx, 8
  9342 00005C3A 4C39FB                  	cmp rbx, r15
  9343 00005C3D 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0220
  9344 00005C3F 488B03                  	mov rax, qword [rbx]
  9345 00005C42 498901                  	mov qword [r9], rax
  9346 00005C45 4D89C1                  	mov r9, r8
  9347 00005C48 4983E901                	sub r9 , 1
  9348 00005C4C 4983F900                	cmp r9, 0
  9349 00005C50 7446                    je .L_lambda_opt_stack_adjusted_006d
  9350                                  .L_lambda_opt_stack_shrink_loop_0221:
  9351 00005C52 58                      	pop rax
  9352 00005C53 49FFC9                  	dec r9
  9353 00005C56 4983F900                	cmp r9, 0
  9354 00005C5A 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0221
  9355 00005C5C EB3A                    jmp .L_lambda_opt_stack_adjusted_006d
  9356                                  .L_lambda_opt_arity_check_exact_006d:
  9357 00005C5E 4989E7                  	mov r15, rsp
  9358 00005C61 498D5F20                	lea rbx, [r15 + 8 * 2 + 8 * 2]
  9359 00005C65 488B0B                  	mov rcx, qword [rbx]
  9360 00005C68 48C703[01000000]        	mov qword [rbx], sob_nil
  9361 00005C6F 4883EB08                	sub rbx, 8
  9362                                  .L_lambda_opt_stack_shrink_loop_021d:
  9363 00005C73 488B13                  	mov rdx, qword [rbx]
  9364 00005C76 48890B                  	mov qword [rbx], rcx
  9365 00005C79 4C39FB                  	cmp rbx, r15
  9366 00005C7C 7409                    je .L_lambda_opt_stack_shrink_loop_exit_006d
  9367 00005C7E 4889D1                  	mov rcx, rdx
  9368 00005C81 4883EB08                	sub rbx, 8
  9369 00005C85 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_021d
  9370                                  .L_lambda_opt_stack_shrink_loop_exit_006d:
  9371 00005C87 52                      	push rdx
  9372 00005C88 4989E7                  	mov r15, rsp
  9373 00005C8B 4983C710                	add r15, 16
  9374 00005C8F 498B1F                  	mov rbx, qword [r15]
  9375 00005C92 48FFC3                  	inc rbx
  9376 00005C95 49891F                  	mov qword [r15], rbx
  9377                                  .L_lambda_opt_stack_adjusted_006d:
  9378 00005C98 C8000000                	enter 0, 0
  9379                                  	; preparing a tail-call
  9380 00005C9C 488B4530                	mov rax, PARAM(2)	; param ss
  9381 00005CA0 50                      	push rax
  9382 00005CA1 488B4528                	mov rax, PARAM(1)	; param unit
  9383 00005CA5 50                      	push rax
  9384 00005CA6 488B4520                	mov rax, PARAM(0)	; param f
  9385 00005CAA 50                      	push rax
  9386 00005CAB 6A03                    	push 3	; arg count
  9387 00005CAD 488B4510                	mov rax, ENV
  9388 00005CB1 488B00                  	mov rax, qword [rax + 8 * 0]
  9389 00005CB4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9390 00005CB7 488B00                  	mov rax, qword [rax]
  9391 00005CBA 803804                  	cmp byte [rax], T_closure
  9392 00005CBD 0F85A3030100            	jne L_error_non_closure
  9393 00005CC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9394                                  
  9395                                  	; recycling the current frame
  9396 00005CC6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9397 00005CC9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9398 00005CCC B907000000              	mov rcx, 3 + 4
  9399 00005CD1 488B5D18                	mov rbx, COUNT
  9400 00005CD5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9401 00005CDA 488D55F8                	lea rdx, [rbp - 8 * 1]
  9402                                  .L_tc_recycle_frame_loop_040b:
  9403 00005CDE 4883F900                	cmp rcx, 0
  9404 00005CE2 7413                    	je .L_tc_recycle_frame_done_040b
  9405 00005CE4 488B32                  	mov rsi, qword [rdx]
  9406 00005CE7 488933                  	mov qword [rbx], rsi
  9407 00005CEA 48FFC9                  	dec rcx
  9408 00005CED 4883EB08                	sub rbx, 8 * 1
  9409 00005CF1 4883EA08                	sub rdx, 8 * 1
  9410 00005CF5 EBE7                    	jmp .L_tc_recycle_frame_loop_040b
  9411                                  .L_tc_recycle_frame_done_040b:
  9412 00005CF7 488D6308                	lea rsp, [rbx + 8 * 1]
  9413 00005CFB 5D                      	pop rbp	; the proc will restore it!
  9414 00005CFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9415 00005CFF C9                      	leave
  9416 00005D00 C22800                  	ret AND_KILL_FRAME(3)
  9417                                  .L_lambda_opt_end_006d:	; new closure is in rax
  9418 00005D03 C9                      	leave
  9419 00005D04 C21800                  	ret AND_KILL_FRAME(1)
  9420                                  .L_lambda_simple_end_0325:	; new closure is in rax
  9421 00005D07 803804                  	cmp byte [rax], T_closure
  9422 00005D0A 0F8556030100            	jne L_error_non_closure
  9423 00005D10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9424 00005D13 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9425 00005D16 48890425[3A150000]      	mov qword [free_var_114], rax
  9426 00005D1E 48B8-                   	mov rax, sob_void
  9426 00005D20 [0000000000000000] 
  9427                                  
  9428 00005D28 4889C7                  	mov rdi, rax
  9429 00005D2B E8F1040100              	call print_sexpr_if_not_void
  9430                                  
  9431                                  	; preparing a non tail-call
  9432 00005D30 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9433 00005D35 E8D5030100              	call malloc
  9434 00005D3A 50                      	push rax
  9435 00005D3B BF00000000              	mov rdi, 8 * 0	; new rib
  9436 00005D40 E8CA030100              	call malloc
  9437 00005D45 50                      	push rax
  9438 00005D46 BF08000000              	mov rdi, 8 * 1	; extended env
  9439 00005D4B E8BF030100              	call malloc
  9440 00005D50 488B7D10                	mov rdi, ENV
  9441 00005D54 BE00000000              	mov rsi, 0
  9442 00005D59 BA01000000              	mov rdx, 1
  9443                                  .L_lambda_simple_env_loop_0327:	; ext_env[i + 1] <-- env[i]
  9444 00005D5E 4883FE00                	cmp rsi, 0
  9445 00005D62 7410                    	je .L_lambda_simple_env_end_0327
  9446 00005D64 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9447 00005D68 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9448 00005D6C 48FFC6                  	inc rsi
  9449 00005D6F 48FFC2                  	inc rdx
  9450 00005D72 EBEA                    	jmp .L_lambda_simple_env_loop_0327
  9451                                  .L_lambda_simple_env_end_0327:
  9452 00005D74 5B                      	pop rbx
  9453 00005D75 BE00000000              	mov rsi, 0
  9454                                  .L_lambda_simple_params_loop_0327:	; copy params
  9455 00005D7A 4883FE00                	cmp rsi, 0
  9456 00005D7E 740E                    	je .L_lambda_simple_params_end_0327
  9457 00005D80 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9458 00005D85 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9459 00005D89 48FFC6                  	inc rsi
  9460 00005D8C EBEC                    	jmp .L_lambda_simple_params_loop_0327
  9461                                  .L_lambda_simple_params_end_0327:
  9462 00005D8E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9463 00005D91 4889C3                  	mov rbx, rax
  9464 00005D94 58                      	pop rax
  9465 00005D95 C60004                  	mov byte [rax], T_closure
  9466 00005D98 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9467 00005D9C 48C74009[A95D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0327
  9468 00005DA4 E989000000              	jmp .L_lambda_simple_end_0327
  9469                                  .L_lambda_simple_code_0327:	; lambda-simple body
  9470 00005DA9 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9471 00005DAF 740B                    	je .L_lambda_simple_arity_check_ok_0327
  9472 00005DB1 FF742410                	push qword [rsp + 8 * 2]
  9473 00005DB5 6A00                    	push 0
  9474 00005DB7 E90C030100              	jmp L_error_incorrect_arity_simple
  9475                                  .L_lambda_simple_arity_check_ok_0327:
  9476 00005DBC C8000000                	enter 0, 0
  9477                                  	; preparing a tail-call
  9478 00005DC0 48B8-                   	mov rax, L_constants + 2075
  9478 00005DC2 [1B08000000000000] 
  9479 00005DCA 50                      	push rax
  9480 00005DCB 48B8-                   	mov rax, L_constants + 2066
  9480 00005DCD [1208000000000000] 
  9481 00005DD5 50                      	push rax
  9482 00005DD6 6A02                    	push 2	; arg count
  9483 00005DD8 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
  9484 00005DE0 803805                  	cmp byte [rax], T_undefined
  9485 00005DE3 0F84F9010100            	je L_error_fvar_undefined
  9486 00005DE9 803804                  	cmp byte [rax], T_closure
  9487 00005DEC 0F8574020100            	jne L_error_non_closure
  9488 00005DF2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9489                                  
  9490                                  	; recycling the current frame
  9491 00005DF5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9492 00005DF8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9493 00005DFB B906000000              	mov rcx, 2 + 4
  9494 00005E00 488B5D18                	mov rbx, COUNT
  9495 00005E04 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9496 00005E09 488D55F8                	lea rdx, [rbp - 8 * 1]
  9497                                  .L_tc_recycle_frame_loop_040c:
  9498 00005E0D 4883F900                	cmp rcx, 0
  9499 00005E11 7413                    	je .L_tc_recycle_frame_done_040c
  9500 00005E13 488B32                  	mov rsi, qword [rdx]
  9501 00005E16 488933                  	mov qword [rbx], rsi
  9502 00005E19 48FFC9                  	dec rcx
  9503 00005E1C 4883EB08                	sub rbx, 8 * 1
  9504 00005E20 4883EA08                	sub rdx, 8 * 1
  9505 00005E24 EBE7                    	jmp .L_tc_recycle_frame_loop_040c
  9506                                  .L_tc_recycle_frame_done_040c:
  9507 00005E26 488D6308                	lea rsp, [rbx + 8 * 1]
  9508 00005E2A 5D                      	pop rbp	; the proc will restore it!
  9509 00005E2B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9510 00005E2E C9                      	leave
  9511 00005E2F C21000                  	ret AND_KILL_FRAME(0)
  9512                                  .L_lambda_simple_end_0327:	; new closure is in rax
  9513 00005E32 50                      	push rax
  9514 00005E33 6A01                    	push 1	; arg count
  9515 00005E35 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9516 00005E3A E8D0020100              	call malloc
  9517 00005E3F 50                      	push rax
  9518 00005E40 BF00000000              	mov rdi, 8 * 0	; new rib
  9519 00005E45 E8C5020100              	call malloc
  9520 00005E4A 50                      	push rax
  9521 00005E4B BF08000000              	mov rdi, 8 * 1	; extended env
  9522 00005E50 E8BA020100              	call malloc
  9523 00005E55 488B7D10                	mov rdi, ENV
  9524 00005E59 BE00000000              	mov rsi, 0
  9525 00005E5E BA01000000              	mov rdx, 1
  9526                                  .L_lambda_simple_env_loop_0328:	; ext_env[i + 1] <-- env[i]
  9527 00005E63 4883FE00                	cmp rsi, 0
  9528 00005E67 7410                    	je .L_lambda_simple_env_end_0328
  9529 00005E69 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9530 00005E6D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9531 00005E71 48FFC6                  	inc rsi
  9532 00005E74 48FFC2                  	inc rdx
  9533 00005E77 EBEA                    	jmp .L_lambda_simple_env_loop_0328
  9534                                  .L_lambda_simple_env_end_0328:
  9535 00005E79 5B                      	pop rbx
  9536 00005E7A BE00000000              	mov rsi, 0
  9537                                  .L_lambda_simple_params_loop_0328:	; copy params
  9538 00005E7F 4883FE00                	cmp rsi, 0
  9539 00005E83 740E                    	je .L_lambda_simple_params_end_0328
  9540 00005E85 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9541 00005E8A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9542 00005E8E 48FFC6                  	inc rsi
  9543 00005E91 EBEC                    	jmp .L_lambda_simple_params_loop_0328
  9544                                  .L_lambda_simple_params_end_0328:
  9545 00005E93 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9546 00005E96 4889C3                  	mov rbx, rax
  9547 00005E99 58                      	pop rax
  9548 00005E9A C60004                  	mov byte [rax], T_closure
  9549 00005E9D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9550 00005EA1 48C74009[AE5E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0328
  9551 00005EA9 E9D90B0000              	jmp .L_lambda_simple_end_0328
  9552                                  .L_lambda_simple_code_0328:	; lambda-simple body
  9553 00005EAE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9554 00005EB4 740B                    	je .L_lambda_simple_arity_check_ok_0328
  9555 00005EB6 FF742410                	push qword [rsp + 8 * 2]
  9556 00005EBA 6A01                    	push 1
  9557 00005EBC E907020100              	jmp L_error_incorrect_arity_simple
  9558                                  .L_lambda_simple_arity_check_ok_0328:
  9559 00005EC1 C8000000                	enter 0, 0
  9560                                  	; preparing a tail-call
  9561 00005EC5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9562 00005ECA E840020100              	call malloc
  9563 00005ECF 50                      	push rax
  9564 00005ED0 BF08000000              	mov rdi, 8 * 1	; new rib
  9565 00005ED5 E835020100              	call malloc
  9566 00005EDA 50                      	push rax
  9567 00005EDB BF10000000              	mov rdi, 8 * 2	; extended env
  9568 00005EE0 E82A020100              	call malloc
  9569 00005EE5 488B7D10                	mov rdi, ENV
  9570 00005EE9 BE00000000              	mov rsi, 0
  9571 00005EEE BA01000000              	mov rdx, 1
  9572                                  .L_lambda_simple_env_loop_0329:	; ext_env[i + 1] <-- env[i]
  9573 00005EF3 4883FE01                	cmp rsi, 1
  9574 00005EF7 7410                    	je .L_lambda_simple_env_end_0329
  9575 00005EF9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9576 00005EFD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9577 00005F01 48FFC6                  	inc rsi
  9578 00005F04 48FFC2                  	inc rdx
  9579 00005F07 EBEA                    	jmp .L_lambda_simple_env_loop_0329
  9580                                  .L_lambda_simple_env_end_0329:
  9581 00005F09 5B                      	pop rbx
  9582 00005F0A BE00000000              	mov rsi, 0
  9583                                  .L_lambda_simple_params_loop_0329:	; copy params
  9584 00005F0F 4883FE01                	cmp rsi, 1
  9585 00005F13 740E                    	je .L_lambda_simple_params_end_0329
  9586 00005F15 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9587 00005F1A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9588 00005F1E 48FFC6                  	inc rsi
  9589 00005F21 EBEC                    	jmp .L_lambda_simple_params_loop_0329
  9590                                  .L_lambda_simple_params_end_0329:
  9591 00005F23 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9592 00005F26 4889C3                  	mov rbx, rax
  9593 00005F29 58                      	pop rax
  9594 00005F2A C60004                  	mov byte [rax], T_closure
  9595 00005F2D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9596 00005F31 48C74009[3E5F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0329
  9597 00005F39 E92B080000              	jmp .L_lambda_simple_end_0329
  9598                                  .L_lambda_simple_code_0329:	; lambda-simple body
  9599 00005F3E 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9600 00005F44 740B                    	je .L_lambda_simple_arity_check_ok_0329
  9601 00005F46 FF742410                	push qword [rsp + 8 * 2]
  9602 00005F4A 6A02                    	push 2
  9603 00005F4C E977010100              	jmp L_error_incorrect_arity_simple
  9604                                  .L_lambda_simple_arity_check_ok_0329:
  9605 00005F51 C8000000                	enter 0, 0
  9606                                  	; preparing a non tail-call
  9607 00005F55 488B4520                	mov rax, PARAM(0)	; param a
  9608 00005F59 50                      	push rax
  9609 00005F5A 6A01                    	push 1	; arg count
  9610 00005F5C 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9611 00005F64 803805                  	cmp byte [rax], T_undefined
  9612 00005F67 0F8475000100            	je L_error_fvar_undefined
  9613 00005F6D 803804                  	cmp byte [rax], T_closure
  9614 00005F70 0F85F0000100            	jne L_error_non_closure
  9615 00005F76 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9616 00005F79 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9617 00005F7C 483D[02000000]          	cmp rax, sob_boolean_false
  9618 00005F82 0F8463020000            	je .L_if_else_022b
  9619                                  	; preparing a non tail-call
  9620 00005F88 488B4528                	mov rax, PARAM(1)	; param b
  9621 00005F8C 50                      	push rax
  9622 00005F8D 6A01                    	push 1	; arg count
  9623 00005F8F 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9624 00005F97 803805                  	cmp byte [rax], T_undefined
  9625 00005F9A 0F8442000100            	je L_error_fvar_undefined
  9626 00005FA0 803804                  	cmp byte [rax], T_closure
  9627 00005FA3 0F85BD000100            	jne L_error_non_closure
  9628 00005FA9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9629 00005FAC FF5009                  	call SOB_CLOSURE_CODE(rax)
  9630 00005FAF 483D[02000000]          	cmp rax, sob_boolean_false
  9631 00005FB5 7467                    	je .L_if_else_022c
  9632                                  	; preparing a tail-call
  9633 00005FB7 488B4528                	mov rax, PARAM(1)	; param b
  9634 00005FBB 50                      	push rax
  9635 00005FBC 488B4520                	mov rax, PARAM(0)	; param a
  9636 00005FC0 50                      	push rax
  9637 00005FC1 6A02                    	push 2	; arg count
  9638 00005FC3 488B0425[2E100000]      	mov rax, qword [free_var_38]	; free var __bin-add-zz
  9639 00005FCB 803805                  	cmp byte [rax], T_undefined
  9640 00005FCE 0F840E000100            	je L_error_fvar_undefined
  9641 00005FD4 803804                  	cmp byte [rax], T_closure
  9642 00005FD7 0F8589000100            	jne L_error_non_closure
  9643 00005FDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9644                                  
  9645                                  	; recycling the current frame
  9646 00005FE0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9647 00005FE3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9648 00005FE6 B906000000              	mov rcx, 2 + 4
  9649 00005FEB 488B5D18                	mov rbx, COUNT
  9650 00005FEF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9651 00005FF4 488D55F8                	lea rdx, [rbp - 8 * 1]
  9652                                  .L_tc_recycle_frame_loop_040d:
  9653 00005FF8 4883F900                	cmp rcx, 0
  9654 00005FFC 7413                    	je .L_tc_recycle_frame_done_040d
  9655 00005FFE 488B32                  	mov rsi, qword [rdx]
  9656 00006001 488933                  	mov qword [rbx], rsi
  9657 00006004 48FFC9                  	dec rcx
  9658 00006007 4883EB08                	sub rbx, 8 * 1
  9659 0000600B 4883EA08                	sub rdx, 8 * 1
  9660 0000600F EBE7                    	jmp .L_tc_recycle_frame_loop_040d
  9661                                  .L_tc_recycle_frame_done_040d:
  9662 00006011 488D6308                	lea rsp, [rbx + 8 * 1]
  9663 00006015 5D                      	pop rbp	; the proc will restore it!
  9664 00006016 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9665 00006019 E9C8010000              	jmp .L_if_end_022c
  9666                                  .L_if_else_022c:
  9667                                  	; preparing a non tail-call
  9668 0000601E 488B4528                	mov rax, PARAM(1)	; param b
  9669 00006022 50                      	push rax
  9670 00006023 6A01                    	push 1	; arg count
  9671 00006025 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9672 0000602D 803805                  	cmp byte [rax], T_undefined
  9673 00006030 0F84ACFF0000            	je L_error_fvar_undefined
  9674 00006036 803804                  	cmp byte [rax], T_closure
  9675 00006039 0F8527000100            	jne L_error_non_closure
  9676 0000603F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9677 00006042 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9678 00006045 483D[02000000]          	cmp rax, sob_boolean_false
  9679 0000604B 0F848A000000            	je .L_if_else_022d
  9680                                  	; preparing a tail-call
  9681 00006051 488B4528                	mov rax, PARAM(1)	; param b
  9682 00006055 50                      	push rax
  9683                                  	; preparing a non tail-call
  9684 00006056 488B4520                	mov rax, PARAM(0)	; param a
  9685 0000605A 50                      	push rax
  9686 0000605B 6A01                    	push 1	; arg count
  9687 0000605D 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
  9688 00006065 803805                  	cmp byte [rax], T_undefined
  9689 00006068 0F8474FF0000            	je L_error_fvar_undefined
  9690 0000606E 803804                  	cmp byte [rax], T_closure
  9691 00006071 0F85EFFF0000            	jne L_error_non_closure
  9692 00006077 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9693 0000607A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9694 0000607D 50                      	push rax
  9695 0000607E 6A02                    	push 2	; arg count
  9696 00006080 488B0425[EA0F0000]      	mov rax, qword [free_var_34]	; free var __bin-add-qq
  9697 00006088 803805                  	cmp byte [rax], T_undefined
  9698 0000608B 0F8451FF0000            	je L_error_fvar_undefined
  9699 00006091 803804                  	cmp byte [rax], T_closure
  9700 00006094 0F85CCFF0000            	jne L_error_non_closure
  9701 0000609A FF7001                  	push SOB_CLOSURE_ENV(rax)
  9702                                  
  9703                                  	; recycling the current frame
  9704 0000609D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9705 000060A0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9706 000060A3 B906000000              	mov rcx, 2 + 4
  9707 000060A8 488B5D18                	mov rbx, COUNT
  9708 000060AC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9709 000060B1 488D55F8                	lea rdx, [rbp - 8 * 1]
  9710                                  .L_tc_recycle_frame_loop_040e:
  9711 000060B5 4883F900                	cmp rcx, 0
  9712 000060B9 7413                    	je .L_tc_recycle_frame_done_040e
  9713 000060BB 488B32                  	mov rsi, qword [rdx]
  9714 000060BE 488933                  	mov qword [rbx], rsi
  9715 000060C1 48FFC9                  	dec rcx
  9716 000060C4 4883EB08                	sub rbx, 8 * 1
  9717 000060C8 4883EA08                	sub rdx, 8 * 1
  9718 000060CC EBE7                    	jmp .L_tc_recycle_frame_loop_040e
  9719                                  .L_tc_recycle_frame_done_040e:
  9720 000060CE 488D6308                	lea rsp, [rbx + 8 * 1]
  9721 000060D2 5D                      	pop rbp	; the proc will restore it!
  9722 000060D3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9723 000060D6 E90B010000              	jmp .L_if_end_022d
  9724                                  .L_if_else_022d:
  9725                                  	; preparing a non tail-call
  9726 000060DB 488B4528                	mov rax, PARAM(1)	; param b
  9727 000060DF 50                      	push rax
  9728 000060E0 6A01                    	push 1	; arg count
  9729 000060E2 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
  9730 000060EA 803805                  	cmp byte [rax], T_undefined
  9731 000060ED 0F84EFFE0000            	je L_error_fvar_undefined
  9732 000060F3 803804                  	cmp byte [rax], T_closure
  9733 000060F6 0F856AFF0000            	jne L_error_non_closure
  9734 000060FC FF7001                  	push SOB_CLOSURE_ENV(rax)
  9735 000060FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  9736 00006102 483D[02000000]          	cmp rax, sob_boolean_false
  9737 00006108 0F8487000000            	je .L_if_else_022e
  9738                                  	; preparing a tail-call
  9739 0000610E 488B4528                	mov rax, PARAM(1)	; param b
  9740 00006112 50                      	push rax
  9741                                  	; preparing a non tail-call
  9742 00006113 488B4520                	mov rax, PARAM(0)	; param a
  9743 00006117 50                      	push rax
  9744 00006118 6A01                    	push 1	; arg count
  9745 0000611A 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
  9746 00006122 803805                  	cmp byte [rax], T_undefined
  9747 00006125 0F84B7FE0000            	je L_error_fvar_undefined
  9748 0000612B 803804                  	cmp byte [rax], T_closure
  9749 0000612E 0F8532FF0000            	jne L_error_non_closure
  9750 00006134 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9751 00006137 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9752 0000613A 50                      	push rax
  9753 0000613B 6A02                    	push 2	; arg count
  9754 0000613D 488B0425[A60F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9755 00006145 803805                  	cmp byte [rax], T_undefined
  9756 00006148 0F8494FE0000            	je L_error_fvar_undefined
  9757 0000614E 803804                  	cmp byte [rax], T_closure
  9758 00006151 0F850FFF0000            	jne L_error_non_closure
  9759 00006157 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9760                                  
  9761                                  	; recycling the current frame
  9762 0000615A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9763 0000615D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9764 00006160 B906000000              	mov rcx, 2 + 4
  9765 00006165 488B5D18                	mov rbx, COUNT
  9766 00006169 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9767 0000616E 488D55F8                	lea rdx, [rbp - 8 * 1]
  9768                                  .L_tc_recycle_frame_loop_040f:
  9769 00006172 4883F900                	cmp rcx, 0
  9770 00006176 7413                    	je .L_tc_recycle_frame_done_040f
  9771 00006178 488B32                  	mov rsi, qword [rdx]
  9772 0000617B 488933                  	mov qword [rbx], rsi
  9773 0000617E 48FFC9                  	dec rcx
  9774 00006181 4883EB08                	sub rbx, 8 * 1
  9775 00006185 4883EA08                	sub rdx, 8 * 1
  9776 00006189 EBE7                    	jmp .L_tc_recycle_frame_loop_040f
  9777                                  .L_tc_recycle_frame_done_040f:
  9778 0000618B 488D6308                	lea rsp, [rbx + 8 * 1]
  9779 0000618F 5D                      	pop rbp	; the proc will restore it!
  9780 00006190 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9781 00006193 EB51                    	jmp .L_if_end_022e
  9782                                  .L_if_else_022e:
  9783                                  	; preparing a tail-call
  9784 00006195 6A00                    	push 0	; arg count
  9785 00006197 488B4510                	mov rax, ENV
  9786 0000619B 488B00                  	mov rax, qword [rax + 8 * 0]
  9787 0000619E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9788 000061A1 803804                  	cmp byte [rax], T_closure
  9789 000061A4 0F85BCFE0000            	jne L_error_non_closure
  9790 000061AA FF7001                  	push SOB_CLOSURE_ENV(rax)
  9791                                  
  9792                                  	; recycling the current frame
  9793 000061AD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9794 000061B0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9795 000061B3 B904000000              	mov rcx, 0 + 4
  9796 000061B8 488B5D18                	mov rbx, COUNT
  9797 000061BC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9798 000061C1 488D55F8                	lea rdx, [rbp - 8 * 1]
  9799                                  .L_tc_recycle_frame_loop_0410:
  9800 000061C5 4883F900                	cmp rcx, 0
  9801 000061C9 7413                    	je .L_tc_recycle_frame_done_0410
  9802 000061CB 488B32                  	mov rsi, qword [rdx]
  9803 000061CE 488933                  	mov qword [rbx], rsi
  9804 000061D1 48FFC9                  	dec rcx
  9805 000061D4 4883EB08                	sub rbx, 8 * 1
  9806 000061D8 4883EA08                	sub rdx, 8 * 1
  9807 000061DC EBE7                    	jmp .L_tc_recycle_frame_loop_0410
  9808                                  .L_tc_recycle_frame_done_0410:
  9809 000061DE 488D6308                	lea rsp, [rbx + 8 * 1]
  9810 000061E2 5D                      	pop rbp	; the proc will restore it!
  9811 000061E3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9812                                  .L_if_end_022e:
  9813                                  .L_if_end_022d:
  9814                                  .L_if_end_022c:
  9815 000061E6 E97A050000              	jmp .L_if_end_022b
  9816                                  .L_if_else_022b:
  9817                                  	; preparing a non tail-call
  9818 000061EB 488B4520                	mov rax, PARAM(0)	; param a
  9819 000061EF 50                      	push rax
  9820 000061F0 6A01                    	push 1	; arg count
  9821 000061F2 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9822 000061FA 803805                  	cmp byte [rax], T_undefined
  9823 000061FD 0F84DFFD0000            	je L_error_fvar_undefined
  9824 00006203 803804                  	cmp byte [rax], T_closure
  9825 00006206 0F855AFE0000            	jne L_error_non_closure
  9826 0000620C FF7001                  	push SOB_CLOSURE_ENV(rax)
  9827 0000620F FF5009                  	call SOB_CLOSURE_CODE(rax)
  9828 00006212 483D[02000000]          	cmp rax, sob_boolean_false
  9829 00006218 0F8463020000            	je .L_if_else_022f
  9830                                  	; preparing a non tail-call
  9831 0000621E 488B4528                	mov rax, PARAM(1)	; param b
  9832 00006222 50                      	push rax
  9833 00006223 6A01                    	push 1	; arg count
  9834 00006225 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9835 0000622D 803805                  	cmp byte [rax], T_undefined
  9836 00006230 0F84ACFD0000            	je L_error_fvar_undefined
  9837 00006236 803804                  	cmp byte [rax], T_closure
  9838 00006239 0F8527FE0000            	jne L_error_non_closure
  9839 0000623F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9840 00006242 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9841 00006245 483D[02000000]          	cmp rax, sob_boolean_false
  9842 0000624B 0F848A000000            	je .L_if_else_0230
  9843                                  	; preparing a tail-call
  9844                                  	; preparing a non tail-call
  9845 00006251 488B4528                	mov rax, PARAM(1)	; param b
  9846 00006255 50                      	push rax
  9847 00006256 6A01                    	push 1	; arg count
  9848 00006258 488B0425[5C150000]      	mov rax, qword [free_var_116]	; free var __bin_integer_to_fraction
  9849 00006260 803805                  	cmp byte [rax], T_undefined
  9850 00006263 0F8479FD0000            	je L_error_fvar_undefined
  9851 00006269 803804                  	cmp byte [rax], T_closure
  9852 0000626C 0F85F4FD0000            	jne L_error_non_closure
  9853 00006272 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9854 00006275 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9855 00006278 50                      	push rax
  9856 00006279 488B4520                	mov rax, PARAM(0)	; param a
  9857 0000627D 50                      	push rax
  9858 0000627E 6A02                    	push 2	; arg count
  9859 00006280 488B0425[EA0F0000]      	mov rax, qword [free_var_34]	; free var __bin-add-qq
  9860 00006288 803805                  	cmp byte [rax], T_undefined
  9861 0000628B 0F8451FD0000            	je L_error_fvar_undefined
  9862 00006291 803804                  	cmp byte [rax], T_closure
  9863 00006294 0F85CCFD0000            	jne L_error_non_closure
  9864 0000629A FF7001                  	push SOB_CLOSURE_ENV(rax)
  9865                                  
  9866                                  	; recycling the current frame
  9867 0000629D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9868 000062A0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9869 000062A3 B906000000              	mov rcx, 2 + 4
  9870 000062A8 488B5D18                	mov rbx, COUNT
  9871 000062AC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9872 000062B1 488D55F8                	lea rdx, [rbp - 8 * 1]
  9873                                  .L_tc_recycle_frame_loop_0411:
  9874 000062B5 4883F900                	cmp rcx, 0
  9875 000062B9 7413                    	je .L_tc_recycle_frame_done_0411
  9876 000062BB 488B32                  	mov rsi, qword [rdx]
  9877 000062BE 488933                  	mov qword [rbx], rsi
  9878 000062C1 48FFC9                  	dec rcx
  9879 000062C4 4883EB08                	sub rbx, 8 * 1
  9880 000062C8 4883EA08                	sub rdx, 8 * 1
  9881 000062CC EBE7                    	jmp .L_tc_recycle_frame_loop_0411
  9882                                  .L_tc_recycle_frame_done_0411:
  9883 000062CE 488D6308                	lea rsp, [rbx + 8 * 1]
  9884 000062D2 5D                      	pop rbp	; the proc will restore it!
  9885 000062D3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9886 000062D6 E9A1010000              	jmp .L_if_end_0230
  9887                                  .L_if_else_0230:
  9888                                  	; preparing a non tail-call
  9889 000062DB 488B4528                	mov rax, PARAM(1)	; param b
  9890 000062DF 50                      	push rax
  9891 000062E0 6A01                    	push 1	; arg count
  9892 000062E2 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9893 000062EA 803805                  	cmp byte [rax], T_undefined
  9894 000062ED 0F84EFFC0000            	je L_error_fvar_undefined
  9895 000062F3 803804                  	cmp byte [rax], T_closure
  9896 000062F6 0F856AFD0000            	jne L_error_non_closure
  9897 000062FC FF7001                  	push SOB_CLOSURE_ENV(rax)
  9898 000062FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  9899 00006302 483D[02000000]          	cmp rax, sob_boolean_false
  9900 00006308 7467                    	je .L_if_else_0231
  9901                                  	; preparing a tail-call
  9902 0000630A 488B4528                	mov rax, PARAM(1)	; param b
  9903 0000630E 50                      	push rax
  9904 0000630F 488B4520                	mov rax, PARAM(0)	; param a
  9905 00006313 50                      	push rax
  9906 00006314 6A02                    	push 2	; arg count
  9907 00006316 488B0425[EA0F0000]      	mov rax, qword [free_var_34]	; free var __bin-add-qq
  9908 0000631E 803805                  	cmp byte [rax], T_undefined
  9909 00006321 0F84BBFC0000            	je L_error_fvar_undefined
  9910 00006327 803804                  	cmp byte [rax], T_closure
  9911 0000632A 0F8536FD0000            	jne L_error_non_closure
  9912 00006330 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9913                                  
  9914                                  	; recycling the current frame
  9915 00006333 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9916 00006336 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9917 00006339 B906000000              	mov rcx, 2 + 4
  9918 0000633E 488B5D18                	mov rbx, COUNT
  9919 00006342 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9920 00006347 488D55F8                	lea rdx, [rbp - 8 * 1]
  9921                                  .L_tc_recycle_frame_loop_0412:
  9922 0000634B 4883F900                	cmp rcx, 0
  9923 0000634F 7413                    	je .L_tc_recycle_frame_done_0412
  9924 00006351 488B32                  	mov rsi, qword [rdx]
  9925 00006354 488933                  	mov qword [rbx], rsi
  9926 00006357 48FFC9                  	dec rcx
  9927 0000635A 4883EB08                	sub rbx, 8 * 1
  9928 0000635E 4883EA08                	sub rdx, 8 * 1
  9929 00006362 EBE7                    	jmp .L_tc_recycle_frame_loop_0412
  9930                                  .L_tc_recycle_frame_done_0412:
  9931 00006364 488D6308                	lea rsp, [rbx + 8 * 1]
  9932 00006368 5D                      	pop rbp	; the proc will restore it!
  9933 00006369 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9934 0000636C E90B010000              	jmp .L_if_end_0231
  9935                                  .L_if_else_0231:
  9936                                  	; preparing a non tail-call
  9937 00006371 488B4528                	mov rax, PARAM(1)	; param b
  9938 00006375 50                      	push rax
  9939 00006376 6A01                    	push 1	; arg count
  9940 00006378 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
  9941 00006380 803805                  	cmp byte [rax], T_undefined
  9942 00006383 0F8459FC0000            	je L_error_fvar_undefined
  9943 00006389 803804                  	cmp byte [rax], T_closure
  9944 0000638C 0F85D4FC0000            	jne L_error_non_closure
  9945 00006392 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9946 00006395 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9947 00006398 483D[02000000]          	cmp rax, sob_boolean_false
  9948 0000639E 0F8487000000            	je .L_if_else_0232
  9949                                  	; preparing a tail-call
  9950 000063A4 488B4528                	mov rax, PARAM(1)	; param b
  9951 000063A8 50                      	push rax
  9952                                  	; preparing a non tail-call
  9953 000063A9 488B4520                	mov rax, PARAM(0)	; param a
  9954 000063AD 50                      	push rax
  9955 000063AE 6A01                    	push 1	; arg count
  9956 000063B0 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
  9957 000063B8 803805                  	cmp byte [rax], T_undefined
  9958 000063BB 0F8421FC0000            	je L_error_fvar_undefined
  9959 000063C1 803804                  	cmp byte [rax], T_closure
  9960 000063C4 0F859CFC0000            	jne L_error_non_closure
  9961 000063CA FF7001                  	push SOB_CLOSURE_ENV(rax)
  9962 000063CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  9963 000063D0 50                      	push rax
  9964 000063D1 6A02                    	push 2	; arg count
  9965 000063D3 488B0425[A60F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9966 000063DB 803805                  	cmp byte [rax], T_undefined
  9967 000063DE 0F84FEFB0000            	je L_error_fvar_undefined
  9968 000063E4 803804                  	cmp byte [rax], T_closure
  9969 000063E7 0F8579FC0000            	jne L_error_non_closure
  9970 000063ED FF7001                  	push SOB_CLOSURE_ENV(rax)
  9971                                  
  9972                                  	; recycling the current frame
  9973 000063F0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9974 000063F3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9975 000063F6 B906000000              	mov rcx, 2 + 4
  9976 000063FB 488B5D18                	mov rbx, COUNT
  9977 000063FF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9978 00006404 488D55F8                	lea rdx, [rbp - 8 * 1]
  9979                                  .L_tc_recycle_frame_loop_0413:
  9980 00006408 4883F900                	cmp rcx, 0
  9981 0000640C 7413                    	je .L_tc_recycle_frame_done_0413
  9982 0000640E 488B32                  	mov rsi, qword [rdx]
  9983 00006411 488933                  	mov qword [rbx], rsi
  9984 00006414 48FFC9                  	dec rcx
  9985 00006417 4883EB08                	sub rbx, 8 * 1
  9986 0000641B 4883EA08                	sub rdx, 8 * 1
  9987 0000641F EBE7                    	jmp .L_tc_recycle_frame_loop_0413
  9988                                  .L_tc_recycle_frame_done_0413:
  9989 00006421 488D6308                	lea rsp, [rbx + 8 * 1]
  9990 00006425 5D                      	pop rbp	; the proc will restore it!
  9991 00006426 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9992 00006429 EB51                    	jmp .L_if_end_0232
  9993                                  .L_if_else_0232:
  9994                                  	; preparing a tail-call
  9995 0000642B 6A00                    	push 0	; arg count
  9996 0000642D 488B4510                	mov rax, ENV
  9997 00006431 488B00                  	mov rax, qword [rax + 8 * 0]
  9998 00006434 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9999 00006437 803804                  	cmp byte [rax], T_closure
 10000 0000643A 0F8526FC0000            	jne L_error_non_closure
 10001 00006440 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10002                                  
 10003                                  	; recycling the current frame
 10004 00006443 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10005 00006446 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10006 00006449 B904000000              	mov rcx, 0 + 4
 10007 0000644E 488B5D18                	mov rbx, COUNT
 10008 00006452 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10009 00006457 488D55F8                	lea rdx, [rbp - 8 * 1]
 10010                                  .L_tc_recycle_frame_loop_0414:
 10011 0000645B 4883F900                	cmp rcx, 0
 10012 0000645F 7413                    	je .L_tc_recycle_frame_done_0414
 10013 00006461 488B32                  	mov rsi, qword [rdx]
 10014 00006464 488933                  	mov qword [rbx], rsi
 10015 00006467 48FFC9                  	dec rcx
 10016 0000646A 4883EB08                	sub rbx, 8 * 1
 10017 0000646E 4883EA08                	sub rdx, 8 * 1
 10018 00006472 EBE7                    	jmp .L_tc_recycle_frame_loop_0414
 10019                                  .L_tc_recycle_frame_done_0414:
 10020 00006474 488D6308                	lea rsp, [rbx + 8 * 1]
 10021 00006478 5D                      	pop rbp	; the proc will restore it!
 10022 00006479 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10023                                  .L_if_end_0232:
 10024                                  .L_if_end_0231:
 10025                                  .L_if_end_0230:
 10026 0000647C E9E4020000              	jmp .L_if_end_022f
 10027                                  .L_if_else_022f:
 10028                                  	; preparing a non tail-call
 10029 00006481 488B4520                	mov rax, PARAM(0)	; param a
 10030 00006485 50                      	push rax
 10031 00006486 6A01                    	push 1	; arg count
 10032 00006488 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 10033 00006490 803805                  	cmp byte [rax], T_undefined
 10034 00006493 0F8449FB0000            	je L_error_fvar_undefined
 10035 00006499 803804                  	cmp byte [rax], T_closure
 10036 0000649C 0F85C4FB0000            	jne L_error_non_closure
 10037 000064A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10038 000064A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10039 000064A8 483D[02000000]          	cmp rax, sob_boolean_false
 10040 000064AE 0F8460020000            	je .L_if_else_0233
 10041                                  	; preparing a non tail-call
 10042 000064B4 488B4528                	mov rax, PARAM(1)	; param b
 10043 000064B8 50                      	push rax
 10044 000064B9 6A01                    	push 1	; arg count
 10045 000064BB 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10046 000064C3 803805                  	cmp byte [rax], T_undefined
 10047 000064C6 0F8416FB0000            	je L_error_fvar_undefined
 10048 000064CC 803804                  	cmp byte [rax], T_closure
 10049 000064CF 0F8591FB0000            	jne L_error_non_closure
 10050 000064D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10051 000064D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10052 000064DB 483D[02000000]          	cmp rax, sob_boolean_false
 10053 000064E1 0F848A000000            	je .L_if_else_0234
 10054                                  	; preparing a tail-call
 10055                                  	; preparing a non tail-call
 10056 000064E7 488B4528                	mov rax, PARAM(1)	; param b
 10057 000064EB 50                      	push rax
 10058 000064EC 6A01                    	push 1	; arg count
 10059 000064EE 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 10060 000064F6 803805                  	cmp byte [rax], T_undefined
 10061 000064F9 0F84E3FA0000            	je L_error_fvar_undefined
 10062 000064FF 803804                  	cmp byte [rax], T_closure
 10063 00006502 0F855EFB0000            	jne L_error_non_closure
 10064 00006508 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10065 0000650B FF5009                  	call SOB_CLOSURE_CODE(rax)
 10066 0000650E 50                      	push rax
 10067 0000650F 488B4520                	mov rax, PARAM(0)	; param a
 10068 00006513 50                      	push rax
 10069 00006514 6A02                    	push 2	; arg count
 10070 00006516 488B0425[A60F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
 10071 0000651E 803805                  	cmp byte [rax], T_undefined
 10072 00006521 0F84BBFA0000            	je L_error_fvar_undefined
 10073 00006527 803804                  	cmp byte [rax], T_closure
 10074 0000652A 0F8536FB0000            	jne L_error_non_closure
 10075 00006530 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10076                                  
 10077                                  	; recycling the current frame
 10078 00006533 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10079 00006536 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10080 00006539 B906000000              	mov rcx, 2 + 4
 10081 0000653E 488B5D18                	mov rbx, COUNT
 10082 00006542 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10083 00006547 488D55F8                	lea rdx, [rbp - 8 * 1]
 10084                                  .L_tc_recycle_frame_loop_0415:
 10085 0000654B 4883F900                	cmp rcx, 0
 10086 0000654F 7413                    	je .L_tc_recycle_frame_done_0415
 10087 00006551 488B32                  	mov rsi, qword [rdx]
 10088 00006554 488933                  	mov qword [rbx], rsi
 10089 00006557 48FFC9                  	dec rcx
 10090 0000655A 4883EB08                	sub rbx, 8 * 1
 10091 0000655E 4883EA08                	sub rdx, 8 * 1
 10092 00006562 EBE7                    	jmp .L_tc_recycle_frame_loop_0415
 10093                                  .L_tc_recycle_frame_done_0415:
 10094 00006564 488D6308                	lea rsp, [rbx + 8 * 1]
 10095 00006568 5D                      	pop rbp	; the proc will restore it!
 10096 00006569 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10097 0000656C E9A1010000              	jmp .L_if_end_0234
 10098                                  .L_if_else_0234:
 10099                                  	; preparing a non tail-call
 10100 00006571 488B4528                	mov rax, PARAM(1)	; param b
 10101 00006575 50                      	push rax
 10102 00006576 6A01                    	push 1	; arg count
 10103 00006578 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10104 00006580 803805                  	cmp byte [rax], T_undefined
 10105 00006583 0F8459FA0000            	je L_error_fvar_undefined
 10106 00006589 803804                  	cmp byte [rax], T_closure
 10107 0000658C 0F85D4FA0000            	jne L_error_non_closure
 10108 00006592 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10109 00006595 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10110 00006598 483D[02000000]          	cmp rax, sob_boolean_false
 10111 0000659E 0F848A000000            	je .L_if_else_0235
 10112                                  	; preparing a tail-call
 10113                                  	; preparing a non tail-call
 10114 000065A4 488B4528                	mov rax, PARAM(1)	; param b
 10115 000065A8 50                      	push rax
 10116 000065A9 6A01                    	push 1	; arg count
 10117 000065AB 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 10118 000065B3 803805                  	cmp byte [rax], T_undefined
 10119 000065B6 0F8426FA0000            	je L_error_fvar_undefined
 10120 000065BC 803804                  	cmp byte [rax], T_closure
 10121 000065BF 0F85A1FA0000            	jne L_error_non_closure
 10122 000065C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10123 000065C8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10124 000065CB 50                      	push rax
 10125 000065CC 488B4520                	mov rax, PARAM(0)	; param a
 10126 000065D0 50                      	push rax
 10127 000065D1 6A02                    	push 2	; arg count
 10128 000065D3 488B0425[A60F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
 10129 000065DB 803805                  	cmp byte [rax], T_undefined
 10130 000065DE 0F84FEF90000            	je L_error_fvar_undefined
 10131 000065E4 803804                  	cmp byte [rax], T_closure
 10132 000065E7 0F8579FA0000            	jne L_error_non_closure
 10133 000065ED FF7001                  	push SOB_CLOSURE_ENV(rax)
 10134                                  
 10135                                  	; recycling the current frame
 10136 000065F0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10137 000065F3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10138 000065F6 B906000000              	mov rcx, 2 + 4
 10139 000065FB 488B5D18                	mov rbx, COUNT
 10140 000065FF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10141 00006604 488D55F8                	lea rdx, [rbp - 8 * 1]
 10142                                  .L_tc_recycle_frame_loop_0416:
 10143 00006608 4883F900                	cmp rcx, 0
 10144 0000660C 7413                    	je .L_tc_recycle_frame_done_0416
 10145 0000660E 488B32                  	mov rsi, qword [rdx]
 10146 00006611 488933                  	mov qword [rbx], rsi
 10147 00006614 48FFC9                  	dec rcx
 10148 00006617 4883EB08                	sub rbx, 8 * 1
 10149 0000661B 4883EA08                	sub rdx, 8 * 1
 10150 0000661F EBE7                    	jmp .L_tc_recycle_frame_loop_0416
 10151                                  .L_tc_recycle_frame_done_0416:
 10152 00006621 488D6308                	lea rsp, [rbx + 8 * 1]
 10153 00006625 5D                      	pop rbp	; the proc will restore it!
 10154 00006626 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10155 00006629 E9E4000000              	jmp .L_if_end_0235
 10156                                  .L_if_else_0235:
 10157                                  	; preparing a non tail-call
 10158 0000662E 488B4528                	mov rax, PARAM(1)	; param b
 10159 00006632 50                      	push rax
 10160 00006633 6A01                    	push 1	; arg count
 10161 00006635 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 10162 0000663D 803805                  	cmp byte [rax], T_undefined
 10163 00006640 0F849CF90000            	je L_error_fvar_undefined
 10164 00006646 803804                  	cmp byte [rax], T_closure
 10165 00006649 0F8517FA0000            	jne L_error_non_closure
 10166 0000664F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10167 00006652 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10168 00006655 483D[02000000]          	cmp rax, sob_boolean_false
 10169 0000665B 7464                    	je .L_if_else_0236
 10170                                  	; preparing a tail-call
 10171 0000665D 488B4528                	mov rax, PARAM(1)	; param b
 10172 00006661 50                      	push rax
 10173 00006662 488B4520                	mov rax, PARAM(0)	; param a
 10174 00006666 50                      	push rax
 10175 00006667 6A02                    	push 2	; arg count
 10176 00006669 488B0425[A60F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
 10177 00006671 803805                  	cmp byte [rax], T_undefined
 10178 00006674 0F8468F90000            	je L_error_fvar_undefined
 10179 0000667A 803804                  	cmp byte [rax], T_closure
 10180 0000667D 0F85E3F90000            	jne L_error_non_closure
 10181 00006683 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10182                                  
 10183                                  	; recycling the current frame
 10184 00006686 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10185 00006689 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10186 0000668C B906000000              	mov rcx, 2 + 4
 10187 00006691 488B5D18                	mov rbx, COUNT
 10188 00006695 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10189 0000669A 488D55F8                	lea rdx, [rbp - 8 * 1]
 10190                                  .L_tc_recycle_frame_loop_0417:
 10191 0000669E 4883F900                	cmp rcx, 0
 10192 000066A2 7413                    	je .L_tc_recycle_frame_done_0417
 10193 000066A4 488B32                  	mov rsi, qword [rdx]
 10194 000066A7 488933                  	mov qword [rbx], rsi
 10195 000066AA 48FFC9                  	dec rcx
 10196 000066AD 4883EB08                	sub rbx, 8 * 1
 10197 000066B1 4883EA08                	sub rdx, 8 * 1
 10198 000066B5 EBE7                    	jmp .L_tc_recycle_frame_loop_0417
 10199                                  .L_tc_recycle_frame_done_0417:
 10200 000066B7 488D6308                	lea rsp, [rbx + 8 * 1]
 10201 000066BB 5D                      	pop rbp	; the proc will restore it!
 10202 000066BC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10203 000066BF EB51                    	jmp .L_if_end_0236
 10204                                  .L_if_else_0236:
 10205                                  	; preparing a tail-call
 10206 000066C1 6A00                    	push 0	; arg count
 10207 000066C3 488B4510                	mov rax, ENV
 10208 000066C7 488B00                  	mov rax, qword [rax + 8 * 0]
 10209 000066CA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10210 000066CD 803804                  	cmp byte [rax], T_closure
 10211 000066D0 0F8590F90000            	jne L_error_non_closure
 10212 000066D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10213                                  
 10214                                  	; recycling the current frame
 10215 000066D9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10216 000066DC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10217 000066DF B904000000              	mov rcx, 0 + 4
 10218 000066E4 488B5D18                	mov rbx, COUNT
 10219 000066E8 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10220 000066ED 488D55F8                	lea rdx, [rbp - 8 * 1]
 10221                                  .L_tc_recycle_frame_loop_0418:
 10222 000066F1 4883F900                	cmp rcx, 0
 10223 000066F5 7413                    	je .L_tc_recycle_frame_done_0418
 10224 000066F7 488B32                  	mov rsi, qword [rdx]
 10225 000066FA 488933                  	mov qword [rbx], rsi
 10226 000066FD 48FFC9                  	dec rcx
 10227 00006700 4883EB08                	sub rbx, 8 * 1
 10228 00006704 4883EA08                	sub rdx, 8 * 1
 10229 00006708 EBE7                    	jmp .L_tc_recycle_frame_loop_0418
 10230                                  .L_tc_recycle_frame_done_0418:
 10231 0000670A 488D6308                	lea rsp, [rbx + 8 * 1]
 10232 0000670E 5D                      	pop rbp	; the proc will restore it!
 10233 0000670F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10234                                  .L_if_end_0236:
 10235                                  .L_if_end_0235:
 10236                                  .L_if_end_0234:
 10237 00006712 EB51                    	jmp .L_if_end_0233
 10238                                  .L_if_else_0233:
 10239                                  	; preparing a tail-call
 10240 00006714 6A00                    	push 0	; arg count
 10241 00006716 488B4510                	mov rax, ENV
 10242 0000671A 488B00                  	mov rax, qword [rax + 8 * 0]
 10243 0000671D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10244 00006720 803804                  	cmp byte [rax], T_closure
 10245 00006723 0F853DF90000            	jne L_error_non_closure
 10246 00006729 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10247                                  
 10248                                  	; recycling the current frame
 10249 0000672C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10250 0000672F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10251 00006732 B904000000              	mov rcx, 0 + 4
 10252 00006737 488B5D18                	mov rbx, COUNT
 10253 0000673B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10254 00006740 488D55F8                	lea rdx, [rbp - 8 * 1]
 10255                                  .L_tc_recycle_frame_loop_0419:
 10256 00006744 4883F900                	cmp rcx, 0
 10257 00006748 7413                    	je .L_tc_recycle_frame_done_0419
 10258 0000674A 488B32                  	mov rsi, qword [rdx]
 10259 0000674D 488933                  	mov qword [rbx], rsi
 10260 00006750 48FFC9                  	dec rcx
 10261 00006753 4883EB08                	sub rbx, 8 * 1
 10262 00006757 4883EA08                	sub rdx, 8 * 1
 10263 0000675B EBE7                    	jmp .L_tc_recycle_frame_loop_0419
 10264                                  .L_tc_recycle_frame_done_0419:
 10265 0000675D 488D6308                	lea rsp, [rbx + 8 * 1]
 10266 00006761 5D                      	pop rbp	; the proc will restore it!
 10267 00006762 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10268                                  .L_if_end_0233:
 10269                                  .L_if_end_022f:
 10270                                  .L_if_end_022b:
 10271 00006765 C9                      	leave
 10272 00006766 C22000                  	ret AND_KILL_FRAME(2)
 10273                                  .L_lambda_simple_end_0329:	; new closure is in rax
 10274 00006769 50                      	push rax
 10275 0000676A 6A01                    	push 1	; arg count
 10276 0000676C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10277 00006771 E899F90000              	call malloc
 10278 00006776 50                      	push rax
 10279 00006777 BF08000000              	mov rdi, 8 * 1	; new rib
 10280 0000677C E88EF90000              	call malloc
 10281 00006781 50                      	push rax
 10282 00006782 BF10000000              	mov rdi, 8 * 2	; extended env
 10283 00006787 E883F90000              	call malloc
 10284 0000678C 488B7D10                	mov rdi, ENV
 10285 00006790 BE00000000              	mov rsi, 0
 10286 00006795 BA01000000              	mov rdx, 1
 10287                                  .L_lambda_simple_env_loop_032a:	; ext_env[i + 1] <-- env[i]
 10288 0000679A 4883FE01                	cmp rsi, 1
 10289 0000679E 7410                    	je .L_lambda_simple_env_end_032a
 10290 000067A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10291 000067A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10292 000067A8 48FFC6                  	inc rsi
 10293 000067AB 48FFC2                  	inc rdx
 10294 000067AE EBEA                    	jmp .L_lambda_simple_env_loop_032a
 10295                                  .L_lambda_simple_env_end_032a:
 10296 000067B0 5B                      	pop rbx
 10297 000067B1 BE00000000              	mov rsi, 0
 10298                                  .L_lambda_simple_params_loop_032a:	; copy params
 10299 000067B6 4883FE01                	cmp rsi, 1
 10300 000067BA 740E                    	je .L_lambda_simple_params_end_032a
 10301 000067BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10302 000067C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10303 000067C5 48FFC6                  	inc rsi
 10304 000067C8 EBEC                    	jmp .L_lambda_simple_params_loop_032a
 10305                                  .L_lambda_simple_params_end_032a:
 10306 000067CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10307 000067CD 4889C3                  	mov rbx, rax
 10308 000067D0 58                      	pop rax
 10309 000067D1 C60004                  	mov byte [rax], T_closure
 10310 000067D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10311 000067D8 48C74009[E5670000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_032a
 10312 000067E0 E959020000              	jmp .L_lambda_simple_end_032a
 10313                                  .L_lambda_simple_code_032a:	; lambda-simple body
 10314 000067E5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10315 000067EB 740B                    	je .L_lambda_simple_arity_check_ok_032a
 10316 000067ED FF742410                	push qword [rsp + 8 * 2]
 10317 000067F1 6A01                    	push 1
 10318 000067F3 E9D0F80000              	jmp L_error_incorrect_arity_simple
 10319                                  .L_lambda_simple_arity_check_ok_032a:
 10320 000067F8 C8000000                	enter 0, 0
 10321 000067FC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10322 00006801 E809F90000              	call malloc
 10323 00006806 50                      	push rax
 10324 00006807 BF08000000              	mov rdi, 8 * 1	; new rib
 10325 0000680C E8FEF80000              	call malloc
 10326 00006811 50                      	push rax
 10327 00006812 BF18000000              	mov rdi, 8 * 3	; extended env
 10328 00006817 E8F3F80000              	call malloc
 10329 0000681C 488B7D10                	mov rdi, ENV
 10330 00006820 BE00000000              	mov rsi, 0
 10331 00006825 BA01000000              	mov rdx, 1
 10332                                  .L_lambda_opt_env_loop_006e:	; ext_env[i + 1] <-- env[i]
 10333 0000682A 4883FE02                	cmp rsi, 2
 10334 0000682E 7410                    	je .L_lambda_opt_env_end_006e
 10335 00006830 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10336 00006834 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10337 00006838 48FFC6                  	inc rsi
 10338 0000683B 48FFC2                  	inc rdx
 10339 0000683E EBEA                    	jmp .L_lambda_opt_env_loop_006e
 10340                                  .L_lambda_opt_env_end_006e:
 10341 00006840 5B                      	pop rbx
 10342 00006841 BE00000000              	mov rsi, 0
 10343                                  .L_lambda_opt_params_loop_006e:	; copy params
 10344 00006846 4883FE01                	cmp rsi, 1
 10345 0000684A 740E                    	je .L_lambda_opt_params_end_006e
 10346 0000684C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10347 00006851 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10348 00006855 48FFC6                  	inc rsi
 10349 00006858 EBEC                    	jmp .L_lambda_opt_params_loop_006e
 10350                                  .L_lambda_opt_params_end_006e:
 10351 0000685A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10352 0000685D 4889C3                  	mov rbx, rax
 10353 00006860 58                      	pop rax
 10354 00006861 C60004                  	mov byte [rax], T_closure
 10355 00006864 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10356 00006868 48C74009[75680000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_006e
 10357 00006870 E9C5010000              	jmp .L_lambda_opt_end_006e
 10358                                  .L_lambda_opt_code_006e:	; lambda-opt body
 10359 00006875 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10360 0000687B 0F8404010000            	je .L_lambda_opt_arity_check_exact_006e
 10361 00006881 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10362 00006887 7F0B                    	jg .L_lambda_opt_arity_check_more_006e
 10363 00006889 FF742410                	push qword [rsp + 8 * 2]
 10364 0000688D 6A00                    	push 0
 10365 0000688F E948F80000              	jmp L_error_incorrect_arity_opt
 10366                                  .L_lambda_opt_arity_check_more_006e:
 10367 00006894 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 10368 00006899 41B900000000            	mov r9 , 0
 10369 0000689F 4989E7                  	mov r15, rsp
 10370 000068A2 4D29C8                  	sub r8, r9
 10371 000068A5 41B900000000            	mov r9, 0
 10372 000068AB 498D5F10                	lea rbx, [r15 + 8 * 2]
 10373 000068AF 498B4710                	mov rax, qword [r15 + 8 * 2]
 10374 000068B3 486BC008                	imul rax, 8
 10375 000068B7 4801C3                  	add rbx, rax
 10376 000068BA 488B13                  	mov rdx , qword [rbx]
 10377 000068BD 4989DA                  	mov r10 , rbx
 10378 000068C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 10379 000068C5 52                      	push rdx
 10380 000068C6 53                      	push rbx
 10381 000068C7 4150                    	push r8
 10382 000068C9 4151                    	push r9
 10383 000068CB 4152                    	push r10
 10384 000068CD 4157                    	push r15
 10385 000068CF E83BF80000              	call malloc
 10386 000068D4 415F                    	pop r15
 10387 000068D6 415A                    	pop r10
 10388 000068D8 4159                    	pop r9
 10389 000068DA 4158                    	pop r8
 10390 000068DC 5B                      	pop rbx
 10391 000068DD 5A                      	pop rdx
 10392 000068DE C60021                  	mov byte qword [rax], T_pair
 10393 000068E1 48895001                	mov SOB_PAIR_CAR(rax), rdx
 10394 000068E5 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 10395 000068ED 498902                  	mov qword [r10], rax
 10396 000068F0 49FFC1                  	inc r9
 10397 000068F3 4883EB08                	sub rbx, 8
 10398 000068F7 4D39C1                  	cmp r9, r8
 10399 000068FA 743E                    	je .L_lambda_opt_stack_shrink_loop_0224
 10400                                  .L_lambda_opt_stack_shrink_loop_0223:
 10401 000068FC 488B13                  	mov rdx, qword [rbx]
 10402 000068FF 53                      	push rbx
 10403 00006900 4150                    	push r8
 10404 00006902 4151                    	push r9
 10405 00006904 4152                    	push r10
 10406 00006906 4157                    	push r15
 10407 00006908 52                      	push rdx
 10408 00006909 BF11000000              	mov rdi, (1 + 8 + 8)
 10409 0000690E E8FCF70000              	call malloc
 10410 00006913 5A                      	pop rdx
 10411 00006914 415F                    	pop r15
 10412 00006916 415A                    	pop r10
 10413 00006918 4159                    	pop r9
 10414 0000691A 4158                    	pop r8
 10415 0000691C 5B                      	pop rbx
 10416 0000691D C60021                  	mov byte [rax], T_pair
 10417 00006920 48895001                	mov SOB_PAIR_CAR(rax), rdx
 10418 00006924 4D8B32                  	mov r14, qword [r10]
 10419 00006927 4C897009                	mov SOB_PAIR_CDR(rax), r14
 10420 0000692B 498902                  	mov qword [r10], rax
 10421 0000692E 49FFC1                  	inc r9
 10422 00006931 4883EB08                	sub rbx, 8
 10423 00006935 4D39C1                  	cmp r9, r8
 10424 00006938 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_0223
 10425                                  .L_lambda_opt_stack_shrink_loop_0224:
 10426 0000693A 498D5710                	lea rdx, [r15 + 8 * 2]
 10427 0000693E 48C70200000000          	mov qword [rdx], 0
 10428 00006945 48830201                	add qword [rdx] , 1
 10429 00006949 4D89C1                  	mov r9, r8
 10430 0000694C 49FFC9                  	dec r9
 10431 0000694F 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 10432                                  .L_lambda_opt_stack_shrink_loop_0225:
 10433 00006953 488B03                  	mov rax, qword [rbx]
 10434 00006956 498901                  	mov qword [r9], rax
 10435 00006959 4983E908                	sub r9 , 8
 10436 0000695D 4883EB08                	sub rbx, 8
 10437 00006961 4C39FB                  	cmp rbx, r15
 10438 00006964 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0225
 10439 00006966 488B03                  	mov rax, qword [rbx]
 10440 00006969 498901                  	mov qword [r9], rax
 10441 0000696C 4D89C1                  	mov r9, r8
 10442 0000696F 4983E901                	sub r9 , 1
 10443 00006973 4983F900                	cmp r9, 0
 10444 00006977 7446                    je .L_lambda_opt_stack_adjusted_006e
 10445                                  .L_lambda_opt_stack_shrink_loop_0226:
 10446 00006979 58                      	pop rax
 10447 0000697A 49FFC9                  	dec r9
 10448 0000697D 4983F900                	cmp r9, 0
 10449 00006981 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0226
 10450 00006983 EB3A                    jmp .L_lambda_opt_stack_adjusted_006e
 10451                                  .L_lambda_opt_arity_check_exact_006e:
 10452 00006985 4989E7                  	mov r15, rsp
 10453 00006988 498D5F10                	lea rbx, [r15 + 8 * 2 + 8 * 0]
 10454 0000698C 488B0B                  	mov rcx, qword [rbx]
 10455 0000698F 48C703[01000000]        	mov qword [rbx], sob_nil
 10456 00006996 4883EB08                	sub rbx, 8
 10457                                  .L_lambda_opt_stack_shrink_loop_0222:
 10458 0000699A 488B13                  	mov rdx, qword [rbx]
 10459 0000699D 48890B                  	mov qword [rbx], rcx
 10460 000069A0 4C39FB                  	cmp rbx, r15
 10461 000069A3 7409                    je .L_lambda_opt_stack_shrink_loop_exit_006e
 10462 000069A5 4889D1                  	mov rcx, rdx
 10463 000069A8 4883EB08                	sub rbx, 8
 10464 000069AC EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_0222
 10465                                  .L_lambda_opt_stack_shrink_loop_exit_006e:
 10466 000069AE 52                      	push rdx
 10467 000069AF 4989E7                  	mov r15, rsp
 10468 000069B2 4983C710                	add r15, 16
 10469 000069B6 498B1F                  	mov rbx, qword [r15]
 10470 000069B9 48FFC3                  	inc rbx
 10471 000069BC 49891F                  	mov qword [r15], rbx
 10472                                  .L_lambda_opt_stack_adjusted_006e:
 10473 000069BF C8000000                	enter 0, 0
 10474                                  	; preparing a tail-call
 10475 000069C3 488B4520                	mov rax, PARAM(0)	; param s
 10476 000069C7 50                      	push rax
 10477 000069C8 48B8-                   	mov rax, L_constants + 2023
 10477 000069CA [E707000000000000] 
 10478 000069D2 50                      	push rax
 10479 000069D3 488B4510                	mov rax, ENV
 10480 000069D7 488B00                  	mov rax, qword [rax + 8 * 0]
 10481 000069DA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
 10482 000069DD 50                      	push rax
 10483 000069DE 6A03                    	push 3	; arg count
 10484 000069E0 488B0425[18150000]      	mov rax, qword [free_var_112]	; free var fold-left
 10485 000069E8 803805                  	cmp byte [rax], T_undefined
 10486 000069EB 0F84F1F50000            	je L_error_fvar_undefined
 10487 000069F1 803804                  	cmp byte [rax], T_closure
 10488 000069F4 0F856CF60000            	jne L_error_non_closure
 10489 000069FA FF7001                  	push SOB_CLOSURE_ENV(rax)
 10490                                  
 10491                                  	; recycling the current frame
 10492 000069FD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10493 00006A00 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10494 00006A03 B907000000              	mov rcx, 3 + 4
 10495 00006A08 488B5D18                	mov rbx, COUNT
 10496 00006A0C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10497 00006A11 488D55F8                	lea rdx, [rbp - 8 * 1]
 10498                                  .L_tc_recycle_frame_loop_041a:
 10499 00006A15 4883F900                	cmp rcx, 0
 10500 00006A19 7413                    	je .L_tc_recycle_frame_done_041a
 10501 00006A1B 488B32                  	mov rsi, qword [rdx]
 10502 00006A1E 488933                  	mov qword [rbx], rsi
 10503 00006A21 48FFC9                  	dec rcx
 10504 00006A24 4883EB08                	sub rbx, 8 * 1
 10505 00006A28 4883EA08                	sub rdx, 8 * 1
 10506 00006A2C EBE7                    	jmp .L_tc_recycle_frame_loop_041a
 10507                                  .L_tc_recycle_frame_done_041a:
 10508 00006A2E 488D6308                	lea rsp, [rbx + 8 * 1]
 10509 00006A32 5D                      	pop rbp	; the proc will restore it!
 10510 00006A33 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10511 00006A36 C9                      	leave
 10512 00006A37 C21800                  	ret AND_KILL_FRAME(1)
 10513                                  .L_lambda_opt_end_006e:	; new closure is in rax
 10514 00006A3A C9                      	leave
 10515 00006A3B C21800                  	ret AND_KILL_FRAME(1)
 10516                                  .L_lambda_simple_end_032a:	; new closure is in rax
 10517 00006A3E 803804                  	cmp byte [rax], T_closure
 10518 00006A41 0F851FF60000            	jne L_error_non_closure
 10519 00006A47 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10520                                  
 10521                                  	; recycling the current frame
 10522 00006A4A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10523 00006A4D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10524 00006A50 B905000000              	mov rcx, 1 + 4
 10525 00006A55 488B5D18                	mov rbx, COUNT
 10526 00006A59 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10527 00006A5E 488D55F8                	lea rdx, [rbp - 8 * 1]
 10528                                  .L_tc_recycle_frame_loop_041b:
 10529 00006A62 4883F900                	cmp rcx, 0
 10530 00006A66 7413                    	je .L_tc_recycle_frame_done_041b
 10531 00006A68 488B32                  	mov rsi, qword [rdx]
 10532 00006A6B 488933                  	mov qword [rbx], rsi
 10533 00006A6E 48FFC9                  	dec rcx
 10534 00006A71 4883EB08                	sub rbx, 8 * 1
 10535 00006A75 4883EA08                	sub rdx, 8 * 1
 10536 00006A79 EBE7                    	jmp .L_tc_recycle_frame_loop_041b
 10537                                  .L_tc_recycle_frame_done_041b:
 10538 00006A7B 488D6308                	lea rsp, [rbx + 8 * 1]
 10539 00006A7F 5D                      	pop rbp	; the proc will restore it!
 10540 00006A80 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10541 00006A83 C9                      	leave
 10542 00006A84 C21800                  	ret AND_KILL_FRAME(1)
 10543                                  .L_lambda_simple_end_0328:	; new closure is in rax
 10544 00006A87 803804                  	cmp byte [rax], T_closure
 10545 00006A8A 0F85D6F50000            	jne L_error_non_closure
 10546 00006A90 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10547 00006A93 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10548 00006A96 48890425[4B150000]      	mov qword [free_var_115], rax
 10549 00006A9E 48B8-                   	mov rax, sob_void
 10549 00006AA0 [0000000000000000] 
 10550                                  
 10551 00006AA8 4889C7                  	mov rdi, rax
 10552 00006AAB E871F70000              	call print_sexpr_if_not_void
 10553                                  
 10554                                  	; preparing a non tail-call
 10555 00006AB0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10556 00006AB5 E855F60000              	call malloc
 10557 00006ABA 50                      	push rax
 10558 00006ABB BF00000000              	mov rdi, 8 * 0	; new rib
 10559 00006AC0 E84AF60000              	call malloc
 10560 00006AC5 50                      	push rax
 10561 00006AC6 BF08000000              	mov rdi, 8 * 1	; extended env
 10562 00006ACB E83FF60000              	call malloc
 10563 00006AD0 488B7D10                	mov rdi, ENV
 10564 00006AD4 BE00000000              	mov rsi, 0
 10565 00006AD9 BA01000000              	mov rdx, 1
 10566                                  .L_lambda_simple_env_loop_032b:	; ext_env[i + 1] <-- env[i]
 10567 00006ADE 4883FE00                	cmp rsi, 0
 10568 00006AE2 7410                    	je .L_lambda_simple_env_end_032b
 10569 00006AE4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10570 00006AE8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10571 00006AEC 48FFC6                  	inc rsi
 10572 00006AEF 48FFC2                  	inc rdx
 10573 00006AF2 EBEA                    	jmp .L_lambda_simple_env_loop_032b
 10574                                  .L_lambda_simple_env_end_032b:
 10575 00006AF4 5B                      	pop rbx
 10576 00006AF5 BE00000000              	mov rsi, 0
 10577                                  .L_lambda_simple_params_loop_032b:	; copy params
 10578 00006AFA 4883FE00                	cmp rsi, 0
 10579 00006AFE 740E                    	je .L_lambda_simple_params_end_032b
 10580 00006B00 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10581 00006B05 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10582 00006B09 48FFC6                  	inc rsi
 10583 00006B0C EBEC                    	jmp .L_lambda_simple_params_loop_032b
 10584                                  .L_lambda_simple_params_end_032b:
 10585 00006B0E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10586 00006B11 4889C3                  	mov rbx, rax
 10587 00006B14 58                      	pop rax
 10588 00006B15 C60004                  	mov byte [rax], T_closure
 10589 00006B18 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10590 00006B1C 48C74009[296B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_032b
 10591 00006B24 E989000000              	jmp .L_lambda_simple_end_032b
 10592                                  .L_lambda_simple_code_032b:	; lambda-simple body
 10593 00006B29 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10594 00006B2F 740B                    	je .L_lambda_simple_arity_check_ok_032b
 10595 00006B31 FF742410                	push qword [rsp + 8 * 2]
 10596 00006B35 6A00                    	push 0
 10597 00006B37 E98CF50000              	jmp L_error_incorrect_arity_simple
 10598                                  .L_lambda_simple_arity_check_ok_032b:
 10599 00006B3C C8000000                	enter 0, 0
 10600                                  	; preparing a tail-call
 10601 00006B40 48B8-                   	mov rax, L_constants + 2075
 10601 00006B42 [1B08000000000000] 
 10602 00006B4A 50                      	push rax
 10603 00006B4B 48B8-                   	mov rax, L_constants + 2139
 10603 00006B4D [5B08000000000000] 
 10604 00006B55 50                      	push rax
 10605 00006B56 6A02                    	push 2	; arg count
 10606 00006B58 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
 10607 00006B60 803805                  	cmp byte [rax], T_undefined
 10608 00006B63 0F8479F40000            	je L_error_fvar_undefined
 10609 00006B69 803804                  	cmp byte [rax], T_closure
 10610 00006B6C 0F85F4F40000            	jne L_error_non_closure
 10611 00006B72 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10612                                  
 10613                                  	; recycling the current frame
 10614 00006B75 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10615 00006B78 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10616 00006B7B B906000000              	mov rcx, 2 + 4
 10617 00006B80 488B5D18                	mov rbx, COUNT
 10618 00006B84 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10619 00006B89 488D55F8                	lea rdx, [rbp - 8 * 1]
 10620                                  .L_tc_recycle_frame_loop_041c:
 10621 00006B8D 4883F900                	cmp rcx, 0
 10622 00006B91 7413                    	je .L_tc_recycle_frame_done_041c
 10623 00006B93 488B32                  	mov rsi, qword [rdx]
 10624 00006B96 488933                  	mov qword [rbx], rsi
 10625 00006B99 48FFC9                  	dec rcx
 10626 00006B9C 4883EB08                	sub rbx, 8 * 1
 10627 00006BA0 4883EA08                	sub rdx, 8 * 1
 10628 00006BA4 EBE7                    	jmp .L_tc_recycle_frame_loop_041c
 10629                                  .L_tc_recycle_frame_done_041c:
 10630 00006BA6 488D6308                	lea rsp, [rbx + 8 * 1]
 10631 00006BAA 5D                      	pop rbp	; the proc will restore it!
 10632 00006BAB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10633 00006BAE C9                      	leave
 10634 00006BAF C21000                  	ret AND_KILL_FRAME(0)
 10635                                  .L_lambda_simple_end_032b:	; new closure is in rax
 10636 00006BB2 50                      	push rax
 10637 00006BB3 6A01                    	push 1	; arg count
 10638 00006BB5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10639 00006BBA E850F50000              	call malloc
 10640 00006BBF 50                      	push rax
 10641 00006BC0 BF00000000              	mov rdi, 8 * 0	; new rib
 10642 00006BC5 E845F50000              	call malloc
 10643 00006BCA 50                      	push rax
 10644 00006BCB BF08000000              	mov rdi, 8 * 1	; extended env
 10645 00006BD0 E83AF50000              	call malloc
 10646 00006BD5 488B7D10                	mov rdi, ENV
 10647 00006BD9 BE00000000              	mov rsi, 0
 10648 00006BDE BA01000000              	mov rdx, 1
 10649                                  .L_lambda_simple_env_loop_032c:	; ext_env[i + 1] <-- env[i]
 10650 00006BE3 4883FE00                	cmp rsi, 0
 10651 00006BE7 7410                    	je .L_lambda_simple_env_end_032c
 10652 00006BE9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10653 00006BED 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10654 00006BF1 48FFC6                  	inc rsi
 10655 00006BF4 48FFC2                  	inc rdx
 10656 00006BF7 EBEA                    	jmp .L_lambda_simple_env_loop_032c
 10657                                  .L_lambda_simple_env_end_032c:
 10658 00006BF9 5B                      	pop rbx
 10659 00006BFA BE00000000              	mov rsi, 0
 10660                                  .L_lambda_simple_params_loop_032c:	; copy params
 10661 00006BFF 4883FE00                	cmp rsi, 0
 10662 00006C03 740E                    	je .L_lambda_simple_params_end_032c
 10663 00006C05 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10664 00006C0A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10665 00006C0E 48FFC6                  	inc rsi
 10666 00006C11 EBEC                    	jmp .L_lambda_simple_params_loop_032c
 10667                                  .L_lambda_simple_params_end_032c:
 10668 00006C13 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10669 00006C16 4889C3                  	mov rbx, rax
 10670 00006C19 58                      	pop rax
 10671 00006C1A C60004                  	mov byte [rax], T_closure
 10672 00006C1D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10673 00006C21 48C74009[2E6C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_032c
 10674 00006C29 E97D0D0000              	jmp .L_lambda_simple_end_032c
 10675                                  .L_lambda_simple_code_032c:	; lambda-simple body
 10676 00006C2E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10677 00006C34 740B                    	je .L_lambda_simple_arity_check_ok_032c
 10678 00006C36 FF742410                	push qword [rsp + 8 * 2]
 10679 00006C3A 6A01                    	push 1
 10680 00006C3C E987F40000              	jmp L_error_incorrect_arity_simple
 10681                                  .L_lambda_simple_arity_check_ok_032c:
 10682 00006C41 C8000000                	enter 0, 0
 10683                                  	; preparing a tail-call
 10684 00006C45 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10685 00006C4A E8C0F40000              	call malloc
 10686 00006C4F 50                      	push rax
 10687 00006C50 BF08000000              	mov rdi, 8 * 1	; new rib
 10688 00006C55 E8B5F40000              	call malloc
 10689 00006C5A 50                      	push rax
 10690 00006C5B BF10000000              	mov rdi, 8 * 2	; extended env
 10691 00006C60 E8AAF40000              	call malloc
 10692 00006C65 488B7D10                	mov rdi, ENV
 10693 00006C69 BE00000000              	mov rsi, 0
 10694 00006C6E BA01000000              	mov rdx, 1
 10695                                  .L_lambda_simple_env_loop_032d:	; ext_env[i + 1] <-- env[i]
 10696 00006C73 4883FE01                	cmp rsi, 1
 10697 00006C77 7410                    	je .L_lambda_simple_env_end_032d
 10698 00006C79 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10699 00006C7D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10700 00006C81 48FFC6                  	inc rsi
 10701 00006C84 48FFC2                  	inc rdx
 10702 00006C87 EBEA                    	jmp .L_lambda_simple_env_loop_032d
 10703                                  .L_lambda_simple_env_end_032d:
 10704 00006C89 5B                      	pop rbx
 10705 00006C8A BE00000000              	mov rsi, 0
 10706                                  .L_lambda_simple_params_loop_032d:	; copy params
 10707 00006C8F 4883FE01                	cmp rsi, 1
 10708 00006C93 740E                    	je .L_lambda_simple_params_end_032d
 10709 00006C95 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10710 00006C9A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10711 00006C9E 48FFC6                  	inc rsi
 10712 00006CA1 EBEC                    	jmp .L_lambda_simple_params_loop_032d
 10713                                  .L_lambda_simple_params_end_032d:
 10714 00006CA3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10715 00006CA6 4889C3                  	mov rbx, rax
 10716 00006CA9 58                      	pop rax
 10717 00006CAA C60004                  	mov byte [rax], T_closure
 10718 00006CAD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10719 00006CB1 48C74009[BE6C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_032d
 10720 00006CB9 E92B080000              	jmp .L_lambda_simple_end_032d
 10721                                  .L_lambda_simple_code_032d:	; lambda-simple body
 10722 00006CBE 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10723 00006CC4 740B                    	je .L_lambda_simple_arity_check_ok_032d
 10724 00006CC6 FF742410                	push qword [rsp + 8 * 2]
 10725 00006CCA 6A02                    	push 2
 10726 00006CCC E9F7F30000              	jmp L_error_incorrect_arity_simple
 10727                                  .L_lambda_simple_arity_check_ok_032d:
 10728 00006CD1 C8000000                	enter 0, 0
 10729                                  	; preparing a non tail-call
 10730 00006CD5 488B4520                	mov rax, PARAM(0)	; param a
 10731 00006CD9 50                      	push rax
 10732 00006CDA 6A01                    	push 1	; arg count
 10733 00006CDC 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10734 00006CE4 803805                  	cmp byte [rax], T_undefined
 10735 00006CE7 0F84F5F20000            	je L_error_fvar_undefined
 10736 00006CED 803804                  	cmp byte [rax], T_closure
 10737 00006CF0 0F8570F30000            	jne L_error_non_closure
 10738 00006CF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10739 00006CF9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10740 00006CFC 483D[02000000]          	cmp rax, sob_boolean_false
 10741 00006D02 0F8463020000            	je .L_if_else_0237
 10742                                  	; preparing a non tail-call
 10743 00006D08 488B4528                	mov rax, PARAM(1)	; param b
 10744 00006D0C 50                      	push rax
 10745 00006D0D 6A01                    	push 1	; arg count
 10746 00006D0F 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10747 00006D17 803805                  	cmp byte [rax], T_undefined
 10748 00006D1A 0F84C2F20000            	je L_error_fvar_undefined
 10749 00006D20 803804                  	cmp byte [rax], T_closure
 10750 00006D23 0F853DF30000            	jne L_error_non_closure
 10751 00006D29 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10752 00006D2C FF5009                  	call SOB_CLOSURE_CODE(rax)
 10753 00006D2F 483D[02000000]          	cmp rax, sob_boolean_false
 10754 00006D35 7467                    	je .L_if_else_0238
 10755                                  	; preparing a tail-call
 10756 00006D37 488B4528                	mov rax, PARAM(1)	; param b
 10757 00006D3B 50                      	push rax
 10758 00006D3C 488B4520                	mov rax, PARAM(0)	; param a
 10759 00006D40 50                      	push rax
 10760 00006D41 6A02                    	push 2	; arg count
 10761 00006D43 488B0425[3F100000]      	mov rax, qword [free_var_39]	; free var __bin-sub-zz
 10762 00006D4B 803805                  	cmp byte [rax], T_undefined
 10763 00006D4E 0F848EF20000            	je L_error_fvar_undefined
 10764 00006D54 803804                  	cmp byte [rax], T_closure
 10765 00006D57 0F8509F30000            	jne L_error_non_closure
 10766 00006D5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10767                                  
 10768                                  	; recycling the current frame
 10769 00006D60 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10770 00006D63 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10771 00006D66 B906000000              	mov rcx, 2 + 4
 10772 00006D6B 488B5D18                	mov rbx, COUNT
 10773 00006D6F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10774 00006D74 488D55F8                	lea rdx, [rbp - 8 * 1]
 10775                                  .L_tc_recycle_frame_loop_041d:
 10776 00006D78 4883F900                	cmp rcx, 0
 10777 00006D7C 7413                    	je .L_tc_recycle_frame_done_041d
 10778 00006D7E 488B32                  	mov rsi, qword [rdx]
 10779 00006D81 488933                  	mov qword [rbx], rsi
 10780 00006D84 48FFC9                  	dec rcx
 10781 00006D87 4883EB08                	sub rbx, 8 * 1
 10782 00006D8B 4883EA08                	sub rdx, 8 * 1
 10783 00006D8F EBE7                    	jmp .L_tc_recycle_frame_loop_041d
 10784                                  .L_tc_recycle_frame_done_041d:
 10785 00006D91 488D6308                	lea rsp, [rbx + 8 * 1]
 10786 00006D95 5D                      	pop rbp	; the proc will restore it!
 10787 00006D96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10788 00006D99 E9C8010000              	jmp .L_if_end_0238
 10789                                  .L_if_else_0238:
 10790                                  	; preparing a non tail-call
 10791 00006D9E 488B4528                	mov rax, PARAM(1)	; param b
 10792 00006DA2 50                      	push rax
 10793 00006DA3 6A01                    	push 1	; arg count
 10794 00006DA5 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10795 00006DAD 803805                  	cmp byte [rax], T_undefined
 10796 00006DB0 0F842CF20000            	je L_error_fvar_undefined
 10797 00006DB6 803804                  	cmp byte [rax], T_closure
 10798 00006DB9 0F85A7F20000            	jne L_error_non_closure
 10799 00006DBF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10800 00006DC2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10801 00006DC5 483D[02000000]          	cmp rax, sob_boolean_false
 10802 00006DCB 0F848A000000            	je .L_if_else_0239
 10803                                  	; preparing a tail-call
 10804 00006DD1 488B4528                	mov rax, PARAM(1)	; param b
 10805 00006DD5 50                      	push rax
 10806                                  	; preparing a non tail-call
 10807 00006DD6 488B4520                	mov rax, PARAM(0)	; param a
 10808 00006DDA 50                      	push rax
 10809 00006DDB 6A01                    	push 1	; arg count
 10810 00006DDD 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 10811 00006DE5 803805                  	cmp byte [rax], T_undefined
 10812 00006DE8 0F84F4F10000            	je L_error_fvar_undefined
 10813 00006DEE 803804                  	cmp byte [rax], T_closure
 10814 00006DF1 0F856FF20000            	jne L_error_non_closure
 10815 00006DF7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10816 00006DFA FF5009                  	call SOB_CLOSURE_CODE(rax)
 10817 00006DFD 50                      	push rax
 10818 00006DFE 6A02                    	push 2	; arg count
 10819 00006E00 488B0425[FB0F0000]      	mov rax, qword [free_var_35]	; free var __bin-sub-qq
 10820 00006E08 803805                  	cmp byte [rax], T_undefined
 10821 00006E0B 0F84D1F10000            	je L_error_fvar_undefined
 10822 00006E11 803804                  	cmp byte [rax], T_closure
 10823 00006E14 0F854CF20000            	jne L_error_non_closure
 10824 00006E1A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10825                                  
 10826                                  	; recycling the current frame
 10827 00006E1D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10828 00006E20 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10829 00006E23 B906000000              	mov rcx, 2 + 4
 10830 00006E28 488B5D18                	mov rbx, COUNT
 10831 00006E2C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10832 00006E31 488D55F8                	lea rdx, [rbp - 8 * 1]
 10833                                  .L_tc_recycle_frame_loop_041e:
 10834 00006E35 4883F900                	cmp rcx, 0
 10835 00006E39 7413                    	je .L_tc_recycle_frame_done_041e
 10836 00006E3B 488B32                  	mov rsi, qword [rdx]
 10837 00006E3E 488933                  	mov qword [rbx], rsi
 10838 00006E41 48FFC9                  	dec rcx
 10839 00006E44 4883EB08                	sub rbx, 8 * 1
 10840 00006E48 4883EA08                	sub rdx, 8 * 1
 10841 00006E4C EBE7                    	jmp .L_tc_recycle_frame_loop_041e
 10842                                  .L_tc_recycle_frame_done_041e:
 10843 00006E4E 488D6308                	lea rsp, [rbx + 8 * 1]
 10844 00006E52 5D                      	pop rbp	; the proc will restore it!
 10845 00006E53 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10846 00006E56 E90B010000              	jmp .L_if_end_0239
 10847                                  .L_if_else_0239:
 10848                                  	; preparing a non tail-call
 10849 00006E5B 488B4528                	mov rax, PARAM(1)	; param b
 10850 00006E5F 50                      	push rax
 10851 00006E60 6A01                    	push 1	; arg count
 10852 00006E62 488B0425[7E150000]      	mov rax, qword [free_var_118]	; free var real
 10853 00006E6A 803805                  	cmp byte [rax], T_undefined
 10854 00006E6D 0F846FF10000            	je L_error_fvar_undefined
 10855 00006E73 803804                  	cmp byte [rax], T_closure
 10856 00006E76 0F85EAF10000            	jne L_error_non_closure
 10857 00006E7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10858 00006E7F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10859 00006E82 483D[02000000]          	cmp rax, sob_boolean_false
 10860 00006E88 0F8487000000            	je .L_if_else_023a
 10861                                  	; preparing a tail-call
 10862 00006E8E 488B4528                	mov rax, PARAM(1)	; param b
 10863 00006E92 50                      	push rax
 10864                                  	; preparing a non tail-call
 10865 00006E93 488B4520                	mov rax, PARAM(0)	; param a
 10866 00006E97 50                      	push rax
 10867 00006E98 6A01                    	push 1	; arg count
 10868 00006E9A 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 10869 00006EA2 803805                  	cmp byte [rax], T_undefined
 10870 00006EA5 0F8437F10000            	je L_error_fvar_undefined
 10871 00006EAB 803804                  	cmp byte [rax], T_closure
 10872 00006EAE 0F85B2F10000            	jne L_error_non_closure
 10873 00006EB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10874 00006EB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10875 00006EBA 50                      	push rax
 10876 00006EBB 6A02                    	push 2	; arg count
 10877 00006EBD 488B0425[B70F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10878 00006EC5 803805                  	cmp byte [rax], T_undefined
 10879 00006EC8 0F8414F10000            	je L_error_fvar_undefined
 10880 00006ECE 803804                  	cmp byte [rax], T_closure
 10881 00006ED1 0F858FF10000            	jne L_error_non_closure
 10882 00006ED7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10883                                  
 10884                                  	; recycling the current frame
 10885 00006EDA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10886 00006EDD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10887 00006EE0 B906000000              	mov rcx, 2 + 4
 10888 00006EE5 488B5D18                	mov rbx, COUNT
 10889 00006EE9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10890 00006EEE 488D55F8                	lea rdx, [rbp - 8 * 1]
 10891                                  .L_tc_recycle_frame_loop_041f:
 10892 00006EF2 4883F900                	cmp rcx, 0
 10893 00006EF6 7413                    	je .L_tc_recycle_frame_done_041f
 10894 00006EF8 488B32                  	mov rsi, qword [rdx]
 10895 00006EFB 488933                  	mov qword [rbx], rsi
 10896 00006EFE 48FFC9                  	dec rcx
 10897 00006F01 4883EB08                	sub rbx, 8 * 1
 10898 00006F05 4883EA08                	sub rdx, 8 * 1
 10899 00006F09 EBE7                    	jmp .L_tc_recycle_frame_loop_041f
 10900                                  .L_tc_recycle_frame_done_041f:
 10901 00006F0B 488D6308                	lea rsp, [rbx + 8 * 1]
 10902 00006F0F 5D                      	pop rbp	; the proc will restore it!
 10903 00006F10 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10904 00006F13 EB51                    	jmp .L_if_end_023a
 10905                                  .L_if_else_023a:
 10906                                  	; preparing a tail-call
 10907 00006F15 6A00                    	push 0	; arg count
 10908 00006F17 488B4510                	mov rax, ENV
 10909 00006F1B 488B00                  	mov rax, qword [rax + 8 * 0]
 10910 00006F1E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10911 00006F21 803804                  	cmp byte [rax], T_closure
 10912 00006F24 0F853CF10000            	jne L_error_non_closure
 10913 00006F2A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10914                                  
 10915                                  	; recycling the current frame
 10916 00006F2D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10917 00006F30 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10918 00006F33 B904000000              	mov rcx, 0 + 4
 10919 00006F38 488B5D18                	mov rbx, COUNT
 10920 00006F3C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10921 00006F41 488D55F8                	lea rdx, [rbp - 8 * 1]
 10922                                  .L_tc_recycle_frame_loop_0420:
 10923 00006F45 4883F900                	cmp rcx, 0
 10924 00006F49 7413                    	je .L_tc_recycle_frame_done_0420
 10925 00006F4B 488B32                  	mov rsi, qword [rdx]
 10926 00006F4E 488933                  	mov qword [rbx], rsi
 10927 00006F51 48FFC9                  	dec rcx
 10928 00006F54 4883EB08                	sub rbx, 8 * 1
 10929 00006F58 4883EA08                	sub rdx, 8 * 1
 10930 00006F5C EBE7                    	jmp .L_tc_recycle_frame_loop_0420
 10931                                  .L_tc_recycle_frame_done_0420:
 10932 00006F5E 488D6308                	lea rsp, [rbx + 8 * 1]
 10933 00006F62 5D                      	pop rbp	; the proc will restore it!
 10934 00006F63 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10935                                  .L_if_end_023a:
 10936                                  .L_if_end_0239:
 10937                                  .L_if_end_0238:
 10938 00006F66 E97A050000              	jmp .L_if_end_0237
 10939                                  .L_if_else_0237:
 10940                                  	; preparing a non tail-call
 10941 00006F6B 488B4520                	mov rax, PARAM(0)	; param a
 10942 00006F6F 50                      	push rax
 10943 00006F70 6A01                    	push 1	; arg count
 10944 00006F72 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10945 00006F7A 803805                  	cmp byte [rax], T_undefined
 10946 00006F7D 0F845FF00000            	je L_error_fvar_undefined
 10947 00006F83 803804                  	cmp byte [rax], T_closure
 10948 00006F86 0F85DAF00000            	jne L_error_non_closure
 10949 00006F8C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10950 00006F8F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10951 00006F92 483D[02000000]          	cmp rax, sob_boolean_false
 10952 00006F98 0F8463020000            	je .L_if_else_023b
 10953                                  	; preparing a non tail-call
 10954 00006F9E 488B4528                	mov rax, PARAM(1)	; param b
 10955 00006FA2 50                      	push rax
 10956 00006FA3 6A01                    	push 1	; arg count
 10957 00006FA5 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10958 00006FAD 803805                  	cmp byte [rax], T_undefined
 10959 00006FB0 0F842CF00000            	je L_error_fvar_undefined
 10960 00006FB6 803804                  	cmp byte [rax], T_closure
 10961 00006FB9 0F85A7F00000            	jne L_error_non_closure
 10962 00006FBF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10963 00006FC2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10964 00006FC5 483D[02000000]          	cmp rax, sob_boolean_false
 10965 00006FCB 0F848A000000            	je .L_if_else_023c
 10966                                  	; preparing a tail-call
 10967                                  	; preparing a non tail-call
 10968 00006FD1 488B4528                	mov rax, PARAM(1)	; param b
 10969 00006FD5 50                      	push rax
 10970 00006FD6 6A01                    	push 1	; arg count
 10971 00006FD8 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 10972 00006FE0 803805                  	cmp byte [rax], T_undefined
 10973 00006FE3 0F84F9EF0000            	je L_error_fvar_undefined
 10974 00006FE9 803804                  	cmp byte [rax], T_closure
 10975 00006FEC 0F8574F00000            	jne L_error_non_closure
 10976 00006FF2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10977 00006FF5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10978 00006FF8 50                      	push rax
 10979 00006FF9 488B4520                	mov rax, PARAM(0)	; param a
 10980 00006FFD 50                      	push rax
 10981 00006FFE 6A02                    	push 2	; arg count
 10982 00007000 488B0425[FB0F0000]      	mov rax, qword [free_var_35]	; free var __bin-sub-qq
 10983 00007008 803805                  	cmp byte [rax], T_undefined
 10984 0000700B 0F84D1EF0000            	je L_error_fvar_undefined
 10985 00007011 803804                  	cmp byte [rax], T_closure
 10986 00007014 0F854CF00000            	jne L_error_non_closure
 10987 0000701A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10988                                  
 10989                                  	; recycling the current frame
 10990 0000701D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10991 00007020 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10992 00007023 B906000000              	mov rcx, 2 + 4
 10993 00007028 488B5D18                	mov rbx, COUNT
 10994 0000702C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10995 00007031 488D55F8                	lea rdx, [rbp - 8 * 1]
 10996                                  .L_tc_recycle_frame_loop_0421:
 10997 00007035 4883F900                	cmp rcx, 0
 10998 00007039 7413                    	je .L_tc_recycle_frame_done_0421
 10999 0000703B 488B32                  	mov rsi, qword [rdx]
 11000 0000703E 488933                  	mov qword [rbx], rsi
 11001 00007041 48FFC9                  	dec rcx
 11002 00007044 4883EB08                	sub rbx, 8 * 1
 11003 00007048 4883EA08                	sub rdx, 8 * 1
 11004 0000704C EBE7                    	jmp .L_tc_recycle_frame_loop_0421
 11005                                  .L_tc_recycle_frame_done_0421:
 11006 0000704E 488D6308                	lea rsp, [rbx + 8 * 1]
 11007 00007052 5D                      	pop rbp	; the proc will restore it!
 11008 00007053 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11009 00007056 E9A1010000              	jmp .L_if_end_023c
 11010                                  .L_if_else_023c:
 11011                                  	; preparing a non tail-call
 11012 0000705B 488B4528                	mov rax, PARAM(1)	; param b
 11013 0000705F 50                      	push rax
 11014 00007060 6A01                    	push 1	; arg count
 11015 00007062 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 11016 0000706A 803805                  	cmp byte [rax], T_undefined
 11017 0000706D 0F846FEF0000            	je L_error_fvar_undefined
 11018 00007073 803804                  	cmp byte [rax], T_closure
 11019 00007076 0F85EAEF0000            	jne L_error_non_closure
 11020 0000707C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11021 0000707F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11022 00007082 483D[02000000]          	cmp rax, sob_boolean_false
 11023 00007088 7467                    	je .L_if_else_023d
 11024                                  	; preparing a tail-call
 11025 0000708A 488B4528                	mov rax, PARAM(1)	; param b
 11026 0000708E 50                      	push rax
 11027 0000708F 488B4520                	mov rax, PARAM(0)	; param a
 11028 00007093 50                      	push rax
 11029 00007094 6A02                    	push 2	; arg count
 11030 00007096 488B0425[FB0F0000]      	mov rax, qword [free_var_35]	; free var __bin-sub-qq
 11031 0000709E 803805                  	cmp byte [rax], T_undefined
 11032 000070A1 0F843BEF0000            	je L_error_fvar_undefined
 11033 000070A7 803804                  	cmp byte [rax], T_closure
 11034 000070AA 0F85B6EF0000            	jne L_error_non_closure
 11035 000070B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11036                                  
 11037                                  	; recycling the current frame
 11038 000070B3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11039 000070B6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11040 000070B9 B906000000              	mov rcx, 2 + 4
 11041 000070BE 488B5D18                	mov rbx, COUNT
 11042 000070C2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11043 000070C7 488D55F8                	lea rdx, [rbp - 8 * 1]
 11044                                  .L_tc_recycle_frame_loop_0422:
 11045 000070CB 4883F900                	cmp rcx, 0
 11046 000070CF 7413                    	je .L_tc_recycle_frame_done_0422
 11047 000070D1 488B32                  	mov rsi, qword [rdx]
 11048 000070D4 488933                  	mov qword [rbx], rsi
 11049 000070D7 48FFC9                  	dec rcx
 11050 000070DA 4883EB08                	sub rbx, 8 * 1
 11051 000070DE 4883EA08                	sub rdx, 8 * 1
 11052 000070E2 EBE7                    	jmp .L_tc_recycle_frame_loop_0422
 11053                                  .L_tc_recycle_frame_done_0422:
 11054 000070E4 488D6308                	lea rsp, [rbx + 8 * 1]
 11055 000070E8 5D                      	pop rbp	; the proc will restore it!
 11056 000070E9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11057 000070EC E90B010000              	jmp .L_if_end_023d
 11058                                  .L_if_else_023d:
 11059                                  	; preparing a non tail-call
 11060 000070F1 488B4528                	mov rax, PARAM(1)	; param b
 11061 000070F5 50                      	push rax
 11062 000070F6 6A01                    	push 1	; arg count
 11063 000070F8 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 11064 00007100 803805                  	cmp byte [rax], T_undefined
 11065 00007103 0F84D9EE0000            	je L_error_fvar_undefined
 11066 00007109 803804                  	cmp byte [rax], T_closure
 11067 0000710C 0F8554EF0000            	jne L_error_non_closure
 11068 00007112 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11069 00007115 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11070 00007118 483D[02000000]          	cmp rax, sob_boolean_false
 11071 0000711E 0F8487000000            	je .L_if_else_023e
 11072                                  	; preparing a tail-call
 11073 00007124 488B4528                	mov rax, PARAM(1)	; param b
 11074 00007128 50                      	push rax
 11075                                  	; preparing a non tail-call
 11076 00007129 488B4520                	mov rax, PARAM(0)	; param a
 11077 0000712D 50                      	push rax
 11078 0000712E 6A01                    	push 1	; arg count
 11079 00007130 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 11080 00007138 803805                  	cmp byte [rax], T_undefined
 11081 0000713B 0F84A1EE0000            	je L_error_fvar_undefined
 11082 00007141 803804                  	cmp byte [rax], T_closure
 11083 00007144 0F851CEF0000            	jne L_error_non_closure
 11084 0000714A FF7001                  	push SOB_CLOSURE_ENV(rax)
 11085 0000714D FF5009                  	call SOB_CLOSURE_CODE(rax)
 11086 00007150 50                      	push rax
 11087 00007151 6A02                    	push 2	; arg count
 11088 00007153 488B0425[B70F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 11089 0000715B 803805                  	cmp byte [rax], T_undefined
 11090 0000715E 0F847EEE0000            	je L_error_fvar_undefined
 11091 00007164 803804                  	cmp byte [rax], T_closure
 11092 00007167 0F85F9EE0000            	jne L_error_non_closure
 11093 0000716D FF7001                  	push SOB_CLOSURE_ENV(rax)
 11094                                  
 11095                                  	; recycling the current frame
 11096 00007170 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11097 00007173 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11098 00007176 B906000000              	mov rcx, 2 + 4
 11099 0000717B 488B5D18                	mov rbx, COUNT
 11100 0000717F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11101 00007184 488D55F8                	lea rdx, [rbp - 8 * 1]
 11102                                  .L_tc_recycle_frame_loop_0423:
 11103 00007188 4883F900                	cmp rcx, 0
 11104 0000718C 7413                    	je .L_tc_recycle_frame_done_0423
 11105 0000718E 488B32                  	mov rsi, qword [rdx]
 11106 00007191 488933                  	mov qword [rbx], rsi
 11107 00007194 48FFC9                  	dec rcx
 11108 00007197 4883EB08                	sub rbx, 8 * 1
 11109 0000719B 4883EA08                	sub rdx, 8 * 1
 11110 0000719F EBE7                    	jmp .L_tc_recycle_frame_loop_0423
 11111                                  .L_tc_recycle_frame_done_0423:
 11112 000071A1 488D6308                	lea rsp, [rbx + 8 * 1]
 11113 000071A5 5D                      	pop rbp	; the proc will restore it!
 11114 000071A6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11115 000071A9 EB51                    	jmp .L_if_end_023e
 11116                                  .L_if_else_023e:
 11117                                  	; preparing a tail-call
 11118 000071AB 6A00                    	push 0	; arg count
 11119 000071AD 488B4510                	mov rax, ENV
 11120 000071B1 488B00                  	mov rax, qword [rax + 8 * 0]
 11121 000071B4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11122 000071B7 803804                  	cmp byte [rax], T_closure
 11123 000071BA 0F85A6EE0000            	jne L_error_non_closure
 11124 000071C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11125                                  
 11126                                  	; recycling the current frame
 11127 000071C3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11128 000071C6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11129 000071C9 B904000000              	mov rcx, 0 + 4
 11130 000071CE 488B5D18                	mov rbx, COUNT
 11131 000071D2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11132 000071D7 488D55F8                	lea rdx, [rbp - 8 * 1]
 11133                                  .L_tc_recycle_frame_loop_0424:
 11134 000071DB 4883F900                	cmp rcx, 0
 11135 000071DF 7413                    	je .L_tc_recycle_frame_done_0424
 11136 000071E1 488B32                  	mov rsi, qword [rdx]
 11137 000071E4 488933                  	mov qword [rbx], rsi
 11138 000071E7 48FFC9                  	dec rcx
 11139 000071EA 4883EB08                	sub rbx, 8 * 1
 11140 000071EE 4883EA08                	sub rdx, 8 * 1
 11141 000071F2 EBE7                    	jmp .L_tc_recycle_frame_loop_0424
 11142                                  .L_tc_recycle_frame_done_0424:
 11143 000071F4 488D6308                	lea rsp, [rbx + 8 * 1]
 11144 000071F8 5D                      	pop rbp	; the proc will restore it!
 11145 000071F9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11146                                  .L_if_end_023e:
 11147                                  .L_if_end_023d:
 11148                                  .L_if_end_023c:
 11149 000071FC E9E4020000              	jmp .L_if_end_023b
 11150                                  .L_if_else_023b:
 11151                                  	; preparing a non tail-call
 11152 00007201 488B4520                	mov rax, PARAM(0)	; param a
 11153 00007205 50                      	push rax
 11154 00007206 6A01                    	push 1	; arg count
 11155 00007208 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 11156 00007210 803805                  	cmp byte [rax], T_undefined
 11157 00007213 0F84C9ED0000            	je L_error_fvar_undefined
 11158 00007219 803804                  	cmp byte [rax], T_closure
 11159 0000721C 0F8544EE0000            	jne L_error_non_closure
 11160 00007222 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11161 00007225 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11162 00007228 483D[02000000]          	cmp rax, sob_boolean_false
 11163 0000722E 0F8460020000            	je .L_if_else_023f
 11164                                  	; preparing a non tail-call
 11165 00007234 488B4528                	mov rax, PARAM(1)	; param b
 11166 00007238 50                      	push rax
 11167 00007239 6A01                    	push 1	; arg count
 11168 0000723B 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 11169 00007243 803805                  	cmp byte [rax], T_undefined
 11170 00007246 0F8496ED0000            	je L_error_fvar_undefined
 11171 0000724C 803804                  	cmp byte [rax], T_closure
 11172 0000724F 0F8511EE0000            	jne L_error_non_closure
 11173 00007255 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11174 00007258 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11175 0000725B 483D[02000000]          	cmp rax, sob_boolean_false
 11176 00007261 0F848A000000            	je .L_if_else_0240
 11177                                  	; preparing a tail-call
 11178                                  	; preparing a non tail-call
 11179 00007267 488B4528                	mov rax, PARAM(1)	; param b
 11180 0000726B 50                      	push rax
 11181 0000726C 6A01                    	push 1	; arg count
 11182 0000726E 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 11183 00007276 803805                  	cmp byte [rax], T_undefined
 11184 00007279 0F8463ED0000            	je L_error_fvar_undefined
 11185 0000727F 803804                  	cmp byte [rax], T_closure
 11186 00007282 0F85DEED0000            	jne L_error_non_closure
 11187 00007288 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11188 0000728B FF5009                  	call SOB_CLOSURE_CODE(rax)
 11189 0000728E 50                      	push rax
 11190 0000728F 488B4520                	mov rax, PARAM(0)	; param a
 11191 00007293 50                      	push rax
 11192 00007294 6A02                    	push 2	; arg count
 11193 00007296 488B0425[B70F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 11194 0000729E 803805                  	cmp byte [rax], T_undefined
 11195 000072A1 0F843BED0000            	je L_error_fvar_undefined
 11196 000072A7 803804                  	cmp byte [rax], T_closure
 11197 000072AA 0F85B6ED0000            	jne L_error_non_closure
 11198 000072B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11199                                  
 11200                                  	; recycling the current frame
 11201 000072B3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11202 000072B6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11203 000072B9 B906000000              	mov rcx, 2 + 4
 11204 000072BE 488B5D18                	mov rbx, COUNT
 11205 000072C2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11206 000072C7 488D55F8                	lea rdx, [rbp - 8 * 1]
 11207                                  .L_tc_recycle_frame_loop_0425:
 11208 000072CB 4883F900                	cmp rcx, 0
 11209 000072CF 7413                    	je .L_tc_recycle_frame_done_0425
 11210 000072D1 488B32                  	mov rsi, qword [rdx]
 11211 000072D4 488933                  	mov qword [rbx], rsi
 11212 000072D7 48FFC9                  	dec rcx
 11213 000072DA 4883EB08                	sub rbx, 8 * 1
 11214 000072DE 4883EA08                	sub rdx, 8 * 1
 11215 000072E2 EBE7                    	jmp .L_tc_recycle_frame_loop_0425
 11216                                  .L_tc_recycle_frame_done_0425:
 11217 000072E4 488D6308                	lea rsp, [rbx + 8 * 1]
 11218 000072E8 5D                      	pop rbp	; the proc will restore it!
 11219 000072E9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11220 000072EC E9A1010000              	jmp .L_if_end_0240
 11221                                  .L_if_else_0240:
 11222                                  	; preparing a non tail-call
 11223 000072F1 488B4528                	mov rax, PARAM(1)	; param b
 11224 000072F5 50                      	push rax
 11225 000072F6 6A01                    	push 1	; arg count
 11226 000072F8 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 11227 00007300 803805                  	cmp byte [rax], T_undefined
 11228 00007303 0F84D9EC0000            	je L_error_fvar_undefined
 11229 00007309 803804                  	cmp byte [rax], T_closure
 11230 0000730C 0F8554ED0000            	jne L_error_non_closure
 11231 00007312 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11232 00007315 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11233 00007318 483D[02000000]          	cmp rax, sob_boolean_false
 11234 0000731E 0F848A000000            	je .L_if_else_0241
 11235                                  	; preparing a tail-call
 11236                                  	; preparing a non tail-call
 11237 00007324 488B4528                	mov rax, PARAM(1)	; param b
 11238 00007328 50                      	push rax
 11239 00007329 6A01                    	push 1	; arg count
 11240 0000732B 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 11241 00007333 803805                  	cmp byte [rax], T_undefined
 11242 00007336 0F84A6EC0000            	je L_error_fvar_undefined
 11243 0000733C 803804                  	cmp byte [rax], T_closure
 11244 0000733F 0F8521ED0000            	jne L_error_non_closure
 11245 00007345 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11246 00007348 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11247 0000734B 50                      	push rax
 11248 0000734C 488B4520                	mov rax, PARAM(0)	; param a
 11249 00007350 50                      	push rax
 11250 00007351 6A02                    	push 2	; arg count
 11251 00007353 488B0425[B70F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 11252 0000735B 803805                  	cmp byte [rax], T_undefined
 11253 0000735E 0F847EEC0000            	je L_error_fvar_undefined
 11254 00007364 803804                  	cmp byte [rax], T_closure
 11255 00007367 0F85F9EC0000            	jne L_error_non_closure
 11256 0000736D FF7001                  	push SOB_CLOSURE_ENV(rax)
 11257                                  
 11258                                  	; recycling the current frame
 11259 00007370 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11260 00007373 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11261 00007376 B906000000              	mov rcx, 2 + 4
 11262 0000737B 488B5D18                	mov rbx, COUNT
 11263 0000737F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11264 00007384 488D55F8                	lea rdx, [rbp - 8 * 1]
 11265                                  .L_tc_recycle_frame_loop_0426:
 11266 00007388 4883F900                	cmp rcx, 0
 11267 0000738C 7413                    	je .L_tc_recycle_frame_done_0426
 11268 0000738E 488B32                  	mov rsi, qword [rdx]
 11269 00007391 488933                  	mov qword [rbx], rsi
 11270 00007394 48FFC9                  	dec rcx
 11271 00007397 4883EB08                	sub rbx, 8 * 1
 11272 0000739B 4883EA08                	sub rdx, 8 * 1
 11273 0000739F EBE7                    	jmp .L_tc_recycle_frame_loop_0426
 11274                                  .L_tc_recycle_frame_done_0426:
 11275 000073A1 488D6308                	lea rsp, [rbx + 8 * 1]
 11276 000073A5 5D                      	pop rbp	; the proc will restore it!
 11277 000073A6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11278 000073A9 E9E4000000              	jmp .L_if_end_0241
 11279                                  .L_if_else_0241:
 11280                                  	; preparing a non tail-call
 11281 000073AE 488B4528                	mov rax, PARAM(1)	; param b
 11282 000073B2 50                      	push rax
 11283 000073B3 6A01                    	push 1	; arg count
 11284 000073B5 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 11285 000073BD 803805                  	cmp byte [rax], T_undefined
 11286 000073C0 0F841CEC0000            	je L_error_fvar_undefined
 11287 000073C6 803804                  	cmp byte [rax], T_closure
 11288 000073C9 0F8597EC0000            	jne L_error_non_closure
 11289 000073CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 11290 000073D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11291 000073D5 483D[02000000]          	cmp rax, sob_boolean_false
 11292 000073DB 7464                    	je .L_if_else_0242
 11293                                  	; preparing a tail-call
 11294 000073DD 488B4528                	mov rax, PARAM(1)	; param b
 11295 000073E1 50                      	push rax
 11296 000073E2 488B4520                	mov rax, PARAM(0)	; param a
 11297 000073E6 50                      	push rax
 11298 000073E7 6A02                    	push 2	; arg count
 11299 000073E9 488B0425[B70F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 11300 000073F1 803805                  	cmp byte [rax], T_undefined
 11301 000073F4 0F84E8EB0000            	je L_error_fvar_undefined
 11302 000073FA 803804                  	cmp byte [rax], T_closure
 11303 000073FD 0F8563EC0000            	jne L_error_non_closure
 11304 00007403 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11305                                  
 11306                                  	; recycling the current frame
 11307 00007406 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11308 00007409 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11309 0000740C B906000000              	mov rcx, 2 + 4
 11310 00007411 488B5D18                	mov rbx, COUNT
 11311 00007415 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11312 0000741A 488D55F8                	lea rdx, [rbp - 8 * 1]
 11313                                  .L_tc_recycle_frame_loop_0427:
 11314 0000741E 4883F900                	cmp rcx, 0
 11315 00007422 7413                    	je .L_tc_recycle_frame_done_0427
 11316 00007424 488B32                  	mov rsi, qword [rdx]
 11317 00007427 488933                  	mov qword [rbx], rsi
 11318 0000742A 48FFC9                  	dec rcx
 11319 0000742D 4883EB08                	sub rbx, 8 * 1
 11320 00007431 4883EA08                	sub rdx, 8 * 1
 11321 00007435 EBE7                    	jmp .L_tc_recycle_frame_loop_0427
 11322                                  .L_tc_recycle_frame_done_0427:
 11323 00007437 488D6308                	lea rsp, [rbx + 8 * 1]
 11324 0000743B 5D                      	pop rbp	; the proc will restore it!
 11325 0000743C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11326 0000743F EB51                    	jmp .L_if_end_0242
 11327                                  .L_if_else_0242:
 11328                                  	; preparing a tail-call
 11329 00007441 6A00                    	push 0	; arg count
 11330 00007443 488B4510                	mov rax, ENV
 11331 00007447 488B00                  	mov rax, qword [rax + 8 * 0]
 11332 0000744A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11333 0000744D 803804                  	cmp byte [rax], T_closure
 11334 00007450 0F8510EC0000            	jne L_error_non_closure
 11335 00007456 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11336                                  
 11337                                  	; recycling the current frame
 11338 00007459 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11339 0000745C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11340 0000745F B904000000              	mov rcx, 0 + 4
 11341 00007464 488B5D18                	mov rbx, COUNT
 11342 00007468 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11343 0000746D 488D55F8                	lea rdx, [rbp - 8 * 1]
 11344                                  .L_tc_recycle_frame_loop_0428:
 11345 00007471 4883F900                	cmp rcx, 0
 11346 00007475 7413                    	je .L_tc_recycle_frame_done_0428
 11347 00007477 488B32                  	mov rsi, qword [rdx]
 11348 0000747A 488933                  	mov qword [rbx], rsi
 11349 0000747D 48FFC9                  	dec rcx
 11350 00007480 4883EB08                	sub rbx, 8 * 1
 11351 00007484 4883EA08                	sub rdx, 8 * 1
 11352 00007488 EBE7                    	jmp .L_tc_recycle_frame_loop_0428
 11353                                  .L_tc_recycle_frame_done_0428:
 11354 0000748A 488D6308                	lea rsp, [rbx + 8 * 1]
 11355 0000748E 5D                      	pop rbp	; the proc will restore it!
 11356 0000748F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11357                                  .L_if_end_0242:
 11358                                  .L_if_end_0241:
 11359                                  .L_if_end_0240:
 11360 00007492 EB51                    	jmp .L_if_end_023f
 11361                                  .L_if_else_023f:
 11362                                  	; preparing a tail-call
 11363 00007494 6A00                    	push 0	; arg count
 11364 00007496 488B4510                	mov rax, ENV
 11365 0000749A 488B00                  	mov rax, qword [rax + 8 * 0]
 11366 0000749D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11367 000074A0 803804                  	cmp byte [rax], T_closure
 11368 000074A3 0F85BDEB0000            	jne L_error_non_closure
 11369 000074A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11370                                  
 11371                                  	; recycling the current frame
 11372 000074AC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11373 000074AF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11374 000074B2 B904000000              	mov rcx, 0 + 4
 11375 000074B7 488B5D18                	mov rbx, COUNT
 11376 000074BB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11377 000074C0 488D55F8                	lea rdx, [rbp - 8 * 1]
 11378                                  .L_tc_recycle_frame_loop_0429:
 11379 000074C4 4883F900                	cmp rcx, 0
 11380 000074C8 7413                    	je .L_tc_recycle_frame_done_0429
 11381 000074CA 488B32                  	mov rsi, qword [rdx]
 11382 000074CD 488933                  	mov qword [rbx], rsi
 11383 000074D0 48FFC9                  	dec rcx
 11384 000074D3 4883EB08                	sub rbx, 8 * 1
 11385 000074D7 4883EA08                	sub rdx, 8 * 1
 11386 000074DB EBE7                    	jmp .L_tc_recycle_frame_loop_0429
 11387                                  .L_tc_recycle_frame_done_0429:
 11388 000074DD 488D6308                	lea rsp, [rbx + 8 * 1]
 11389 000074E1 5D                      	pop rbp	; the proc will restore it!
 11390 000074E2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11391                                  .L_if_end_023f:
 11392                                  .L_if_end_023b:
 11393                                  .L_if_end_0237:
 11394 000074E5 C9                      	leave
 11395 000074E6 C22000                  	ret AND_KILL_FRAME(2)
 11396                                  .L_lambda_simple_end_032d:	; new closure is in rax
 11397 000074E9 50                      	push rax
 11398 000074EA 6A01                    	push 1	; arg count
 11399 000074EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11400 000074F1 E819EC0000              	call malloc
 11401 000074F6 50                      	push rax
 11402 000074F7 BF08000000              	mov rdi, 8 * 1	; new rib
 11403 000074FC E80EEC0000              	call malloc
 11404 00007501 50                      	push rax
 11405 00007502 BF10000000              	mov rdi, 8 * 2	; extended env
 11406 00007507 E803EC0000              	call malloc
 11407 0000750C 488B7D10                	mov rdi, ENV
 11408 00007510 BE00000000              	mov rsi, 0
 11409 00007515 BA01000000              	mov rdx, 1
 11410                                  .L_lambda_simple_env_loop_032e:	; ext_env[i + 1] <-- env[i]
 11411 0000751A 4883FE01                	cmp rsi, 1
 11412 0000751E 7410                    	je .L_lambda_simple_env_end_032e
 11413 00007520 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11414 00007524 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11415 00007528 48FFC6                  	inc rsi
 11416 0000752B 48FFC2                  	inc rdx
 11417 0000752E EBEA                    	jmp .L_lambda_simple_env_loop_032e
 11418                                  .L_lambda_simple_env_end_032e:
 11419 00007530 5B                      	pop rbx
 11420 00007531 BE00000000              	mov rsi, 0
 11421                                  .L_lambda_simple_params_loop_032e:	; copy params
 11422 00007536 4883FE01                	cmp rsi, 1
 11423 0000753A 740E                    	je .L_lambda_simple_params_end_032e
 11424 0000753C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11425 00007541 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11426 00007545 48FFC6                  	inc rsi
 11427 00007548 EBEC                    	jmp .L_lambda_simple_params_loop_032e
 11428                                  .L_lambda_simple_params_end_032e:
 11429 0000754A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11430 0000754D 4889C3                  	mov rbx, rax
 11431 00007550 58                      	pop rax
 11432 00007551 C60004                  	mov byte [rax], T_closure
 11433 00007554 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11434 00007558 48C74009[65750000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_032e
 11435 00007560 E9FD030000              	jmp .L_lambda_simple_end_032e
 11436                                  .L_lambda_simple_code_032e:	; lambda-simple body
 11437 00007565 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11438 0000756B 740B                    	je .L_lambda_simple_arity_check_ok_032e
 11439 0000756D FF742410                	push qword [rsp + 8 * 2]
 11440 00007571 6A01                    	push 1
 11441 00007573 E950EB0000              	jmp L_error_incorrect_arity_simple
 11442                                  .L_lambda_simple_arity_check_ok_032e:
 11443 00007578 C8000000                	enter 0, 0
 11444 0000757C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11445 00007581 E889EB0000              	call malloc
 11446 00007586 50                      	push rax
 11447 00007587 BF08000000              	mov rdi, 8 * 1	; new rib
 11448 0000758C E87EEB0000              	call malloc
 11449 00007591 50                      	push rax
 11450 00007592 BF18000000              	mov rdi, 8 * 3	; extended env
 11451 00007597 E873EB0000              	call malloc
 11452 0000759C 488B7D10                	mov rdi, ENV
 11453 000075A0 BE00000000              	mov rsi, 0
 11454 000075A5 BA01000000              	mov rdx, 1
 11455                                  .L_lambda_opt_env_loop_006f:	; ext_env[i + 1] <-- env[i]
 11456 000075AA 4883FE02                	cmp rsi, 2
 11457 000075AE 7410                    	je .L_lambda_opt_env_end_006f
 11458 000075B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11459 000075B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11460 000075B8 48FFC6                  	inc rsi
 11461 000075BB 48FFC2                  	inc rdx
 11462 000075BE EBEA                    	jmp .L_lambda_opt_env_loop_006f
 11463                                  .L_lambda_opt_env_end_006f:
 11464 000075C0 5B                      	pop rbx
 11465 000075C1 BE00000000              	mov rsi, 0
 11466                                  .L_lambda_opt_params_loop_006f:	; copy params
 11467 000075C6 4883FE01                	cmp rsi, 1
 11468 000075CA 740E                    	je .L_lambda_opt_params_end_006f
 11469 000075CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11470 000075D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11471 000075D5 48FFC6                  	inc rsi
 11472 000075D8 EBEC                    	jmp .L_lambda_opt_params_loop_006f
 11473                                  .L_lambda_opt_params_end_006f:
 11474 000075DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11475 000075DD 4889C3                  	mov rbx, rax
 11476 000075E0 58                      	pop rax
 11477 000075E1 C60004                  	mov byte [rax], T_closure
 11478 000075E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11479 000075E8 48C74009[F5750000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_006f
 11480 000075F0 E969030000              	jmp .L_lambda_opt_end_006f
 11481                                  .L_lambda_opt_code_006f:	; lambda-opt body
 11482 000075F5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11483 000075FB 0F8404010000            	je .L_lambda_opt_arity_check_exact_006f
 11484 00007601 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11485 00007607 7F0B                    	jg .L_lambda_opt_arity_check_more_006f
 11486 00007609 FF742410                	push qword [rsp + 8 * 2]
 11487 0000760D 6A01                    	push 1
 11488 0000760F E9C8EA0000              	jmp L_error_incorrect_arity_opt
 11489                                  .L_lambda_opt_arity_check_more_006f:
 11490 00007614 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 11491 00007619 41B901000000            	mov r9 , 1
 11492 0000761F 4989E7                  	mov r15, rsp
 11493 00007622 4D29C8                  	sub r8, r9
 11494 00007625 41B900000000            	mov r9, 0
 11495 0000762B 498D5F10                	lea rbx, [r15 + 8 * 2]
 11496 0000762F 498B4710                	mov rax, qword [r15 + 8 * 2]
 11497 00007633 486BC008                	imul rax, 8
 11498 00007637 4801C3                  	add rbx, rax
 11499 0000763A 488B13                  	mov rdx , qword [rbx]
 11500 0000763D 4989DA                  	mov r10 , rbx
 11501 00007640 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 11502 00007645 52                      	push rdx
 11503 00007646 53                      	push rbx
 11504 00007647 4150                    	push r8
 11505 00007649 4151                    	push r9
 11506 0000764B 4152                    	push r10
 11507 0000764D 4157                    	push r15
 11508 0000764F E8BBEA0000              	call malloc
 11509 00007654 415F                    	pop r15
 11510 00007656 415A                    	pop r10
 11511 00007658 4159                    	pop r9
 11512 0000765A 4158                    	pop r8
 11513 0000765C 5B                      	pop rbx
 11514 0000765D 5A                      	pop rdx
 11515 0000765E C60021                  	mov byte qword [rax], T_pair
 11516 00007661 48895001                	mov SOB_PAIR_CAR(rax), rdx
 11517 00007665 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 11518 0000766D 498902                  	mov qword [r10], rax
 11519 00007670 49FFC1                  	inc r9
 11520 00007673 4883EB08                	sub rbx, 8
 11521 00007677 4D39C1                  	cmp r9, r8
 11522 0000767A 743E                    	je .L_lambda_opt_stack_shrink_loop_0229
 11523                                  .L_lambda_opt_stack_shrink_loop_0228:
 11524 0000767C 488B13                  	mov rdx, qword [rbx]
 11525 0000767F 53                      	push rbx
 11526 00007680 4150                    	push r8
 11527 00007682 4151                    	push r9
 11528 00007684 4152                    	push r10
 11529 00007686 4157                    	push r15
 11530 00007688 52                      	push rdx
 11531 00007689 BF11000000              	mov rdi, (1 + 8 + 8)
 11532 0000768E E87CEA0000              	call malloc
 11533 00007693 5A                      	pop rdx
 11534 00007694 415F                    	pop r15
 11535 00007696 415A                    	pop r10
 11536 00007698 4159                    	pop r9
 11537 0000769A 4158                    	pop r8
 11538 0000769C 5B                      	pop rbx
 11539 0000769D C60021                  	mov byte [rax], T_pair
 11540 000076A0 48895001                	mov SOB_PAIR_CAR(rax), rdx
 11541 000076A4 4D8B32                  	mov r14, qword [r10]
 11542 000076A7 4C897009                	mov SOB_PAIR_CDR(rax), r14
 11543 000076AB 498902                  	mov qword [r10], rax
 11544 000076AE 49FFC1                  	inc r9
 11545 000076B1 4883EB08                	sub rbx, 8
 11546 000076B5 4D39C1                  	cmp r9, r8
 11547 000076B8 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_0228
 11548                                  .L_lambda_opt_stack_shrink_loop_0229:
 11549 000076BA 498D5710                	lea rdx, [r15 + 8 * 2]
 11550 000076BE 48C70201000000          	mov qword [rdx], 1
 11551 000076C5 48830201                	add qword [rdx] , 1
 11552 000076C9 4D89C1                  	mov r9, r8
 11553 000076CC 49FFC9                  	dec r9
 11554 000076CF 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 11555                                  .L_lambda_opt_stack_shrink_loop_022a:
 11556 000076D3 488B03                  	mov rax, qword [rbx]
 11557 000076D6 498901                  	mov qword [r9], rax
 11558 000076D9 4983E908                	sub r9 , 8
 11559 000076DD 4883EB08                	sub rbx, 8
 11560 000076E1 4C39FB                  	cmp rbx, r15
 11561 000076E4 75ED                    	jne .L_lambda_opt_stack_shrink_loop_022a
 11562 000076E6 488B03                  	mov rax, qword [rbx]
 11563 000076E9 498901                  	mov qword [r9], rax
 11564 000076EC 4D89C1                  	mov r9, r8
 11565 000076EF 4983E901                	sub r9 , 1
 11566 000076F3 4983F900                	cmp r9, 0
 11567 000076F7 7446                    je .L_lambda_opt_stack_adjusted_006f
 11568                                  .L_lambda_opt_stack_shrink_loop_022b:
 11569 000076F9 58                      	pop rax
 11570 000076FA 49FFC9                  	dec r9
 11571 000076FD 4983F900                	cmp r9, 0
 11572 00007701 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_022b
 11573 00007703 EB3A                    jmp .L_lambda_opt_stack_adjusted_006f
 11574                                  .L_lambda_opt_arity_check_exact_006f:
 11575 00007705 4989E7                  	mov r15, rsp
 11576 00007708 498D5F18                	lea rbx, [r15 + 8 * 2 + 8 * 1]
 11577 0000770C 488B0B                  	mov rcx, qword [rbx]
 11578 0000770F 48C703[01000000]        	mov qword [rbx], sob_nil
 11579 00007716 4883EB08                	sub rbx, 8
 11580                                  .L_lambda_opt_stack_shrink_loop_0227:
 11581 0000771A 488B13                  	mov rdx, qword [rbx]
 11582 0000771D 48890B                  	mov qword [rbx], rcx
 11583 00007720 4C39FB                  	cmp rbx, r15
 11584 00007723 7409                    je .L_lambda_opt_stack_shrink_loop_exit_006f
 11585 00007725 4889D1                  	mov rcx, rdx
 11586 00007728 4883EB08                	sub rbx, 8
 11587 0000772C EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_0227
 11588                                  .L_lambda_opt_stack_shrink_loop_exit_006f:
 11589 0000772E 52                      	push rdx
 11590 0000772F 4989E7                  	mov r15, rsp
 11591 00007732 4983C710                	add r15, 16
 11592 00007736 498B1F                  	mov rbx, qword [r15]
 11593 00007739 48FFC3                  	inc rbx
 11594 0000773C 49891F                  	mov qword [r15], rbx
 11595                                  .L_lambda_opt_stack_adjusted_006f:
 11596 0000773F C8000000                	enter 0, 0
 11597                                  	; preparing a non tail-call
 11598 00007743 488B4528                	mov rax, PARAM(1)	; param s
 11599 00007747 50                      	push rax
 11600 00007748 6A01                    	push 1	; arg count
 11601 0000774A 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 11602 00007752 803805                  	cmp byte [rax], T_undefined
 11603 00007755 0F8487E80000            	je L_error_fvar_undefined
 11604 0000775B 803804                  	cmp byte [rax], T_closure
 11605 0000775E 0F8502E90000            	jne L_error_non_closure
 11606 00007764 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11607 00007767 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11608 0000776A 483D[02000000]          	cmp rax, sob_boolean_false
 11609 00007770 7466                    	je .L_if_else_0243
 11610                                  	; preparing a tail-call
 11611 00007772 488B4520                	mov rax, PARAM(0)	; param a
 11612 00007776 50                      	push rax
 11613 00007777 48B8-                   	mov rax, L_constants + 2023
 11613 00007779 [E707000000000000] 
 11614 00007781 50                      	push rax
 11615 00007782 6A02                    	push 2	; arg count
 11616 00007784 488B4510                	mov rax, ENV
 11617 00007788 488B00                  	mov rax, qword [rax + 8 * 0]
 11618 0000778B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 11619 0000778E 803804                  	cmp byte [rax], T_closure
 11620 00007791 0F85CFE80000            	jne L_error_non_closure
 11621 00007797 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11622                                  
 11623                                  	; recycling the current frame
 11624 0000779A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11625 0000779D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11626 000077A0 B906000000              	mov rcx, 2 + 4
 11627 000077A5 488B5D18                	mov rbx, COUNT
 11628 000077A9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11629 000077AE 488D55F8                	lea rdx, [rbp - 8 * 1]
 11630                                  .L_tc_recycle_frame_loop_042a:
 11631 000077B2 4883F900                	cmp rcx, 0
 11632 000077B6 7413                    	je .L_tc_recycle_frame_done_042a
 11633 000077B8 488B32                  	mov rsi, qword [rdx]
 11634 000077BB 488933                  	mov qword [rbx], rsi
 11635 000077BE 48FFC9                  	dec rcx
 11636 000077C1 4883EB08                	sub rbx, 8 * 1
 11637 000077C5 4883EA08                	sub rdx, 8 * 1
 11638 000077C9 EBE7                    	jmp .L_tc_recycle_frame_loop_042a
 11639                                  .L_tc_recycle_frame_done_042a:
 11640 000077CB 488D6308                	lea rsp, [rbx + 8 * 1]
 11641 000077CF 5D                      	pop rbp	; the proc will restore it!
 11642 000077D0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11643 000077D3 E982010000              	jmp .L_if_end_0243
 11644                                  .L_if_else_0243:
 11645                                  	; preparing a tail-call
 11646                                  	; preparing a non tail-call
 11647 000077D8 488B4528                	mov rax, PARAM(1)	; param s
 11648 000077DC 50                      	push rax
 11649 000077DD 48B8-                   	mov rax, L_constants + 2023
 11649 000077DF [E707000000000000] 
 11650 000077E7 50                      	push rax
 11651 000077E8 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 11652 000077F0 803805                  	cmp byte [rax], T_undefined
 11653 000077F3 0F84E9E70000            	je L_error_fvar_undefined
 11654 000077F9 50                      	push rax
 11655 000077FA 6A03                    	push 3	; arg count
 11656 000077FC 488B0425[18150000]      	mov rax, qword [free_var_112]	; free var fold-left
 11657 00007804 803805                  	cmp byte [rax], T_undefined
 11658 00007807 0F84D5E70000            	je L_error_fvar_undefined
 11659 0000780D 803804                  	cmp byte [rax], T_closure
 11660 00007810 0F8550E80000            	jne L_error_non_closure
 11661 00007816 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11662 00007819 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11663 0000781C 50                      	push rax
 11664 0000781D 6A01                    	push 1	; arg count
 11665 0000781F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11666 00007824 E8E6E80000              	call malloc
 11667 00007829 50                      	push rax
 11668 0000782A BF10000000              	mov rdi, 8 * 2	; new rib
 11669 0000782F E8DBE80000              	call malloc
 11670 00007834 50                      	push rax
 11671 00007835 BF20000000              	mov rdi, 8 * 4	; extended env
 11672 0000783A E8D0E80000              	call malloc
 11673 0000783F 488B7D10                	mov rdi, ENV
 11674 00007843 BE00000000              	mov rsi, 0
 11675 00007848 BA01000000              	mov rdx, 1
 11676                                  .L_lambda_simple_env_loop_032f:	; ext_env[i + 1] <-- env[i]
 11677 0000784D 4883FE03                	cmp rsi, 3
 11678 00007851 7410                    	je .L_lambda_simple_env_end_032f
 11679 00007853 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11680 00007857 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11681 0000785B 48FFC6                  	inc rsi
 11682 0000785E 48FFC2                  	inc rdx
 11683 00007861 EBEA                    	jmp .L_lambda_simple_env_loop_032f
 11684                                  .L_lambda_simple_env_end_032f:
 11685 00007863 5B                      	pop rbx
 11686 00007864 BE00000000              	mov rsi, 0
 11687                                  .L_lambda_simple_params_loop_032f:	; copy params
 11688 00007869 4883FE02                	cmp rsi, 2
 11689 0000786D 740E                    	je .L_lambda_simple_params_end_032f
 11690 0000786F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11691 00007874 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11692 00007878 48FFC6                  	inc rsi
 11693 0000787B EBEC                    	jmp .L_lambda_simple_params_loop_032f
 11694                                  .L_lambda_simple_params_end_032f:
 11695 0000787D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11696 00007880 4889C3                  	mov rbx, rax
 11697 00007883 58                      	pop rax
 11698 00007884 C60004                  	mov byte [rax], T_closure
 11699 00007887 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11700 0000788B 48C74009[98780000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_032f
 11701 00007893 E97D000000              	jmp .L_lambda_simple_end_032f
 11702                                  .L_lambda_simple_code_032f:	; lambda-simple body
 11703 00007898 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11704 0000789E 740B                    	je .L_lambda_simple_arity_check_ok_032f
 11705 000078A0 FF742410                	push qword [rsp + 8 * 2]
 11706 000078A4 6A01                    	push 1
 11707 000078A6 E91DE80000              	jmp L_error_incorrect_arity_simple
 11708                                  .L_lambda_simple_arity_check_ok_032f:
 11709 000078AB C8000000                	enter 0, 0
 11710                                  	; preparing a tail-call
 11711 000078AF 488B4520                	mov rax, PARAM(0)	; param b
 11712 000078B3 50                      	push rax
 11713 000078B4 488B4510                	mov rax, ENV
 11714 000078B8 488B00                  	mov rax, qword [rax + 8 * 0]
 11715 000078BB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 11716 000078BE 50                      	push rax
 11717 000078BF 6A02                    	push 2	; arg count
 11718 000078C1 488B4510                	mov rax, ENV
 11719 000078C5 488B4008                	mov rax, qword [rax + 8 * 1]
 11720 000078C9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 11721 000078CC 803804                  	cmp byte [rax], T_closure
 11722 000078CF 0F8591E70000            	jne L_error_non_closure
 11723 000078D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11724                                  
 11725                                  	; recycling the current frame
 11726 000078D8 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11727 000078DB FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11728 000078DE B906000000              	mov rcx, 2 + 4
 11729 000078E3 488B5D18                	mov rbx, COUNT
 11730 000078E7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11731 000078EC 488D55F8                	lea rdx, [rbp - 8 * 1]
 11732                                  .L_tc_recycle_frame_loop_042b:
 11733 000078F0 4883F900                	cmp rcx, 0
 11734 000078F4 7413                    	je .L_tc_recycle_frame_done_042b
 11735 000078F6 488B32                  	mov rsi, qword [rdx]
 11736 000078F9 488933                  	mov qword [rbx], rsi
 11737 000078FC 48FFC9                  	dec rcx
 11738 000078FF 4883EB08                	sub rbx, 8 * 1
 11739 00007903 4883EA08                	sub rdx, 8 * 1
 11740 00007907 EBE7                    	jmp .L_tc_recycle_frame_loop_042b
 11741                                  .L_tc_recycle_frame_done_042b:
 11742 00007909 488D6308                	lea rsp, [rbx + 8 * 1]
 11743 0000790D 5D                      	pop rbp	; the proc will restore it!
 11744 0000790E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11745 00007911 C9                      	leave
 11746 00007912 C21800                  	ret AND_KILL_FRAME(1)
 11747                                  .L_lambda_simple_end_032f:	; new closure is in rax
 11748 00007915 803804                  	cmp byte [rax], T_closure
 11749 00007918 0F8548E70000            	jne L_error_non_closure
 11750 0000791E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11751                                  
 11752                                  	; recycling the current frame
 11753 00007921 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11754 00007924 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11755 00007927 B905000000              	mov rcx, 1 + 4
 11756 0000792C 488B5D18                	mov rbx, COUNT
 11757 00007930 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11758 00007935 488D55F8                	lea rdx, [rbp - 8 * 1]
 11759                                  .L_tc_recycle_frame_loop_042c:
 11760 00007939 4883F900                	cmp rcx, 0
 11761 0000793D 7413                    	je .L_tc_recycle_frame_done_042c
 11762 0000793F 488B32                  	mov rsi, qword [rdx]
 11763 00007942 488933                  	mov qword [rbx], rsi
 11764 00007945 48FFC9                  	dec rcx
 11765 00007948 4883EB08                	sub rbx, 8 * 1
 11766 0000794C 4883EA08                	sub rdx, 8 * 1
 11767 00007950 EBE7                    	jmp .L_tc_recycle_frame_loop_042c
 11768                                  .L_tc_recycle_frame_done_042c:
 11769 00007952 488D6308                	lea rsp, [rbx + 8 * 1]
 11770 00007956 5D                      	pop rbp	; the proc will restore it!
 11771 00007957 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11772                                  .L_if_end_0243:
 11773 0000795A C9                      	leave
 11774 0000795B C22000                  	ret AND_KILL_FRAME(2)
 11775                                  .L_lambda_opt_end_006f:	; new closure is in rax
 11776 0000795E C9                      	leave
 11777 0000795F C21800                  	ret AND_KILL_FRAME(1)
 11778                                  .L_lambda_simple_end_032e:	; new closure is in rax
 11779 00007962 803804                  	cmp byte [rax], T_closure
 11780 00007965 0F85FBE60000            	jne L_error_non_closure
 11781 0000796B FF7001                  	push SOB_CLOSURE_ENV(rax)
 11782                                  
 11783                                  	; recycling the current frame
 11784 0000796E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11785 00007971 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11786 00007974 B905000000              	mov rcx, 1 + 4
 11787 00007979 488B5D18                	mov rbx, COUNT
 11788 0000797D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11789 00007982 488D55F8                	lea rdx, [rbp - 8 * 1]
 11790                                  .L_tc_recycle_frame_loop_042d:
 11791 00007986 4883F900                	cmp rcx, 0
 11792 0000798A 7413                    	je .L_tc_recycle_frame_done_042d
 11793 0000798C 488B32                  	mov rsi, qword [rdx]
 11794 0000798F 488933                  	mov qword [rbx], rsi
 11795 00007992 48FFC9                  	dec rcx
 11796 00007995 4883EB08                	sub rbx, 8 * 1
 11797 00007999 4883EA08                	sub rdx, 8 * 1
 11798 0000799D EBE7                    	jmp .L_tc_recycle_frame_loop_042d
 11799                                  .L_tc_recycle_frame_done_042d:
 11800 0000799F 488D6308                	lea rsp, [rbx + 8 * 1]
 11801 000079A3 5D                      	pop rbp	; the proc will restore it!
 11802 000079A4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11803 000079A7 C9                      	leave
 11804 000079A8 C21800                  	ret AND_KILL_FRAME(1)
 11805                                  .L_lambda_simple_end_032c:	; new closure is in rax
 11806 000079AB 803804                  	cmp byte [rax], T_closure
 11807 000079AE 0F85B2E60000            	jne L_error_non_closure
 11808 000079B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11809 000079B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11810 000079BA 48890425[6D150000]      	mov qword [free_var_117], rax
 11811 000079C2 48B8-                   	mov rax, sob_void
 11811 000079C4 [0000000000000000] 
 11812                                  
 11813 000079CC 4889C7                  	mov rdi, rax
 11814 000079CF E84DE80000              	call print_sexpr_if_not_void
 11815                                  
 11816                                  	; preparing a non tail-call
 11817 000079D4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11818 000079D9 E831E70000              	call malloc
 11819 000079DE 50                      	push rax
 11820 000079DF BF00000000              	mov rdi, 8 * 0	; new rib
 11821 000079E4 E826E70000              	call malloc
 11822 000079E9 50                      	push rax
 11823 000079EA BF08000000              	mov rdi, 8 * 1	; extended env
 11824 000079EF E81BE70000              	call malloc
 11825 000079F4 488B7D10                	mov rdi, ENV
 11826 000079F8 BE00000000              	mov rsi, 0
 11827 000079FD BA01000000              	mov rdx, 1
 11828                                  .L_lambda_simple_env_loop_0330:	; ext_env[i + 1] <-- env[i]
 11829 00007A02 4883FE00                	cmp rsi, 0
 11830 00007A06 7410                    	je .L_lambda_simple_env_end_0330
 11831 00007A08 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11832 00007A0C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11833 00007A10 48FFC6                  	inc rsi
 11834 00007A13 48FFC2                  	inc rdx
 11835 00007A16 EBEA                    	jmp .L_lambda_simple_env_loop_0330
 11836                                  .L_lambda_simple_env_end_0330:
 11837 00007A18 5B                      	pop rbx
 11838 00007A19 BE00000000              	mov rsi, 0
 11839                                  .L_lambda_simple_params_loop_0330:	; copy params
 11840 00007A1E 4883FE00                	cmp rsi, 0
 11841 00007A22 740E                    	je .L_lambda_simple_params_end_0330
 11842 00007A24 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11843 00007A29 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11844 00007A2D 48FFC6                  	inc rsi
 11845 00007A30 EBEC                    	jmp .L_lambda_simple_params_loop_0330
 11846                                  .L_lambda_simple_params_end_0330:
 11847 00007A32 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11848 00007A35 4889C3                  	mov rbx, rax
 11849 00007A38 58                      	pop rax
 11850 00007A39 C60004                  	mov byte [rax], T_closure
 11851 00007A3C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11852 00007A40 48C74009[4D7A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0330
 11853 00007A48 E989000000              	jmp .L_lambda_simple_end_0330
 11854                                  .L_lambda_simple_code_0330:	; lambda-simple body
 11855 00007A4D 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11856 00007A53 740B                    	je .L_lambda_simple_arity_check_ok_0330
 11857 00007A55 FF742410                	push qword [rsp + 8 * 2]
 11858 00007A59 6A00                    	push 0
 11859 00007A5B E968E60000              	jmp L_error_incorrect_arity_simple
 11860                                  .L_lambda_simple_arity_check_ok_0330:
 11861 00007A60 C8000000                	enter 0, 0
 11862                                  	; preparing a tail-call
 11863 00007A64 48B8-                   	mov rax, L_constants + 2075
 11863 00007A66 [1B08000000000000] 
 11864 00007A6E 50                      	push rax
 11865 00007A6F 48B8-                   	mov rax, L_constants + 2167
 11865 00007A71 [7708000000000000] 
 11866 00007A79 50                      	push rax
 11867 00007A7A 6A02                    	push 2	; arg count
 11868 00007A7C 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
 11869 00007A84 803805                  	cmp byte [rax], T_undefined
 11870 00007A87 0F8455E50000            	je L_error_fvar_undefined
 11871 00007A8D 803804                  	cmp byte [rax], T_closure
 11872 00007A90 0F85D0E50000            	jne L_error_non_closure
 11873 00007A96 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11874                                  
 11875                                  	; recycling the current frame
 11876 00007A99 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11877 00007A9C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11878 00007A9F B906000000              	mov rcx, 2 + 4
 11879 00007AA4 488B5D18                	mov rbx, COUNT
 11880 00007AA8 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11881 00007AAD 488D55F8                	lea rdx, [rbp - 8 * 1]
 11882                                  .L_tc_recycle_frame_loop_042e:
 11883 00007AB1 4883F900                	cmp rcx, 0
 11884 00007AB5 7413                    	je .L_tc_recycle_frame_done_042e
 11885 00007AB7 488B32                  	mov rsi, qword [rdx]
 11886 00007ABA 488933                  	mov qword [rbx], rsi
 11887 00007ABD 48FFC9                  	dec rcx
 11888 00007AC0 4883EB08                	sub rbx, 8 * 1
 11889 00007AC4 4883EA08                	sub rdx, 8 * 1
 11890 00007AC8 EBE7                    	jmp .L_tc_recycle_frame_loop_042e
 11891                                  .L_tc_recycle_frame_done_042e:
 11892 00007ACA 488D6308                	lea rsp, [rbx + 8 * 1]
 11893 00007ACE 5D                      	pop rbp	; the proc will restore it!
 11894 00007ACF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11895 00007AD2 C9                      	leave
 11896 00007AD3 C21000                  	ret AND_KILL_FRAME(0)
 11897                                  .L_lambda_simple_end_0330:	; new closure is in rax
 11898 00007AD6 50                      	push rax
 11899 00007AD7 6A01                    	push 1	; arg count
 11900 00007AD9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11901 00007ADE E82CE60000              	call malloc
 11902 00007AE3 50                      	push rax
 11903 00007AE4 BF00000000              	mov rdi, 8 * 0	; new rib
 11904 00007AE9 E821E60000              	call malloc
 11905 00007AEE 50                      	push rax
 11906 00007AEF BF08000000              	mov rdi, 8 * 1	; extended env
 11907 00007AF4 E816E60000              	call malloc
 11908 00007AF9 488B7D10                	mov rdi, ENV
 11909 00007AFD BE00000000              	mov rsi, 0
 11910 00007B02 BA01000000              	mov rdx, 1
 11911                                  .L_lambda_simple_env_loop_0331:	; ext_env[i + 1] <-- env[i]
 11912 00007B07 4883FE00                	cmp rsi, 0
 11913 00007B0B 7410                    	je .L_lambda_simple_env_end_0331
 11914 00007B0D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11915 00007B11 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11916 00007B15 48FFC6                  	inc rsi
 11917 00007B18 48FFC2                  	inc rdx
 11918 00007B1B EBEA                    	jmp .L_lambda_simple_env_loop_0331
 11919                                  .L_lambda_simple_env_end_0331:
 11920 00007B1D 5B                      	pop rbx
 11921 00007B1E BE00000000              	mov rsi, 0
 11922                                  .L_lambda_simple_params_loop_0331:	; copy params
 11923 00007B23 4883FE00                	cmp rsi, 0
 11924 00007B27 740E                    	je .L_lambda_simple_params_end_0331
 11925 00007B29 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11926 00007B2E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11927 00007B32 48FFC6                  	inc rsi
 11928 00007B35 EBEC                    	jmp .L_lambda_simple_params_loop_0331
 11929                                  .L_lambda_simple_params_end_0331:
 11930 00007B37 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11931 00007B3A 4889C3                  	mov rbx, rax
 11932 00007B3D 58                      	pop rax
 11933 00007B3E C60004                  	mov byte [rax], T_closure
 11934 00007B41 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11935 00007B45 48C74009[527B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0331
 11936 00007B4D E9D90B0000              	jmp .L_lambda_simple_end_0331
 11937                                  .L_lambda_simple_code_0331:	; lambda-simple body
 11938 00007B52 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11939 00007B58 740B                    	je .L_lambda_simple_arity_check_ok_0331
 11940 00007B5A FF742410                	push qword [rsp + 8 * 2]
 11941 00007B5E 6A01                    	push 1
 11942 00007B60 E963E50000              	jmp L_error_incorrect_arity_simple
 11943                                  .L_lambda_simple_arity_check_ok_0331:
 11944 00007B65 C8000000                	enter 0, 0
 11945                                  	; preparing a tail-call
 11946 00007B69 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11947 00007B6E E89CE50000              	call malloc
 11948 00007B73 50                      	push rax
 11949 00007B74 BF08000000              	mov rdi, 8 * 1	; new rib
 11950 00007B79 E891E50000              	call malloc
 11951 00007B7E 50                      	push rax
 11952 00007B7F BF10000000              	mov rdi, 8 * 2	; extended env
 11953 00007B84 E886E50000              	call malloc
 11954 00007B89 488B7D10                	mov rdi, ENV
 11955 00007B8D BE00000000              	mov rsi, 0
 11956 00007B92 BA01000000              	mov rdx, 1
 11957                                  .L_lambda_simple_env_loop_0332:	; ext_env[i + 1] <-- env[i]
 11958 00007B97 4883FE01                	cmp rsi, 1
 11959 00007B9B 7410                    	je .L_lambda_simple_env_end_0332
 11960 00007B9D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11961 00007BA1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11962 00007BA5 48FFC6                  	inc rsi
 11963 00007BA8 48FFC2                  	inc rdx
 11964 00007BAB EBEA                    	jmp .L_lambda_simple_env_loop_0332
 11965                                  .L_lambda_simple_env_end_0332:
 11966 00007BAD 5B                      	pop rbx
 11967 00007BAE BE00000000              	mov rsi, 0
 11968                                  .L_lambda_simple_params_loop_0332:	; copy params
 11969 00007BB3 4883FE01                	cmp rsi, 1
 11970 00007BB7 740E                    	je .L_lambda_simple_params_end_0332
 11971 00007BB9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11972 00007BBE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11973 00007BC2 48FFC6                  	inc rsi
 11974 00007BC5 EBEC                    	jmp .L_lambda_simple_params_loop_0332
 11975                                  .L_lambda_simple_params_end_0332:
 11976 00007BC7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11977 00007BCA 4889C3                  	mov rbx, rax
 11978 00007BCD 58                      	pop rax
 11979 00007BCE C60004                  	mov byte [rax], T_closure
 11980 00007BD1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11981 00007BD5 48C74009[E27B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0332
 11982 00007BDD E92B080000              	jmp .L_lambda_simple_end_0332
 11983                                  .L_lambda_simple_code_0332:	; lambda-simple body
 11984 00007BE2 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11985 00007BE8 740B                    	je .L_lambda_simple_arity_check_ok_0332
 11986 00007BEA FF742410                	push qword [rsp + 8 * 2]
 11987 00007BEE 6A02                    	push 2
 11988 00007BF0 E9D3E40000              	jmp L_error_incorrect_arity_simple
 11989                                  .L_lambda_simple_arity_check_ok_0332:
 11990 00007BF5 C8000000                	enter 0, 0
 11991                                  	; preparing a non tail-call
 11992 00007BF9 488B4520                	mov rax, PARAM(0)	; param a
 11993 00007BFD 50                      	push rax
 11994 00007BFE 6A01                    	push 1	; arg count
 11995 00007C00 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 11996 00007C08 803805                  	cmp byte [rax], T_undefined
 11997 00007C0B 0F84D1E30000            	je L_error_fvar_undefined
 11998 00007C11 803804                  	cmp byte [rax], T_closure
 11999 00007C14 0F854CE40000            	jne L_error_non_closure
 12000 00007C1A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12001 00007C1D FF5009                  	call SOB_CLOSURE_CODE(rax)
 12002 00007C20 483D[02000000]          	cmp rax, sob_boolean_false
 12003 00007C26 0F8463020000            	je .L_if_else_0244
 12004                                  	; preparing a non tail-call
 12005 00007C2C 488B4528                	mov rax, PARAM(1)	; param b
 12006 00007C30 50                      	push rax
 12007 00007C31 6A01                    	push 1	; arg count
 12008 00007C33 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 12009 00007C3B 803805                  	cmp byte [rax], T_undefined
 12010 00007C3E 0F849EE30000            	je L_error_fvar_undefined
 12011 00007C44 803804                  	cmp byte [rax], T_closure
 12012 00007C47 0F8519E40000            	jne L_error_non_closure
 12013 00007C4D FF7001                  	push SOB_CLOSURE_ENV(rax)
 12014 00007C50 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12015 00007C53 483D[02000000]          	cmp rax, sob_boolean_false
 12016 00007C59 7467                    	je .L_if_else_0245
 12017                                  	; preparing a tail-call
 12018 00007C5B 488B4528                	mov rax, PARAM(1)	; param b
 12019 00007C5F 50                      	push rax
 12020 00007C60 488B4520                	mov rax, PARAM(0)	; param a
 12021 00007C64 50                      	push rax
 12022 00007C65 6A02                    	push 2	; arg count
 12023 00007C67 488B0425[50100000]      	mov rax, qword [free_var_40]	; free var __bin-mul-zz
 12024 00007C6F 803805                  	cmp byte [rax], T_undefined
 12025 00007C72 0F846AE30000            	je L_error_fvar_undefined
 12026 00007C78 803804                  	cmp byte [rax], T_closure
 12027 00007C7B 0F85E5E30000            	jne L_error_non_closure
 12028 00007C81 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12029                                  
 12030                                  	; recycling the current frame
 12031 00007C84 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12032 00007C87 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12033 00007C8A B906000000              	mov rcx, 2 + 4
 12034 00007C8F 488B5D18                	mov rbx, COUNT
 12035 00007C93 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12036 00007C98 488D55F8                	lea rdx, [rbp - 8 * 1]
 12037                                  .L_tc_recycle_frame_loop_042f:
 12038 00007C9C 4883F900                	cmp rcx, 0
 12039 00007CA0 7413                    	je .L_tc_recycle_frame_done_042f
 12040 00007CA2 488B32                  	mov rsi, qword [rdx]
 12041 00007CA5 488933                  	mov qword [rbx], rsi
 12042 00007CA8 48FFC9                  	dec rcx
 12043 00007CAB 4883EB08                	sub rbx, 8 * 1
 12044 00007CAF 4883EA08                	sub rdx, 8 * 1
 12045 00007CB3 EBE7                    	jmp .L_tc_recycle_frame_loop_042f
 12046                                  .L_tc_recycle_frame_done_042f:
 12047 00007CB5 488D6308                	lea rsp, [rbx + 8 * 1]
 12048 00007CB9 5D                      	pop rbp	; the proc will restore it!
 12049 00007CBA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12050 00007CBD E9C8010000              	jmp .L_if_end_0245
 12051                                  .L_if_else_0245:
 12052                                  	; preparing a non tail-call
 12053 00007CC2 488B4528                	mov rax, PARAM(1)	; param b
 12054 00007CC6 50                      	push rax
 12055 00007CC7 6A01                    	push 1	; arg count
 12056 00007CC9 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 12057 00007CD1 803805                  	cmp byte [rax], T_undefined
 12058 00007CD4 0F8408E30000            	je L_error_fvar_undefined
 12059 00007CDA 803804                  	cmp byte [rax], T_closure
 12060 00007CDD 0F8583E30000            	jne L_error_non_closure
 12061 00007CE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12062 00007CE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12063 00007CE9 483D[02000000]          	cmp rax, sob_boolean_false
 12064 00007CEF 0F848A000000            	je .L_if_else_0246
 12065                                  	; preparing a tail-call
 12066 00007CF5 488B4528                	mov rax, PARAM(1)	; param b
 12067 00007CF9 50                      	push rax
 12068                                  	; preparing a non tail-call
 12069 00007CFA 488B4520                	mov rax, PARAM(0)	; param a
 12070 00007CFE 50                      	push rax
 12071 00007CFF 6A01                    	push 1	; arg count
 12072 00007D01 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 12073 00007D09 803805                  	cmp byte [rax], T_undefined
 12074 00007D0C 0F84D0E20000            	je L_error_fvar_undefined
 12075 00007D12 803804                  	cmp byte [rax], T_closure
 12076 00007D15 0F854BE30000            	jne L_error_non_closure
 12077 00007D1B FF7001                  	push SOB_CLOSURE_ENV(rax)
 12078 00007D1E FF5009                  	call SOB_CLOSURE_CODE(rax)
 12079 00007D21 50                      	push rax
 12080 00007D22 6A02                    	push 2	; arg count
 12081 00007D24 488B0425[0C100000]      	mov rax, qword [free_var_36]	; free var __bin-mul-qq
 12082 00007D2C 803805                  	cmp byte [rax], T_undefined
 12083 00007D2F 0F84ADE20000            	je L_error_fvar_undefined
 12084 00007D35 803804                  	cmp byte [rax], T_closure
 12085 00007D38 0F8528E30000            	jne L_error_non_closure
 12086 00007D3E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12087                                  
 12088                                  	; recycling the current frame
 12089 00007D41 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12090 00007D44 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12091 00007D47 B906000000              	mov rcx, 2 + 4
 12092 00007D4C 488B5D18                	mov rbx, COUNT
 12093 00007D50 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12094 00007D55 488D55F8                	lea rdx, [rbp - 8 * 1]
 12095                                  .L_tc_recycle_frame_loop_0430:
 12096 00007D59 4883F900                	cmp rcx, 0
 12097 00007D5D 7413                    	je .L_tc_recycle_frame_done_0430
 12098 00007D5F 488B32                  	mov rsi, qword [rdx]
 12099 00007D62 488933                  	mov qword [rbx], rsi
 12100 00007D65 48FFC9                  	dec rcx
 12101 00007D68 4883EB08                	sub rbx, 8 * 1
 12102 00007D6C 4883EA08                	sub rdx, 8 * 1
 12103 00007D70 EBE7                    	jmp .L_tc_recycle_frame_loop_0430
 12104                                  .L_tc_recycle_frame_done_0430:
 12105 00007D72 488D6308                	lea rsp, [rbx + 8 * 1]
 12106 00007D76 5D                      	pop rbp	; the proc will restore it!
 12107 00007D77 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12108 00007D7A E90B010000              	jmp .L_if_end_0246
 12109                                  .L_if_else_0246:
 12110                                  	; preparing a non tail-call
 12111 00007D7F 488B4528                	mov rax, PARAM(1)	; param b
 12112 00007D83 50                      	push rax
 12113 00007D84 6A01                    	push 1	; arg count
 12114 00007D86 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 12115 00007D8E 803805                  	cmp byte [rax], T_undefined
 12116 00007D91 0F844BE20000            	je L_error_fvar_undefined
 12117 00007D97 803804                  	cmp byte [rax], T_closure
 12118 00007D9A 0F85C6E20000            	jne L_error_non_closure
 12119 00007DA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12120 00007DA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12121 00007DA6 483D[02000000]          	cmp rax, sob_boolean_false
 12122 00007DAC 0F8487000000            	je .L_if_else_0247
 12123                                  	; preparing a tail-call
 12124 00007DB2 488B4528                	mov rax, PARAM(1)	; param b
 12125 00007DB6 50                      	push rax
 12126                                  	; preparing a non tail-call
 12127 00007DB7 488B4520                	mov rax, PARAM(0)	; param a
 12128 00007DBB 50                      	push rax
 12129 00007DBC 6A01                    	push 1	; arg count
 12130 00007DBE 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 12131 00007DC6 803805                  	cmp byte [rax], T_undefined
 12132 00007DC9 0F8413E20000            	je L_error_fvar_undefined
 12133 00007DCF 803804                  	cmp byte [rax], T_closure
 12134 00007DD2 0F858EE20000            	jne L_error_non_closure
 12135 00007DD8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12136 00007DDB FF5009                  	call SOB_CLOSURE_CODE(rax)
 12137 00007DDE 50                      	push rax
 12138 00007DDF 6A02                    	push 2	; arg count
 12139 00007DE1 488B0425[C80F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 12140 00007DE9 803805                  	cmp byte [rax], T_undefined
 12141 00007DEC 0F84F0E10000            	je L_error_fvar_undefined
 12142 00007DF2 803804                  	cmp byte [rax], T_closure
 12143 00007DF5 0F856BE20000            	jne L_error_non_closure
 12144 00007DFB FF7001                  	push SOB_CLOSURE_ENV(rax)
 12145                                  
 12146                                  	; recycling the current frame
 12147 00007DFE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12148 00007E01 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12149 00007E04 B906000000              	mov rcx, 2 + 4
 12150 00007E09 488B5D18                	mov rbx, COUNT
 12151 00007E0D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12152 00007E12 488D55F8                	lea rdx, [rbp - 8 * 1]
 12153                                  .L_tc_recycle_frame_loop_0431:
 12154 00007E16 4883F900                	cmp rcx, 0
 12155 00007E1A 7413                    	je .L_tc_recycle_frame_done_0431
 12156 00007E1C 488B32                  	mov rsi, qword [rdx]
 12157 00007E1F 488933                  	mov qword [rbx], rsi
 12158 00007E22 48FFC9                  	dec rcx
 12159 00007E25 4883EB08                	sub rbx, 8 * 1
 12160 00007E29 4883EA08                	sub rdx, 8 * 1
 12161 00007E2D EBE7                    	jmp .L_tc_recycle_frame_loop_0431
 12162                                  .L_tc_recycle_frame_done_0431:
 12163 00007E2F 488D6308                	lea rsp, [rbx + 8 * 1]
 12164 00007E33 5D                      	pop rbp	; the proc will restore it!
 12165 00007E34 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12166 00007E37 EB51                    	jmp .L_if_end_0247
 12167                                  .L_if_else_0247:
 12168                                  	; preparing a tail-call
 12169 00007E39 6A00                    	push 0	; arg count
 12170 00007E3B 488B4510                	mov rax, ENV
 12171 00007E3F 488B00                  	mov rax, qword [rax + 8 * 0]
 12172 00007E42 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12173 00007E45 803804                  	cmp byte [rax], T_closure
 12174 00007E48 0F8518E20000            	jne L_error_non_closure
 12175 00007E4E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12176                                  
 12177                                  	; recycling the current frame
 12178 00007E51 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12179 00007E54 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12180 00007E57 B904000000              	mov rcx, 0 + 4
 12181 00007E5C 488B5D18                	mov rbx, COUNT
 12182 00007E60 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12183 00007E65 488D55F8                	lea rdx, [rbp - 8 * 1]
 12184                                  .L_tc_recycle_frame_loop_0432:
 12185 00007E69 4883F900                	cmp rcx, 0
 12186 00007E6D 7413                    	je .L_tc_recycle_frame_done_0432
 12187 00007E6F 488B32                  	mov rsi, qword [rdx]
 12188 00007E72 488933                  	mov qword [rbx], rsi
 12189 00007E75 48FFC9                  	dec rcx
 12190 00007E78 4883EB08                	sub rbx, 8 * 1
 12191 00007E7C 4883EA08                	sub rdx, 8 * 1
 12192 00007E80 EBE7                    	jmp .L_tc_recycle_frame_loop_0432
 12193                                  .L_tc_recycle_frame_done_0432:
 12194 00007E82 488D6308                	lea rsp, [rbx + 8 * 1]
 12195 00007E86 5D                      	pop rbp	; the proc will restore it!
 12196 00007E87 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12197                                  .L_if_end_0247:
 12198                                  .L_if_end_0246:
 12199                                  .L_if_end_0245:
 12200 00007E8A E97A050000              	jmp .L_if_end_0244
 12201                                  .L_if_else_0244:
 12202                                  	; preparing a non tail-call
 12203 00007E8F 488B4520                	mov rax, PARAM(0)	; param a
 12204 00007E93 50                      	push rax
 12205 00007E94 6A01                    	push 1	; arg count
 12206 00007E96 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 12207 00007E9E 803805                  	cmp byte [rax], T_undefined
 12208 00007EA1 0F843BE10000            	je L_error_fvar_undefined
 12209 00007EA7 803804                  	cmp byte [rax], T_closure
 12210 00007EAA 0F85B6E10000            	jne L_error_non_closure
 12211 00007EB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12212 00007EB3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12213 00007EB6 483D[02000000]          	cmp rax, sob_boolean_false
 12214 00007EBC 0F8463020000            	je .L_if_else_0248
 12215                                  	; preparing a non tail-call
 12216 00007EC2 488B4528                	mov rax, PARAM(1)	; param b
 12217 00007EC6 50                      	push rax
 12218 00007EC7 6A01                    	push 1	; arg count
 12219 00007EC9 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 12220 00007ED1 803805                  	cmp byte [rax], T_undefined
 12221 00007ED4 0F8408E10000            	je L_error_fvar_undefined
 12222 00007EDA 803804                  	cmp byte [rax], T_closure
 12223 00007EDD 0F8583E10000            	jne L_error_non_closure
 12224 00007EE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12225 00007EE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12226 00007EE9 483D[02000000]          	cmp rax, sob_boolean_false
 12227 00007EEF 0F848A000000            	je .L_if_else_0249
 12228                                  	; preparing a tail-call
 12229                                  	; preparing a non tail-call
 12230 00007EF5 488B4528                	mov rax, PARAM(1)	; param b
 12231 00007EF9 50                      	push rax
 12232 00007EFA 6A01                    	push 1	; arg count
 12233 00007EFC 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 12234 00007F04 803805                  	cmp byte [rax], T_undefined
 12235 00007F07 0F84D5E00000            	je L_error_fvar_undefined
 12236 00007F0D 803804                  	cmp byte [rax], T_closure
 12237 00007F10 0F8550E10000            	jne L_error_non_closure
 12238 00007F16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12239 00007F19 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12240 00007F1C 50                      	push rax
 12241 00007F1D 488B4520                	mov rax, PARAM(0)	; param a
 12242 00007F21 50                      	push rax
 12243 00007F22 6A02                    	push 2	; arg count
 12244 00007F24 488B0425[0C100000]      	mov rax, qword [free_var_36]	; free var __bin-mul-qq
 12245 00007F2C 803805                  	cmp byte [rax], T_undefined
 12246 00007F2F 0F84ADE00000            	je L_error_fvar_undefined
 12247 00007F35 803804                  	cmp byte [rax], T_closure
 12248 00007F38 0F8528E10000            	jne L_error_non_closure
 12249 00007F3E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12250                                  
 12251                                  	; recycling the current frame
 12252 00007F41 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12253 00007F44 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12254 00007F47 B906000000              	mov rcx, 2 + 4
 12255 00007F4C 488B5D18                	mov rbx, COUNT
 12256 00007F50 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12257 00007F55 488D55F8                	lea rdx, [rbp - 8 * 1]
 12258                                  .L_tc_recycle_frame_loop_0433:
 12259 00007F59 4883F900                	cmp rcx, 0
 12260 00007F5D 7413                    	je .L_tc_recycle_frame_done_0433
 12261 00007F5F 488B32                  	mov rsi, qword [rdx]
 12262 00007F62 488933                  	mov qword [rbx], rsi
 12263 00007F65 48FFC9                  	dec rcx
 12264 00007F68 4883EB08                	sub rbx, 8 * 1
 12265 00007F6C 4883EA08                	sub rdx, 8 * 1
 12266 00007F70 EBE7                    	jmp .L_tc_recycle_frame_loop_0433
 12267                                  .L_tc_recycle_frame_done_0433:
 12268 00007F72 488D6308                	lea rsp, [rbx + 8 * 1]
 12269 00007F76 5D                      	pop rbp	; the proc will restore it!
 12270 00007F77 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12271 00007F7A E9A1010000              	jmp .L_if_end_0249
 12272                                  .L_if_else_0249:
 12273                                  	; preparing a non tail-call
 12274 00007F7F 488B4528                	mov rax, PARAM(1)	; param b
 12275 00007F83 50                      	push rax
 12276 00007F84 6A01                    	push 1	; arg count
 12277 00007F86 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 12278 00007F8E 803805                  	cmp byte [rax], T_undefined
 12279 00007F91 0F844BE00000            	je L_error_fvar_undefined
 12280 00007F97 803804                  	cmp byte [rax], T_closure
 12281 00007F9A 0F85C6E00000            	jne L_error_non_closure
 12282 00007FA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12283 00007FA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12284 00007FA6 483D[02000000]          	cmp rax, sob_boolean_false
 12285 00007FAC 7467                    	je .L_if_else_024a
 12286                                  	; preparing a tail-call
 12287 00007FAE 488B4528                	mov rax, PARAM(1)	; param b
 12288 00007FB2 50                      	push rax
 12289 00007FB3 488B4520                	mov rax, PARAM(0)	; param a
 12290 00007FB7 50                      	push rax
 12291 00007FB8 6A02                    	push 2	; arg count
 12292 00007FBA 488B0425[0C100000]      	mov rax, qword [free_var_36]	; free var __bin-mul-qq
 12293 00007FC2 803805                  	cmp byte [rax], T_undefined
 12294 00007FC5 0F8417E00000            	je L_error_fvar_undefined
 12295 00007FCB 803804                  	cmp byte [rax], T_closure
 12296 00007FCE 0F8592E00000            	jne L_error_non_closure
 12297 00007FD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12298                                  
 12299                                  	; recycling the current frame
 12300 00007FD7 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12301 00007FDA FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12302 00007FDD B906000000              	mov rcx, 2 + 4
 12303 00007FE2 488B5D18                	mov rbx, COUNT
 12304 00007FE6 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12305 00007FEB 488D55F8                	lea rdx, [rbp - 8 * 1]
 12306                                  .L_tc_recycle_frame_loop_0434:
 12307 00007FEF 4883F900                	cmp rcx, 0
 12308 00007FF3 7413                    	je .L_tc_recycle_frame_done_0434
 12309 00007FF5 488B32                  	mov rsi, qword [rdx]
 12310 00007FF8 488933                  	mov qword [rbx], rsi
 12311 00007FFB 48FFC9                  	dec rcx
 12312 00007FFE 4883EB08                	sub rbx, 8 * 1
 12313 00008002 4883EA08                	sub rdx, 8 * 1
 12314 00008006 EBE7                    	jmp .L_tc_recycle_frame_loop_0434
 12315                                  .L_tc_recycle_frame_done_0434:
 12316 00008008 488D6308                	lea rsp, [rbx + 8 * 1]
 12317 0000800C 5D                      	pop rbp	; the proc will restore it!
 12318 0000800D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12319 00008010 E90B010000              	jmp .L_if_end_024a
 12320                                  .L_if_else_024a:
 12321                                  	; preparing a non tail-call
 12322 00008015 488B4528                	mov rax, PARAM(1)	; param b
 12323 00008019 50                      	push rax
 12324 0000801A 6A01                    	push 1	; arg count
 12325 0000801C 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 12326 00008024 803805                  	cmp byte [rax], T_undefined
 12327 00008027 0F84B5DF0000            	je L_error_fvar_undefined
 12328 0000802D 803804                  	cmp byte [rax], T_closure
 12329 00008030 0F8530E00000            	jne L_error_non_closure
 12330 00008036 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12331 00008039 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12332 0000803C 483D[02000000]          	cmp rax, sob_boolean_false
 12333 00008042 0F8487000000            	je .L_if_else_024b
 12334                                  	; preparing a tail-call
 12335 00008048 488B4528                	mov rax, PARAM(1)	; param b
 12336 0000804C 50                      	push rax
 12337                                  	; preparing a non tail-call
 12338 0000804D 488B4520                	mov rax, PARAM(0)	; param a
 12339 00008051 50                      	push rax
 12340 00008052 6A01                    	push 1	; arg count
 12341 00008054 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 12342 0000805C 803805                  	cmp byte [rax], T_undefined
 12343 0000805F 0F847DDF0000            	je L_error_fvar_undefined
 12344 00008065 803804                  	cmp byte [rax], T_closure
 12345 00008068 0F85F8DF0000            	jne L_error_non_closure
 12346 0000806E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12347 00008071 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12348 00008074 50                      	push rax
 12349 00008075 6A02                    	push 2	; arg count
 12350 00008077 488B0425[C80F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 12351 0000807F 803805                  	cmp byte [rax], T_undefined
 12352 00008082 0F845ADF0000            	je L_error_fvar_undefined
 12353 00008088 803804                  	cmp byte [rax], T_closure
 12354 0000808B 0F85D5DF0000            	jne L_error_non_closure
 12355 00008091 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12356                                  
 12357                                  	; recycling the current frame
 12358 00008094 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12359 00008097 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12360 0000809A B906000000              	mov rcx, 2 + 4
 12361 0000809F 488B5D18                	mov rbx, COUNT
 12362 000080A3 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12363 000080A8 488D55F8                	lea rdx, [rbp - 8 * 1]
 12364                                  .L_tc_recycle_frame_loop_0435:
 12365 000080AC 4883F900                	cmp rcx, 0
 12366 000080B0 7413                    	je .L_tc_recycle_frame_done_0435
 12367 000080B2 488B32                  	mov rsi, qword [rdx]
 12368 000080B5 488933                  	mov qword [rbx], rsi
 12369 000080B8 48FFC9                  	dec rcx
 12370 000080BB 4883EB08                	sub rbx, 8 * 1
 12371 000080BF 4883EA08                	sub rdx, 8 * 1
 12372 000080C3 EBE7                    	jmp .L_tc_recycle_frame_loop_0435
 12373                                  .L_tc_recycle_frame_done_0435:
 12374 000080C5 488D6308                	lea rsp, [rbx + 8 * 1]
 12375 000080C9 5D                      	pop rbp	; the proc will restore it!
 12376 000080CA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12377 000080CD EB51                    	jmp .L_if_end_024b
 12378                                  .L_if_else_024b:
 12379                                  	; preparing a tail-call
 12380 000080CF 6A00                    	push 0	; arg count
 12381 000080D1 488B4510                	mov rax, ENV
 12382 000080D5 488B00                  	mov rax, qword [rax + 8 * 0]
 12383 000080D8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12384 000080DB 803804                  	cmp byte [rax], T_closure
 12385 000080DE 0F8582DF0000            	jne L_error_non_closure
 12386 000080E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12387                                  
 12388                                  	; recycling the current frame
 12389 000080E7 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12390 000080EA FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12391 000080ED B904000000              	mov rcx, 0 + 4
 12392 000080F2 488B5D18                	mov rbx, COUNT
 12393 000080F6 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12394 000080FB 488D55F8                	lea rdx, [rbp - 8 * 1]
 12395                                  .L_tc_recycle_frame_loop_0436:
 12396 000080FF 4883F900                	cmp rcx, 0
 12397 00008103 7413                    	je .L_tc_recycle_frame_done_0436
 12398 00008105 488B32                  	mov rsi, qword [rdx]
 12399 00008108 488933                  	mov qword [rbx], rsi
 12400 0000810B 48FFC9                  	dec rcx
 12401 0000810E 4883EB08                	sub rbx, 8 * 1
 12402 00008112 4883EA08                	sub rdx, 8 * 1
 12403 00008116 EBE7                    	jmp .L_tc_recycle_frame_loop_0436
 12404                                  .L_tc_recycle_frame_done_0436:
 12405 00008118 488D6308                	lea rsp, [rbx + 8 * 1]
 12406 0000811C 5D                      	pop rbp	; the proc will restore it!
 12407 0000811D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12408                                  .L_if_end_024b:
 12409                                  .L_if_end_024a:
 12410                                  .L_if_end_0249:
 12411 00008120 E9E4020000              	jmp .L_if_end_0248
 12412                                  .L_if_else_0248:
 12413                                  	; preparing a non tail-call
 12414 00008125 488B4520                	mov rax, PARAM(0)	; param a
 12415 00008129 50                      	push rax
 12416 0000812A 6A01                    	push 1	; arg count
 12417 0000812C 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 12418 00008134 803805                  	cmp byte [rax], T_undefined
 12419 00008137 0F84A5DE0000            	je L_error_fvar_undefined
 12420 0000813D 803804                  	cmp byte [rax], T_closure
 12421 00008140 0F8520DF0000            	jne L_error_non_closure
 12422 00008146 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12423 00008149 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12424 0000814C 483D[02000000]          	cmp rax, sob_boolean_false
 12425 00008152 0F8460020000            	je .L_if_else_024c
 12426                                  	; preparing a non tail-call
 12427 00008158 488B4528                	mov rax, PARAM(1)	; param b
 12428 0000815C 50                      	push rax
 12429 0000815D 6A01                    	push 1	; arg count
 12430 0000815F 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 12431 00008167 803805                  	cmp byte [rax], T_undefined
 12432 0000816A 0F8472DE0000            	je L_error_fvar_undefined
 12433 00008170 803804                  	cmp byte [rax], T_closure
 12434 00008173 0F85EDDE0000            	jne L_error_non_closure
 12435 00008179 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12436 0000817C FF5009                  	call SOB_CLOSURE_CODE(rax)
 12437 0000817F 483D[02000000]          	cmp rax, sob_boolean_false
 12438 00008185 0F848A000000            	je .L_if_else_024d
 12439                                  	; preparing a tail-call
 12440                                  	; preparing a non tail-call
 12441 0000818B 488B4528                	mov rax, PARAM(1)	; param b
 12442 0000818F 50                      	push rax
 12443 00008190 6A01                    	push 1	; arg count
 12444 00008192 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 12445 0000819A 803805                  	cmp byte [rax], T_undefined
 12446 0000819D 0F843FDE0000            	je L_error_fvar_undefined
 12447 000081A3 803804                  	cmp byte [rax], T_closure
 12448 000081A6 0F85BADE0000            	jne L_error_non_closure
 12449 000081AC FF7001                  	push SOB_CLOSURE_ENV(rax)
 12450 000081AF FF5009                  	call SOB_CLOSURE_CODE(rax)
 12451 000081B2 50                      	push rax
 12452 000081B3 488B4520                	mov rax, PARAM(0)	; param a
 12453 000081B7 50                      	push rax
 12454 000081B8 6A02                    	push 2	; arg count
 12455 000081BA 488B0425[C80F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 12456 000081C2 803805                  	cmp byte [rax], T_undefined
 12457 000081C5 0F8417DE0000            	je L_error_fvar_undefined
 12458 000081CB 803804                  	cmp byte [rax], T_closure
 12459 000081CE 0F8592DE0000            	jne L_error_non_closure
 12460 000081D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12461                                  
 12462                                  	; recycling the current frame
 12463 000081D7 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12464 000081DA FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12465 000081DD B906000000              	mov rcx, 2 + 4
 12466 000081E2 488B5D18                	mov rbx, COUNT
 12467 000081E6 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12468 000081EB 488D55F8                	lea rdx, [rbp - 8 * 1]
 12469                                  .L_tc_recycle_frame_loop_0437:
 12470 000081EF 4883F900                	cmp rcx, 0
 12471 000081F3 7413                    	je .L_tc_recycle_frame_done_0437
 12472 000081F5 488B32                  	mov rsi, qword [rdx]
 12473 000081F8 488933                  	mov qword [rbx], rsi
 12474 000081FB 48FFC9                  	dec rcx
 12475 000081FE 4883EB08                	sub rbx, 8 * 1
 12476 00008202 4883EA08                	sub rdx, 8 * 1
 12477 00008206 EBE7                    	jmp .L_tc_recycle_frame_loop_0437
 12478                                  .L_tc_recycle_frame_done_0437:
 12479 00008208 488D6308                	lea rsp, [rbx + 8 * 1]
 12480 0000820C 5D                      	pop rbp	; the proc will restore it!
 12481 0000820D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12482 00008210 E9A1010000              	jmp .L_if_end_024d
 12483                                  .L_if_else_024d:
 12484                                  	; preparing a non tail-call
 12485 00008215 488B4528                	mov rax, PARAM(1)	; param b
 12486 00008219 50                      	push rax
 12487 0000821A 6A01                    	push 1	; arg count
 12488 0000821C 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 12489 00008224 803805                  	cmp byte [rax], T_undefined
 12490 00008227 0F84B5DD0000            	je L_error_fvar_undefined
 12491 0000822D 803804                  	cmp byte [rax], T_closure
 12492 00008230 0F8530DE0000            	jne L_error_non_closure
 12493 00008236 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12494 00008239 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12495 0000823C 483D[02000000]          	cmp rax, sob_boolean_false
 12496 00008242 0F848A000000            	je .L_if_else_024e
 12497                                  	; preparing a tail-call
 12498                                  	; preparing a non tail-call
 12499 00008248 488B4528                	mov rax, PARAM(1)	; param b
 12500 0000824C 50                      	push rax
 12501 0000824D 6A01                    	push 1	; arg count
 12502 0000824F 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 12503 00008257 803805                  	cmp byte [rax], T_undefined
 12504 0000825A 0F8482DD0000            	je L_error_fvar_undefined
 12505 00008260 803804                  	cmp byte [rax], T_closure
 12506 00008263 0F85FDDD0000            	jne L_error_non_closure
 12507 00008269 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12508 0000826C FF5009                  	call SOB_CLOSURE_CODE(rax)
 12509 0000826F 50                      	push rax
 12510 00008270 488B4520                	mov rax, PARAM(0)	; param a
 12511 00008274 50                      	push rax
 12512 00008275 6A02                    	push 2	; arg count
 12513 00008277 488B0425[C80F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 12514 0000827F 803805                  	cmp byte [rax], T_undefined
 12515 00008282 0F845ADD0000            	je L_error_fvar_undefined
 12516 00008288 803804                  	cmp byte [rax], T_closure
 12517 0000828B 0F85D5DD0000            	jne L_error_non_closure
 12518 00008291 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12519                                  
 12520                                  	; recycling the current frame
 12521 00008294 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12522 00008297 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12523 0000829A B906000000              	mov rcx, 2 + 4
 12524 0000829F 488B5D18                	mov rbx, COUNT
 12525 000082A3 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12526 000082A8 488D55F8                	lea rdx, [rbp - 8 * 1]
 12527                                  .L_tc_recycle_frame_loop_0438:
 12528 000082AC 4883F900                	cmp rcx, 0
 12529 000082B0 7413                    	je .L_tc_recycle_frame_done_0438
 12530 000082B2 488B32                  	mov rsi, qword [rdx]
 12531 000082B5 488933                  	mov qword [rbx], rsi
 12532 000082B8 48FFC9                  	dec rcx
 12533 000082BB 4883EB08                	sub rbx, 8 * 1
 12534 000082BF 4883EA08                	sub rdx, 8 * 1
 12535 000082C3 EBE7                    	jmp .L_tc_recycle_frame_loop_0438
 12536                                  .L_tc_recycle_frame_done_0438:
 12537 000082C5 488D6308                	lea rsp, [rbx + 8 * 1]
 12538 000082C9 5D                      	pop rbp	; the proc will restore it!
 12539 000082CA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12540 000082CD E9E4000000              	jmp .L_if_end_024e
 12541                                  .L_if_else_024e:
 12542                                  	; preparing a non tail-call
 12543 000082D2 488B4528                	mov rax, PARAM(1)	; param b
 12544 000082D6 50                      	push rax
 12545 000082D7 6A01                    	push 1	; arg count
 12546 000082D9 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 12547 000082E1 803805                  	cmp byte [rax], T_undefined
 12548 000082E4 0F84F8DC0000            	je L_error_fvar_undefined
 12549 000082EA 803804                  	cmp byte [rax], T_closure
 12550 000082ED 0F8573DD0000            	jne L_error_non_closure
 12551 000082F3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12552 000082F6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12553 000082F9 483D[02000000]          	cmp rax, sob_boolean_false
 12554 000082FF 7464                    	je .L_if_else_024f
 12555                                  	; preparing a tail-call
 12556 00008301 488B4528                	mov rax, PARAM(1)	; param b
 12557 00008305 50                      	push rax
 12558 00008306 488B4520                	mov rax, PARAM(0)	; param a
 12559 0000830A 50                      	push rax
 12560 0000830B 6A02                    	push 2	; arg count
 12561 0000830D 488B0425[C80F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 12562 00008315 803805                  	cmp byte [rax], T_undefined
 12563 00008318 0F84C4DC0000            	je L_error_fvar_undefined
 12564 0000831E 803804                  	cmp byte [rax], T_closure
 12565 00008321 0F853FDD0000            	jne L_error_non_closure
 12566 00008327 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12567                                  
 12568                                  	; recycling the current frame
 12569 0000832A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12570 0000832D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12571 00008330 B906000000              	mov rcx, 2 + 4
 12572 00008335 488B5D18                	mov rbx, COUNT
 12573 00008339 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12574 0000833E 488D55F8                	lea rdx, [rbp - 8 * 1]
 12575                                  .L_tc_recycle_frame_loop_0439:
 12576 00008342 4883F900                	cmp rcx, 0
 12577 00008346 7413                    	je .L_tc_recycle_frame_done_0439
 12578 00008348 488B32                  	mov rsi, qword [rdx]
 12579 0000834B 488933                  	mov qword [rbx], rsi
 12580 0000834E 48FFC9                  	dec rcx
 12581 00008351 4883EB08                	sub rbx, 8 * 1
 12582 00008355 4883EA08                	sub rdx, 8 * 1
 12583 00008359 EBE7                    	jmp .L_tc_recycle_frame_loop_0439
 12584                                  .L_tc_recycle_frame_done_0439:
 12585 0000835B 488D6308                	lea rsp, [rbx + 8 * 1]
 12586 0000835F 5D                      	pop rbp	; the proc will restore it!
 12587 00008360 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12588 00008363 EB51                    	jmp .L_if_end_024f
 12589                                  .L_if_else_024f:
 12590                                  	; preparing a tail-call
 12591 00008365 6A00                    	push 0	; arg count
 12592 00008367 488B4510                	mov rax, ENV
 12593 0000836B 488B00                  	mov rax, qword [rax + 8 * 0]
 12594 0000836E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12595 00008371 803804                  	cmp byte [rax], T_closure
 12596 00008374 0F85ECDC0000            	jne L_error_non_closure
 12597 0000837A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12598                                  
 12599                                  	; recycling the current frame
 12600 0000837D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12601 00008380 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12602 00008383 B904000000              	mov rcx, 0 + 4
 12603 00008388 488B5D18                	mov rbx, COUNT
 12604 0000838C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12605 00008391 488D55F8                	lea rdx, [rbp - 8 * 1]
 12606                                  .L_tc_recycle_frame_loop_043a:
 12607 00008395 4883F900                	cmp rcx, 0
 12608 00008399 7413                    	je .L_tc_recycle_frame_done_043a
 12609 0000839B 488B32                  	mov rsi, qword [rdx]
 12610 0000839E 488933                  	mov qword [rbx], rsi
 12611 000083A1 48FFC9                  	dec rcx
 12612 000083A4 4883EB08                	sub rbx, 8 * 1
 12613 000083A8 4883EA08                	sub rdx, 8 * 1
 12614 000083AC EBE7                    	jmp .L_tc_recycle_frame_loop_043a
 12615                                  .L_tc_recycle_frame_done_043a:
 12616 000083AE 488D6308                	lea rsp, [rbx + 8 * 1]
 12617 000083B2 5D                      	pop rbp	; the proc will restore it!
 12618 000083B3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12619                                  .L_if_end_024f:
 12620                                  .L_if_end_024e:
 12621                                  .L_if_end_024d:
 12622 000083B6 EB51                    	jmp .L_if_end_024c
 12623                                  .L_if_else_024c:
 12624                                  	; preparing a tail-call
 12625 000083B8 6A00                    	push 0	; arg count
 12626 000083BA 488B4510                	mov rax, ENV
 12627 000083BE 488B00                  	mov rax, qword [rax + 8 * 0]
 12628 000083C1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12629 000083C4 803804                  	cmp byte [rax], T_closure
 12630 000083C7 0F8599DC0000            	jne L_error_non_closure
 12631 000083CD FF7001                  	push SOB_CLOSURE_ENV(rax)
 12632                                  
 12633                                  	; recycling the current frame
 12634 000083D0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12635 000083D3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12636 000083D6 B904000000              	mov rcx, 0 + 4
 12637 000083DB 488B5D18                	mov rbx, COUNT
 12638 000083DF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12639 000083E4 488D55F8                	lea rdx, [rbp - 8 * 1]
 12640                                  .L_tc_recycle_frame_loop_043b:
 12641 000083E8 4883F900                	cmp rcx, 0
 12642 000083EC 7413                    	je .L_tc_recycle_frame_done_043b
 12643 000083EE 488B32                  	mov rsi, qword [rdx]
 12644 000083F1 488933                  	mov qword [rbx], rsi
 12645 000083F4 48FFC9                  	dec rcx
 12646 000083F7 4883EB08                	sub rbx, 8 * 1
 12647 000083FB 4883EA08                	sub rdx, 8 * 1
 12648 000083FF EBE7                    	jmp .L_tc_recycle_frame_loop_043b
 12649                                  .L_tc_recycle_frame_done_043b:
 12650 00008401 488D6308                	lea rsp, [rbx + 8 * 1]
 12651 00008405 5D                      	pop rbp	; the proc will restore it!
 12652 00008406 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12653                                  .L_if_end_024c:
 12654                                  .L_if_end_0248:
 12655                                  .L_if_end_0244:
 12656 00008409 C9                      	leave
 12657 0000840A C22000                  	ret AND_KILL_FRAME(2)
 12658                                  .L_lambda_simple_end_0332:	; new closure is in rax
 12659 0000840D 50                      	push rax
 12660 0000840E 6A01                    	push 1	; arg count
 12661 00008410 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12662 00008415 E8F5DC0000              	call malloc
 12663 0000841A 50                      	push rax
 12664 0000841B BF08000000              	mov rdi, 8 * 1	; new rib
 12665 00008420 E8EADC0000              	call malloc
 12666 00008425 50                      	push rax
 12667 00008426 BF10000000              	mov rdi, 8 * 2	; extended env
 12668 0000842B E8DFDC0000              	call malloc
 12669 00008430 488B7D10                	mov rdi, ENV
 12670 00008434 BE00000000              	mov rsi, 0
 12671 00008439 BA01000000              	mov rdx, 1
 12672                                  .L_lambda_simple_env_loop_0333:	; ext_env[i + 1] <-- env[i]
 12673 0000843E 4883FE01                	cmp rsi, 1
 12674 00008442 7410                    	je .L_lambda_simple_env_end_0333
 12675 00008444 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12676 00008448 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12677 0000844C 48FFC6                  	inc rsi
 12678 0000844F 48FFC2                  	inc rdx
 12679 00008452 EBEA                    	jmp .L_lambda_simple_env_loop_0333
 12680                                  .L_lambda_simple_env_end_0333:
 12681 00008454 5B                      	pop rbx
 12682 00008455 BE00000000              	mov rsi, 0
 12683                                  .L_lambda_simple_params_loop_0333:	; copy params
 12684 0000845A 4883FE01                	cmp rsi, 1
 12685 0000845E 740E                    	je .L_lambda_simple_params_end_0333
 12686 00008460 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12687 00008465 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12688 00008469 48FFC6                  	inc rsi
 12689 0000846C EBEC                    	jmp .L_lambda_simple_params_loop_0333
 12690                                  .L_lambda_simple_params_end_0333:
 12691 0000846E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12692 00008471 4889C3                  	mov rbx, rax
 12693 00008474 58                      	pop rax
 12694 00008475 C60004                  	mov byte [rax], T_closure
 12695 00008478 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12696 0000847C 48C74009[89840000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0333
 12697 00008484 E959020000              	jmp .L_lambda_simple_end_0333
 12698                                  .L_lambda_simple_code_0333:	; lambda-simple body
 12699 00008489 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12700 0000848F 740B                    	je .L_lambda_simple_arity_check_ok_0333
 12701 00008491 FF742410                	push qword [rsp + 8 * 2]
 12702 00008495 6A01                    	push 1
 12703 00008497 E92CDC0000              	jmp L_error_incorrect_arity_simple
 12704                                  .L_lambda_simple_arity_check_ok_0333:
 12705 0000849C C8000000                	enter 0, 0
 12706 000084A0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12707 000084A5 E865DC0000              	call malloc
 12708 000084AA 50                      	push rax
 12709 000084AB BF08000000              	mov rdi, 8 * 1	; new rib
 12710 000084B0 E85ADC0000              	call malloc
 12711 000084B5 50                      	push rax
 12712 000084B6 BF18000000              	mov rdi, 8 * 3	; extended env
 12713 000084BB E84FDC0000              	call malloc
 12714 000084C0 488B7D10                	mov rdi, ENV
 12715 000084C4 BE00000000              	mov rsi, 0
 12716 000084C9 BA01000000              	mov rdx, 1
 12717                                  .L_lambda_opt_env_loop_0070:	; ext_env[i + 1] <-- env[i]
 12718 000084CE 4883FE02                	cmp rsi, 2
 12719 000084D2 7410                    	je .L_lambda_opt_env_end_0070
 12720 000084D4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12721 000084D8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12722 000084DC 48FFC6                  	inc rsi
 12723 000084DF 48FFC2                  	inc rdx
 12724 000084E2 EBEA                    	jmp .L_lambda_opt_env_loop_0070
 12725                                  .L_lambda_opt_env_end_0070:
 12726 000084E4 5B                      	pop rbx
 12727 000084E5 BE00000000              	mov rsi, 0
 12728                                  .L_lambda_opt_params_loop_0070:	; copy params
 12729 000084EA 4883FE01                	cmp rsi, 1
 12730 000084EE 740E                    	je .L_lambda_opt_params_end_0070
 12731 000084F0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12732 000084F5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12733 000084F9 48FFC6                  	inc rsi
 12734 000084FC EBEC                    	jmp .L_lambda_opt_params_loop_0070
 12735                                  .L_lambda_opt_params_end_0070:
 12736 000084FE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12737 00008501 4889C3                  	mov rbx, rax
 12738 00008504 58                      	pop rax
 12739 00008505 C60004                  	mov byte [rax], T_closure
 12740 00008508 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12741 0000850C 48C74009[19850000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0070
 12742 00008514 E9C5010000              	jmp .L_lambda_opt_end_0070
 12743                                  .L_lambda_opt_code_0070:	; lambda-opt body
 12744 00008519 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12745 0000851F 0F8404010000            	je .L_lambda_opt_arity_check_exact_0070
 12746 00008525 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12747 0000852B 7F0B                    	jg .L_lambda_opt_arity_check_more_0070
 12748 0000852D FF742410                	push qword [rsp + 8 * 2]
 12749 00008531 6A00                    	push 0
 12750 00008533 E9A4DB0000              	jmp L_error_incorrect_arity_opt
 12751                                  .L_lambda_opt_arity_check_more_0070:
 12752 00008538 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 12753 0000853D 41B900000000            	mov r9 , 0
 12754 00008543 4989E7                  	mov r15, rsp
 12755 00008546 4D29C8                  	sub r8, r9
 12756 00008549 41B900000000            	mov r9, 0
 12757 0000854F 498D5F10                	lea rbx, [r15 + 8 * 2]
 12758 00008553 498B4710                	mov rax, qword [r15 + 8 * 2]
 12759 00008557 486BC008                	imul rax, 8
 12760 0000855B 4801C3                  	add rbx, rax
 12761 0000855E 488B13                  	mov rdx , qword [rbx]
 12762 00008561 4989DA                  	mov r10 , rbx
 12763 00008564 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 12764 00008569 52                      	push rdx
 12765 0000856A 53                      	push rbx
 12766 0000856B 4150                    	push r8
 12767 0000856D 4151                    	push r9
 12768 0000856F 4152                    	push r10
 12769 00008571 4157                    	push r15
 12770 00008573 E897DB0000              	call malloc
 12771 00008578 415F                    	pop r15
 12772 0000857A 415A                    	pop r10
 12773 0000857C 4159                    	pop r9
 12774 0000857E 4158                    	pop r8
 12775 00008580 5B                      	pop rbx
 12776 00008581 5A                      	pop rdx
 12777 00008582 C60021                  	mov byte qword [rax], T_pair
 12778 00008585 48895001                	mov SOB_PAIR_CAR(rax), rdx
 12779 00008589 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 12780 00008591 498902                  	mov qword [r10], rax
 12781 00008594 49FFC1                  	inc r9
 12782 00008597 4883EB08                	sub rbx, 8
 12783 0000859B 4D39C1                  	cmp r9, r8
 12784 0000859E 743E                    	je .L_lambda_opt_stack_shrink_loop_022e
 12785                                  .L_lambda_opt_stack_shrink_loop_022d:
 12786 000085A0 488B13                  	mov rdx, qword [rbx]
 12787 000085A3 53                      	push rbx
 12788 000085A4 4150                    	push r8
 12789 000085A6 4151                    	push r9
 12790 000085A8 4152                    	push r10
 12791 000085AA 4157                    	push r15
 12792 000085AC 52                      	push rdx
 12793 000085AD BF11000000              	mov rdi, (1 + 8 + 8)
 12794 000085B2 E858DB0000              	call malloc
 12795 000085B7 5A                      	pop rdx
 12796 000085B8 415F                    	pop r15
 12797 000085BA 415A                    	pop r10
 12798 000085BC 4159                    	pop r9
 12799 000085BE 4158                    	pop r8
 12800 000085C0 5B                      	pop rbx
 12801 000085C1 C60021                  	mov byte [rax], T_pair
 12802 000085C4 48895001                	mov SOB_PAIR_CAR(rax), rdx
 12803 000085C8 4D8B32                  	mov r14, qword [r10]
 12804 000085CB 4C897009                	mov SOB_PAIR_CDR(rax), r14
 12805 000085CF 498902                  	mov qword [r10], rax
 12806 000085D2 49FFC1                  	inc r9
 12807 000085D5 4883EB08                	sub rbx, 8
 12808 000085D9 4D39C1                  	cmp r9, r8
 12809 000085DC 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_022d
 12810                                  .L_lambda_opt_stack_shrink_loop_022e:
 12811 000085DE 498D5710                	lea rdx, [r15 + 8 * 2]
 12812 000085E2 48C70200000000          	mov qword [rdx], 0
 12813 000085E9 48830201                	add qword [rdx] , 1
 12814 000085ED 4D89C1                  	mov r9, r8
 12815 000085F0 49FFC9                  	dec r9
 12816 000085F3 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 12817                                  .L_lambda_opt_stack_shrink_loop_022f:
 12818 000085F7 488B03                  	mov rax, qword [rbx]
 12819 000085FA 498901                  	mov qword [r9], rax
 12820 000085FD 4983E908                	sub r9 , 8
 12821 00008601 4883EB08                	sub rbx, 8
 12822 00008605 4C39FB                  	cmp rbx, r15
 12823 00008608 75ED                    	jne .L_lambda_opt_stack_shrink_loop_022f
 12824 0000860A 488B03                  	mov rax, qword [rbx]
 12825 0000860D 498901                  	mov qword [r9], rax
 12826 00008610 4D89C1                  	mov r9, r8
 12827 00008613 4983E901                	sub r9 , 1
 12828 00008617 4983F900                	cmp r9, 0
 12829 0000861B 7446                    je .L_lambda_opt_stack_adjusted_0070
 12830                                  .L_lambda_opt_stack_shrink_loop_0230:
 12831 0000861D 58                      	pop rax
 12832 0000861E 49FFC9                  	dec r9
 12833 00008621 4983F900                	cmp r9, 0
 12834 00008625 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0230
 12835 00008627 EB3A                    jmp .L_lambda_opt_stack_adjusted_0070
 12836                                  .L_lambda_opt_arity_check_exact_0070:
 12837 00008629 4989E7                  	mov r15, rsp
 12838 0000862C 498D5F10                	lea rbx, [r15 + 8 * 2 + 8 * 0]
 12839 00008630 488B0B                  	mov rcx, qword [rbx]
 12840 00008633 48C703[01000000]        	mov qword [rbx], sob_nil
 12841 0000863A 4883EB08                	sub rbx, 8
 12842                                  .L_lambda_opt_stack_shrink_loop_022c:
 12843 0000863E 488B13                  	mov rdx, qword [rbx]
 12844 00008641 48890B                  	mov qword [rbx], rcx
 12845 00008644 4C39FB                  	cmp rbx, r15
 12846 00008647 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0070
 12847 00008649 4889D1                  	mov rcx, rdx
 12848 0000864C 4883EB08                	sub rbx, 8
 12849 00008650 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_022c
 12850                                  .L_lambda_opt_stack_shrink_loop_exit_0070:
 12851 00008652 52                      	push rdx
 12852 00008653 4989E7                  	mov r15, rsp
 12853 00008656 4983C710                	add r15, 16
 12854 0000865A 498B1F                  	mov rbx, qword [r15]
 12855 0000865D 48FFC3                  	inc rbx
 12856 00008660 49891F                  	mov qword [r15], rbx
 12857                                  .L_lambda_opt_stack_adjusted_0070:
 12858 00008663 C8000000                	enter 0, 0
 12859                                  	; preparing a tail-call
 12860 00008667 488B4520                	mov rax, PARAM(0)	; param s
 12861 0000866B 50                      	push rax
 12862 0000866C 48B8-                   	mov rax, L_constants + 2158
 12862 0000866E [6E08000000000000] 
 12863 00008676 50                      	push rax
 12864 00008677 488B4510                	mov rax, ENV
 12865 0000867B 488B00                  	mov rax, qword [rax + 8 * 0]
 12866 0000867E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin*
 12867 00008681 50                      	push rax
 12868 00008682 6A03                    	push 3	; arg count
 12869 00008684 488B0425[18150000]      	mov rax, qword [free_var_112]	; free var fold-left
 12870 0000868C 803805                  	cmp byte [rax], T_undefined
 12871 0000868F 0F844DD90000            	je L_error_fvar_undefined
 12872 00008695 803804                  	cmp byte [rax], T_closure
 12873 00008698 0F85C8D90000            	jne L_error_non_closure
 12874 0000869E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12875                                  
 12876                                  	; recycling the current frame
 12877 000086A1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12878 000086A4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12879 000086A7 B907000000              	mov rcx, 3 + 4
 12880 000086AC 488B5D18                	mov rbx, COUNT
 12881 000086B0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12882 000086B5 488D55F8                	lea rdx, [rbp - 8 * 1]
 12883                                  .L_tc_recycle_frame_loop_043c:
 12884 000086B9 4883F900                	cmp rcx, 0
 12885 000086BD 7413                    	je .L_tc_recycle_frame_done_043c
 12886 000086BF 488B32                  	mov rsi, qword [rdx]
 12887 000086C2 488933                  	mov qword [rbx], rsi
 12888 000086C5 48FFC9                  	dec rcx
 12889 000086C8 4883EB08                	sub rbx, 8 * 1
 12890 000086CC 4883EA08                	sub rdx, 8 * 1
 12891 000086D0 EBE7                    	jmp .L_tc_recycle_frame_loop_043c
 12892                                  .L_tc_recycle_frame_done_043c:
 12893 000086D2 488D6308                	lea rsp, [rbx + 8 * 1]
 12894 000086D6 5D                      	pop rbp	; the proc will restore it!
 12895 000086D7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12896 000086DA C9                      	leave
 12897 000086DB C21800                  	ret AND_KILL_FRAME(1)
 12898                                  .L_lambda_opt_end_0070:	; new closure is in rax
 12899 000086DE C9                      	leave
 12900 000086DF C21800                  	ret AND_KILL_FRAME(1)
 12901                                  .L_lambda_simple_end_0333:	; new closure is in rax
 12902 000086E2 803804                  	cmp byte [rax], T_closure
 12903 000086E5 0F857BD90000            	jne L_error_non_closure
 12904 000086EB FF7001                  	push SOB_CLOSURE_ENV(rax)
 12905                                  
 12906                                  	; recycling the current frame
 12907 000086EE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12908 000086F1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12909 000086F4 B905000000              	mov rcx, 1 + 4
 12910 000086F9 488B5D18                	mov rbx, COUNT
 12911 000086FD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12912 00008702 488D55F8                	lea rdx, [rbp - 8 * 1]
 12913                                  .L_tc_recycle_frame_loop_043d:
 12914 00008706 4883F900                	cmp rcx, 0
 12915 0000870A 7413                    	je .L_tc_recycle_frame_done_043d
 12916 0000870C 488B32                  	mov rsi, qword [rdx]
 12917 0000870F 488933                  	mov qword [rbx], rsi
 12918 00008712 48FFC9                  	dec rcx
 12919 00008715 4883EB08                	sub rbx, 8 * 1
 12920 00008719 4883EA08                	sub rdx, 8 * 1
 12921 0000871D EBE7                    	jmp .L_tc_recycle_frame_loop_043d
 12922                                  .L_tc_recycle_frame_done_043d:
 12923 0000871F 488D6308                	lea rsp, [rbx + 8 * 1]
 12924 00008723 5D                      	pop rbp	; the proc will restore it!
 12925 00008724 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12926 00008727 C9                      	leave
 12927 00008728 C21800                  	ret AND_KILL_FRAME(1)
 12928                                  .L_lambda_simple_end_0331:	; new closure is in rax
 12929 0000872B 803804                  	cmp byte [rax], T_closure
 12930 0000872E 0F8532D90000            	jne L_error_non_closure
 12931 00008734 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12932 00008737 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12933 0000873A 48890425[8F150000]      	mov qword [free_var_119], rax
 12934 00008742 48B8-                   	mov rax, sob_void
 12934 00008744 [0000000000000000] 
 12935                                  
 12936 0000874C 4889C7                  	mov rdi, rax
 12937 0000874F E8CDDA0000              	call print_sexpr_if_not_void
 12938                                  
 12939                                  	; preparing a non tail-call
 12940 00008754 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12941 00008759 E8B1D90000              	call malloc
 12942 0000875E 50                      	push rax
 12943 0000875F BF00000000              	mov rdi, 8 * 0	; new rib
 12944 00008764 E8A6D90000              	call malloc
 12945 00008769 50                      	push rax
 12946 0000876A BF08000000              	mov rdi, 8 * 1	; extended env
 12947 0000876F E89BD90000              	call malloc
 12948 00008774 488B7D10                	mov rdi, ENV
 12949 00008778 BE00000000              	mov rsi, 0
 12950 0000877D BA01000000              	mov rdx, 1
 12951                                  .L_lambda_simple_env_loop_0334:	; ext_env[i + 1] <-- env[i]
 12952 00008782 4883FE00                	cmp rsi, 0
 12953 00008786 7410                    	je .L_lambda_simple_env_end_0334
 12954 00008788 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12955 0000878C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12956 00008790 48FFC6                  	inc rsi
 12957 00008793 48FFC2                  	inc rdx
 12958 00008796 EBEA                    	jmp .L_lambda_simple_env_loop_0334
 12959                                  .L_lambda_simple_env_end_0334:
 12960 00008798 5B                      	pop rbx
 12961 00008799 BE00000000              	mov rsi, 0
 12962                                  .L_lambda_simple_params_loop_0334:	; copy params
 12963 0000879E 4883FE00                	cmp rsi, 0
 12964 000087A2 740E                    	je .L_lambda_simple_params_end_0334
 12965 000087A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12966 000087A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12967 000087AD 48FFC6                  	inc rsi
 12968 000087B0 EBEC                    	jmp .L_lambda_simple_params_loop_0334
 12969                                  .L_lambda_simple_params_end_0334:
 12970 000087B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12971 000087B5 4889C3                  	mov rbx, rax
 12972 000087B8 58                      	pop rax
 12973 000087B9 C60004                  	mov byte [rax], T_closure
 12974 000087BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12975 000087C0 48C74009[CD870000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0334
 12976 000087C8 E989000000              	jmp .L_lambda_simple_end_0334
 12977                                  .L_lambda_simple_code_0334:	; lambda-simple body
 12978 000087CD 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12979 000087D3 740B                    	je .L_lambda_simple_arity_check_ok_0334
 12980 000087D5 FF742410                	push qword [rsp + 8 * 2]
 12981 000087D9 6A00                    	push 0
 12982 000087DB E9E8D80000              	jmp L_error_incorrect_arity_simple
 12983                                  .L_lambda_simple_arity_check_ok_0334:
 12984 000087E0 C8000000                	enter 0, 0
 12985                                  	; preparing a tail-call
 12986 000087E4 48B8-                   	mov rax, L_constants + 2075
 12986 000087E6 [1B08000000000000] 
 12987 000087EE 50                      	push rax
 12988 000087EF 48B8-                   	mov rax, L_constants + 2186
 12988 000087F1 [8A08000000000000] 
 12989 000087F9 50                      	push rax
 12990 000087FA 6A02                    	push 2	; arg count
 12991 000087FC 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
 12992 00008804 803805                  	cmp byte [rax], T_undefined
 12993 00008807 0F84D5D70000            	je L_error_fvar_undefined
 12994 0000880D 803804                  	cmp byte [rax], T_closure
 12995 00008810 0F8550D80000            	jne L_error_non_closure
 12996 00008816 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12997                                  
 12998                                  	; recycling the current frame
 12999 00008819 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13000 0000881C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13001 0000881F B906000000              	mov rcx, 2 + 4
 13002 00008824 488B5D18                	mov rbx, COUNT
 13003 00008828 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13004 0000882D 488D55F8                	lea rdx, [rbp - 8 * 1]
 13005                                  .L_tc_recycle_frame_loop_043e:
 13006 00008831 4883F900                	cmp rcx, 0
 13007 00008835 7413                    	je .L_tc_recycle_frame_done_043e
 13008 00008837 488B32                  	mov rsi, qword [rdx]
 13009 0000883A 488933                  	mov qword [rbx], rsi
 13010 0000883D 48FFC9                  	dec rcx
 13011 00008840 4883EB08                	sub rbx, 8 * 1
 13012 00008844 4883EA08                	sub rdx, 8 * 1
 13013 00008848 EBE7                    	jmp .L_tc_recycle_frame_loop_043e
 13014                                  .L_tc_recycle_frame_done_043e:
 13015 0000884A 488D6308                	lea rsp, [rbx + 8 * 1]
 13016 0000884E 5D                      	pop rbp	; the proc will restore it!
 13017 0000884F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13018 00008852 C9                      	leave
 13019 00008853 C21000                  	ret AND_KILL_FRAME(0)
 13020                                  .L_lambda_simple_end_0334:	; new closure is in rax
 13021 00008856 50                      	push rax
 13022 00008857 6A01                    	push 1	; arg count
 13023 00008859 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13024 0000885E E8ACD80000              	call malloc
 13025 00008863 50                      	push rax
 13026 00008864 BF00000000              	mov rdi, 8 * 0	; new rib
 13027 00008869 E8A1D80000              	call malloc
 13028 0000886E 50                      	push rax
 13029 0000886F BF08000000              	mov rdi, 8 * 1	; extended env
 13030 00008874 E896D80000              	call malloc
 13031 00008879 488B7D10                	mov rdi, ENV
 13032 0000887D BE00000000              	mov rsi, 0
 13033 00008882 BA01000000              	mov rdx, 1
 13034                                  .L_lambda_simple_env_loop_0335:	; ext_env[i + 1] <-- env[i]
 13035 00008887 4883FE00                	cmp rsi, 0
 13036 0000888B 7410                    	je .L_lambda_simple_env_end_0335
 13037 0000888D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13038 00008891 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13039 00008895 48FFC6                  	inc rsi
 13040 00008898 48FFC2                  	inc rdx
 13041 0000889B EBEA                    	jmp .L_lambda_simple_env_loop_0335
 13042                                  .L_lambda_simple_env_end_0335:
 13043 0000889D 5B                      	pop rbx
 13044 0000889E BE00000000              	mov rsi, 0
 13045                                  .L_lambda_simple_params_loop_0335:	; copy params
 13046 000088A3 4883FE00                	cmp rsi, 0
 13047 000088A7 740E                    	je .L_lambda_simple_params_end_0335
 13048 000088A9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13049 000088AE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13050 000088B2 48FFC6                  	inc rsi
 13051 000088B5 EBEC                    	jmp .L_lambda_simple_params_loop_0335
 13052                                  .L_lambda_simple_params_end_0335:
 13053 000088B7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13054 000088BA 4889C3                  	mov rbx, rax
 13055 000088BD 58                      	pop rax
 13056 000088BE C60004                  	mov byte [rax], T_closure
 13057 000088C1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13058 000088C5 48C74009[D2880000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0335
 13059 000088CD E97D0D0000              	jmp .L_lambda_simple_end_0335
 13060                                  .L_lambda_simple_code_0335:	; lambda-simple body
 13061 000088D2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13062 000088D8 740B                    	je .L_lambda_simple_arity_check_ok_0335
 13063 000088DA FF742410                	push qword [rsp + 8 * 2]
 13064 000088DE 6A01                    	push 1
 13065 000088E0 E9E3D70000              	jmp L_error_incorrect_arity_simple
 13066                                  .L_lambda_simple_arity_check_ok_0335:
 13067 000088E5 C8000000                	enter 0, 0
 13068                                  	; preparing a tail-call
 13069 000088E9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13070 000088EE E81CD80000              	call malloc
 13071 000088F3 50                      	push rax
 13072 000088F4 BF08000000              	mov rdi, 8 * 1	; new rib
 13073 000088F9 E811D80000              	call malloc
 13074 000088FE 50                      	push rax
 13075 000088FF BF10000000              	mov rdi, 8 * 2	; extended env
 13076 00008904 E806D80000              	call malloc
 13077 00008909 488B7D10                	mov rdi, ENV
 13078 0000890D BE00000000              	mov rsi, 0
 13079 00008912 BA01000000              	mov rdx, 1
 13080                                  .L_lambda_simple_env_loop_0336:	; ext_env[i + 1] <-- env[i]
 13081 00008917 4883FE01                	cmp rsi, 1
 13082 0000891B 7410                    	je .L_lambda_simple_env_end_0336
 13083 0000891D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13084 00008921 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13085 00008925 48FFC6                  	inc rsi
 13086 00008928 48FFC2                  	inc rdx
 13087 0000892B EBEA                    	jmp .L_lambda_simple_env_loop_0336
 13088                                  .L_lambda_simple_env_end_0336:
 13089 0000892D 5B                      	pop rbx
 13090 0000892E BE00000000              	mov rsi, 0
 13091                                  .L_lambda_simple_params_loop_0336:	; copy params
 13092 00008933 4883FE01                	cmp rsi, 1
 13093 00008937 740E                    	je .L_lambda_simple_params_end_0336
 13094 00008939 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13095 0000893E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13096 00008942 48FFC6                  	inc rsi
 13097 00008945 EBEC                    	jmp .L_lambda_simple_params_loop_0336
 13098                                  .L_lambda_simple_params_end_0336:
 13099 00008947 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13100 0000894A 4889C3                  	mov rbx, rax
 13101 0000894D 58                      	pop rax
 13102 0000894E C60004                  	mov byte [rax], T_closure
 13103 00008951 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13104 00008955 48C74009[62890000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0336
 13105 0000895D E92B080000              	jmp .L_lambda_simple_end_0336
 13106                                  .L_lambda_simple_code_0336:	; lambda-simple body
 13107 00008962 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13108 00008968 740B                    	je .L_lambda_simple_arity_check_ok_0336
 13109 0000896A FF742410                	push qword [rsp + 8 * 2]
 13110 0000896E 6A02                    	push 2
 13111 00008970 E953D70000              	jmp L_error_incorrect_arity_simple
 13112                                  .L_lambda_simple_arity_check_ok_0336:
 13113 00008975 C8000000                	enter 0, 0
 13114                                  	; preparing a non tail-call
 13115 00008979 488B4520                	mov rax, PARAM(0)	; param a
 13116 0000897D 50                      	push rax
 13117 0000897E 6A01                    	push 1	; arg count
 13118 00008980 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 13119 00008988 803805                  	cmp byte [rax], T_undefined
 13120 0000898B 0F8451D60000            	je L_error_fvar_undefined
 13121 00008991 803804                  	cmp byte [rax], T_closure
 13122 00008994 0F85CCD60000            	jne L_error_non_closure
 13123 0000899A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13124 0000899D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13125 000089A0 483D[02000000]          	cmp rax, sob_boolean_false
 13126 000089A6 0F8463020000            	je .L_if_else_0250
 13127                                  	; preparing a non tail-call
 13128 000089AC 488B4528                	mov rax, PARAM(1)	; param b
 13129 000089B0 50                      	push rax
 13130 000089B1 6A01                    	push 1	; arg count
 13131 000089B3 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 13132 000089BB 803805                  	cmp byte [rax], T_undefined
 13133 000089BE 0F841ED60000            	je L_error_fvar_undefined
 13134 000089C4 803804                  	cmp byte [rax], T_closure
 13135 000089C7 0F8599D60000            	jne L_error_non_closure
 13136 000089CD FF7001                  	push SOB_CLOSURE_ENV(rax)
 13137 000089D0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13138 000089D3 483D[02000000]          	cmp rax, sob_boolean_false
 13139 000089D9 7467                    	je .L_if_else_0251
 13140                                  	; preparing a tail-call
 13141 000089DB 488B4528                	mov rax, PARAM(1)	; param b
 13142 000089DF 50                      	push rax
 13143 000089E0 488B4520                	mov rax, PARAM(0)	; param a
 13144 000089E4 50                      	push rax
 13145 000089E5 6A02                    	push 2	; arg count
 13146 000089E7 488B0425[61100000]      	mov rax, qword [free_var_41]	; free var __bin-div-zz
 13147 000089EF 803805                  	cmp byte [rax], T_undefined
 13148 000089F2 0F84EAD50000            	je L_error_fvar_undefined
 13149 000089F8 803804                  	cmp byte [rax], T_closure
 13150 000089FB 0F8565D60000            	jne L_error_non_closure
 13151 00008A01 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13152                                  
 13153                                  	; recycling the current frame
 13154 00008A04 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13155 00008A07 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13156 00008A0A B906000000              	mov rcx, 2 + 4
 13157 00008A0F 488B5D18                	mov rbx, COUNT
 13158 00008A13 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13159 00008A18 488D55F8                	lea rdx, [rbp - 8 * 1]
 13160                                  .L_tc_recycle_frame_loop_043f:
 13161 00008A1C 4883F900                	cmp rcx, 0
 13162 00008A20 7413                    	je .L_tc_recycle_frame_done_043f
 13163 00008A22 488B32                  	mov rsi, qword [rdx]
 13164 00008A25 488933                  	mov qword [rbx], rsi
 13165 00008A28 48FFC9                  	dec rcx
 13166 00008A2B 4883EB08                	sub rbx, 8 * 1
 13167 00008A2F 4883EA08                	sub rdx, 8 * 1
 13168 00008A33 EBE7                    	jmp .L_tc_recycle_frame_loop_043f
 13169                                  .L_tc_recycle_frame_done_043f:
 13170 00008A35 488D6308                	lea rsp, [rbx + 8 * 1]
 13171 00008A39 5D                      	pop rbp	; the proc will restore it!
 13172 00008A3A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13173 00008A3D E9C8010000              	jmp .L_if_end_0251
 13174                                  .L_if_else_0251:
 13175                                  	; preparing a non tail-call
 13176 00008A42 488B4528                	mov rax, PARAM(1)	; param b
 13177 00008A46 50                      	push rax
 13178 00008A47 6A01                    	push 1	; arg count
 13179 00008A49 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 13180 00008A51 803805                  	cmp byte [rax], T_undefined
 13181 00008A54 0F8488D50000            	je L_error_fvar_undefined
 13182 00008A5A 803804                  	cmp byte [rax], T_closure
 13183 00008A5D 0F8503D60000            	jne L_error_non_closure
 13184 00008A63 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13185 00008A66 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13186 00008A69 483D[02000000]          	cmp rax, sob_boolean_false
 13187 00008A6F 0F848A000000            	je .L_if_else_0252
 13188                                  	; preparing a tail-call
 13189 00008A75 488B4528                	mov rax, PARAM(1)	; param b
 13190 00008A79 50                      	push rax
 13191                                  	; preparing a non tail-call
 13192 00008A7A 488B4520                	mov rax, PARAM(0)	; param a
 13193 00008A7E 50                      	push rax
 13194 00008A7F 6A01                    	push 1	; arg count
 13195 00008A81 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 13196 00008A89 803805                  	cmp byte [rax], T_undefined
 13197 00008A8C 0F8450D50000            	je L_error_fvar_undefined
 13198 00008A92 803804                  	cmp byte [rax], T_closure
 13199 00008A95 0F85CBD50000            	jne L_error_non_closure
 13200 00008A9B FF7001                  	push SOB_CLOSURE_ENV(rax)
 13201 00008A9E FF5009                  	call SOB_CLOSURE_CODE(rax)
 13202 00008AA1 50                      	push rax
 13203 00008AA2 6A02                    	push 2	; arg count
 13204 00008AA4 488B0425[1D100000]      	mov rax, qword [free_var_37]	; free var __bin-div-qq
 13205 00008AAC 803805                  	cmp byte [rax], T_undefined
 13206 00008AAF 0F842DD50000            	je L_error_fvar_undefined
 13207 00008AB5 803804                  	cmp byte [rax], T_closure
 13208 00008AB8 0F85A8D50000            	jne L_error_non_closure
 13209 00008ABE FF7001                  	push SOB_CLOSURE_ENV(rax)
 13210                                  
 13211                                  	; recycling the current frame
 13212 00008AC1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13213 00008AC4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13214 00008AC7 B906000000              	mov rcx, 2 + 4
 13215 00008ACC 488B5D18                	mov rbx, COUNT
 13216 00008AD0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13217 00008AD5 488D55F8                	lea rdx, [rbp - 8 * 1]
 13218                                  .L_tc_recycle_frame_loop_0440:
 13219 00008AD9 4883F900                	cmp rcx, 0
 13220 00008ADD 7413                    	je .L_tc_recycle_frame_done_0440
 13221 00008ADF 488B32                  	mov rsi, qword [rdx]
 13222 00008AE2 488933                  	mov qword [rbx], rsi
 13223 00008AE5 48FFC9                  	dec rcx
 13224 00008AE8 4883EB08                	sub rbx, 8 * 1
 13225 00008AEC 4883EA08                	sub rdx, 8 * 1
 13226 00008AF0 EBE7                    	jmp .L_tc_recycle_frame_loop_0440
 13227                                  .L_tc_recycle_frame_done_0440:
 13228 00008AF2 488D6308                	lea rsp, [rbx + 8 * 1]
 13229 00008AF6 5D                      	pop rbp	; the proc will restore it!
 13230 00008AF7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13231 00008AFA E90B010000              	jmp .L_if_end_0252
 13232                                  .L_if_else_0252:
 13233                                  	; preparing a non tail-call
 13234 00008AFF 488B4528                	mov rax, PARAM(1)	; param b
 13235 00008B03 50                      	push rax
 13236 00008B04 6A01                    	push 1	; arg count
 13237 00008B06 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 13238 00008B0E 803805                  	cmp byte [rax], T_undefined
 13239 00008B11 0F84CBD40000            	je L_error_fvar_undefined
 13240 00008B17 803804                  	cmp byte [rax], T_closure
 13241 00008B1A 0F8546D50000            	jne L_error_non_closure
 13242 00008B20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13243 00008B23 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13244 00008B26 483D[02000000]          	cmp rax, sob_boolean_false
 13245 00008B2C 0F8487000000            	je .L_if_else_0253
 13246                                  	; preparing a tail-call
 13247 00008B32 488B4528                	mov rax, PARAM(1)	; param b
 13248 00008B36 50                      	push rax
 13249                                  	; preparing a non tail-call
 13250 00008B37 488B4520                	mov rax, PARAM(0)	; param a
 13251 00008B3B 50                      	push rax
 13252 00008B3C 6A01                    	push 1	; arg count
 13253 00008B3E 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 13254 00008B46 803805                  	cmp byte [rax], T_undefined
 13255 00008B49 0F8493D40000            	je L_error_fvar_undefined
 13256 00008B4F 803804                  	cmp byte [rax], T_closure
 13257 00008B52 0F850ED50000            	jne L_error_non_closure
 13258 00008B58 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13259 00008B5B FF5009                  	call SOB_CLOSURE_CODE(rax)
 13260 00008B5E 50                      	push rax
 13261 00008B5F 6A02                    	push 2	; arg count
 13262 00008B61 488B0425[D90F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 13263 00008B69 803805                  	cmp byte [rax], T_undefined
 13264 00008B6C 0F8470D40000            	je L_error_fvar_undefined
 13265 00008B72 803804                  	cmp byte [rax], T_closure
 13266 00008B75 0F85EBD40000            	jne L_error_non_closure
 13267 00008B7B FF7001                  	push SOB_CLOSURE_ENV(rax)
 13268                                  
 13269                                  	; recycling the current frame
 13270 00008B7E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13271 00008B81 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13272 00008B84 B906000000              	mov rcx, 2 + 4
 13273 00008B89 488B5D18                	mov rbx, COUNT
 13274 00008B8D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13275 00008B92 488D55F8                	lea rdx, [rbp - 8 * 1]
 13276                                  .L_tc_recycle_frame_loop_0441:
 13277 00008B96 4883F900                	cmp rcx, 0
 13278 00008B9A 7413                    	je .L_tc_recycle_frame_done_0441
 13279 00008B9C 488B32                  	mov rsi, qword [rdx]
 13280 00008B9F 488933                  	mov qword [rbx], rsi
 13281 00008BA2 48FFC9                  	dec rcx
 13282 00008BA5 4883EB08                	sub rbx, 8 * 1
 13283 00008BA9 4883EA08                	sub rdx, 8 * 1
 13284 00008BAD EBE7                    	jmp .L_tc_recycle_frame_loop_0441
 13285                                  .L_tc_recycle_frame_done_0441:
 13286 00008BAF 488D6308                	lea rsp, [rbx + 8 * 1]
 13287 00008BB3 5D                      	pop rbp	; the proc will restore it!
 13288 00008BB4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13289 00008BB7 EB51                    	jmp .L_if_end_0253
 13290                                  .L_if_else_0253:
 13291                                  	; preparing a tail-call
 13292 00008BB9 6A00                    	push 0	; arg count
 13293 00008BBB 488B4510                	mov rax, ENV
 13294 00008BBF 488B00                  	mov rax, qword [rax + 8 * 0]
 13295 00008BC2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13296 00008BC5 803804                  	cmp byte [rax], T_closure
 13297 00008BC8 0F8598D40000            	jne L_error_non_closure
 13298 00008BCE FF7001                  	push SOB_CLOSURE_ENV(rax)
 13299                                  
 13300                                  	; recycling the current frame
 13301 00008BD1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13302 00008BD4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13303 00008BD7 B904000000              	mov rcx, 0 + 4
 13304 00008BDC 488B5D18                	mov rbx, COUNT
 13305 00008BE0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13306 00008BE5 488D55F8                	lea rdx, [rbp - 8 * 1]
 13307                                  .L_tc_recycle_frame_loop_0442:
 13308 00008BE9 4883F900                	cmp rcx, 0
 13309 00008BED 7413                    	je .L_tc_recycle_frame_done_0442
 13310 00008BEF 488B32                  	mov rsi, qword [rdx]
 13311 00008BF2 488933                  	mov qword [rbx], rsi
 13312 00008BF5 48FFC9                  	dec rcx
 13313 00008BF8 4883EB08                	sub rbx, 8 * 1
 13314 00008BFC 4883EA08                	sub rdx, 8 * 1
 13315 00008C00 EBE7                    	jmp .L_tc_recycle_frame_loop_0442
 13316                                  .L_tc_recycle_frame_done_0442:
 13317 00008C02 488D6308                	lea rsp, [rbx + 8 * 1]
 13318 00008C06 5D                      	pop rbp	; the proc will restore it!
 13319 00008C07 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13320                                  .L_if_end_0253:
 13321                                  .L_if_end_0252:
 13322                                  .L_if_end_0251:
 13323 00008C0A E97A050000              	jmp .L_if_end_0250
 13324                                  .L_if_else_0250:
 13325                                  	; preparing a non tail-call
 13326 00008C0F 488B4520                	mov rax, PARAM(0)	; param a
 13327 00008C13 50                      	push rax
 13328 00008C14 6A01                    	push 1	; arg count
 13329 00008C16 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 13330 00008C1E 803805                  	cmp byte [rax], T_undefined
 13331 00008C21 0F84BBD30000            	je L_error_fvar_undefined
 13332 00008C27 803804                  	cmp byte [rax], T_closure
 13333 00008C2A 0F8536D40000            	jne L_error_non_closure
 13334 00008C30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13335 00008C33 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13336 00008C36 483D[02000000]          	cmp rax, sob_boolean_false
 13337 00008C3C 0F8463020000            	je .L_if_else_0254
 13338                                  	; preparing a non tail-call
 13339 00008C42 488B4528                	mov rax, PARAM(1)	; param b
 13340 00008C46 50                      	push rax
 13341 00008C47 6A01                    	push 1	; arg count
 13342 00008C49 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 13343 00008C51 803805                  	cmp byte [rax], T_undefined
 13344 00008C54 0F8488D30000            	je L_error_fvar_undefined
 13345 00008C5A 803804                  	cmp byte [rax], T_closure
 13346 00008C5D 0F8503D40000            	jne L_error_non_closure
 13347 00008C63 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13348 00008C66 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13349 00008C69 483D[02000000]          	cmp rax, sob_boolean_false
 13350 00008C6F 0F848A000000            	je .L_if_else_0255
 13351                                  	; preparing a tail-call
 13352                                  	; preparing a non tail-call
 13353 00008C75 488B4528                	mov rax, PARAM(1)	; param b
 13354 00008C79 50                      	push rax
 13355 00008C7A 6A01                    	push 1	; arg count
 13356 00008C7C 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 13357 00008C84 803805                  	cmp byte [rax], T_undefined
 13358 00008C87 0F8455D30000            	je L_error_fvar_undefined
 13359 00008C8D 803804                  	cmp byte [rax], T_closure
 13360 00008C90 0F85D0D30000            	jne L_error_non_closure
 13361 00008C96 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13362 00008C99 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13363 00008C9C 50                      	push rax
 13364 00008C9D 488B4520                	mov rax, PARAM(0)	; param a
 13365 00008CA1 50                      	push rax
 13366 00008CA2 6A02                    	push 2	; arg count
 13367 00008CA4 488B0425[1D100000]      	mov rax, qword [free_var_37]	; free var __bin-div-qq
 13368 00008CAC 803805                  	cmp byte [rax], T_undefined
 13369 00008CAF 0F842DD30000            	je L_error_fvar_undefined
 13370 00008CB5 803804                  	cmp byte [rax], T_closure
 13371 00008CB8 0F85A8D30000            	jne L_error_non_closure
 13372 00008CBE FF7001                  	push SOB_CLOSURE_ENV(rax)
 13373                                  
 13374                                  	; recycling the current frame
 13375 00008CC1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13376 00008CC4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13377 00008CC7 B906000000              	mov rcx, 2 + 4
 13378 00008CCC 488B5D18                	mov rbx, COUNT
 13379 00008CD0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13380 00008CD5 488D55F8                	lea rdx, [rbp - 8 * 1]
 13381                                  .L_tc_recycle_frame_loop_0443:
 13382 00008CD9 4883F900                	cmp rcx, 0
 13383 00008CDD 7413                    	je .L_tc_recycle_frame_done_0443
 13384 00008CDF 488B32                  	mov rsi, qword [rdx]
 13385 00008CE2 488933                  	mov qword [rbx], rsi
 13386 00008CE5 48FFC9                  	dec rcx
 13387 00008CE8 4883EB08                	sub rbx, 8 * 1
 13388 00008CEC 4883EA08                	sub rdx, 8 * 1
 13389 00008CF0 EBE7                    	jmp .L_tc_recycle_frame_loop_0443
 13390                                  .L_tc_recycle_frame_done_0443:
 13391 00008CF2 488D6308                	lea rsp, [rbx + 8 * 1]
 13392 00008CF6 5D                      	pop rbp	; the proc will restore it!
 13393 00008CF7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13394 00008CFA E9A1010000              	jmp .L_if_end_0255
 13395                                  .L_if_else_0255:
 13396                                  	; preparing a non tail-call
 13397 00008CFF 488B4528                	mov rax, PARAM(1)	; param b
 13398 00008D03 50                      	push rax
 13399 00008D04 6A01                    	push 1	; arg count
 13400 00008D06 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 13401 00008D0E 803805                  	cmp byte [rax], T_undefined
 13402 00008D11 0F84CBD20000            	je L_error_fvar_undefined
 13403 00008D17 803804                  	cmp byte [rax], T_closure
 13404 00008D1A 0F8546D30000            	jne L_error_non_closure
 13405 00008D20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13406 00008D23 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13407 00008D26 483D[02000000]          	cmp rax, sob_boolean_false
 13408 00008D2C 7467                    	je .L_if_else_0256
 13409                                  	; preparing a tail-call
 13410 00008D2E 488B4528                	mov rax, PARAM(1)	; param b
 13411 00008D32 50                      	push rax
 13412 00008D33 488B4520                	mov rax, PARAM(0)	; param a
 13413 00008D37 50                      	push rax
 13414 00008D38 6A02                    	push 2	; arg count
 13415 00008D3A 488B0425[1D100000]      	mov rax, qword [free_var_37]	; free var __bin-div-qq
 13416 00008D42 803805                  	cmp byte [rax], T_undefined
 13417 00008D45 0F8497D20000            	je L_error_fvar_undefined
 13418 00008D4B 803804                  	cmp byte [rax], T_closure
 13419 00008D4E 0F8512D30000            	jne L_error_non_closure
 13420 00008D54 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13421                                  
 13422                                  	; recycling the current frame
 13423 00008D57 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13424 00008D5A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13425 00008D5D B906000000              	mov rcx, 2 + 4
 13426 00008D62 488B5D18                	mov rbx, COUNT
 13427 00008D66 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13428 00008D6B 488D55F8                	lea rdx, [rbp - 8 * 1]
 13429                                  .L_tc_recycle_frame_loop_0444:
 13430 00008D6F 4883F900                	cmp rcx, 0
 13431 00008D73 7413                    	je .L_tc_recycle_frame_done_0444
 13432 00008D75 488B32                  	mov rsi, qword [rdx]
 13433 00008D78 488933                  	mov qword [rbx], rsi
 13434 00008D7B 48FFC9                  	dec rcx
 13435 00008D7E 4883EB08                	sub rbx, 8 * 1
 13436 00008D82 4883EA08                	sub rdx, 8 * 1
 13437 00008D86 EBE7                    	jmp .L_tc_recycle_frame_loop_0444
 13438                                  .L_tc_recycle_frame_done_0444:
 13439 00008D88 488D6308                	lea rsp, [rbx + 8 * 1]
 13440 00008D8C 5D                      	pop rbp	; the proc will restore it!
 13441 00008D8D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13442 00008D90 E90B010000              	jmp .L_if_end_0256
 13443                                  .L_if_else_0256:
 13444                                  	; preparing a non tail-call
 13445 00008D95 488B4528                	mov rax, PARAM(1)	; param b
 13446 00008D99 50                      	push rax
 13447 00008D9A 6A01                    	push 1	; arg count
 13448 00008D9C 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 13449 00008DA4 803805                  	cmp byte [rax], T_undefined
 13450 00008DA7 0F8435D20000            	je L_error_fvar_undefined
 13451 00008DAD 803804                  	cmp byte [rax], T_closure
 13452 00008DB0 0F85B0D20000            	jne L_error_non_closure
 13453 00008DB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13454 00008DB9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13455 00008DBC 483D[02000000]          	cmp rax, sob_boolean_false
 13456 00008DC2 0F8487000000            	je .L_if_else_0257
 13457                                  	; preparing a tail-call
 13458 00008DC8 488B4528                	mov rax, PARAM(1)	; param b
 13459 00008DCC 50                      	push rax
 13460                                  	; preparing a non tail-call
 13461 00008DCD 488B4520                	mov rax, PARAM(0)	; param a
 13462 00008DD1 50                      	push rax
 13463 00008DD2 6A01                    	push 1	; arg count
 13464 00008DD4 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 13465 00008DDC 803805                  	cmp byte [rax], T_undefined
 13466 00008DDF 0F84FDD10000            	je L_error_fvar_undefined
 13467 00008DE5 803804                  	cmp byte [rax], T_closure
 13468 00008DE8 0F8578D20000            	jne L_error_non_closure
 13469 00008DEE FF7001                  	push SOB_CLOSURE_ENV(rax)
 13470 00008DF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13471 00008DF4 50                      	push rax
 13472 00008DF5 6A02                    	push 2	; arg count
 13473 00008DF7 488B0425[D90F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 13474 00008DFF 803805                  	cmp byte [rax], T_undefined
 13475 00008E02 0F84DAD10000            	je L_error_fvar_undefined
 13476 00008E08 803804                  	cmp byte [rax], T_closure
 13477 00008E0B 0F8555D20000            	jne L_error_non_closure
 13478 00008E11 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13479                                  
 13480                                  	; recycling the current frame
 13481 00008E14 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13482 00008E17 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13483 00008E1A B906000000              	mov rcx, 2 + 4
 13484 00008E1F 488B5D18                	mov rbx, COUNT
 13485 00008E23 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13486 00008E28 488D55F8                	lea rdx, [rbp - 8 * 1]
 13487                                  .L_tc_recycle_frame_loop_0445:
 13488 00008E2C 4883F900                	cmp rcx, 0
 13489 00008E30 7413                    	je .L_tc_recycle_frame_done_0445
 13490 00008E32 488B32                  	mov rsi, qword [rdx]
 13491 00008E35 488933                  	mov qword [rbx], rsi
 13492 00008E38 48FFC9                  	dec rcx
 13493 00008E3B 4883EB08                	sub rbx, 8 * 1
 13494 00008E3F 4883EA08                	sub rdx, 8 * 1
 13495 00008E43 EBE7                    	jmp .L_tc_recycle_frame_loop_0445
 13496                                  .L_tc_recycle_frame_done_0445:
 13497 00008E45 488D6308                	lea rsp, [rbx + 8 * 1]
 13498 00008E49 5D                      	pop rbp	; the proc will restore it!
 13499 00008E4A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13500 00008E4D EB51                    	jmp .L_if_end_0257
 13501                                  .L_if_else_0257:
 13502                                  	; preparing a tail-call
 13503 00008E4F 6A00                    	push 0	; arg count
 13504 00008E51 488B4510                	mov rax, ENV
 13505 00008E55 488B00                  	mov rax, qword [rax + 8 * 0]
 13506 00008E58 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13507 00008E5B 803804                  	cmp byte [rax], T_closure
 13508 00008E5E 0F8502D20000            	jne L_error_non_closure
 13509 00008E64 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13510                                  
 13511                                  	; recycling the current frame
 13512 00008E67 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13513 00008E6A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13514 00008E6D B904000000              	mov rcx, 0 + 4
 13515 00008E72 488B5D18                	mov rbx, COUNT
 13516 00008E76 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13517 00008E7B 488D55F8                	lea rdx, [rbp - 8 * 1]
 13518                                  .L_tc_recycle_frame_loop_0446:
 13519 00008E7F 4883F900                	cmp rcx, 0
 13520 00008E83 7413                    	je .L_tc_recycle_frame_done_0446
 13521 00008E85 488B32                  	mov rsi, qword [rdx]
 13522 00008E88 488933                  	mov qword [rbx], rsi
 13523 00008E8B 48FFC9                  	dec rcx
 13524 00008E8E 4883EB08                	sub rbx, 8 * 1
 13525 00008E92 4883EA08                	sub rdx, 8 * 1
 13526 00008E96 EBE7                    	jmp .L_tc_recycle_frame_loop_0446
 13527                                  .L_tc_recycle_frame_done_0446:
 13528 00008E98 488D6308                	lea rsp, [rbx + 8 * 1]
 13529 00008E9C 5D                      	pop rbp	; the proc will restore it!
 13530 00008E9D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13531                                  .L_if_end_0257:
 13532                                  .L_if_end_0256:
 13533                                  .L_if_end_0255:
 13534 00008EA0 E9E4020000              	jmp .L_if_end_0254
 13535                                  .L_if_else_0254:
 13536                                  	; preparing a non tail-call
 13537 00008EA5 488B4520                	mov rax, PARAM(0)	; param a
 13538 00008EA9 50                      	push rax
 13539 00008EAA 6A01                    	push 1	; arg count
 13540 00008EAC 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 13541 00008EB4 803805                  	cmp byte [rax], T_undefined
 13542 00008EB7 0F8425D10000            	je L_error_fvar_undefined
 13543 00008EBD 803804                  	cmp byte [rax], T_closure
 13544 00008EC0 0F85A0D10000            	jne L_error_non_closure
 13545 00008EC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13546 00008EC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13547 00008ECC 483D[02000000]          	cmp rax, sob_boolean_false
 13548 00008ED2 0F8460020000            	je .L_if_else_0258
 13549                                  	; preparing a non tail-call
 13550 00008ED8 488B4528                	mov rax, PARAM(1)	; param b
 13551 00008EDC 50                      	push rax
 13552 00008EDD 6A01                    	push 1	; arg count
 13553 00008EDF 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 13554 00008EE7 803805                  	cmp byte [rax], T_undefined
 13555 00008EEA 0F84F2D00000            	je L_error_fvar_undefined
 13556 00008EF0 803804                  	cmp byte [rax], T_closure
 13557 00008EF3 0F856DD10000            	jne L_error_non_closure
 13558 00008EF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13559 00008EFC FF5009                  	call SOB_CLOSURE_CODE(rax)
 13560 00008EFF 483D[02000000]          	cmp rax, sob_boolean_false
 13561 00008F05 0F848A000000            	je .L_if_else_0259
 13562                                  	; preparing a tail-call
 13563                                  	; preparing a non tail-call
 13564 00008F0B 488B4528                	mov rax, PARAM(1)	; param b
 13565 00008F0F 50                      	push rax
 13566 00008F10 6A01                    	push 1	; arg count
 13567 00008F12 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 13568 00008F1A 803805                  	cmp byte [rax], T_undefined
 13569 00008F1D 0F84BFD00000            	je L_error_fvar_undefined
 13570 00008F23 803804                  	cmp byte [rax], T_closure
 13571 00008F26 0F853AD10000            	jne L_error_non_closure
 13572 00008F2C FF7001                  	push SOB_CLOSURE_ENV(rax)
 13573 00008F2F FF5009                  	call SOB_CLOSURE_CODE(rax)
 13574 00008F32 50                      	push rax
 13575 00008F33 488B4520                	mov rax, PARAM(0)	; param a
 13576 00008F37 50                      	push rax
 13577 00008F38 6A02                    	push 2	; arg count
 13578 00008F3A 488B0425[D90F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 13579 00008F42 803805                  	cmp byte [rax], T_undefined
 13580 00008F45 0F8497D00000            	je L_error_fvar_undefined
 13581 00008F4B 803804                  	cmp byte [rax], T_closure
 13582 00008F4E 0F8512D10000            	jne L_error_non_closure
 13583 00008F54 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13584                                  
 13585                                  	; recycling the current frame
 13586 00008F57 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13587 00008F5A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13588 00008F5D B906000000              	mov rcx, 2 + 4
 13589 00008F62 488B5D18                	mov rbx, COUNT
 13590 00008F66 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13591 00008F6B 488D55F8                	lea rdx, [rbp - 8 * 1]
 13592                                  .L_tc_recycle_frame_loop_0447:
 13593 00008F6F 4883F900                	cmp rcx, 0
 13594 00008F73 7413                    	je .L_tc_recycle_frame_done_0447
 13595 00008F75 488B32                  	mov rsi, qword [rdx]
 13596 00008F78 488933                  	mov qword [rbx], rsi
 13597 00008F7B 48FFC9                  	dec rcx
 13598 00008F7E 4883EB08                	sub rbx, 8 * 1
 13599 00008F82 4883EA08                	sub rdx, 8 * 1
 13600 00008F86 EBE7                    	jmp .L_tc_recycle_frame_loop_0447
 13601                                  .L_tc_recycle_frame_done_0447:
 13602 00008F88 488D6308                	lea rsp, [rbx + 8 * 1]
 13603 00008F8C 5D                      	pop rbp	; the proc will restore it!
 13604 00008F8D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13605 00008F90 E9A1010000              	jmp .L_if_end_0259
 13606                                  .L_if_else_0259:
 13607                                  	; preparing a non tail-call
 13608 00008F95 488B4528                	mov rax, PARAM(1)	; param b
 13609 00008F99 50                      	push rax
 13610 00008F9A 6A01                    	push 1	; arg count
 13611 00008F9C 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 13612 00008FA4 803805                  	cmp byte [rax], T_undefined
 13613 00008FA7 0F8435D00000            	je L_error_fvar_undefined
 13614 00008FAD 803804                  	cmp byte [rax], T_closure
 13615 00008FB0 0F85B0D00000            	jne L_error_non_closure
 13616 00008FB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13617 00008FB9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13618 00008FBC 483D[02000000]          	cmp rax, sob_boolean_false
 13619 00008FC2 0F848A000000            	je .L_if_else_025a
 13620                                  	; preparing a tail-call
 13621                                  	; preparing a non tail-call
 13622 00008FC8 488B4528                	mov rax, PARAM(1)	; param b
 13623 00008FCC 50                      	push rax
 13624 00008FCD 6A01                    	push 1	; arg count
 13625 00008FCF 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 13626 00008FD7 803805                  	cmp byte [rax], T_undefined
 13627 00008FDA 0F8402D00000            	je L_error_fvar_undefined
 13628 00008FE0 803804                  	cmp byte [rax], T_closure
 13629 00008FE3 0F857DD00000            	jne L_error_non_closure
 13630 00008FE9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13631 00008FEC FF5009                  	call SOB_CLOSURE_CODE(rax)
 13632 00008FEF 50                      	push rax
 13633 00008FF0 488B4520                	mov rax, PARAM(0)	; param a
 13634 00008FF4 50                      	push rax
 13635 00008FF5 6A02                    	push 2	; arg count
 13636 00008FF7 488B0425[D90F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 13637 00008FFF 803805                  	cmp byte [rax], T_undefined
 13638 00009002 0F84DACF0000            	je L_error_fvar_undefined
 13639 00009008 803804                  	cmp byte [rax], T_closure
 13640 0000900B 0F8555D00000            	jne L_error_non_closure
 13641 00009011 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13642                                  
 13643                                  	; recycling the current frame
 13644 00009014 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13645 00009017 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13646 0000901A B906000000              	mov rcx, 2 + 4
 13647 0000901F 488B5D18                	mov rbx, COUNT
 13648 00009023 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13649 00009028 488D55F8                	lea rdx, [rbp - 8 * 1]
 13650                                  .L_tc_recycle_frame_loop_0448:
 13651 0000902C 4883F900                	cmp rcx, 0
 13652 00009030 7413                    	je .L_tc_recycle_frame_done_0448
 13653 00009032 488B32                  	mov rsi, qword [rdx]
 13654 00009035 488933                  	mov qword [rbx], rsi
 13655 00009038 48FFC9                  	dec rcx
 13656 0000903B 4883EB08                	sub rbx, 8 * 1
 13657 0000903F 4883EA08                	sub rdx, 8 * 1
 13658 00009043 EBE7                    	jmp .L_tc_recycle_frame_loop_0448
 13659                                  .L_tc_recycle_frame_done_0448:
 13660 00009045 488D6308                	lea rsp, [rbx + 8 * 1]
 13661 00009049 5D                      	pop rbp	; the proc will restore it!
 13662 0000904A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13663 0000904D E9E4000000              	jmp .L_if_end_025a
 13664                                  .L_if_else_025a:
 13665                                  	; preparing a non tail-call
 13666 00009052 488B4528                	mov rax, PARAM(1)	; param b
 13667 00009056 50                      	push rax
 13668 00009057 6A01                    	push 1	; arg count
 13669 00009059 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 13670 00009061 803805                  	cmp byte [rax], T_undefined
 13671 00009064 0F8478CF0000            	je L_error_fvar_undefined
 13672 0000906A 803804                  	cmp byte [rax], T_closure
 13673 0000906D 0F85F3CF0000            	jne L_error_non_closure
 13674 00009073 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13675 00009076 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13676 00009079 483D[02000000]          	cmp rax, sob_boolean_false
 13677 0000907F 7464                    	je .L_if_else_025b
 13678                                  	; preparing a tail-call
 13679 00009081 488B4528                	mov rax, PARAM(1)	; param b
 13680 00009085 50                      	push rax
 13681 00009086 488B4520                	mov rax, PARAM(0)	; param a
 13682 0000908A 50                      	push rax
 13683 0000908B 6A02                    	push 2	; arg count
 13684 0000908D 488B0425[D90F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 13685 00009095 803805                  	cmp byte [rax], T_undefined
 13686 00009098 0F8444CF0000            	je L_error_fvar_undefined
 13687 0000909E 803804                  	cmp byte [rax], T_closure
 13688 000090A1 0F85BFCF0000            	jne L_error_non_closure
 13689 000090A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13690                                  
 13691                                  	; recycling the current frame
 13692 000090AA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13693 000090AD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13694 000090B0 B906000000              	mov rcx, 2 + 4
 13695 000090B5 488B5D18                	mov rbx, COUNT
 13696 000090B9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13697 000090BE 488D55F8                	lea rdx, [rbp - 8 * 1]
 13698                                  .L_tc_recycle_frame_loop_0449:
 13699 000090C2 4883F900                	cmp rcx, 0
 13700 000090C6 7413                    	je .L_tc_recycle_frame_done_0449
 13701 000090C8 488B32                  	mov rsi, qword [rdx]
 13702 000090CB 488933                  	mov qword [rbx], rsi
 13703 000090CE 48FFC9                  	dec rcx
 13704 000090D1 4883EB08                	sub rbx, 8 * 1
 13705 000090D5 4883EA08                	sub rdx, 8 * 1
 13706 000090D9 EBE7                    	jmp .L_tc_recycle_frame_loop_0449
 13707                                  .L_tc_recycle_frame_done_0449:
 13708 000090DB 488D6308                	lea rsp, [rbx + 8 * 1]
 13709 000090DF 5D                      	pop rbp	; the proc will restore it!
 13710 000090E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13711 000090E3 EB51                    	jmp .L_if_end_025b
 13712                                  .L_if_else_025b:
 13713                                  	; preparing a tail-call
 13714 000090E5 6A00                    	push 0	; arg count
 13715 000090E7 488B4510                	mov rax, ENV
 13716 000090EB 488B00                  	mov rax, qword [rax + 8 * 0]
 13717 000090EE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13718 000090F1 803804                  	cmp byte [rax], T_closure
 13719 000090F4 0F856CCF0000            	jne L_error_non_closure
 13720 000090FA FF7001                  	push SOB_CLOSURE_ENV(rax)
 13721                                  
 13722                                  	; recycling the current frame
 13723 000090FD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13724 00009100 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13725 00009103 B904000000              	mov rcx, 0 + 4
 13726 00009108 488B5D18                	mov rbx, COUNT
 13727 0000910C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13728 00009111 488D55F8                	lea rdx, [rbp - 8 * 1]
 13729                                  .L_tc_recycle_frame_loop_044a:
 13730 00009115 4883F900                	cmp rcx, 0
 13731 00009119 7413                    	je .L_tc_recycle_frame_done_044a
 13732 0000911B 488B32                  	mov rsi, qword [rdx]
 13733 0000911E 488933                  	mov qword [rbx], rsi
 13734 00009121 48FFC9                  	dec rcx
 13735 00009124 4883EB08                	sub rbx, 8 * 1
 13736 00009128 4883EA08                	sub rdx, 8 * 1
 13737 0000912C EBE7                    	jmp .L_tc_recycle_frame_loop_044a
 13738                                  .L_tc_recycle_frame_done_044a:
 13739 0000912E 488D6308                	lea rsp, [rbx + 8 * 1]
 13740 00009132 5D                      	pop rbp	; the proc will restore it!
 13741 00009133 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13742                                  .L_if_end_025b:
 13743                                  .L_if_end_025a:
 13744                                  .L_if_end_0259:
 13745 00009136 EB51                    	jmp .L_if_end_0258
 13746                                  .L_if_else_0258:
 13747                                  	; preparing a tail-call
 13748 00009138 6A00                    	push 0	; arg count
 13749 0000913A 488B4510                	mov rax, ENV
 13750 0000913E 488B00                  	mov rax, qword [rax + 8 * 0]
 13751 00009141 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13752 00009144 803804                  	cmp byte [rax], T_closure
 13753 00009147 0F8519CF0000            	jne L_error_non_closure
 13754 0000914D FF7001                  	push SOB_CLOSURE_ENV(rax)
 13755                                  
 13756                                  	; recycling the current frame
 13757 00009150 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13758 00009153 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13759 00009156 B904000000              	mov rcx, 0 + 4
 13760 0000915B 488B5D18                	mov rbx, COUNT
 13761 0000915F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13762 00009164 488D55F8                	lea rdx, [rbp - 8 * 1]
 13763                                  .L_tc_recycle_frame_loop_044b:
 13764 00009168 4883F900                	cmp rcx, 0
 13765 0000916C 7413                    	je .L_tc_recycle_frame_done_044b
 13766 0000916E 488B32                  	mov rsi, qword [rdx]
 13767 00009171 488933                  	mov qword [rbx], rsi
 13768 00009174 48FFC9                  	dec rcx
 13769 00009177 4883EB08                	sub rbx, 8 * 1
 13770 0000917B 4883EA08                	sub rdx, 8 * 1
 13771 0000917F EBE7                    	jmp .L_tc_recycle_frame_loop_044b
 13772                                  .L_tc_recycle_frame_done_044b:
 13773 00009181 488D6308                	lea rsp, [rbx + 8 * 1]
 13774 00009185 5D                      	pop rbp	; the proc will restore it!
 13775 00009186 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13776                                  .L_if_end_0258:
 13777                                  .L_if_end_0254:
 13778                                  .L_if_end_0250:
 13779 00009189 C9                      	leave
 13780 0000918A C22000                  	ret AND_KILL_FRAME(2)
 13781                                  .L_lambda_simple_end_0336:	; new closure is in rax
 13782 0000918D 50                      	push rax
 13783 0000918E 6A01                    	push 1	; arg count
 13784 00009190 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13785 00009195 E875CF0000              	call malloc
 13786 0000919A 50                      	push rax
 13787 0000919B BF08000000              	mov rdi, 8 * 1	; new rib
 13788 000091A0 E86ACF0000              	call malloc
 13789 000091A5 50                      	push rax
 13790 000091A6 BF10000000              	mov rdi, 8 * 2	; extended env
 13791 000091AB E85FCF0000              	call malloc
 13792 000091B0 488B7D10                	mov rdi, ENV
 13793 000091B4 BE00000000              	mov rsi, 0
 13794 000091B9 BA01000000              	mov rdx, 1
 13795                                  .L_lambda_simple_env_loop_0337:	; ext_env[i + 1] <-- env[i]
 13796 000091BE 4883FE01                	cmp rsi, 1
 13797 000091C2 7410                    	je .L_lambda_simple_env_end_0337
 13798 000091C4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13799 000091C8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13800 000091CC 48FFC6                  	inc rsi
 13801 000091CF 48FFC2                  	inc rdx
 13802 000091D2 EBEA                    	jmp .L_lambda_simple_env_loop_0337
 13803                                  .L_lambda_simple_env_end_0337:
 13804 000091D4 5B                      	pop rbx
 13805 000091D5 BE00000000              	mov rsi, 0
 13806                                  .L_lambda_simple_params_loop_0337:	; copy params
 13807 000091DA 4883FE01                	cmp rsi, 1
 13808 000091DE 740E                    	je .L_lambda_simple_params_end_0337
 13809 000091E0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13810 000091E5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13811 000091E9 48FFC6                  	inc rsi
 13812 000091EC EBEC                    	jmp .L_lambda_simple_params_loop_0337
 13813                                  .L_lambda_simple_params_end_0337:
 13814 000091EE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13815 000091F1 4889C3                  	mov rbx, rax
 13816 000091F4 58                      	pop rax
 13817 000091F5 C60004                  	mov byte [rax], T_closure
 13818 000091F8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13819 000091FC 48C74009[09920000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0337
 13820 00009204 E9FD030000              	jmp .L_lambda_simple_end_0337
 13821                                  .L_lambda_simple_code_0337:	; lambda-simple body
 13822 00009209 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13823 0000920F 740B                    	je .L_lambda_simple_arity_check_ok_0337
 13824 00009211 FF742410                	push qword [rsp + 8 * 2]
 13825 00009215 6A01                    	push 1
 13826 00009217 E9ACCE0000              	jmp L_error_incorrect_arity_simple
 13827                                  .L_lambda_simple_arity_check_ok_0337:
 13828 0000921C C8000000                	enter 0, 0
 13829 00009220 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13830 00009225 E8E5CE0000              	call malloc
 13831 0000922A 50                      	push rax
 13832 0000922B BF08000000              	mov rdi, 8 * 1	; new rib
 13833 00009230 E8DACE0000              	call malloc
 13834 00009235 50                      	push rax
 13835 00009236 BF18000000              	mov rdi, 8 * 3	; extended env
 13836 0000923B E8CFCE0000              	call malloc
 13837 00009240 488B7D10                	mov rdi, ENV
 13838 00009244 BE00000000              	mov rsi, 0
 13839 00009249 BA01000000              	mov rdx, 1
 13840                                  .L_lambda_opt_env_loop_0071:	; ext_env[i + 1] <-- env[i]
 13841 0000924E 4883FE02                	cmp rsi, 2
 13842 00009252 7410                    	je .L_lambda_opt_env_end_0071
 13843 00009254 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13844 00009258 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13845 0000925C 48FFC6                  	inc rsi
 13846 0000925F 48FFC2                  	inc rdx
 13847 00009262 EBEA                    	jmp .L_lambda_opt_env_loop_0071
 13848                                  .L_lambda_opt_env_end_0071:
 13849 00009264 5B                      	pop rbx
 13850 00009265 BE00000000              	mov rsi, 0
 13851                                  .L_lambda_opt_params_loop_0071:	; copy params
 13852 0000926A 4883FE01                	cmp rsi, 1
 13853 0000926E 740E                    	je .L_lambda_opt_params_end_0071
 13854 00009270 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13855 00009275 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13856 00009279 48FFC6                  	inc rsi
 13857 0000927C EBEC                    	jmp .L_lambda_opt_params_loop_0071
 13858                                  .L_lambda_opt_params_end_0071:
 13859 0000927E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13860 00009281 4889C3                  	mov rbx, rax
 13861 00009284 58                      	pop rax
 13862 00009285 C60004                  	mov byte [rax], T_closure
 13863 00009288 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13864 0000928C 48C74009[99920000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0071
 13865 00009294 E969030000              	jmp .L_lambda_opt_end_0071
 13866                                  .L_lambda_opt_code_0071:	; lambda-opt body
 13867 00009299 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13868 0000929F 0F8404010000            	je .L_lambda_opt_arity_check_exact_0071
 13869 000092A5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13870 000092AB 7F0B                    	jg .L_lambda_opt_arity_check_more_0071
 13871 000092AD FF742410                	push qword [rsp + 8 * 2]
 13872 000092B1 6A01                    	push 1
 13873 000092B3 E924CE0000              	jmp L_error_incorrect_arity_opt
 13874                                  .L_lambda_opt_arity_check_more_0071:
 13875 000092B8 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 13876 000092BD 41B901000000            	mov r9 , 1
 13877 000092C3 4989E7                  	mov r15, rsp
 13878 000092C6 4D29C8                  	sub r8, r9
 13879 000092C9 41B900000000            	mov r9, 0
 13880 000092CF 498D5F10                	lea rbx, [r15 + 8 * 2]
 13881 000092D3 498B4710                	mov rax, qword [r15 + 8 * 2]
 13882 000092D7 486BC008                	imul rax, 8
 13883 000092DB 4801C3                  	add rbx, rax
 13884 000092DE 488B13                  	mov rdx , qword [rbx]
 13885 000092E1 4989DA                  	mov r10 , rbx
 13886 000092E4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 13887 000092E9 52                      	push rdx
 13888 000092EA 53                      	push rbx
 13889 000092EB 4150                    	push r8
 13890 000092ED 4151                    	push r9
 13891 000092EF 4152                    	push r10
 13892 000092F1 4157                    	push r15
 13893 000092F3 E817CE0000              	call malloc
 13894 000092F8 415F                    	pop r15
 13895 000092FA 415A                    	pop r10
 13896 000092FC 4159                    	pop r9
 13897 000092FE 4158                    	pop r8
 13898 00009300 5B                      	pop rbx
 13899 00009301 5A                      	pop rdx
 13900 00009302 C60021                  	mov byte qword [rax], T_pair
 13901 00009305 48895001                	mov SOB_PAIR_CAR(rax), rdx
 13902 00009309 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 13903 00009311 498902                  	mov qword [r10], rax
 13904 00009314 49FFC1                  	inc r9
 13905 00009317 4883EB08                	sub rbx, 8
 13906 0000931B 4D39C1                  	cmp r9, r8
 13907 0000931E 743E                    	je .L_lambda_opt_stack_shrink_loop_0233
 13908                                  .L_lambda_opt_stack_shrink_loop_0232:
 13909 00009320 488B13                  	mov rdx, qword [rbx]
 13910 00009323 53                      	push rbx
 13911 00009324 4150                    	push r8
 13912 00009326 4151                    	push r9
 13913 00009328 4152                    	push r10
 13914 0000932A 4157                    	push r15
 13915 0000932C 52                      	push rdx
 13916 0000932D BF11000000              	mov rdi, (1 + 8 + 8)
 13917 00009332 E8D8CD0000              	call malloc
 13918 00009337 5A                      	pop rdx
 13919 00009338 415F                    	pop r15
 13920 0000933A 415A                    	pop r10
 13921 0000933C 4159                    	pop r9
 13922 0000933E 4158                    	pop r8
 13923 00009340 5B                      	pop rbx
 13924 00009341 C60021                  	mov byte [rax], T_pair
 13925 00009344 48895001                	mov SOB_PAIR_CAR(rax), rdx
 13926 00009348 4D8B32                  	mov r14, qword [r10]
 13927 0000934B 4C897009                	mov SOB_PAIR_CDR(rax), r14
 13928 0000934F 498902                  	mov qword [r10], rax
 13929 00009352 49FFC1                  	inc r9
 13930 00009355 4883EB08                	sub rbx, 8
 13931 00009359 4D39C1                  	cmp r9, r8
 13932 0000935C 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_0232
 13933                                  .L_lambda_opt_stack_shrink_loop_0233:
 13934 0000935E 498D5710                	lea rdx, [r15 + 8 * 2]
 13935 00009362 48C70201000000          	mov qword [rdx], 1
 13936 00009369 48830201                	add qword [rdx] , 1
 13937 0000936D 4D89C1                  	mov r9, r8
 13938 00009370 49FFC9                  	dec r9
 13939 00009373 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 13940                                  .L_lambda_opt_stack_shrink_loop_0234:
 13941 00009377 488B03                  	mov rax, qword [rbx]
 13942 0000937A 498901                  	mov qword [r9], rax
 13943 0000937D 4983E908                	sub r9 , 8
 13944 00009381 4883EB08                	sub rbx, 8
 13945 00009385 4C39FB                  	cmp rbx, r15
 13946 00009388 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0234
 13947 0000938A 488B03                  	mov rax, qword [rbx]
 13948 0000938D 498901                  	mov qword [r9], rax
 13949 00009390 4D89C1                  	mov r9, r8
 13950 00009393 4983E901                	sub r9 , 1
 13951 00009397 4983F900                	cmp r9, 0
 13952 0000939B 7446                    je .L_lambda_opt_stack_adjusted_0071
 13953                                  .L_lambda_opt_stack_shrink_loop_0235:
 13954 0000939D 58                      	pop rax
 13955 0000939E 49FFC9                  	dec r9
 13956 000093A1 4983F900                	cmp r9, 0
 13957 000093A5 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0235
 13958 000093A7 EB3A                    jmp .L_lambda_opt_stack_adjusted_0071
 13959                                  .L_lambda_opt_arity_check_exact_0071:
 13960 000093A9 4989E7                  	mov r15, rsp
 13961 000093AC 498D5F18                	lea rbx, [r15 + 8 * 2 + 8 * 1]
 13962 000093B0 488B0B                  	mov rcx, qword [rbx]
 13963 000093B3 48C703[01000000]        	mov qword [rbx], sob_nil
 13964 000093BA 4883EB08                	sub rbx, 8
 13965                                  .L_lambda_opt_stack_shrink_loop_0231:
 13966 000093BE 488B13                  	mov rdx, qword [rbx]
 13967 000093C1 48890B                  	mov qword [rbx], rcx
 13968 000093C4 4C39FB                  	cmp rbx, r15
 13969 000093C7 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0071
 13970 000093C9 4889D1                  	mov rcx, rdx
 13971 000093CC 4883EB08                	sub rbx, 8
 13972 000093D0 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_0231
 13973                                  .L_lambda_opt_stack_shrink_loop_exit_0071:
 13974 000093D2 52                      	push rdx
 13975 000093D3 4989E7                  	mov r15, rsp
 13976 000093D6 4983C710                	add r15, 16
 13977 000093DA 498B1F                  	mov rbx, qword [r15]
 13978 000093DD 48FFC3                  	inc rbx
 13979 000093E0 49891F                  	mov qword [r15], rbx
 13980                                  .L_lambda_opt_stack_adjusted_0071:
 13981 000093E3 C8000000                	enter 0, 0
 13982                                  	; preparing a non tail-call
 13983 000093E7 488B4528                	mov rax, PARAM(1)	; param s
 13984 000093EB 50                      	push rax
 13985 000093EC 6A01                    	push 1	; arg count
 13986 000093EE 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 13987 000093F6 803805                  	cmp byte [rax], T_undefined
 13988 000093F9 0F84E3CB0000            	je L_error_fvar_undefined
 13989 000093FF 803804                  	cmp byte [rax], T_closure
 13990 00009402 0F855ECC0000            	jne L_error_non_closure
 13991 00009408 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13992 0000940B FF5009                  	call SOB_CLOSURE_CODE(rax)
 13993 0000940E 483D[02000000]          	cmp rax, sob_boolean_false
 13994 00009414 7466                    	je .L_if_else_025c
 13995                                  	; preparing a tail-call
 13996 00009416 488B4520                	mov rax, PARAM(0)	; param a
 13997 0000941A 50                      	push rax
 13998 0000941B 48B8-                   	mov rax, L_constants + 2158
 13998 0000941D [6E08000000000000] 
 13999 00009425 50                      	push rax
 14000 00009426 6A02                    	push 2	; arg count
 14001 00009428 488B4510                	mov rax, ENV
 14002 0000942C 488B00                  	mov rax, qword [rax + 8 * 0]
 14003 0000942F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 14004 00009432 803804                  	cmp byte [rax], T_closure
 14005 00009435 0F852BCC0000            	jne L_error_non_closure
 14006 0000943B FF7001                  	push SOB_CLOSURE_ENV(rax)
 14007                                  
 14008                                  	; recycling the current frame
 14009 0000943E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14010 00009441 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14011 00009444 B906000000              	mov rcx, 2 + 4
 14012 00009449 488B5D18                	mov rbx, COUNT
 14013 0000944D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14014 00009452 488D55F8                	lea rdx, [rbp - 8 * 1]
 14015                                  .L_tc_recycle_frame_loop_044c:
 14016 00009456 4883F900                	cmp rcx, 0
 14017 0000945A 7413                    	je .L_tc_recycle_frame_done_044c
 14018 0000945C 488B32                  	mov rsi, qword [rdx]
 14019 0000945F 488933                  	mov qword [rbx], rsi
 14020 00009462 48FFC9                  	dec rcx
 14021 00009465 4883EB08                	sub rbx, 8 * 1
 14022 00009469 4883EA08                	sub rdx, 8 * 1
 14023 0000946D EBE7                    	jmp .L_tc_recycle_frame_loop_044c
 14024                                  .L_tc_recycle_frame_done_044c:
 14025 0000946F 488D6308                	lea rsp, [rbx + 8 * 1]
 14026 00009473 5D                      	pop rbp	; the proc will restore it!
 14027 00009474 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14028 00009477 E982010000              	jmp .L_if_end_025c
 14029                                  .L_if_else_025c:
 14030                                  	; preparing a tail-call
 14031                                  	; preparing a non tail-call
 14032 0000947C 488B4528                	mov rax, PARAM(1)	; param s
 14033 00009480 50                      	push rax
 14034 00009481 48B8-                   	mov rax, L_constants + 2158
 14034 00009483 [6E08000000000000] 
 14035 0000948B 50                      	push rax
 14036 0000948C 488B0425[8F150000]      	mov rax, qword [free_var_119]	; free var *
 14037 00009494 803805                  	cmp byte [rax], T_undefined
 14038 00009497 0F8445CB0000            	je L_error_fvar_undefined
 14039 0000949D 50                      	push rax
 14040 0000949E 6A03                    	push 3	; arg count
 14041 000094A0 488B0425[18150000]      	mov rax, qword [free_var_112]	; free var fold-left
 14042 000094A8 803805                  	cmp byte [rax], T_undefined
 14043 000094AB 0F8431CB0000            	je L_error_fvar_undefined
 14044 000094B1 803804                  	cmp byte [rax], T_closure
 14045 000094B4 0F85ACCB0000            	jne L_error_non_closure
 14046 000094BA FF7001                  	push SOB_CLOSURE_ENV(rax)
 14047 000094BD FF5009                  	call SOB_CLOSURE_CODE(rax)
 14048 000094C0 50                      	push rax
 14049 000094C1 6A01                    	push 1	; arg count
 14050 000094C3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14051 000094C8 E842CC0000              	call malloc
 14052 000094CD 50                      	push rax
 14053 000094CE BF10000000              	mov rdi, 8 * 2	; new rib
 14054 000094D3 E837CC0000              	call malloc
 14055 000094D8 50                      	push rax
 14056 000094D9 BF20000000              	mov rdi, 8 * 4	; extended env
 14057 000094DE E82CCC0000              	call malloc
 14058 000094E3 488B7D10                	mov rdi, ENV
 14059 000094E7 BE00000000              	mov rsi, 0
 14060 000094EC BA01000000              	mov rdx, 1
 14061                                  .L_lambda_simple_env_loop_0338:	; ext_env[i + 1] <-- env[i]
 14062 000094F1 4883FE03                	cmp rsi, 3
 14063 000094F5 7410                    	je .L_lambda_simple_env_end_0338
 14064 000094F7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14065 000094FB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14066 000094FF 48FFC6                  	inc rsi
 14067 00009502 48FFC2                  	inc rdx
 14068 00009505 EBEA                    	jmp .L_lambda_simple_env_loop_0338
 14069                                  .L_lambda_simple_env_end_0338:
 14070 00009507 5B                      	pop rbx
 14071 00009508 BE00000000              	mov rsi, 0
 14072                                  .L_lambda_simple_params_loop_0338:	; copy params
 14073 0000950D 4883FE02                	cmp rsi, 2
 14074 00009511 740E                    	je .L_lambda_simple_params_end_0338
 14075 00009513 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14076 00009518 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14077 0000951C 48FFC6                  	inc rsi
 14078 0000951F EBEC                    	jmp .L_lambda_simple_params_loop_0338
 14079                                  .L_lambda_simple_params_end_0338:
 14080 00009521 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14081 00009524 4889C3                  	mov rbx, rax
 14082 00009527 58                      	pop rax
 14083 00009528 C60004                  	mov byte [rax], T_closure
 14084 0000952B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14085 0000952F 48C74009[3C950000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0338
 14086 00009537 E97D000000              	jmp .L_lambda_simple_end_0338
 14087                                  .L_lambda_simple_code_0338:	; lambda-simple body
 14088 0000953C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14089 00009542 740B                    	je .L_lambda_simple_arity_check_ok_0338
 14090 00009544 FF742410                	push qword [rsp + 8 * 2]
 14091 00009548 6A01                    	push 1
 14092 0000954A E979CB0000              	jmp L_error_incorrect_arity_simple
 14093                                  .L_lambda_simple_arity_check_ok_0338:
 14094 0000954F C8000000                	enter 0, 0
 14095                                  	; preparing a tail-call
 14096 00009553 488B4520                	mov rax, PARAM(0)	; param b
 14097 00009557 50                      	push rax
 14098 00009558 488B4510                	mov rax, ENV
 14099 0000955C 488B00                  	mov rax, qword [rax + 8 * 0]
 14100 0000955F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 14101 00009562 50                      	push rax
 14102 00009563 6A02                    	push 2	; arg count
 14103 00009565 488B4510                	mov rax, ENV
 14104 00009569 488B4008                	mov rax, qword [rax + 8 * 1]
 14105 0000956D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 14106 00009570 803804                  	cmp byte [rax], T_closure
 14107 00009573 0F85EDCA0000            	jne L_error_non_closure
 14108 00009579 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14109                                  
 14110                                  	; recycling the current frame
 14111 0000957C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14112 0000957F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14113 00009582 B906000000              	mov rcx, 2 + 4
 14114 00009587 488B5D18                	mov rbx, COUNT
 14115 0000958B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14116 00009590 488D55F8                	lea rdx, [rbp - 8 * 1]
 14117                                  .L_tc_recycle_frame_loop_044d:
 14118 00009594 4883F900                	cmp rcx, 0
 14119 00009598 7413                    	je .L_tc_recycle_frame_done_044d
 14120 0000959A 488B32                  	mov rsi, qword [rdx]
 14121 0000959D 488933                  	mov qword [rbx], rsi
 14122 000095A0 48FFC9                  	dec rcx
 14123 000095A3 4883EB08                	sub rbx, 8 * 1
 14124 000095A7 4883EA08                	sub rdx, 8 * 1
 14125 000095AB EBE7                    	jmp .L_tc_recycle_frame_loop_044d
 14126                                  .L_tc_recycle_frame_done_044d:
 14127 000095AD 488D6308                	lea rsp, [rbx + 8 * 1]
 14128 000095B1 5D                      	pop rbp	; the proc will restore it!
 14129 000095B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14130 000095B5 C9                      	leave
 14131 000095B6 C21800                  	ret AND_KILL_FRAME(1)
 14132                                  .L_lambda_simple_end_0338:	; new closure is in rax
 14133 000095B9 803804                  	cmp byte [rax], T_closure
 14134 000095BC 0F85A4CA0000            	jne L_error_non_closure
 14135 000095C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14136                                  
 14137                                  	; recycling the current frame
 14138 000095C5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14139 000095C8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14140 000095CB B905000000              	mov rcx, 1 + 4
 14141 000095D0 488B5D18                	mov rbx, COUNT
 14142 000095D4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14143 000095D9 488D55F8                	lea rdx, [rbp - 8 * 1]
 14144                                  .L_tc_recycle_frame_loop_044e:
 14145 000095DD 4883F900                	cmp rcx, 0
 14146 000095E1 7413                    	je .L_tc_recycle_frame_done_044e
 14147 000095E3 488B32                  	mov rsi, qword [rdx]
 14148 000095E6 488933                  	mov qword [rbx], rsi
 14149 000095E9 48FFC9                  	dec rcx
 14150 000095EC 4883EB08                	sub rbx, 8 * 1
 14151 000095F0 4883EA08                	sub rdx, 8 * 1
 14152 000095F4 EBE7                    	jmp .L_tc_recycle_frame_loop_044e
 14153                                  .L_tc_recycle_frame_done_044e:
 14154 000095F6 488D6308                	lea rsp, [rbx + 8 * 1]
 14155 000095FA 5D                      	pop rbp	; the proc will restore it!
 14156 000095FB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14157                                  .L_if_end_025c:
 14158 000095FE C9                      	leave
 14159 000095FF C22000                  	ret AND_KILL_FRAME(2)
 14160                                  .L_lambda_opt_end_0071:	; new closure is in rax
 14161 00009602 C9                      	leave
 14162 00009603 C21800                  	ret AND_KILL_FRAME(1)
 14163                                  .L_lambda_simple_end_0337:	; new closure is in rax
 14164 00009606 803804                  	cmp byte [rax], T_closure
 14165 00009609 0F8557CA0000            	jne L_error_non_closure
 14166 0000960F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14167                                  
 14168                                  	; recycling the current frame
 14169 00009612 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14170 00009615 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14171 00009618 B905000000              	mov rcx, 1 + 4
 14172 0000961D 488B5D18                	mov rbx, COUNT
 14173 00009621 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14174 00009626 488D55F8                	lea rdx, [rbp - 8 * 1]
 14175                                  .L_tc_recycle_frame_loop_044f:
 14176 0000962A 4883F900                	cmp rcx, 0
 14177 0000962E 7413                    	je .L_tc_recycle_frame_done_044f
 14178 00009630 488B32                  	mov rsi, qword [rdx]
 14179 00009633 488933                  	mov qword [rbx], rsi
 14180 00009636 48FFC9                  	dec rcx
 14181 00009639 4883EB08                	sub rbx, 8 * 1
 14182 0000963D 4883EA08                	sub rdx, 8 * 1
 14183 00009641 EBE7                    	jmp .L_tc_recycle_frame_loop_044f
 14184                                  .L_tc_recycle_frame_done_044f:
 14185 00009643 488D6308                	lea rsp, [rbx + 8 * 1]
 14186 00009647 5D                      	pop rbp	; the proc will restore it!
 14187 00009648 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14188 0000964B C9                      	leave
 14189 0000964C C21800                  	ret AND_KILL_FRAME(1)
 14190                                  .L_lambda_simple_end_0335:	; new closure is in rax
 14191 0000964F 803804                  	cmp byte [rax], T_closure
 14192 00009652 0F850ECA0000            	jne L_error_non_closure
 14193 00009658 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14194 0000965B FF5009                  	call SOB_CLOSURE_CODE(rax)
 14195 0000965E 48890425[A0150000]      	mov qword [free_var_120], rax
 14196 00009666 48B8-                   	mov rax, sob_void
 14196 00009668 [0000000000000000] 
 14197                                  
 14198 00009670 4889C7                  	mov rdi, rax
 14199 00009673 E8A9CB0000              	call print_sexpr_if_not_void
 14200                                  
 14201 00009678 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14202 0000967D E88DCA0000              	call malloc
 14203 00009682 50                      	push rax
 14204 00009683 BF00000000              	mov rdi, 8 * 0	; new rib
 14205 00009688 E882CA0000              	call malloc
 14206 0000968D 50                      	push rax
 14207 0000968E BF08000000              	mov rdi, 8 * 1	; extended env
 14208 00009693 E877CA0000              	call malloc
 14209 00009698 488B7D10                	mov rdi, ENV
 14210 0000969C BE00000000              	mov rsi, 0
 14211 000096A1 BA01000000              	mov rdx, 1
 14212                                  .L_lambda_simple_env_loop_0339:	; ext_env[i + 1] <-- env[i]
 14213 000096A6 4883FE00                	cmp rsi, 0
 14214 000096AA 7410                    	je .L_lambda_simple_env_end_0339
 14215 000096AC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14216 000096B0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14217 000096B4 48FFC6                  	inc rsi
 14218 000096B7 48FFC2                  	inc rdx
 14219 000096BA EBEA                    	jmp .L_lambda_simple_env_loop_0339
 14220                                  .L_lambda_simple_env_end_0339:
 14221 000096BC 5B                      	pop rbx
 14222 000096BD BE00000000              	mov rsi, 0
 14223                                  .L_lambda_simple_params_loop_0339:	; copy params
 14224 000096C2 4883FE00                	cmp rsi, 0
 14225 000096C6 740E                    	je .L_lambda_simple_params_end_0339
 14226 000096C8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14227 000096CD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14228 000096D1 48FFC6                  	inc rsi
 14229 000096D4 EBEC                    	jmp .L_lambda_simple_params_loop_0339
 14230                                  .L_lambda_simple_params_end_0339:
 14231 000096D6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14232 000096D9 4889C3                  	mov rbx, rax
 14233 000096DC 58                      	pop rax
 14234 000096DD C60004                  	mov byte [rax], T_closure
 14235 000096E0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14236 000096E4 48C74009[F1960000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0339
 14237 000096EC E90C010000              	jmp .L_lambda_simple_end_0339
 14238                                  .L_lambda_simple_code_0339:	; lambda-simple body
 14239 000096F1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14240 000096F7 740B                    	je .L_lambda_simple_arity_check_ok_0339
 14241 000096F9 FF742410                	push qword [rsp + 8 * 2]
 14242 000096FD 6A01                    	push 1
 14243 000096FF E9C4C90000              	jmp L_error_incorrect_arity_simple
 14244                                  .L_lambda_simple_arity_check_ok_0339:
 14245 00009704 C8000000                	enter 0, 0
 14246                                  	; preparing a non tail-call
 14247 00009708 488B4520                	mov rax, PARAM(0)	; param n
 14248 0000970C 50                      	push rax
 14249 0000970D 6A01                    	push 1	; arg count
 14250 0000970F 488B0425[730F0000]      	mov rax, qword [free_var_27]	; free var zero?
 14251 00009717 803805                  	cmp byte [rax], T_undefined
 14252 0000971A 0F84C2C80000            	je L_error_fvar_undefined
 14253 00009720 803804                  	cmp byte [rax], T_closure
 14254 00009723 0F853DC90000            	jne L_error_non_closure
 14255 00009729 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14256 0000972C FF5009                  	call SOB_CLOSURE_CODE(rax)
 14257 0000972F 483D[02000000]          	cmp rax, sob_boolean_false
 14258 00009735 740F                    	je .L_if_else_025d
 14259 00009737 48B8-                   	mov rax, L_constants + 2158
 14259 00009739 [6E08000000000000] 
 14260 00009741 E9B3000000              	jmp .L_if_end_025d
 14261                                  .L_if_else_025d:
 14262                                  	; preparing a tail-call
 14263                                  	; preparing a non tail-call
 14264                                  	; preparing a non tail-call
 14265 00009746 48B8-                   	mov rax, L_constants + 2158
 14265 00009748 [6E08000000000000] 
 14266 00009750 50                      	push rax
 14267 00009751 488B4520                	mov rax, PARAM(0)	; param n
 14268 00009755 50                      	push rax
 14269 00009756 6A02                    	push 2	; arg count
 14270 00009758 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 14271 00009760 803805                  	cmp byte [rax], T_undefined
 14272 00009763 0F8479C80000            	je L_error_fvar_undefined
 14273 00009769 803804                  	cmp byte [rax], T_closure
 14274 0000976C 0F85F4C80000            	jne L_error_non_closure
 14275 00009772 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14276 00009775 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14277 00009778 50                      	push rax
 14278 00009779 6A01                    	push 1	; arg count
 14279 0000977B 488B0425[B1150000]      	mov rax, qword [free_var_121]	; free var fact
 14280 00009783 803805                  	cmp byte [rax], T_undefined
 14281 00009786 0F8456C80000            	je L_error_fvar_undefined
 14282 0000978C 803804                  	cmp byte [rax], T_closure
 14283 0000978F 0F85D1C80000            	jne L_error_non_closure
 14284 00009795 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14285 00009798 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14286 0000979B 50                      	push rax
 14287 0000979C 488B4520                	mov rax, PARAM(0)	; param n
 14288 000097A0 50                      	push rax
 14289 000097A1 6A02                    	push 2	; arg count
 14290 000097A3 488B0425[8F150000]      	mov rax, qword [free_var_119]	; free var *
 14291 000097AB 803805                  	cmp byte [rax], T_undefined
 14292 000097AE 0F842EC80000            	je L_error_fvar_undefined
 14293 000097B4 803804                  	cmp byte [rax], T_closure
 14294 000097B7 0F85A9C80000            	jne L_error_non_closure
 14295 000097BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 14296                                  
 14297                                  	; recycling the current frame
 14298 000097C0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14299 000097C3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14300 000097C6 B906000000              	mov rcx, 2 + 4
 14301 000097CB 488B5D18                	mov rbx, COUNT
 14302 000097CF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14303 000097D4 488D55F8                	lea rdx, [rbp - 8 * 1]
 14304                                  .L_tc_recycle_frame_loop_0450:
 14305 000097D8 4883F900                	cmp rcx, 0
 14306 000097DC 7413                    	je .L_tc_recycle_frame_done_0450
 14307 000097DE 488B32                  	mov rsi, qword [rdx]
 14308 000097E1 488933                  	mov qword [rbx], rsi
 14309 000097E4 48FFC9                  	dec rcx
 14310 000097E7 4883EB08                	sub rbx, 8 * 1
 14311 000097EB 4883EA08                	sub rdx, 8 * 1
 14312 000097EF EBE7                    	jmp .L_tc_recycle_frame_loop_0450
 14313                                  .L_tc_recycle_frame_done_0450:
 14314 000097F1 488D6308                	lea rsp, [rbx + 8 * 1]
 14315 000097F5 5D                      	pop rbp	; the proc will restore it!
 14316 000097F6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14317                                  .L_if_end_025d:
 14318 000097F9 C9                      	leave
 14319 000097FA C21800                  	ret AND_KILL_FRAME(1)
 14320                                  .L_lambda_simple_end_0339:	; new closure is in rax
 14321 000097FD 48890425[B1150000]      	mov qword [free_var_121], rax
 14322 00009805 48B8-                   	mov rax, sob_void
 14322 00009807 [0000000000000000] 
 14323                                  
 14324 0000980F 4889C7                  	mov rdi, rax
 14325 00009812 E80ACA0000              	call print_sexpr_if_not_void
 14326                                  
 14327 00009817 48B8-                   	mov rax, L_constants + 0
 14327 00009819 [0000000000000000] 
 14328 00009821 48890425[C2150000]      	mov qword [free_var_122], rax
 14329 00009829 48B8-                   	mov rax, sob_void
 14329 0000982B [0000000000000000] 
 14330                                  
 14331 00009833 4889C7                  	mov rdi, rax
 14332 00009836 E8E6C90000              	call print_sexpr_if_not_void
 14333                                  
 14334 0000983B 48B8-                   	mov rax, L_constants + 0
 14334 0000983D [0000000000000000] 
 14335 00009845 48890425[D3150000]      	mov qword [free_var_123], rax
 14336 0000984D 48B8-                   	mov rax, sob_void
 14336 0000984F [0000000000000000] 
 14337                                  
 14338 00009857 4889C7                  	mov rdi, rax
 14339 0000985A E8C2C90000              	call print_sexpr_if_not_void
 14340                                  
 14341 0000985F 48B8-                   	mov rax, L_constants + 0
 14341 00009861 [0000000000000000] 
 14342 00009869 48890425[E4150000]      	mov qword [free_var_124], rax
 14343 00009871 48B8-                   	mov rax, sob_void
 14343 00009873 [0000000000000000] 
 14344                                  
 14345 0000987B 4889C7                  	mov rdi, rax
 14346 0000987E E89EC90000              	call print_sexpr_if_not_void
 14347                                  
 14348 00009883 48B8-                   	mov rax, L_constants + 0
 14348 00009885 [0000000000000000] 
 14349 0000988D 48890425[F5150000]      	mov qword [free_var_125], rax
 14350 00009895 48B8-                   	mov rax, sob_void
 14350 00009897 [0000000000000000] 
 14351                                  
 14352 0000989F 4889C7                  	mov rdi, rax
 14353 000098A2 E87AC90000              	call print_sexpr_if_not_void
 14354                                  
 14355 000098A7 48B8-                   	mov rax, L_constants + 0
 14355 000098A9 [0000000000000000] 
 14356 000098B1 48890425[06160000]      	mov qword [free_var_126], rax
 14357 000098B9 48B8-                   	mov rax, sob_void
 14357 000098BB [0000000000000000] 
 14358                                  
 14359 000098C3 4889C7                  	mov rdi, rax
 14360 000098C6 E856C90000              	call print_sexpr_if_not_void
 14361                                  
 14362                                  	; preparing a non tail-call
 14363 000098CB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14364 000098D0 E83AC80000              	call malloc
 14365 000098D5 50                      	push rax
 14366 000098D6 BF00000000              	mov rdi, 8 * 0	; new rib
 14367 000098DB E82FC80000              	call malloc
 14368 000098E0 50                      	push rax
 14369 000098E1 BF08000000              	mov rdi, 8 * 1	; extended env
 14370 000098E6 E824C80000              	call malloc
 14371 000098EB 488B7D10                	mov rdi, ENV
 14372 000098EF BE00000000              	mov rsi, 0
 14373 000098F4 BA01000000              	mov rdx, 1
 14374                                  .L_lambda_simple_env_loop_033a:	; ext_env[i + 1] <-- env[i]
 14375 000098F9 4883FE00                	cmp rsi, 0
 14376 000098FD 7410                    	je .L_lambda_simple_env_end_033a
 14377 000098FF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14378 00009903 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14379 00009907 48FFC6                  	inc rsi
 14380 0000990A 48FFC2                  	inc rdx
 14381 0000990D EBEA                    	jmp .L_lambda_simple_env_loop_033a
 14382                                  .L_lambda_simple_env_end_033a:
 14383 0000990F 5B                      	pop rbx
 14384 00009910 BE00000000              	mov rsi, 0
 14385                                  .L_lambda_simple_params_loop_033a:	; copy params
 14386 00009915 4883FE00                	cmp rsi, 0
 14387 00009919 740E                    	je .L_lambda_simple_params_end_033a
 14388 0000991B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14389 00009920 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14390 00009924 48FFC6                  	inc rsi
 14391 00009927 EBEC                    	jmp .L_lambda_simple_params_loop_033a
 14392                                  .L_lambda_simple_params_end_033a:
 14393 00009929 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14394 0000992C 4889C3                  	mov rbx, rax
 14395 0000992F 58                      	pop rax
 14396 00009930 C60004                  	mov byte [rax], T_closure
 14397 00009933 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14398 00009937 48C74009[44990000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_033a
 14399 0000993F E989000000              	jmp .L_lambda_simple_end_033a
 14400                                  .L_lambda_simple_code_033a:	; lambda-simple body
 14401 00009944 48837C241000            	cmp qword [rsp + 8 * 2], 0
 14402 0000994A 740B                    	je .L_lambda_simple_arity_check_ok_033a
 14403 0000994C FF742410                	push qword [rsp + 8 * 2]
 14404 00009950 6A00                    	push 0
 14405 00009952 E971C70000              	jmp L_error_incorrect_arity_simple
 14406                                  .L_lambda_simple_arity_check_ok_033a:
 14407 00009957 C8000000                	enter 0, 0
 14408                                  	; preparing a tail-call
 14409 0000995B 48B8-                   	mov rax, L_constants + 2296
 14409 0000995D [F808000000000000] 
 14410 00009965 50                      	push rax
 14411 00009966 48B8-                   	mov rax, L_constants + 2287
 14411 00009968 [EF08000000000000] 
 14412 00009970 50                      	push rax
 14413 00009971 6A02                    	push 2	; arg count
 14414 00009973 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
 14415 0000997B 803805                  	cmp byte [rax], T_undefined
 14416 0000997E 0F845EC60000            	je L_error_fvar_undefined
 14417 00009984 803804                  	cmp byte [rax], T_closure
 14418 00009987 0F85D9C60000            	jne L_error_non_closure
 14419 0000998D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14420                                  
 14421                                  	; recycling the current frame
 14422 00009990 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14423 00009993 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14424 00009996 B906000000              	mov rcx, 2 + 4
 14425 0000999B 488B5D18                	mov rbx, COUNT
 14426 0000999F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14427 000099A4 488D55F8                	lea rdx, [rbp - 8 * 1]
 14428                                  .L_tc_recycle_frame_loop_0451:
 14429 000099A8 4883F900                	cmp rcx, 0
 14430 000099AC 7413                    	je .L_tc_recycle_frame_done_0451
 14431 000099AE 488B32                  	mov rsi, qword [rdx]
 14432 000099B1 488933                  	mov qword [rbx], rsi
 14433 000099B4 48FFC9                  	dec rcx
 14434 000099B7 4883EB08                	sub rbx, 8 * 1
 14435 000099BB 4883EA08                	sub rdx, 8 * 1
 14436 000099BF EBE7                    	jmp .L_tc_recycle_frame_loop_0451
 14437                                  .L_tc_recycle_frame_done_0451:
 14438 000099C1 488D6308                	lea rsp, [rbx + 8 * 1]
 14439 000099C5 5D                      	pop rbp	; the proc will restore it!
 14440 000099C6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14441 000099C9 C9                      	leave
 14442 000099CA C21000                  	ret AND_KILL_FRAME(0)
 14443                                  .L_lambda_simple_end_033a:	; new closure is in rax
 14444 000099CD 50                      	push rax
 14445 000099CE 6A01                    	push 1	; arg count
 14446 000099D0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14447 000099D5 E835C70000              	call malloc
 14448 000099DA 50                      	push rax
 14449 000099DB BF00000000              	mov rdi, 8 * 0	; new rib
 14450 000099E0 E82AC70000              	call malloc
 14451 000099E5 50                      	push rax
 14452 000099E6 BF08000000              	mov rdi, 8 * 1	; extended env
 14453 000099EB E81FC70000              	call malloc
 14454 000099F0 488B7D10                	mov rdi, ENV
 14455 000099F4 BE00000000              	mov rsi, 0
 14456 000099F9 BA01000000              	mov rdx, 1
 14457                                  .L_lambda_simple_env_loop_033b:	; ext_env[i + 1] <-- env[i]
 14458 000099FE 4883FE00                	cmp rsi, 0
 14459 00009A02 7410                    	je .L_lambda_simple_env_end_033b
 14460 00009A04 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14461 00009A08 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14462 00009A0C 48FFC6                  	inc rsi
 14463 00009A0F 48FFC2                  	inc rdx
 14464 00009A12 EBEA                    	jmp .L_lambda_simple_env_loop_033b
 14465                                  .L_lambda_simple_env_end_033b:
 14466 00009A14 5B                      	pop rbx
 14467 00009A15 BE00000000              	mov rsi, 0
 14468                                  .L_lambda_simple_params_loop_033b:	; copy params
 14469 00009A1A 4883FE00                	cmp rsi, 0
 14470 00009A1E 740E                    	je .L_lambda_simple_params_end_033b
 14471 00009A20 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14472 00009A25 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14473 00009A29 48FFC6                  	inc rsi
 14474 00009A2C EBEC                    	jmp .L_lambda_simple_params_loop_033b
 14475                                  .L_lambda_simple_params_end_033b:
 14476 00009A2E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14477 00009A31 4889C3                  	mov rbx, rax
 14478 00009A34 58                      	pop rax
 14479 00009A35 C60004                  	mov byte [rax], T_closure
 14480 00009A38 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14481 00009A3C 48C74009[499A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_033b
 14482 00009A44 E96F190000              	jmp .L_lambda_simple_end_033b
 14483                                  .L_lambda_simple_code_033b:	; lambda-simple body
 14484 00009A49 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14485 00009A4F 740B                    	je .L_lambda_simple_arity_check_ok_033b
 14486 00009A51 FF742410                	push qword [rsp + 8 * 2]
 14487 00009A55 6A01                    	push 1
 14488 00009A57 E96CC60000              	jmp L_error_incorrect_arity_simple
 14489                                  .L_lambda_simple_arity_check_ok_033b:
 14490 00009A5C C8000000                	enter 0, 0
 14491                                  	; preparing a tail-call
 14492 00009A60 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14493 00009A65 E8A5C60000              	call malloc
 14494 00009A6A 50                      	push rax
 14495 00009A6B BF08000000              	mov rdi, 8 * 1	; new rib
 14496 00009A70 E89AC60000              	call malloc
 14497 00009A75 50                      	push rax
 14498 00009A76 BF10000000              	mov rdi, 8 * 2	; extended env
 14499 00009A7B E88FC60000              	call malloc
 14500 00009A80 488B7D10                	mov rdi, ENV
 14501 00009A84 BE00000000              	mov rsi, 0
 14502 00009A89 BA01000000              	mov rdx, 1
 14503                                  .L_lambda_simple_env_loop_033c:	; ext_env[i + 1] <-- env[i]
 14504 00009A8E 4883FE01                	cmp rsi, 1
 14505 00009A92 7410                    	je .L_lambda_simple_env_end_033c
 14506 00009A94 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14507 00009A98 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14508 00009A9C 48FFC6                  	inc rsi
 14509 00009A9F 48FFC2                  	inc rdx
 14510 00009AA2 EBEA                    	jmp .L_lambda_simple_env_loop_033c
 14511                                  .L_lambda_simple_env_end_033c:
 14512 00009AA4 5B                      	pop rbx
 14513 00009AA5 BE00000000              	mov rsi, 0
 14514                                  .L_lambda_simple_params_loop_033c:	; copy params
 14515 00009AAA 4883FE01                	cmp rsi, 1
 14516 00009AAE 740E                    	je .L_lambda_simple_params_end_033c
 14517 00009AB0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14518 00009AB5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14519 00009AB9 48FFC6                  	inc rsi
 14520 00009ABC EBEC                    	jmp .L_lambda_simple_params_loop_033c
 14521                                  .L_lambda_simple_params_end_033c:
 14522 00009ABE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14523 00009AC1 4889C3                  	mov rbx, rax
 14524 00009AC4 58                      	pop rax
 14525 00009AC5 C60004                  	mov byte [rax], T_closure
 14526 00009AC8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14527 00009ACC 48C74009[D99A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_033c
 14528 00009AD4 E98C080000              	jmp .L_lambda_simple_end_033c
 14529                                  .L_lambda_simple_code_033c:	; lambda-simple body
 14530 00009AD9 48837C241003            	cmp qword [rsp + 8 * 2], 3
 14531 00009ADF 740B                    	je .L_lambda_simple_arity_check_ok_033c
 14532 00009AE1 FF742410                	push qword [rsp + 8 * 2]
 14533 00009AE5 6A03                    	push 3
 14534 00009AE7 E9DCC50000              	jmp L_error_incorrect_arity_simple
 14535                                  .L_lambda_simple_arity_check_ok_033c:
 14536 00009AEC C8000000                	enter 0, 0
 14537 00009AF0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14538 00009AF5 E815C60000              	call malloc
 14539 00009AFA 50                      	push rax
 14540 00009AFB BF18000000              	mov rdi, 8 * 3	; new rib
 14541 00009B00 E80AC60000              	call malloc
 14542 00009B05 50                      	push rax
 14543 00009B06 BF18000000              	mov rdi, 8 * 3	; extended env
 14544 00009B0B E8FFC50000              	call malloc
 14545 00009B10 488B7D10                	mov rdi, ENV
 14546 00009B14 BE00000000              	mov rsi, 0
 14547 00009B19 BA01000000              	mov rdx, 1
 14548                                  .L_lambda_simple_env_loop_033d:	; ext_env[i + 1] <-- env[i]
 14549 00009B1E 4883FE02                	cmp rsi, 2
 14550 00009B22 7410                    	je .L_lambda_simple_env_end_033d
 14551 00009B24 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14552 00009B28 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14553 00009B2C 48FFC6                  	inc rsi
 14554 00009B2F 48FFC2                  	inc rdx
 14555 00009B32 EBEA                    	jmp .L_lambda_simple_env_loop_033d
 14556                                  .L_lambda_simple_env_end_033d:
 14557 00009B34 5B                      	pop rbx
 14558 00009B35 BE00000000              	mov rsi, 0
 14559                                  .L_lambda_simple_params_loop_033d:	; copy params
 14560 00009B3A 4883FE03                	cmp rsi, 3
 14561 00009B3E 740E                    	je .L_lambda_simple_params_end_033d
 14562 00009B40 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14563 00009B45 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14564 00009B49 48FFC6                  	inc rsi
 14565 00009B4C EBEC                    	jmp .L_lambda_simple_params_loop_033d
 14566                                  .L_lambda_simple_params_end_033d:
 14567 00009B4E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14568 00009B51 4889C3                  	mov rbx, rax
 14569 00009B54 58                      	pop rax
 14570 00009B55 C60004                  	mov byte [rax], T_closure
 14571 00009B58 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14572 00009B5C 48C74009[699B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_033d
 14573 00009B64 E9F8070000              	jmp .L_lambda_simple_end_033d
 14574                                  .L_lambda_simple_code_033d:	; lambda-simple body
 14575 00009B69 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14576 00009B6F 740B                    	je .L_lambda_simple_arity_check_ok_033d
 14577 00009B71 FF742410                	push qword [rsp + 8 * 2]
 14578 00009B75 6A02                    	push 2
 14579 00009B77 E94CC50000              	jmp L_error_incorrect_arity_simple
 14580                                  .L_lambda_simple_arity_check_ok_033d:
 14581 00009B7C C8000000                	enter 0, 0
 14582                                  	; preparing a non tail-call
 14583 00009B80 488B4520                	mov rax, PARAM(0)	; param a
 14584 00009B84 50                      	push rax
 14585 00009B85 6A01                    	push 1	; arg count
 14586 00009B87 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 14587 00009B8F 803805                  	cmp byte [rax], T_undefined
 14588 00009B92 0F844AC40000            	je L_error_fvar_undefined
 14589 00009B98 803804                  	cmp byte [rax], T_closure
 14590 00009B9B 0F85C5C40000            	jne L_error_non_closure
 14591 00009BA1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14592 00009BA4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14593 00009BA7 483D[02000000]          	cmp rax, sob_boolean_false
 14594 00009BAD 0F8451020000            	je .L_if_else_025e
 14595                                  	; preparing a non tail-call
 14596 00009BB3 488B4528                	mov rax, PARAM(1)	; param b
 14597 00009BB7 50                      	push rax
 14598 00009BB8 6A01                    	push 1	; arg count
 14599 00009BBA 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 14600 00009BC2 803805                  	cmp byte [rax], T_undefined
 14601 00009BC5 0F8417C40000            	je L_error_fvar_undefined
 14602 00009BCB 803804                  	cmp byte [rax], T_closure
 14603 00009BCE 0F8592C40000            	jne L_error_non_closure
 14604 00009BD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14605 00009BD7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14606 00009BDA 483D[02000000]          	cmp rax, sob_boolean_false
 14607 00009BE0 7460                    	je .L_if_else_025f
 14608                                  	; preparing a tail-call
 14609 00009BE2 488B4528                	mov rax, PARAM(1)	; param b
 14610 00009BE6 50                      	push rax
 14611 00009BE7 488B4520                	mov rax, PARAM(0)	; param a
 14612 00009BEB 50                      	push rax
 14613 00009BEC 6A02                    	push 2	; arg count
 14614 00009BEE 488B4510                	mov rax, ENV
 14615 00009BF2 488B00                  	mov rax, qword [rax + 8 * 0]
 14616 00009BF5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator-zz
 14617 00009BF8 803804                  	cmp byte [rax], T_closure
 14618 00009BFB 0F8565C40000            	jne L_error_non_closure
 14619 00009C01 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14620                                  
 14621                                  	; recycling the current frame
 14622 00009C04 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14623 00009C07 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14624 00009C0A B906000000              	mov rcx, 2 + 4
 14625 00009C0F 488B5D18                	mov rbx, COUNT
 14626 00009C13 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14627 00009C18 488D55F8                	lea rdx, [rbp - 8 * 1]
 14628                                  .L_tc_recycle_frame_loop_0452:
 14629 00009C1C 4883F900                	cmp rcx, 0
 14630 00009C20 7413                    	je .L_tc_recycle_frame_done_0452
 14631 00009C22 488B32                  	mov rsi, qword [rdx]
 14632 00009C25 488933                  	mov qword [rbx], rsi
 14633 00009C28 48FFC9                  	dec rcx
 14634 00009C2B 4883EB08                	sub rbx, 8 * 1
 14635 00009C2F 4883EA08                	sub rdx, 8 * 1
 14636 00009C33 EBE7                    	jmp .L_tc_recycle_frame_loop_0452
 14637                                  .L_tc_recycle_frame_done_0452:
 14638 00009C35 488D6308                	lea rsp, [rbx + 8 * 1]
 14639 00009C39 5D                      	pop rbp	; the proc will restore it!
 14640 00009C3A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14641 00009C3D E9BD010000              	jmp .L_if_end_025f
 14642                                  .L_if_else_025f:
 14643                                  	; preparing a non tail-call
 14644 00009C42 488B4528                	mov rax, PARAM(1)	; param b
 14645 00009C46 50                      	push rax
 14646 00009C47 6A01                    	push 1	; arg count
 14647 00009C49 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14648 00009C51 803805                  	cmp byte [rax], T_undefined
 14649 00009C54 0F8488C30000            	je L_error_fvar_undefined
 14650 00009C5A 803804                  	cmp byte [rax], T_closure
 14651 00009C5D 0F8503C40000            	jne L_error_non_closure
 14652 00009C63 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14653 00009C66 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14654 00009C69 483D[02000000]          	cmp rax, sob_boolean_false
 14655 00009C6F 0F8484000000            	je .L_if_else_0260
 14656                                  	; preparing a tail-call
 14657 00009C75 488B4528                	mov rax, PARAM(1)	; param b
 14658 00009C79 50                      	push rax
 14659                                  	; preparing a non tail-call
 14660 00009C7A 488B4520                	mov rax, PARAM(0)	; param a
 14661 00009C7E 50                      	push rax
 14662 00009C7F 6A01                    	push 1	; arg count
 14663 00009C81 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 14664 00009C89 803805                  	cmp byte [rax], T_undefined
 14665 00009C8C 0F8450C30000            	je L_error_fvar_undefined
 14666 00009C92 803804                  	cmp byte [rax], T_closure
 14667 00009C95 0F85CBC30000            	jne L_error_non_closure
 14668 00009C9B FF7001                  	push SOB_CLOSURE_ENV(rax)
 14669 00009C9E FF5009                  	call SOB_CLOSURE_CODE(rax)
 14670 00009CA1 50                      	push rax
 14671 00009CA2 6A02                    	push 2	; arg count
 14672 00009CA4 488B4510                	mov rax, ENV
 14673 00009CA8 488B00                  	mov rax, qword [rax + 8 * 0]
 14674 00009CAB 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14675 00009CAF 803804                  	cmp byte [rax], T_closure
 14676 00009CB2 0F85AEC30000            	jne L_error_non_closure
 14677 00009CB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14678                                  
 14679                                  	; recycling the current frame
 14680 00009CBB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14681 00009CBE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14682 00009CC1 B906000000              	mov rcx, 2 + 4
 14683 00009CC6 488B5D18                	mov rbx, COUNT
 14684 00009CCA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14685 00009CCF 488D55F8                	lea rdx, [rbp - 8 * 1]
 14686                                  .L_tc_recycle_frame_loop_0453:
 14687 00009CD3 4883F900                	cmp rcx, 0
 14688 00009CD7 7413                    	je .L_tc_recycle_frame_done_0453
 14689 00009CD9 488B32                  	mov rsi, qword [rdx]
 14690 00009CDC 488933                  	mov qword [rbx], rsi
 14691 00009CDF 48FFC9                  	dec rcx
 14692 00009CE2 4883EB08                	sub rbx, 8 * 1
 14693 00009CE6 4883EA08                	sub rdx, 8 * 1
 14694 00009CEA EBE7                    	jmp .L_tc_recycle_frame_loop_0453
 14695                                  .L_tc_recycle_frame_done_0453:
 14696 00009CEC 488D6308                	lea rsp, [rbx + 8 * 1]
 14697 00009CF0 5D                      	pop rbp	; the proc will restore it!
 14698 00009CF1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14699 00009CF4 E906010000              	jmp .L_if_end_0260
 14700                                  .L_if_else_0260:
 14701                                  	; preparing a non tail-call
 14702 00009CF9 488B4528                	mov rax, PARAM(1)	; param b
 14703 00009CFD 50                      	push rax
 14704 00009CFE 6A01                    	push 1	; arg count
 14705 00009D00 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 14706 00009D08 803805                  	cmp byte [rax], T_undefined
 14707 00009D0B 0F84D1C20000            	je L_error_fvar_undefined
 14708 00009D11 803804                  	cmp byte [rax], T_closure
 14709 00009D14 0F854CC30000            	jne L_error_non_closure
 14710 00009D1A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14711 00009D1D FF5009                  	call SOB_CLOSURE_CODE(rax)
 14712 00009D20 483D[02000000]          	cmp rax, sob_boolean_false
 14713 00009D26 0F8481000000            	je .L_if_else_0261
 14714                                  	; preparing a tail-call
 14715 00009D2C 488B4528                	mov rax, PARAM(1)	; param b
 14716 00009D30 50                      	push rax
 14717                                  	; preparing a non tail-call
 14718 00009D31 488B4520                	mov rax, PARAM(0)	; param a
 14719 00009D35 50                      	push rax
 14720 00009D36 6A01                    	push 1	; arg count
 14721 00009D38 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 14722 00009D40 803805                  	cmp byte [rax], T_undefined
 14723 00009D43 0F8499C20000            	je L_error_fvar_undefined
 14724 00009D49 803804                  	cmp byte [rax], T_closure
 14725 00009D4C 0F8514C30000            	jne L_error_non_closure
 14726 00009D52 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14727 00009D55 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14728 00009D58 50                      	push rax
 14729 00009D59 6A02                    	push 2	; arg count
 14730 00009D5B 488B4510                	mov rax, ENV
 14731 00009D5F 488B00                  	mov rax, qword [rax + 8 * 0]
 14732 00009D62 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14733 00009D66 803804                  	cmp byte [rax], T_closure
 14734 00009D69 0F85F7C20000            	jne L_error_non_closure
 14735 00009D6F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14736                                  
 14737                                  	; recycling the current frame
 14738 00009D72 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14739 00009D75 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14740 00009D78 B906000000              	mov rcx, 2 + 4
 14741 00009D7D 488B5D18                	mov rbx, COUNT
 14742 00009D81 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14743 00009D86 488D55F8                	lea rdx, [rbp - 8 * 1]
 14744                                  .L_tc_recycle_frame_loop_0454:
 14745 00009D8A 4883F900                	cmp rcx, 0
 14746 00009D8E 7413                    	je .L_tc_recycle_frame_done_0454
 14747 00009D90 488B32                  	mov rsi, qword [rdx]
 14748 00009D93 488933                  	mov qword [rbx], rsi
 14749 00009D96 48FFC9                  	dec rcx
 14750 00009D99 4883EB08                	sub rbx, 8 * 1
 14751 00009D9D 4883EA08                	sub rdx, 8 * 1
 14752 00009DA1 EBE7                    	jmp .L_tc_recycle_frame_loop_0454
 14753                                  .L_tc_recycle_frame_done_0454:
 14754 00009DA3 488D6308                	lea rsp, [rbx + 8 * 1]
 14755 00009DA7 5D                      	pop rbp	; the proc will restore it!
 14756 00009DA8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14757 00009DAB EB52                    	jmp .L_if_end_0261
 14758                                  .L_if_else_0261:
 14759                                  	; preparing a tail-call
 14760 00009DAD 6A00                    	push 0	; arg count
 14761 00009DAF 488B4510                	mov rax, ENV
 14762 00009DB3 488B4008                	mov rax, qword [rax + 8 * 1]
 14763 00009DB7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14764 00009DBA 803804                  	cmp byte [rax], T_closure
 14765 00009DBD 0F85A3C20000            	jne L_error_non_closure
 14766 00009DC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14767                                  
 14768                                  	; recycling the current frame
 14769 00009DC6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14770 00009DC9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14771 00009DCC B904000000              	mov rcx, 0 + 4
 14772 00009DD1 488B5D18                	mov rbx, COUNT
 14773 00009DD5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14774 00009DDA 488D55F8                	lea rdx, [rbp - 8 * 1]
 14775                                  .L_tc_recycle_frame_loop_0455:
 14776 00009DDE 4883F900                	cmp rcx, 0
 14777 00009DE2 7413                    	je .L_tc_recycle_frame_done_0455
 14778 00009DE4 488B32                  	mov rsi, qword [rdx]
 14779 00009DE7 488933                  	mov qword [rbx], rsi
 14780 00009DEA 48FFC9                  	dec rcx
 14781 00009DED 4883EB08                	sub rbx, 8 * 1
 14782 00009DF1 4883EA08                	sub rdx, 8 * 1
 14783 00009DF5 EBE7                    	jmp .L_tc_recycle_frame_loop_0455
 14784                                  .L_tc_recycle_frame_done_0455:
 14785 00009DF7 488D6308                	lea rsp, [rbx + 8 * 1]
 14786 00009DFB 5D                      	pop rbp	; the proc will restore it!
 14787 00009DFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14788                                  .L_if_end_0261:
 14789                                  .L_if_end_0260:
 14790                                  .L_if_end_025f:
 14791 00009DFF E959050000              	jmp .L_if_end_025e
 14792                                  .L_if_else_025e:
 14793                                  	; preparing a non tail-call
 14794 00009E04 488B4520                	mov rax, PARAM(0)	; param a
 14795 00009E08 50                      	push rax
 14796 00009E09 6A01                    	push 1	; arg count
 14797 00009E0B 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14798 00009E13 803805                  	cmp byte [rax], T_undefined
 14799 00009E16 0F84C6C10000            	je L_error_fvar_undefined
 14800 00009E1C 803804                  	cmp byte [rax], T_closure
 14801 00009E1F 0F8541C20000            	jne L_error_non_closure
 14802 00009E25 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14803 00009E28 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14804 00009E2B 483D[02000000]          	cmp rax, sob_boolean_false
 14805 00009E31 0F8452020000            	je .L_if_else_0262
 14806                                  	; preparing a non tail-call
 14807 00009E37 488B4528                	mov rax, PARAM(1)	; param b
 14808 00009E3B 50                      	push rax
 14809 00009E3C 6A01                    	push 1	; arg count
 14810 00009E3E 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 14811 00009E46 803805                  	cmp byte [rax], T_undefined
 14812 00009E49 0F8493C10000            	je L_error_fvar_undefined
 14813 00009E4F 803804                  	cmp byte [rax], T_closure
 14814 00009E52 0F850EC20000            	jne L_error_non_closure
 14815 00009E58 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14816 00009E5B FF5009                  	call SOB_CLOSURE_CODE(rax)
 14817 00009E5E 483D[02000000]          	cmp rax, sob_boolean_false
 14818 00009E64 0F8484000000            	je .L_if_else_0263
 14819                                  	; preparing a tail-call
 14820                                  	; preparing a non tail-call
 14821 00009E6A 488B4528                	mov rax, PARAM(1)	; param b
 14822 00009E6E 50                      	push rax
 14823 00009E6F 6A01                    	push 1	; arg count
 14824 00009E71 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 14825 00009E79 803805                  	cmp byte [rax], T_undefined
 14826 00009E7C 0F8460C10000            	je L_error_fvar_undefined
 14827 00009E82 803804                  	cmp byte [rax], T_closure
 14828 00009E85 0F85DBC10000            	jne L_error_non_closure
 14829 00009E8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 14830 00009E8E FF5009                  	call SOB_CLOSURE_CODE(rax)
 14831 00009E91 50                      	push rax
 14832 00009E92 488B4520                	mov rax, PARAM(0)	; param a
 14833 00009E96 50                      	push rax
 14834 00009E97 6A02                    	push 2	; arg count
 14835 00009E99 488B4510                	mov rax, ENV
 14836 00009E9D 488B00                  	mov rax, qword [rax + 8 * 0]
 14837 00009EA0 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14838 00009EA4 803804                  	cmp byte [rax], T_closure
 14839 00009EA7 0F85B9C10000            	jne L_error_non_closure
 14840 00009EAD FF7001                  	push SOB_CLOSURE_ENV(rax)
 14841                                  
 14842                                  	; recycling the current frame
 14843 00009EB0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14844 00009EB3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14845 00009EB6 B906000000              	mov rcx, 2 + 4
 14846 00009EBB 488B5D18                	mov rbx, COUNT
 14847 00009EBF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14848 00009EC4 488D55F8                	lea rdx, [rbp - 8 * 1]
 14849                                  .L_tc_recycle_frame_loop_0456:
 14850 00009EC8 4883F900                	cmp rcx, 0
 14851 00009ECC 7413                    	je .L_tc_recycle_frame_done_0456
 14852 00009ECE 488B32                  	mov rsi, qword [rdx]
 14853 00009ED1 488933                  	mov qword [rbx], rsi
 14854 00009ED4 48FFC9                  	dec rcx
 14855 00009ED7 4883EB08                	sub rbx, 8 * 1
 14856 00009EDB 4883EA08                	sub rdx, 8 * 1
 14857 00009EDF EBE7                    	jmp .L_tc_recycle_frame_loop_0456
 14858                                  .L_tc_recycle_frame_done_0456:
 14859 00009EE1 488D6308                	lea rsp, [rbx + 8 * 1]
 14860 00009EE5 5D                      	pop rbp	; the proc will restore it!
 14861 00009EE6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14862 00009EE9 E996010000              	jmp .L_if_end_0263
 14863                                  .L_if_else_0263:
 14864                                  	; preparing a non tail-call
 14865 00009EEE 488B4528                	mov rax, PARAM(1)	; param b
 14866 00009EF2 50                      	push rax
 14867 00009EF3 6A01                    	push 1	; arg count
 14868 00009EF5 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14869 00009EFD 803805                  	cmp byte [rax], T_undefined
 14870 00009F00 0F84DCC00000            	je L_error_fvar_undefined
 14871 00009F06 803804                  	cmp byte [rax], T_closure
 14872 00009F09 0F8557C10000            	jne L_error_non_closure
 14873 00009F0F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14874 00009F12 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14875 00009F15 483D[02000000]          	cmp rax, sob_boolean_false
 14876 00009F1B 7461                    	je .L_if_else_0264
 14877                                  	; preparing a tail-call
 14878 00009F1D 488B4528                	mov rax, PARAM(1)	; param b
 14879 00009F21 50                      	push rax
 14880 00009F22 488B4520                	mov rax, PARAM(0)	; param a
 14881 00009F26 50                      	push rax
 14882 00009F27 6A02                    	push 2	; arg count
 14883 00009F29 488B4510                	mov rax, ENV
 14884 00009F2D 488B00                  	mov rax, qword [rax + 8 * 0]
 14885 00009F30 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14886 00009F34 803804                  	cmp byte [rax], T_closure
 14887 00009F37 0F8529C10000            	jne L_error_non_closure
 14888 00009F3D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14889                                  
 14890                                  	; recycling the current frame
 14891 00009F40 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14892 00009F43 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14893 00009F46 B906000000              	mov rcx, 2 + 4
 14894 00009F4B 488B5D18                	mov rbx, COUNT
 14895 00009F4F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14896 00009F54 488D55F8                	lea rdx, [rbp - 8 * 1]
 14897                                  .L_tc_recycle_frame_loop_0457:
 14898 00009F58 4883F900                	cmp rcx, 0
 14899 00009F5C 7413                    	je .L_tc_recycle_frame_done_0457
 14900 00009F5E 488B32                  	mov rsi, qword [rdx]
 14901 00009F61 488933                  	mov qword [rbx], rsi
 14902 00009F64 48FFC9                  	dec rcx
 14903 00009F67 4883EB08                	sub rbx, 8 * 1
 14904 00009F6B 4883EA08                	sub rdx, 8 * 1
 14905 00009F6F EBE7                    	jmp .L_tc_recycle_frame_loop_0457
 14906                                  .L_tc_recycle_frame_done_0457:
 14907 00009F71 488D6308                	lea rsp, [rbx + 8 * 1]
 14908 00009F75 5D                      	pop rbp	; the proc will restore it!
 14909 00009F76 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14910 00009F79 E906010000              	jmp .L_if_end_0264
 14911                                  .L_if_else_0264:
 14912                                  	; preparing a non tail-call
 14913 00009F7E 488B4528                	mov rax, PARAM(1)	; param b
 14914 00009F82 50                      	push rax
 14915 00009F83 6A01                    	push 1	; arg count
 14916 00009F85 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 14917 00009F8D 803805                  	cmp byte [rax], T_undefined
 14918 00009F90 0F844CC00000            	je L_error_fvar_undefined
 14919 00009F96 803804                  	cmp byte [rax], T_closure
 14920 00009F99 0F85C7C00000            	jne L_error_non_closure
 14921 00009F9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14922 00009FA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14923 00009FA5 483D[02000000]          	cmp rax, sob_boolean_false
 14924 00009FAB 0F8481000000            	je .L_if_else_0265
 14925                                  	; preparing a tail-call
 14926 00009FB1 488B4528                	mov rax, PARAM(1)	; param b
 14927 00009FB5 50                      	push rax
 14928                                  	; preparing a non tail-call
 14929 00009FB6 488B4520                	mov rax, PARAM(0)	; param a
 14930 00009FBA 50                      	push rax
 14931 00009FBB 6A01                    	push 1	; arg count
 14932 00009FBD 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 14933 00009FC5 803805                  	cmp byte [rax], T_undefined
 14934 00009FC8 0F8414C00000            	je L_error_fvar_undefined
 14935 00009FCE 803804                  	cmp byte [rax], T_closure
 14936 00009FD1 0F858FC00000            	jne L_error_non_closure
 14937 00009FD7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14938 00009FDA FF5009                  	call SOB_CLOSURE_CODE(rax)
 14939 00009FDD 50                      	push rax
 14940 00009FDE 6A02                    	push 2	; arg count
 14941 00009FE0 488B4510                	mov rax, ENV
 14942 00009FE4 488B00                  	mov rax, qword [rax + 8 * 0]
 14943 00009FE7 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14944 00009FEB 803804                  	cmp byte [rax], T_closure
 14945 00009FEE 0F8572C00000            	jne L_error_non_closure
 14946 00009FF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14947                                  
 14948                                  	; recycling the current frame
 14949 00009FF7 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14950 00009FFA FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14951 00009FFD B906000000              	mov rcx, 2 + 4
 14952 0000A002 488B5D18                	mov rbx, COUNT
 14953 0000A006 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14954 0000A00B 488D55F8                	lea rdx, [rbp - 8 * 1]
 14955                                  .L_tc_recycle_frame_loop_0458:
 14956 0000A00F 4883F900                	cmp rcx, 0
 14957 0000A013 7413                    	je .L_tc_recycle_frame_done_0458
 14958 0000A015 488B32                  	mov rsi, qword [rdx]
 14959 0000A018 488933                  	mov qword [rbx], rsi
 14960 0000A01B 48FFC9                  	dec rcx
 14961 0000A01E 4883EB08                	sub rbx, 8 * 1
 14962 0000A022 4883EA08                	sub rdx, 8 * 1
 14963 0000A026 EBE7                    	jmp .L_tc_recycle_frame_loop_0458
 14964                                  .L_tc_recycle_frame_done_0458:
 14965 0000A028 488D6308                	lea rsp, [rbx + 8 * 1]
 14966 0000A02C 5D                      	pop rbp	; the proc will restore it!
 14967 0000A02D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14968 0000A030 EB52                    	jmp .L_if_end_0265
 14969                                  .L_if_else_0265:
 14970                                  	; preparing a tail-call
 14971 0000A032 6A00                    	push 0	; arg count
 14972 0000A034 488B4510                	mov rax, ENV
 14973 0000A038 488B4008                	mov rax, qword [rax + 8 * 1]
 14974 0000A03C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14975 0000A03F 803804                  	cmp byte [rax], T_closure
 14976 0000A042 0F851EC00000            	jne L_error_non_closure
 14977 0000A048 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14978                                  
 14979                                  	; recycling the current frame
 14980 0000A04B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14981 0000A04E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14982 0000A051 B904000000              	mov rcx, 0 + 4
 14983 0000A056 488B5D18                	mov rbx, COUNT
 14984 0000A05A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14985 0000A05F 488D55F8                	lea rdx, [rbp - 8 * 1]
 14986                                  .L_tc_recycle_frame_loop_0459:
 14987 0000A063 4883F900                	cmp rcx, 0
 14988 0000A067 7413                    	je .L_tc_recycle_frame_done_0459
 14989 0000A069 488B32                  	mov rsi, qword [rdx]
 14990 0000A06C 488933                  	mov qword [rbx], rsi
 14991 0000A06F 48FFC9                  	dec rcx
 14992 0000A072 4883EB08                	sub rbx, 8 * 1
 14993 0000A076 4883EA08                	sub rdx, 8 * 1
 14994 0000A07A EBE7                    	jmp .L_tc_recycle_frame_loop_0459
 14995                                  .L_tc_recycle_frame_done_0459:
 14996 0000A07C 488D6308                	lea rsp, [rbx + 8 * 1]
 14997 0000A080 5D                      	pop rbp	; the proc will restore it!
 14998 0000A081 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14999                                  .L_if_end_0265:
 15000                                  .L_if_end_0264:
 15001                                  .L_if_end_0263:
 15002 0000A084 E9D4020000              	jmp .L_if_end_0262
 15003                                  .L_if_else_0262:
 15004                                  	; preparing a non tail-call
 15005 0000A089 488B4520                	mov rax, PARAM(0)	; param a
 15006 0000A08D 50                      	push rax
 15007 0000A08E 6A01                    	push 1	; arg count
 15008 0000A090 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 15009 0000A098 803805                  	cmp byte [rax], T_undefined
 15010 0000A09B 0F8441BF0000            	je L_error_fvar_undefined
 15011 0000A0A1 803804                  	cmp byte [rax], T_closure
 15012 0000A0A4 0F85BCBF0000            	jne L_error_non_closure
 15013 0000A0AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 15014 0000A0AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 15015 0000A0B0 483D[02000000]          	cmp rax, sob_boolean_false
 15016 0000A0B6 0F844F020000            	je .L_if_else_0266
 15017                                  	; preparing a non tail-call
 15018 0000A0BC 488B4528                	mov rax, PARAM(1)	; param b
 15019 0000A0C0 50                      	push rax
 15020 0000A0C1 6A01                    	push 1	; arg count
 15021 0000A0C3 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 15022 0000A0CB 803805                  	cmp byte [rax], T_undefined
 15023 0000A0CE 0F840EBF0000            	je L_error_fvar_undefined
 15024 0000A0D4 803804                  	cmp byte [rax], T_closure
 15025 0000A0D7 0F8589BF0000            	jne L_error_non_closure
 15026 0000A0DD FF7001                  	push SOB_CLOSURE_ENV(rax)
 15027 0000A0E0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15028 0000A0E3 483D[02000000]          	cmp rax, sob_boolean_false
 15029 0000A0E9 0F8484000000            	je .L_if_else_0267
 15030                                  	; preparing a tail-call
 15031                                  	; preparing a non tail-call
 15032 0000A0EF 488B4528                	mov rax, PARAM(1)	; param b
 15033 0000A0F3 50                      	push rax
 15034 0000A0F4 6A01                    	push 1	; arg count
 15035 0000A0F6 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 15036 0000A0FE 803805                  	cmp byte [rax], T_undefined
 15037 0000A101 0F84DBBE0000            	je L_error_fvar_undefined
 15038 0000A107 803804                  	cmp byte [rax], T_closure
 15039 0000A10A 0F8556BF0000            	jne L_error_non_closure
 15040 0000A110 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15041 0000A113 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15042 0000A116 50                      	push rax
 15043 0000A117 488B4520                	mov rax, PARAM(0)	; param a
 15044 0000A11B 50                      	push rax
 15045 0000A11C 6A02                    	push 2	; arg count
 15046 0000A11E 488B4510                	mov rax, ENV
 15047 0000A122 488B00                  	mov rax, qword [rax + 8 * 0]
 15048 0000A125 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 15049 0000A129 803804                  	cmp byte [rax], T_closure
 15050 0000A12C 0F8534BF0000            	jne L_error_non_closure
 15051 0000A132 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15052                                  
 15053                                  	; recycling the current frame
 15054 0000A135 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15055 0000A138 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15056 0000A13B B906000000              	mov rcx, 2 + 4
 15057 0000A140 488B5D18                	mov rbx, COUNT
 15058 0000A144 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15059 0000A149 488D55F8                	lea rdx, [rbp - 8 * 1]
 15060                                  .L_tc_recycle_frame_loop_045a:
 15061 0000A14D 4883F900                	cmp rcx, 0
 15062 0000A151 7413                    	je .L_tc_recycle_frame_done_045a
 15063 0000A153 488B32                  	mov rsi, qword [rdx]
 15064 0000A156 488933                  	mov qword [rbx], rsi
 15065 0000A159 48FFC9                  	dec rcx
 15066 0000A15C 4883EB08                	sub rbx, 8 * 1
 15067 0000A160 4883EA08                	sub rdx, 8 * 1
 15068 0000A164 EBE7                    	jmp .L_tc_recycle_frame_loop_045a
 15069                                  .L_tc_recycle_frame_done_045a:
 15070 0000A166 488D6308                	lea rsp, [rbx + 8 * 1]
 15071 0000A16A 5D                      	pop rbp	; the proc will restore it!
 15072 0000A16B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15073 0000A16E E996010000              	jmp .L_if_end_0267
 15074                                  .L_if_else_0267:
 15075                                  	; preparing a non tail-call
 15076 0000A173 488B4528                	mov rax, PARAM(1)	; param b
 15077 0000A177 50                      	push rax
 15078 0000A178 6A01                    	push 1	; arg count
 15079 0000A17A 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 15080 0000A182 803805                  	cmp byte [rax], T_undefined
 15081 0000A185 0F8457BE0000            	je L_error_fvar_undefined
 15082 0000A18B 803804                  	cmp byte [rax], T_closure
 15083 0000A18E 0F85D2BE0000            	jne L_error_non_closure
 15084 0000A194 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15085 0000A197 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15086 0000A19A 483D[02000000]          	cmp rax, sob_boolean_false
 15087 0000A1A0 0F8484000000            	je .L_if_else_0268
 15088                                  	; preparing a tail-call
 15089                                  	; preparing a non tail-call
 15090 0000A1A6 488B4528                	mov rax, PARAM(1)	; param b
 15091 0000A1AA 50                      	push rax
 15092 0000A1AB 6A01                    	push 1	; arg count
 15093 0000A1AD 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 15094 0000A1B5 803805                  	cmp byte [rax], T_undefined
 15095 0000A1B8 0F8424BE0000            	je L_error_fvar_undefined
 15096 0000A1BE 803804                  	cmp byte [rax], T_closure
 15097 0000A1C1 0F859FBE0000            	jne L_error_non_closure
 15098 0000A1C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15099 0000A1CA FF5009                  	call SOB_CLOSURE_CODE(rax)
 15100 0000A1CD 50                      	push rax
 15101 0000A1CE 488B4520                	mov rax, PARAM(0)	; param a
 15102 0000A1D2 50                      	push rax
 15103 0000A1D3 6A02                    	push 2	; arg count
 15104 0000A1D5 488B4510                	mov rax, ENV
 15105 0000A1D9 488B00                  	mov rax, qword [rax + 8 * 0]
 15106 0000A1DC 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 15107 0000A1E0 803804                  	cmp byte [rax], T_closure
 15108 0000A1E3 0F857DBE0000            	jne L_error_non_closure
 15109 0000A1E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15110                                  
 15111                                  	; recycling the current frame
 15112 0000A1EC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15113 0000A1EF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15114 0000A1F2 B906000000              	mov rcx, 2 + 4
 15115 0000A1F7 488B5D18                	mov rbx, COUNT
 15116 0000A1FB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15117 0000A200 488D55F8                	lea rdx, [rbp - 8 * 1]
 15118                                  .L_tc_recycle_frame_loop_045b:
 15119 0000A204 4883F900                	cmp rcx, 0
 15120 0000A208 7413                    	je .L_tc_recycle_frame_done_045b
 15121 0000A20A 488B32                  	mov rsi, qword [rdx]
 15122 0000A20D 488933                  	mov qword [rbx], rsi
 15123 0000A210 48FFC9                  	dec rcx
 15124 0000A213 4883EB08                	sub rbx, 8 * 1
 15125 0000A217 4883EA08                	sub rdx, 8 * 1
 15126 0000A21B EBE7                    	jmp .L_tc_recycle_frame_loop_045b
 15127                                  .L_tc_recycle_frame_done_045b:
 15128 0000A21D 488D6308                	lea rsp, [rbx + 8 * 1]
 15129 0000A221 5D                      	pop rbp	; the proc will restore it!
 15130 0000A222 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15131 0000A225 E9DF000000              	jmp .L_if_end_0268
 15132                                  .L_if_else_0268:
 15133                                  	; preparing a non tail-call
 15134 0000A22A 488B4528                	mov rax, PARAM(1)	; param b
 15135 0000A22E 50                      	push rax
 15136 0000A22F 6A01                    	push 1	; arg count
 15137 0000A231 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 15138 0000A239 803805                  	cmp byte [rax], T_undefined
 15139 0000A23C 0F84A0BD0000            	je L_error_fvar_undefined
 15140 0000A242 803804                  	cmp byte [rax], T_closure
 15141 0000A245 0F851BBE0000            	jne L_error_non_closure
 15142 0000A24B FF7001                  	push SOB_CLOSURE_ENV(rax)
 15143 0000A24E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15144 0000A251 483D[02000000]          	cmp rax, sob_boolean_false
 15145 0000A257 745E                    	je .L_if_else_0269
 15146                                  	; preparing a tail-call
 15147 0000A259 488B4528                	mov rax, PARAM(1)	; param b
 15148 0000A25D 50                      	push rax
 15149 0000A25E 488B4520                	mov rax, PARAM(0)	; param a
 15150 0000A262 50                      	push rax
 15151 0000A263 6A02                    	push 2	; arg count
 15152 0000A265 488B4510                	mov rax, ENV
 15153 0000A269 488B00                  	mov rax, qword [rax + 8 * 0]
 15154 0000A26C 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 15155 0000A270 803804                  	cmp byte [rax], T_closure
 15156 0000A273 0F85EDBD0000            	jne L_error_non_closure
 15157 0000A279 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15158                                  
 15159                                  	; recycling the current frame
 15160 0000A27C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15161 0000A27F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15162 0000A282 B906000000              	mov rcx, 2 + 4
 15163 0000A287 488B5D18                	mov rbx, COUNT
 15164 0000A28B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15165 0000A290 488D55F8                	lea rdx, [rbp - 8 * 1]
 15166                                  .L_tc_recycle_frame_loop_045c:
 15167 0000A294 4883F900                	cmp rcx, 0
 15168 0000A298 7413                    	je .L_tc_recycle_frame_done_045c
 15169 0000A29A 488B32                  	mov rsi, qword [rdx]
 15170 0000A29D 488933                  	mov qword [rbx], rsi
 15171 0000A2A0 48FFC9                  	dec rcx
 15172 0000A2A3 4883EB08                	sub rbx, 8 * 1
 15173 0000A2A7 4883EA08                	sub rdx, 8 * 1
 15174 0000A2AB EBE7                    	jmp .L_tc_recycle_frame_loop_045c
 15175                                  .L_tc_recycle_frame_done_045c:
 15176 0000A2AD 488D6308                	lea rsp, [rbx + 8 * 1]
 15177 0000A2B1 5D                      	pop rbp	; the proc will restore it!
 15178 0000A2B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15179 0000A2B5 EB52                    	jmp .L_if_end_0269
 15180                                  .L_if_else_0269:
 15181                                  	; preparing a tail-call
 15182 0000A2B7 6A00                    	push 0	; arg count
 15183 0000A2B9 488B4510                	mov rax, ENV
 15184 0000A2BD 488B4008                	mov rax, qword [rax + 8 * 1]
 15185 0000A2C1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 15186 0000A2C4 803804                  	cmp byte [rax], T_closure
 15187 0000A2C7 0F8599BD0000            	jne L_error_non_closure
 15188 0000A2CD FF7001                  	push SOB_CLOSURE_ENV(rax)
 15189                                  
 15190                                  	; recycling the current frame
 15191 0000A2D0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15192 0000A2D3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15193 0000A2D6 B904000000              	mov rcx, 0 + 4
 15194 0000A2DB 488B5D18                	mov rbx, COUNT
 15195 0000A2DF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15196 0000A2E4 488D55F8                	lea rdx, [rbp - 8 * 1]
 15197                                  .L_tc_recycle_frame_loop_045d:
 15198 0000A2E8 4883F900                	cmp rcx, 0
 15199 0000A2EC 7413                    	je .L_tc_recycle_frame_done_045d
 15200 0000A2EE 488B32                  	mov rsi, qword [rdx]
 15201 0000A2F1 488933                  	mov qword [rbx], rsi
 15202 0000A2F4 48FFC9                  	dec rcx
 15203 0000A2F7 4883EB08                	sub rbx, 8 * 1
 15204 0000A2FB 4883EA08                	sub rdx, 8 * 1
 15205 0000A2FF EBE7                    	jmp .L_tc_recycle_frame_loop_045d
 15206                                  .L_tc_recycle_frame_done_045d:
 15207 0000A301 488D6308                	lea rsp, [rbx + 8 * 1]
 15208 0000A305 5D                      	pop rbp	; the proc will restore it!
 15209 0000A306 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15210                                  .L_if_end_0269:
 15211                                  .L_if_end_0268:
 15212                                  .L_if_end_0267:
 15213 0000A309 EB52                    	jmp .L_if_end_0266
 15214                                  .L_if_else_0266:
 15215                                  	; preparing a tail-call
 15216 0000A30B 6A00                    	push 0	; arg count
 15217 0000A30D 488B4510                	mov rax, ENV
 15218 0000A311 488B4008                	mov rax, qword [rax + 8 * 1]
 15219 0000A315 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 15220 0000A318 803804                  	cmp byte [rax], T_closure
 15221 0000A31B 0F8545BD0000            	jne L_error_non_closure
 15222 0000A321 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15223                                  
 15224                                  	; recycling the current frame
 15225 0000A324 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15226 0000A327 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15227 0000A32A B904000000              	mov rcx, 0 + 4
 15228 0000A32F 488B5D18                	mov rbx, COUNT
 15229 0000A333 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15230 0000A338 488D55F8                	lea rdx, [rbp - 8 * 1]
 15231                                  .L_tc_recycle_frame_loop_045e:
 15232 0000A33C 4883F900                	cmp rcx, 0
 15233 0000A340 7413                    	je .L_tc_recycle_frame_done_045e
 15234 0000A342 488B32                  	mov rsi, qword [rdx]
 15235 0000A345 488933                  	mov qword [rbx], rsi
 15236 0000A348 48FFC9                  	dec rcx
 15237 0000A34B 4883EB08                	sub rbx, 8 * 1
 15238 0000A34F 4883EA08                	sub rdx, 8 * 1
 15239 0000A353 EBE7                    	jmp .L_tc_recycle_frame_loop_045e
 15240                                  .L_tc_recycle_frame_done_045e:
 15241 0000A355 488D6308                	lea rsp, [rbx + 8 * 1]
 15242 0000A359 5D                      	pop rbp	; the proc will restore it!
 15243 0000A35A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15244                                  .L_if_end_0266:
 15245                                  .L_if_end_0262:
 15246                                  .L_if_end_025e:
 15247 0000A35D C9                      	leave
 15248 0000A35E C22000                  	ret AND_KILL_FRAME(2)
 15249                                  .L_lambda_simple_end_033d:	; new closure is in rax
 15250 0000A361 C9                      	leave
 15251 0000A362 C22800                  	ret AND_KILL_FRAME(3)
 15252                                  .L_lambda_simple_end_033c:	; new closure is in rax
 15253 0000A365 50                      	push rax
 15254 0000A366 6A01                    	push 1	; arg count
 15255 0000A368 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15256 0000A36D E89DBD0000              	call malloc
 15257 0000A372 50                      	push rax
 15258 0000A373 BF08000000              	mov rdi, 8 * 1	; new rib
 15259 0000A378 E892BD0000              	call malloc
 15260 0000A37D 50                      	push rax
 15261 0000A37E BF10000000              	mov rdi, 8 * 2	; extended env
 15262 0000A383 E887BD0000              	call malloc
 15263 0000A388 488B7D10                	mov rdi, ENV
 15264 0000A38C BE00000000              	mov rsi, 0
 15265 0000A391 BA01000000              	mov rdx, 1
 15266                                  .L_lambda_simple_env_loop_033e:	; ext_env[i + 1] <-- env[i]
 15267 0000A396 4883FE01                	cmp rsi, 1
 15268 0000A39A 7410                    	je .L_lambda_simple_env_end_033e
 15269 0000A39C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15270 0000A3A0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15271 0000A3A4 48FFC6                  	inc rsi
 15272 0000A3A7 48FFC2                  	inc rdx
 15273 0000A3AA EBEA                    	jmp .L_lambda_simple_env_loop_033e
 15274                                  .L_lambda_simple_env_end_033e:
 15275 0000A3AC 5B                      	pop rbx
 15276 0000A3AD BE00000000              	mov rsi, 0
 15277                                  .L_lambda_simple_params_loop_033e:	; copy params
 15278 0000A3B2 4883FE01                	cmp rsi, 1
 15279 0000A3B6 740E                    	je .L_lambda_simple_params_end_033e
 15280 0000A3B8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15281 0000A3BD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15282 0000A3C1 48FFC6                  	inc rsi
 15283 0000A3C4 EBEC                    	jmp .L_lambda_simple_params_loop_033e
 15284                                  .L_lambda_simple_params_end_033e:
 15285 0000A3C6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15286 0000A3C9 4889C3                  	mov rbx, rax
 15287 0000A3CC 58                      	pop rax
 15288 0000A3CD C60004                  	mov byte [rax], T_closure
 15289 0000A3D0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15290 0000A3D4 48C74009[E1A30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_033e
 15291 0000A3DC E98E0F0000              	jmp .L_lambda_simple_end_033e
 15292                                  .L_lambda_simple_code_033e:	; lambda-simple body
 15293 0000A3E1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15294 0000A3E7 740B                    	je .L_lambda_simple_arity_check_ok_033e
 15295 0000A3E9 FF742410                	push qword [rsp + 8 * 2]
 15296 0000A3ED 6A01                    	push 1
 15297 0000A3EF E9D4BC0000              	jmp L_error_incorrect_arity_simple
 15298                                  .L_lambda_simple_arity_check_ok_033e:
 15299 0000A3F4 C8000000                	enter 0, 0
 15300                                  	; preparing a tail-call
 15301                                  	; preparing a non tail-call
 15302 0000A3F8 488B0425[83100000]      	mov rax, qword [free_var_43]	; free var __bin-less-than-rr
 15303 0000A400 803805                  	cmp byte [rax], T_undefined
 15304 0000A403 0F84D9BB0000            	je L_error_fvar_undefined
 15305 0000A409 50                      	push rax
 15306 0000A40A 488B0425[94100000]      	mov rax, qword [free_var_44]	; free var __bin-less-than-qq
 15307 0000A412 803805                  	cmp byte [rax], T_undefined
 15308 0000A415 0F84C7BB0000            	je L_error_fvar_undefined
 15309 0000A41B 50                      	push rax
 15310 0000A41C 488B0425[A5100000]      	mov rax, qword [free_var_45]	; free var __bin-less-than-zz
 15311 0000A424 803805                  	cmp byte [rax], T_undefined
 15312 0000A427 0F84B5BB0000            	je L_error_fvar_undefined
 15313 0000A42D 50                      	push rax
 15314 0000A42E 6A03                    	push 3	; arg count
 15315 0000A430 488B4520                	mov rax, PARAM(0)	; param make-bin-comparator
 15316 0000A434 803804                  	cmp byte [rax], T_closure
 15317 0000A437 0F8529BC0000            	jne L_error_non_closure
 15318 0000A43D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15319 0000A440 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15320 0000A443 50                      	push rax
 15321 0000A444 6A01                    	push 1	; arg count
 15322 0000A446 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15323 0000A44B E8BFBC0000              	call malloc
 15324 0000A450 50                      	push rax
 15325 0000A451 BF08000000              	mov rdi, 8 * 1	; new rib
 15326 0000A456 E8B4BC0000              	call malloc
 15327 0000A45B 50                      	push rax
 15328 0000A45C BF18000000              	mov rdi, 8 * 3	; extended env
 15329 0000A461 E8A9BC0000              	call malloc
 15330 0000A466 488B7D10                	mov rdi, ENV
 15331 0000A46A BE00000000              	mov rsi, 0
 15332 0000A46F BA01000000              	mov rdx, 1
 15333                                  .L_lambda_simple_env_loop_033f:	; ext_env[i + 1] <-- env[i]
 15334 0000A474 4883FE02                	cmp rsi, 2
 15335 0000A478 7410                    	je .L_lambda_simple_env_end_033f
 15336 0000A47A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15337 0000A47E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15338 0000A482 48FFC6                  	inc rsi
 15339 0000A485 48FFC2                  	inc rdx
 15340 0000A488 EBEA                    	jmp .L_lambda_simple_env_loop_033f
 15341                                  .L_lambda_simple_env_end_033f:
 15342 0000A48A 5B                      	pop rbx
 15343 0000A48B BE00000000              	mov rsi, 0
 15344                                  .L_lambda_simple_params_loop_033f:	; copy params
 15345 0000A490 4883FE01                	cmp rsi, 1
 15346 0000A494 740E                    	je .L_lambda_simple_params_end_033f
 15347 0000A496 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15348 0000A49B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15349 0000A49F 48FFC6                  	inc rsi
 15350 0000A4A2 EBEC                    	jmp .L_lambda_simple_params_loop_033f
 15351                                  .L_lambda_simple_params_end_033f:
 15352 0000A4A4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15353 0000A4A7 4889C3                  	mov rbx, rax
 15354 0000A4AA 58                      	pop rax
 15355 0000A4AB C60004                  	mov byte [rax], T_closure
 15356 0000A4AE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15357 0000A4B2 48C74009[BFA40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_033f
 15358 0000A4BA E9670E0000              	jmp .L_lambda_simple_end_033f
 15359                                  .L_lambda_simple_code_033f:	; lambda-simple body
 15360 0000A4BF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15361 0000A4C5 740B                    	je .L_lambda_simple_arity_check_ok_033f
 15362 0000A4C7 FF742410                	push qword [rsp + 8 * 2]
 15363 0000A4CB 6A01                    	push 1
 15364 0000A4CD E9F6BB0000              	jmp L_error_incorrect_arity_simple
 15365                                  .L_lambda_simple_arity_check_ok_033f:
 15366 0000A4D2 C8000000                	enter 0, 0
 15367                                  	; preparing a tail-call
 15368                                  	; preparing a non tail-call
 15369 0000A4D6 488B0425[B6100000]      	mov rax, qword [free_var_46]	; free var __bin-equal-rr
 15370 0000A4DE 803805                  	cmp byte [rax], T_undefined
 15371 0000A4E1 0F84FBBA0000            	je L_error_fvar_undefined
 15372 0000A4E7 50                      	push rax
 15373 0000A4E8 488B0425[C7100000]      	mov rax, qword [free_var_47]	; free var __bin-equal-qq
 15374 0000A4F0 803805                  	cmp byte [rax], T_undefined
 15375 0000A4F3 0F84E9BA0000            	je L_error_fvar_undefined
 15376 0000A4F9 50                      	push rax
 15377 0000A4FA 488B0425[D8100000]      	mov rax, qword [free_var_48]	; free var __bin-equal-zz
 15378 0000A502 803805                  	cmp byte [rax], T_undefined
 15379 0000A505 0F84D7BA0000            	je L_error_fvar_undefined
 15380 0000A50B 50                      	push rax
 15381 0000A50C 6A03                    	push 3	; arg count
 15382 0000A50E 488B4510                	mov rax, ENV
 15383 0000A512 488B00                  	mov rax, qword [rax + 8 * 0]
 15384 0000A515 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var make-bin-comparator
 15385 0000A518 803804                  	cmp byte [rax], T_closure
 15386 0000A51B 0F8545BB0000            	jne L_error_non_closure
 15387 0000A521 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15388 0000A524 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15389 0000A527 50                      	push rax
 15390 0000A528 6A01                    	push 1	; arg count
 15391 0000A52A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15392 0000A52F E8DBBB0000              	call malloc
 15393 0000A534 50                      	push rax
 15394 0000A535 BF08000000              	mov rdi, 8 * 1	; new rib
 15395 0000A53A E8D0BB0000              	call malloc
 15396 0000A53F 50                      	push rax
 15397 0000A540 BF20000000              	mov rdi, 8 * 4	; extended env
 15398 0000A545 E8C5BB0000              	call malloc
 15399 0000A54A 488B7D10                	mov rdi, ENV
 15400 0000A54E BE00000000              	mov rsi, 0
 15401 0000A553 BA01000000              	mov rdx, 1
 15402                                  .L_lambda_simple_env_loop_0340:	; ext_env[i + 1] <-- env[i]
 15403 0000A558 4883FE03                	cmp rsi, 3
 15404 0000A55C 7410                    	je .L_lambda_simple_env_end_0340
 15405 0000A55E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15406 0000A562 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15407 0000A566 48FFC6                  	inc rsi
 15408 0000A569 48FFC2                  	inc rdx
 15409 0000A56C EBEA                    	jmp .L_lambda_simple_env_loop_0340
 15410                                  .L_lambda_simple_env_end_0340:
 15411 0000A56E 5B                      	pop rbx
 15412 0000A56F BE00000000              	mov rsi, 0
 15413                                  .L_lambda_simple_params_loop_0340:	; copy params
 15414 0000A574 4883FE01                	cmp rsi, 1
 15415 0000A578 740E                    	je .L_lambda_simple_params_end_0340
 15416 0000A57A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15417 0000A57F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15418 0000A583 48FFC6                  	inc rsi
 15419 0000A586 EBEC                    	jmp .L_lambda_simple_params_loop_0340
 15420                                  .L_lambda_simple_params_end_0340:
 15421 0000A588 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15422 0000A58B 4889C3                  	mov rbx, rax
 15423 0000A58E 58                      	pop rax
 15424 0000A58F C60004                  	mov byte [rax], T_closure
 15425 0000A592 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15426 0000A596 48C74009[A3A50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0340
 15427 0000A59E E93A0D0000              	jmp .L_lambda_simple_end_0340
 15428                                  .L_lambda_simple_code_0340:	; lambda-simple body
 15429 0000A5A3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15430 0000A5A9 740B                    	je .L_lambda_simple_arity_check_ok_0340
 15431 0000A5AB FF742410                	push qword [rsp + 8 * 2]
 15432 0000A5AF 6A01                    	push 1
 15433 0000A5B1 E912BB0000              	jmp L_error_incorrect_arity_simple
 15434                                  .L_lambda_simple_arity_check_ok_0340:
 15435 0000A5B6 C8000000                	enter 0, 0
 15436                                  	; preparing a tail-call
 15437 0000A5BA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15438 0000A5BF E84BBB0000              	call malloc
 15439 0000A5C4 50                      	push rax
 15440 0000A5C5 BF08000000              	mov rdi, 8 * 1	; new rib
 15441 0000A5CA E840BB0000              	call malloc
 15442 0000A5CF 50                      	push rax
 15443 0000A5D0 BF28000000              	mov rdi, 8 * 5	; extended env
 15444 0000A5D5 E835BB0000              	call malloc
 15445 0000A5DA 488B7D10                	mov rdi, ENV
 15446 0000A5DE BE00000000              	mov rsi, 0
 15447 0000A5E3 BA01000000              	mov rdx, 1
 15448                                  .L_lambda_simple_env_loop_0341:	; ext_env[i + 1] <-- env[i]
 15449 0000A5E8 4883FE04                	cmp rsi, 4
 15450 0000A5EC 7410                    	je .L_lambda_simple_env_end_0341
 15451 0000A5EE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15452 0000A5F2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15453 0000A5F6 48FFC6                  	inc rsi
 15454 0000A5F9 48FFC2                  	inc rdx
 15455 0000A5FC EBEA                    	jmp .L_lambda_simple_env_loop_0341
 15456                                  .L_lambda_simple_env_end_0341:
 15457 0000A5FE 5B                      	pop rbx
 15458 0000A5FF BE00000000              	mov rsi, 0
 15459                                  .L_lambda_simple_params_loop_0341:	; copy params
 15460 0000A604 4883FE01                	cmp rsi, 1
 15461 0000A608 740E                    	je .L_lambda_simple_params_end_0341
 15462 0000A60A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15463 0000A60F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15464 0000A613 48FFC6                  	inc rsi
 15465 0000A616 EBEC                    	jmp .L_lambda_simple_params_loop_0341
 15466                                  .L_lambda_simple_params_end_0341:
 15467 0000A618 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15468 0000A61B 4889C3                  	mov rbx, rax
 15469 0000A61E 58                      	pop rax
 15470 0000A61F C60004                  	mov byte [rax], T_closure
 15471 0000A622 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15472 0000A626 48C74009[33A60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0341
 15473 0000A62E E99A000000              	jmp .L_lambda_simple_end_0341
 15474                                  .L_lambda_simple_code_0341:	; lambda-simple body
 15475 0000A633 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15476 0000A639 740B                    	je .L_lambda_simple_arity_check_ok_0341
 15477 0000A63B FF742410                	push qword [rsp + 8 * 2]
 15478 0000A63F 6A02                    	push 2
 15479 0000A641 E982BA0000              	jmp L_error_incorrect_arity_simple
 15480                                  .L_lambda_simple_arity_check_ok_0341:
 15481 0000A646 C8000000                	enter 0, 0
 15482                                  	; preparing a tail-call
 15483                                  	; preparing a non tail-call
 15484 0000A64A 488B4528                	mov rax, PARAM(1)	; param b
 15485 0000A64E 50                      	push rax
 15486 0000A64F 488B4520                	mov rax, PARAM(0)	; param a
 15487 0000A653 50                      	push rax
 15488 0000A654 6A02                    	push 2	; arg count
 15489 0000A656 488B4510                	mov rax, ENV
 15490 0000A65A 488B4008                	mov rax, qword [rax + 8 * 1]
 15491 0000A65E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 15492 0000A661 803804                  	cmp byte [rax], T_closure
 15493 0000A664 0F85FCB90000            	jne L_error_non_closure
 15494 0000A66A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15495 0000A66D FF5009                  	call SOB_CLOSURE_CODE(rax)
 15496 0000A670 50                      	push rax
 15497 0000A671 6A01                    	push 1	; arg count
 15498 0000A673 488B0425[90140000]      	mov rax, qword [free_var_104]	; free var not
 15499 0000A67B 803805                  	cmp byte [rax], T_undefined
 15500 0000A67E 0F845EB90000            	je L_error_fvar_undefined
 15501 0000A684 803804                  	cmp byte [rax], T_closure
 15502 0000A687 0F85D9B90000            	jne L_error_non_closure
 15503 0000A68D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15504                                  
 15505                                  	; recycling the current frame
 15506 0000A690 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15507 0000A693 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15508 0000A696 B905000000              	mov rcx, 1 + 4
 15509 0000A69B 488B5D18                	mov rbx, COUNT
 15510 0000A69F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15511 0000A6A4 488D55F8                	lea rdx, [rbp - 8 * 1]
 15512                                  .L_tc_recycle_frame_loop_045f:
 15513 0000A6A8 4883F900                	cmp rcx, 0
 15514 0000A6AC 7413                    	je .L_tc_recycle_frame_done_045f
 15515 0000A6AE 488B32                  	mov rsi, qword [rdx]
 15516 0000A6B1 488933                  	mov qword [rbx], rsi
 15517 0000A6B4 48FFC9                  	dec rcx
 15518 0000A6B7 4883EB08                	sub rbx, 8 * 1
 15519 0000A6BB 4883EA08                	sub rdx, 8 * 1
 15520 0000A6BF EBE7                    	jmp .L_tc_recycle_frame_loop_045f
 15521                                  .L_tc_recycle_frame_done_045f:
 15522 0000A6C1 488D6308                	lea rsp, [rbx + 8 * 1]
 15523 0000A6C5 5D                      	pop rbp	; the proc will restore it!
 15524 0000A6C6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15525 0000A6C9 C9                      	leave
 15526 0000A6CA C22000                  	ret AND_KILL_FRAME(2)
 15527                                  .L_lambda_simple_end_0341:	; new closure is in rax
 15528 0000A6CD 50                      	push rax
 15529 0000A6CE 6A01                    	push 1	; arg count
 15530 0000A6D0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15531 0000A6D5 E835BA0000              	call malloc
 15532 0000A6DA 50                      	push rax
 15533 0000A6DB BF08000000              	mov rdi, 8 * 1	; new rib
 15534 0000A6E0 E82ABA0000              	call malloc
 15535 0000A6E5 50                      	push rax
 15536 0000A6E6 BF28000000              	mov rdi, 8 * 5	; extended env
 15537 0000A6EB E81FBA0000              	call malloc
 15538 0000A6F0 488B7D10                	mov rdi, ENV
 15539 0000A6F4 BE00000000              	mov rsi, 0
 15540 0000A6F9 BA01000000              	mov rdx, 1
 15541                                  .L_lambda_simple_env_loop_0342:	; ext_env[i + 1] <-- env[i]
 15542 0000A6FE 4883FE04                	cmp rsi, 4
 15543 0000A702 7410                    	je .L_lambda_simple_env_end_0342
 15544 0000A704 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15545 0000A708 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15546 0000A70C 48FFC6                  	inc rsi
 15547 0000A70F 48FFC2                  	inc rdx
 15548 0000A712 EBEA                    	jmp .L_lambda_simple_env_loop_0342
 15549                                  .L_lambda_simple_env_end_0342:
 15550 0000A714 5B                      	pop rbx
 15551 0000A715 BE00000000              	mov rsi, 0
 15552                                  .L_lambda_simple_params_loop_0342:	; copy params
 15553 0000A71A 4883FE01                	cmp rsi, 1
 15554 0000A71E 740E                    	je .L_lambda_simple_params_end_0342
 15555 0000A720 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15556 0000A725 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15557 0000A729 48FFC6                  	inc rsi
 15558 0000A72C EBEC                    	jmp .L_lambda_simple_params_loop_0342
 15559                                  .L_lambda_simple_params_end_0342:
 15560 0000A72E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15561 0000A731 4889C3                  	mov rbx, rax
 15562 0000A734 58                      	pop rax
 15563 0000A735 C60004                  	mov byte [rax], T_closure
 15564 0000A738 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15565 0000A73C 48C74009[49A70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0342
 15566 0000A744 E94B0B0000              	jmp .L_lambda_simple_end_0342
 15567                                  .L_lambda_simple_code_0342:	; lambda-simple body
 15568 0000A749 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15569 0000A74F 740B                    	je .L_lambda_simple_arity_check_ok_0342
 15570 0000A751 FF742410                	push qword [rsp + 8 * 2]
 15571 0000A755 6A01                    	push 1
 15572 0000A757 E96CB90000              	jmp L_error_incorrect_arity_simple
 15573                                  .L_lambda_simple_arity_check_ok_0342:
 15574 0000A75C C8000000                	enter 0, 0
 15575                                  	; preparing a tail-call
 15576 0000A760 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15577 0000A765 E8A5B90000              	call malloc
 15578 0000A76A 50                      	push rax
 15579 0000A76B BF08000000              	mov rdi, 8 * 1	; new rib
 15580 0000A770 E89AB90000              	call malloc
 15581 0000A775 50                      	push rax
 15582 0000A776 BF30000000              	mov rdi, 8 * 6	; extended env
 15583 0000A77B E88FB90000              	call malloc
 15584 0000A780 488B7D10                	mov rdi, ENV
 15585 0000A784 BE00000000              	mov rsi, 0
 15586 0000A789 BA01000000              	mov rdx, 1
 15587                                  .L_lambda_simple_env_loop_0343:	; ext_env[i + 1] <-- env[i]
 15588 0000A78E 4883FE05                	cmp rsi, 5
 15589 0000A792 7410                    	je .L_lambda_simple_env_end_0343
 15590 0000A794 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15591 0000A798 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15592 0000A79C 48FFC6                  	inc rsi
 15593 0000A79F 48FFC2                  	inc rdx
 15594 0000A7A2 EBEA                    	jmp .L_lambda_simple_env_loop_0343
 15595                                  .L_lambda_simple_env_end_0343:
 15596 0000A7A4 5B                      	pop rbx
 15597 0000A7A5 BE00000000              	mov rsi, 0
 15598                                  .L_lambda_simple_params_loop_0343:	; copy params
 15599 0000A7AA 4883FE01                	cmp rsi, 1
 15600 0000A7AE 740E                    	je .L_lambda_simple_params_end_0343
 15601 0000A7B0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15602 0000A7B5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15603 0000A7B9 48FFC6                  	inc rsi
 15604 0000A7BC EBEC                    	jmp .L_lambda_simple_params_loop_0343
 15605                                  .L_lambda_simple_params_end_0343:
 15606 0000A7BE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15607 0000A7C1 4889C3                  	mov rbx, rax
 15608 0000A7C4 58                      	pop rax
 15609 0000A7C5 C60004                  	mov byte [rax], T_closure
 15610 0000A7C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15611 0000A7CC 48C74009[D6A70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0343
 15612 0000A7D4 EB77                    	jmp .L_lambda_simple_end_0343
 15613                                  .L_lambda_simple_code_0343:	; lambda-simple body
 15614 0000A7D6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15615 0000A7DC 740B                    	je .L_lambda_simple_arity_check_ok_0343
 15616 0000A7DE FF742410                	push qword [rsp + 8 * 2]
 15617 0000A7E2 6A02                    	push 2
 15618 0000A7E4 E9DFB80000              	jmp L_error_incorrect_arity_simple
 15619                                  .L_lambda_simple_arity_check_ok_0343:
 15620 0000A7E9 C8000000                	enter 0, 0
 15621                                  	; preparing a tail-call
 15622 0000A7ED 488B4520                	mov rax, PARAM(0)	; param a
 15623 0000A7F1 50                      	push rax
 15624 0000A7F2 488B4528                	mov rax, PARAM(1)	; param b
 15625 0000A7F6 50                      	push rax
 15626 0000A7F7 6A02                    	push 2	; arg count
 15627 0000A7F9 488B4510                	mov rax, ENV
 15628 0000A7FD 488B4010                	mov rax, qword [rax + 8 * 2]
 15629 0000A801 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 15630 0000A804 803804                  	cmp byte [rax], T_closure
 15631 0000A807 0F8559B80000            	jne L_error_non_closure
 15632 0000A80D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15633                                  
 15634                                  	; recycling the current frame
 15635 0000A810 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15636 0000A813 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15637 0000A816 B906000000              	mov rcx, 2 + 4
 15638 0000A81B 488B5D18                	mov rbx, COUNT
 15639 0000A81F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15640 0000A824 488D55F8                	lea rdx, [rbp - 8 * 1]
 15641                                  .L_tc_recycle_frame_loop_0460:
 15642 0000A828 4883F900                	cmp rcx, 0
 15643 0000A82C 7413                    	je .L_tc_recycle_frame_done_0460
 15644 0000A82E 488B32                  	mov rsi, qword [rdx]
 15645 0000A831 488933                  	mov qword [rbx], rsi
 15646 0000A834 48FFC9                  	dec rcx
 15647 0000A837 4883EB08                	sub rbx, 8 * 1
 15648 0000A83B 4883EA08                	sub rdx, 8 * 1
 15649 0000A83F EBE7                    	jmp .L_tc_recycle_frame_loop_0460
 15650                                  .L_tc_recycle_frame_done_0460:
 15651 0000A841 488D6308                	lea rsp, [rbx + 8 * 1]
 15652 0000A845 5D                      	pop rbp	; the proc will restore it!
 15653 0000A846 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15654 0000A849 C9                      	leave
 15655 0000A84A C22000                  	ret AND_KILL_FRAME(2)
 15656                                  .L_lambda_simple_end_0343:	; new closure is in rax
 15657 0000A84D 50                      	push rax
 15658 0000A84E 6A01                    	push 1	; arg count
 15659 0000A850 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15660 0000A855 E8B5B80000              	call malloc
 15661 0000A85A 50                      	push rax
 15662 0000A85B BF08000000              	mov rdi, 8 * 1	; new rib
 15663 0000A860 E8AAB80000              	call malloc
 15664 0000A865 50                      	push rax
 15665 0000A866 BF30000000              	mov rdi, 8 * 6	; extended env
 15666 0000A86B E89FB80000              	call malloc
 15667 0000A870 488B7D10                	mov rdi, ENV
 15668 0000A874 BE00000000              	mov rsi, 0
 15669 0000A879 BA01000000              	mov rdx, 1
 15670                                  .L_lambda_simple_env_loop_0344:	; ext_env[i + 1] <-- env[i]
 15671 0000A87E 4883FE05                	cmp rsi, 5
 15672 0000A882 7410                    	je .L_lambda_simple_env_end_0344
 15673 0000A884 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15674 0000A888 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15675 0000A88C 48FFC6                  	inc rsi
 15676 0000A88F 48FFC2                  	inc rdx
 15677 0000A892 EBEA                    	jmp .L_lambda_simple_env_loop_0344
 15678                                  .L_lambda_simple_env_end_0344:
 15679 0000A894 5B                      	pop rbx
 15680 0000A895 BE00000000              	mov rsi, 0
 15681                                  .L_lambda_simple_params_loop_0344:	; copy params
 15682 0000A89A 4883FE01                	cmp rsi, 1
 15683 0000A89E 740E                    	je .L_lambda_simple_params_end_0344
 15684 0000A8A0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15685 0000A8A5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15686 0000A8A9 48FFC6                  	inc rsi
 15687 0000A8AC EBEC                    	jmp .L_lambda_simple_params_loop_0344
 15688                                  .L_lambda_simple_params_end_0344:
 15689 0000A8AE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15690 0000A8B1 4889C3                  	mov rbx, rax
 15691 0000A8B4 58                      	pop rax
 15692 0000A8B5 C60004                  	mov byte [rax], T_closure
 15693 0000A8B8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15694 0000A8BC 48C74009[C9A80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0344
 15695 0000A8C4 E982090000              	jmp .L_lambda_simple_end_0344
 15696                                  .L_lambda_simple_code_0344:	; lambda-simple body
 15697 0000A8C9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15698 0000A8CF 740B                    	je .L_lambda_simple_arity_check_ok_0344
 15699 0000A8D1 FF742410                	push qword [rsp + 8 * 2]
 15700 0000A8D5 6A01                    	push 1
 15701 0000A8D7 E9ECB70000              	jmp L_error_incorrect_arity_simple
 15702                                  .L_lambda_simple_arity_check_ok_0344:
 15703 0000A8DC C8000000                	enter 0, 0
 15704                                  	; preparing a tail-call
 15705 0000A8E0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15706 0000A8E5 E825B80000              	call malloc
 15707 0000A8EA 50                      	push rax
 15708 0000A8EB BF08000000              	mov rdi, 8 * 1	; new rib
 15709 0000A8F0 E81AB80000              	call malloc
 15710 0000A8F5 50                      	push rax
 15711 0000A8F6 BF38000000              	mov rdi, 8 * 7	; extended env
 15712 0000A8FB E80FB80000              	call malloc
 15713 0000A900 488B7D10                	mov rdi, ENV
 15714 0000A904 BE00000000              	mov rsi, 0
 15715 0000A909 BA01000000              	mov rdx, 1
 15716                                  .L_lambda_simple_env_loop_0345:	; ext_env[i + 1] <-- env[i]
 15717 0000A90E 4883FE06                	cmp rsi, 6
 15718 0000A912 7410                    	je .L_lambda_simple_env_end_0345
 15719 0000A914 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15720 0000A918 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15721 0000A91C 48FFC6                  	inc rsi
 15722 0000A91F 48FFC2                  	inc rdx
 15723 0000A922 EBEA                    	jmp .L_lambda_simple_env_loop_0345
 15724                                  .L_lambda_simple_env_end_0345:
 15725 0000A924 5B                      	pop rbx
 15726 0000A925 BE00000000              	mov rsi, 0
 15727                                  .L_lambda_simple_params_loop_0345:	; copy params
 15728 0000A92A 4883FE01                	cmp rsi, 1
 15729 0000A92E 740E                    	je .L_lambda_simple_params_end_0345
 15730 0000A930 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15731 0000A935 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15732 0000A939 48FFC6                  	inc rsi
 15733 0000A93C EBEC                    	jmp .L_lambda_simple_params_loop_0345
 15734                                  .L_lambda_simple_params_end_0345:
 15735 0000A93E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15736 0000A941 4889C3                  	mov rbx, rax
 15737 0000A944 58                      	pop rax
 15738 0000A945 C60004                  	mov byte [rax], T_closure
 15739 0000A948 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15740 0000A94C 48C74009[59A90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0345
 15741 0000A954 E999000000              	jmp .L_lambda_simple_end_0345
 15742                                  .L_lambda_simple_code_0345:	; lambda-simple body
 15743 0000A959 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15744 0000A95F 740B                    	je .L_lambda_simple_arity_check_ok_0345
 15745 0000A961 FF742410                	push qword [rsp + 8 * 2]
 15746 0000A965 6A02                    	push 2
 15747 0000A967 E95CB70000              	jmp L_error_incorrect_arity_simple
 15748                                  .L_lambda_simple_arity_check_ok_0345:
 15749 0000A96C C8000000                	enter 0, 0
 15750                                  	; preparing a tail-call
 15751                                  	; preparing a non tail-call
 15752 0000A970 488B4528                	mov rax, PARAM(1)	; param b
 15753 0000A974 50                      	push rax
 15754 0000A975 488B4520                	mov rax, PARAM(0)	; param a
 15755 0000A979 50                      	push rax
 15756 0000A97A 6A02                    	push 2	; arg count
 15757 0000A97C 488B4510                	mov rax, ENV
 15758 0000A980 488B00                  	mov rax, qword [rax + 8 * 0]
 15759 0000A983 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 15760 0000A986 803804                  	cmp byte [rax], T_closure
 15761 0000A989 0F85D7B60000            	jne L_error_non_closure
 15762 0000A98F FF7001                  	push SOB_CLOSURE_ENV(rax)
 15763 0000A992 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15764 0000A995 50                      	push rax
 15765 0000A996 6A01                    	push 1	; arg count
 15766 0000A998 488B0425[90140000]      	mov rax, qword [free_var_104]	; free var not
 15767 0000A9A0 803805                  	cmp byte [rax], T_undefined
 15768 0000A9A3 0F8439B60000            	je L_error_fvar_undefined
 15769 0000A9A9 803804                  	cmp byte [rax], T_closure
 15770 0000A9AC 0F85B4B60000            	jne L_error_non_closure
 15771 0000A9B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15772                                  
 15773                                  	; recycling the current frame
 15774 0000A9B5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15775 0000A9B8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15776 0000A9BB B905000000              	mov rcx, 1 + 4
 15777 0000A9C0 488B5D18                	mov rbx, COUNT
 15778 0000A9C4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15779 0000A9C9 488D55F8                	lea rdx, [rbp - 8 * 1]
 15780                                  .L_tc_recycle_frame_loop_0461:
 15781 0000A9CD 4883F900                	cmp rcx, 0
 15782 0000A9D1 7413                    	je .L_tc_recycle_frame_done_0461
 15783 0000A9D3 488B32                  	mov rsi, qword [rdx]
 15784 0000A9D6 488933                  	mov qword [rbx], rsi
 15785 0000A9D9 48FFC9                  	dec rcx
 15786 0000A9DC 4883EB08                	sub rbx, 8 * 1
 15787 0000A9E0 4883EA08                	sub rdx, 8 * 1
 15788 0000A9E4 EBE7                    	jmp .L_tc_recycle_frame_loop_0461
 15789                                  .L_tc_recycle_frame_done_0461:
 15790 0000A9E6 488D6308                	lea rsp, [rbx + 8 * 1]
 15791 0000A9EA 5D                      	pop rbp	; the proc will restore it!
 15792 0000A9EB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15793 0000A9EE C9                      	leave
 15794 0000A9EF C22000                  	ret AND_KILL_FRAME(2)
 15795                                  .L_lambda_simple_end_0345:	; new closure is in rax
 15796 0000A9F2 50                      	push rax
 15797 0000A9F3 6A01                    	push 1	; arg count
 15798 0000A9F5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15799 0000A9FA E810B70000              	call malloc
 15800 0000A9FF 50                      	push rax
 15801 0000AA00 BF08000000              	mov rdi, 8 * 1	; new rib
 15802 0000AA05 E805B70000              	call malloc
 15803 0000AA0A 50                      	push rax
 15804 0000AA0B BF38000000              	mov rdi, 8 * 7	; extended env
 15805 0000AA10 E8FAB60000              	call malloc
 15806 0000AA15 488B7D10                	mov rdi, ENV
 15807 0000AA19 BE00000000              	mov rsi, 0
 15808 0000AA1E BA01000000              	mov rdx, 1
 15809                                  .L_lambda_simple_env_loop_0346:	; ext_env[i + 1] <-- env[i]
 15810 0000AA23 4883FE06                	cmp rsi, 6
 15811 0000AA27 7410                    	je .L_lambda_simple_env_end_0346
 15812 0000AA29 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15813 0000AA2D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15814 0000AA31 48FFC6                  	inc rsi
 15815 0000AA34 48FFC2                  	inc rdx
 15816 0000AA37 EBEA                    	jmp .L_lambda_simple_env_loop_0346
 15817                                  .L_lambda_simple_env_end_0346:
 15818 0000AA39 5B                      	pop rbx
 15819 0000AA3A BE00000000              	mov rsi, 0
 15820                                  .L_lambda_simple_params_loop_0346:	; copy params
 15821 0000AA3F 4883FE01                	cmp rsi, 1
 15822 0000AA43 740E                    	je .L_lambda_simple_params_end_0346
 15823 0000AA45 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15824 0000AA4A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15825 0000AA4E 48FFC6                  	inc rsi
 15826 0000AA51 EBEC                    	jmp .L_lambda_simple_params_loop_0346
 15827                                  .L_lambda_simple_params_end_0346:
 15828 0000AA53 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15829 0000AA56 4889C3                  	mov rbx, rax
 15830 0000AA59 58                      	pop rax
 15831 0000AA5A C60004                  	mov byte [rax], T_closure
 15832 0000AA5D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15833 0000AA61 48C74009[6EAA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0346
 15834 0000AA69 E994070000              	jmp .L_lambda_simple_end_0346
 15835                                  .L_lambda_simple_code_0346:	; lambda-simple body
 15836 0000AA6E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15837 0000AA74 740B                    	je .L_lambda_simple_arity_check_ok_0346
 15838 0000AA76 FF742410                	push qword [rsp + 8 * 2]
 15839 0000AA7A 6A01                    	push 1
 15840 0000AA7C E947B60000              	jmp L_error_incorrect_arity_simple
 15841                                  .L_lambda_simple_arity_check_ok_0346:
 15842 0000AA81 C8000000                	enter 0, 0
 15843                                  	; preparing a tail-call
 15844 0000AA85 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15845 0000AA8A E880B60000              	call malloc
 15846 0000AA8F 50                      	push rax
 15847 0000AA90 BF08000000              	mov rdi, 8 * 1	; new rib
 15848 0000AA95 E875B60000              	call malloc
 15849 0000AA9A 50                      	push rax
 15850 0000AA9B BF40000000              	mov rdi, 8 * 8	; extended env
 15851 0000AAA0 E86AB60000              	call malloc
 15852 0000AAA5 488B7D10                	mov rdi, ENV
 15853 0000AAA9 BE00000000              	mov rsi, 0
 15854 0000AAAE BA01000000              	mov rdx, 1
 15855                                  .L_lambda_simple_env_loop_0347:	; ext_env[i + 1] <-- env[i]
 15856 0000AAB3 4883FE07                	cmp rsi, 7
 15857 0000AAB7 7410                    	je .L_lambda_simple_env_end_0347
 15858 0000AAB9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15859 0000AABD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15860 0000AAC1 48FFC6                  	inc rsi
 15861 0000AAC4 48FFC2                  	inc rdx
 15862 0000AAC7 EBEA                    	jmp .L_lambda_simple_env_loop_0347
 15863                                  .L_lambda_simple_env_end_0347:
 15864 0000AAC9 5B                      	pop rbx
 15865 0000AACA BE00000000              	mov rsi, 0
 15866                                  .L_lambda_simple_params_loop_0347:	; copy params
 15867 0000AACF 4883FE01                	cmp rsi, 1
 15868 0000AAD3 740E                    	je .L_lambda_simple_params_end_0347
 15869 0000AAD5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15870 0000AADA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15871 0000AADE 48FFC6                  	inc rsi
 15872 0000AAE1 EBEC                    	jmp .L_lambda_simple_params_loop_0347
 15873                                  .L_lambda_simple_params_end_0347:
 15874 0000AAE3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15875 0000AAE6 4889C3                  	mov rbx, rax
 15876 0000AAE9 58                      	pop rax
 15877 0000AAEA C60004                  	mov byte [rax], T_closure
 15878 0000AAED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15879 0000AAF1 48C74009[FEAA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0347
 15880 0000AAF9 E926050000              	jmp .L_lambda_simple_end_0347
 15881                                  .L_lambda_simple_code_0347:	; lambda-simple body
 15882 0000AAFE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15883 0000AB04 740B                    	je .L_lambda_simple_arity_check_ok_0347
 15884 0000AB06 FF742410                	push qword [rsp + 8 * 2]
 15885 0000AB0A 6A01                    	push 1
 15886 0000AB0C E9B7B50000              	jmp L_error_incorrect_arity_simple
 15887                                  .L_lambda_simple_arity_check_ok_0347:
 15888 0000AB11 C8000000                	enter 0, 0
 15889                                  	; preparing a tail-call
 15890 0000AB15 48B8-                   	mov rax, L_constants + 1881
 15890 0000AB17 [5907000000000000] 
 15891 0000AB1F 50                      	push rax
 15892 0000AB20 6A01                    	push 1	; arg count
 15893 0000AB22 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15894 0000AB27 E8E3B50000              	call malloc
 15895 0000AB2C 50                      	push rax
 15896 0000AB2D BF08000000              	mov rdi, 8 * 1	; new rib
 15897 0000AB32 E8D8B50000              	call malloc
 15898 0000AB37 50                      	push rax
 15899 0000AB38 BF48000000              	mov rdi, 8 * 9	; extended env
 15900 0000AB3D E8CDB50000              	call malloc
 15901 0000AB42 488B7D10                	mov rdi, ENV
 15902 0000AB46 BE00000000              	mov rsi, 0
 15903 0000AB4B BA01000000              	mov rdx, 1
 15904                                  .L_lambda_simple_env_loop_0348:	; ext_env[i + 1] <-- env[i]
 15905 0000AB50 4883FE08                	cmp rsi, 8
 15906 0000AB54 7410                    	je .L_lambda_simple_env_end_0348
 15907 0000AB56 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15908 0000AB5A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15909 0000AB5E 48FFC6                  	inc rsi
 15910 0000AB61 48FFC2                  	inc rdx
 15911 0000AB64 EBEA                    	jmp .L_lambda_simple_env_loop_0348
 15912                                  .L_lambda_simple_env_end_0348:
 15913 0000AB66 5B                      	pop rbx
 15914 0000AB67 BE00000000              	mov rsi, 0
 15915                                  .L_lambda_simple_params_loop_0348:	; copy params
 15916 0000AB6C 4883FE01                	cmp rsi, 1
 15917 0000AB70 740E                    	je .L_lambda_simple_params_end_0348
 15918 0000AB72 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15919 0000AB77 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15920 0000AB7B 48FFC6                  	inc rsi
 15921 0000AB7E EBEC                    	jmp .L_lambda_simple_params_loop_0348
 15922                                  .L_lambda_simple_params_end_0348:
 15923 0000AB80 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15924 0000AB83 4889C3                  	mov rbx, rax
 15925 0000AB86 58                      	pop rax
 15926 0000AB87 C60004                  	mov byte [rax], T_closure
 15927 0000AB8A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15928 0000AB8E 48C74009[9BAB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0348
 15929 0000AB96 E940040000              	jmp .L_lambda_simple_end_0348
 15930                                  .L_lambda_simple_code_0348:	; lambda-simple body
 15931 0000AB9B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15932 0000ABA1 740B                    	je .L_lambda_simple_arity_check_ok_0348
 15933 0000ABA3 FF742410                	push qword [rsp + 8 * 2]
 15934 0000ABA7 6A01                    	push 1
 15935 0000ABA9 E91AB50000              	jmp L_error_incorrect_arity_simple
 15936                                  .L_lambda_simple_arity_check_ok_0348:
 15937 0000ABAE C8000000                	enter 0, 0
 15938 0000ABB2 BF08000000              	mov rdi, 8	; sob_box
 15939 0000ABB7 E853B50000              	call malloc
 15940 0000ABBC 488B5D20                	mov rbx, PARAM(0)
 15941 0000ABC0 488918                  	mov [rax], rbx
 15942 0000ABC3 48894520                	mov PARAM(0), rax
 15943 0000ABC7 48B8-                   	mov rax, sob_void
 15943 0000ABC9 [0000000000000000] 
 15944                                  
 15945 0000ABD1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15946 0000ABD6 E834B50000              	call malloc
 15947 0000ABDB 50                      	push rax
 15948 0000ABDC BF08000000              	mov rdi, 8 * 1	; new rib
 15949 0000ABE1 E829B50000              	call malloc
 15950 0000ABE6 50                      	push rax
 15951 0000ABE7 BF50000000              	mov rdi, 8 * 10	; extended env
 15952 0000ABEC E81EB50000              	call malloc
 15953 0000ABF1 488B7D10                	mov rdi, ENV
 15954 0000ABF5 BE00000000              	mov rsi, 0
 15955 0000ABFA BA01000000              	mov rdx, 1
 15956                                  .L_lambda_simple_env_loop_0349:	; ext_env[i + 1] <-- env[i]
 15957 0000ABFF 4883FE09                	cmp rsi, 9
 15958 0000AC03 7410                    	je .L_lambda_simple_env_end_0349
 15959 0000AC05 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15960 0000AC09 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15961 0000AC0D 48FFC6                  	inc rsi
 15962 0000AC10 48FFC2                  	inc rdx
 15963 0000AC13 EBEA                    	jmp .L_lambda_simple_env_loop_0349
 15964                                  .L_lambda_simple_env_end_0349:
 15965 0000AC15 5B                      	pop rbx
 15966 0000AC16 BE00000000              	mov rsi, 0
 15967                                  .L_lambda_simple_params_loop_0349:	; copy params
 15968 0000AC1B 4883FE01                	cmp rsi, 1
 15969 0000AC1F 740E                    	je .L_lambda_simple_params_end_0349
 15970 0000AC21 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15971 0000AC26 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15972 0000AC2A 48FFC6                  	inc rsi
 15973 0000AC2D EBEC                    	jmp .L_lambda_simple_params_loop_0349
 15974                                  .L_lambda_simple_params_end_0349:
 15975 0000AC2F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15976 0000AC32 4889C3                  	mov rbx, rax
 15977 0000AC35 58                      	pop rax
 15978 0000AC36 C60004                  	mov byte [rax], T_closure
 15979 0000AC39 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15980 0000AC3D 48C74009[4AAC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0349
 15981 0000AC45 E953010000              	jmp .L_lambda_simple_end_0349
 15982                                  .L_lambda_simple_code_0349:	; lambda-simple body
 15983 0000AC4A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15984 0000AC50 740B                    	je .L_lambda_simple_arity_check_ok_0349
 15985 0000AC52 FF742410                	push qword [rsp + 8 * 2]
 15986 0000AC56 6A02                    	push 2
 15987 0000AC58 E96BB40000              	jmp L_error_incorrect_arity_simple
 15988                                  .L_lambda_simple_arity_check_ok_0349:
 15989 0000AC5D C8000000                	enter 0, 0
 15990                                  	; preparing a non tail-call
 15991 0000AC61 488B4528                	mov rax, PARAM(1)	; param s
 15992 0000AC65 50                      	push rax
 15993 0000AC66 6A01                    	push 1	; arg count
 15994 0000AC68 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 15995 0000AC70 803805                  	cmp byte [rax], T_undefined
 15996 0000AC73 0F8469B30000            	je L_error_fvar_undefined
 15997 0000AC79 803804                  	cmp byte [rax], T_closure
 15998 0000AC7C 0F85E4B30000            	jne L_error_non_closure
 15999 0000AC82 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16000 0000AC85 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16001 0000AC88 483D[02000000]          	cmp rax, sob_boolean_false
 16002 0000AC8E 0F8505010000            	jne .L_or_end_0039
 16003                                  	; preparing a non tail-call
 16004                                  	; preparing a non tail-call
 16005 0000AC94 488B4528                	mov rax, PARAM(1)	; param s
 16006 0000AC98 50                      	push rax
 16007 0000AC99 6A01                    	push 1	; arg count
 16008 0000AC9B 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 16009 0000ACA3 803805                  	cmp byte [rax], T_undefined
 16010 0000ACA6 0F8436B30000            	je L_error_fvar_undefined
 16011 0000ACAC 803804                  	cmp byte [rax], T_closure
 16012 0000ACAF 0F85B1B30000            	jne L_error_non_closure
 16013 0000ACB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16014 0000ACB8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16015 0000ACBB 50                      	push rax
 16016 0000ACBC 488B4520                	mov rax, PARAM(0)	; param a
 16017 0000ACC0 50                      	push rax
 16018 0000ACC1 6A02                    	push 2	; arg count
 16019 0000ACC3 488B4510                	mov rax, ENV
 16020 0000ACC7 488B4008                	mov rax, qword [rax + 8 * 1]
 16021 0000ACCB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-ordering
 16022 0000ACCE 803804                  	cmp byte [rax], T_closure
 16023 0000ACD1 0F858FB30000            	jne L_error_non_closure
 16024 0000ACD7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16025 0000ACDA FF5009                  	call SOB_CLOSURE_CODE(rax)
 16026 0000ACDD 483D[02000000]          	cmp rax, sob_boolean_false
 16027 0000ACE3 0F84A6000000            	je .L_if_else_026a
 16028                                  	; preparing a tail-call
 16029                                  	; preparing a non tail-call
 16030 0000ACE9 488B4528                	mov rax, PARAM(1)	; param s
 16031 0000ACED 50                      	push rax
 16032 0000ACEE 6A01                    	push 1	; arg count
 16033 0000ACF0 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 16034 0000ACF8 803805                  	cmp byte [rax], T_undefined
 16035 0000ACFB 0F84E1B20000            	je L_error_fvar_undefined
 16036 0000AD01 803804                  	cmp byte [rax], T_closure
 16037 0000AD04 0F855CB30000            	jne L_error_non_closure
 16038 0000AD0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 16039 0000AD0D FF5009                  	call SOB_CLOSURE_CODE(rax)
 16040 0000AD10 50                      	push rax
 16041                                  	; preparing a non tail-call
 16042 0000AD11 488B4528                	mov rax, PARAM(1)	; param s
 16043 0000AD15 50                      	push rax
 16044 0000AD16 6A01                    	push 1	; arg count
 16045 0000AD18 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 16046 0000AD20 803805                  	cmp byte [rax], T_undefined
 16047 0000AD23 0F84B9B20000            	je L_error_fvar_undefined
 16048 0000AD29 803804                  	cmp byte [rax], T_closure
 16049 0000AD2C 0F8534B30000            	jne L_error_non_closure
 16050 0000AD32 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16051 0000AD35 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16052 0000AD38 50                      	push rax
 16053 0000AD39 6A02                    	push 2	; arg count
 16054 0000AD3B 488B4510                	mov rax, ENV
 16055 0000AD3F 488B00                  	mov rax, qword [rax + 8 * 0]
 16056 0000AD42 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 16057 0000AD45 488B00                  	mov rax, qword [rax]
 16058 0000AD48 803804                  	cmp byte [rax], T_closure
 16059 0000AD4B 0F8515B30000            	jne L_error_non_closure
 16060 0000AD51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16061                                  
 16062                                  	; recycling the current frame
 16063 0000AD54 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16064 0000AD57 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16065 0000AD5A B906000000              	mov rcx, 2 + 4
 16066 0000AD5F 488B5D18                	mov rbx, COUNT
 16067 0000AD63 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16068 0000AD68 488D55F8                	lea rdx, [rbp - 8 * 1]
 16069                                  .L_tc_recycle_frame_loop_0462:
 16070 0000AD6C 4883F900                	cmp rcx, 0
 16071 0000AD70 7413                    	je .L_tc_recycle_frame_done_0462
 16072 0000AD72 488B32                  	mov rsi, qword [rdx]
 16073 0000AD75 488933                  	mov qword [rbx], rsi
 16074 0000AD78 48FFC9                  	dec rcx
 16075 0000AD7B 4883EB08                	sub rbx, 8 * 1
 16076 0000AD7F 4883EA08                	sub rdx, 8 * 1
 16077 0000AD83 EBE7                    	jmp .L_tc_recycle_frame_loop_0462
 16078                                  .L_tc_recycle_frame_done_0462:
 16079 0000AD85 488D6308                	lea rsp, [rbx + 8 * 1]
 16080 0000AD89 5D                      	pop rbp	; the proc will restore it!
 16081 0000AD8A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16082 0000AD8D EB0A                    	jmp .L_if_end_026a
 16083                                  .L_if_else_026a:
 16084 0000AD8F 48B8-                   	mov rax, L_constants + 2
 16084 0000AD91 [0200000000000000] 
 16085                                  .L_if_end_026a:
 16086                                  .L_or_end_0039:
 16087 0000AD99 C9                      	leave
 16088 0000AD9A C22000                  	ret AND_KILL_FRAME(2)
 16089                                  .L_lambda_simple_end_0349:	; new closure is in rax
 16090 0000AD9D 50                      	push rax
 16091 0000AD9E 488B4520                	mov rax, PARAM(0)	; param run
 16092 0000ADA2 8F00                    	pop qword [rax]
 16093 0000ADA4 48B8-                   	mov rax, sob_void
 16093 0000ADA6 [0000000000000000] 
 16094                                  
 16095 0000ADAE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16096 0000ADB3 E857B30000              	call malloc
 16097 0000ADB8 50                      	push rax
 16098 0000ADB9 BF08000000              	mov rdi, 8 * 1	; new rib
 16099 0000ADBE E84CB30000              	call malloc
 16100 0000ADC3 50                      	push rax
 16101 0000ADC4 BF50000000              	mov rdi, 8 * 10	; extended env
 16102 0000ADC9 E841B30000              	call malloc
 16103 0000ADCE 488B7D10                	mov rdi, ENV
 16104 0000ADD2 BE00000000              	mov rsi, 0
 16105 0000ADD7 BA01000000              	mov rdx, 1
 16106                                  .L_lambda_opt_env_loop_0072:	; ext_env[i + 1] <-- env[i]
 16107 0000ADDC 4883FE09                	cmp rsi, 9
 16108 0000ADE0 7410                    	je .L_lambda_opt_env_end_0072
 16109 0000ADE2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16110 0000ADE6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16111 0000ADEA 48FFC6                  	inc rsi
 16112 0000ADED 48FFC2                  	inc rdx
 16113 0000ADF0 EBEA                    	jmp .L_lambda_opt_env_loop_0072
 16114                                  .L_lambda_opt_env_end_0072:
 16115 0000ADF2 5B                      	pop rbx
 16116 0000ADF3 BE00000000              	mov rsi, 0
 16117                                  .L_lambda_opt_params_loop_0072:	; copy params
 16118 0000ADF8 4883FE01                	cmp rsi, 1
 16119 0000ADFC 740E                    	je .L_lambda_opt_params_end_0072
 16120 0000ADFE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16121 0000AE03 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16122 0000AE07 48FFC6                  	inc rsi
 16123 0000AE0A EBEC                    	jmp .L_lambda_opt_params_loop_0072
 16124                                  .L_lambda_opt_params_end_0072:
 16125 0000AE0C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16126 0000AE0F 4889C3                  	mov rbx, rax
 16127 0000AE12 58                      	pop rax
 16128 0000AE13 C60004                  	mov byte [rax], T_closure
 16129 0000AE16 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16130 0000AE1A 48C74009[27AE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0072
 16131 0000AE22 E9B0010000              	jmp .L_lambda_opt_end_0072
 16132                                  .L_lambda_opt_code_0072:	; lambda-opt body
 16133 0000AE27 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16134 0000AE2D 0F8404010000            	je .L_lambda_opt_arity_check_exact_0072
 16135 0000AE33 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16136 0000AE39 7F0B                    	jg .L_lambda_opt_arity_check_more_0072
 16137 0000AE3B FF742410                	push qword [rsp + 8 * 2]
 16138 0000AE3F 6A01                    	push 1
 16139 0000AE41 E996B20000              	jmp L_error_incorrect_arity_opt
 16140                                  .L_lambda_opt_arity_check_more_0072:
 16141 0000AE46 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 16142 0000AE4B 41B901000000            	mov r9 , 1
 16143 0000AE51 4989E7                  	mov r15, rsp
 16144 0000AE54 4D29C8                  	sub r8, r9
 16145 0000AE57 41B900000000            	mov r9, 0
 16146 0000AE5D 498D5F10                	lea rbx, [r15 + 8 * 2]
 16147 0000AE61 498B4710                	mov rax, qword [r15 + 8 * 2]
 16148 0000AE65 486BC008                	imul rax, 8
 16149 0000AE69 4801C3                  	add rbx, rax
 16150 0000AE6C 488B13                  	mov rdx , qword [rbx]
 16151 0000AE6F 4989DA                  	mov r10 , rbx
 16152 0000AE72 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 16153 0000AE77 52                      	push rdx
 16154 0000AE78 53                      	push rbx
 16155 0000AE79 4150                    	push r8
 16156 0000AE7B 4151                    	push r9
 16157 0000AE7D 4152                    	push r10
 16158 0000AE7F 4157                    	push r15
 16159 0000AE81 E889B20000              	call malloc
 16160 0000AE86 415F                    	pop r15
 16161 0000AE88 415A                    	pop r10
 16162 0000AE8A 4159                    	pop r9
 16163 0000AE8C 4158                    	pop r8
 16164 0000AE8E 5B                      	pop rbx
 16165 0000AE8F 5A                      	pop rdx
 16166 0000AE90 C60021                  	mov byte qword [rax], T_pair
 16167 0000AE93 48895001                	mov SOB_PAIR_CAR(rax), rdx
 16168 0000AE97 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 16169 0000AE9F 498902                  	mov qword [r10], rax
 16170 0000AEA2 49FFC1                  	inc r9
 16171 0000AEA5 4883EB08                	sub rbx, 8
 16172 0000AEA9 4D39C1                  	cmp r9, r8
 16173 0000AEAC 743E                    	je .L_lambda_opt_stack_shrink_loop_0238
 16174                                  .L_lambda_opt_stack_shrink_loop_0237:
 16175 0000AEAE 488B13                  	mov rdx, qword [rbx]
 16176 0000AEB1 53                      	push rbx
 16177 0000AEB2 4150                    	push r8
 16178 0000AEB4 4151                    	push r9
 16179 0000AEB6 4152                    	push r10
 16180 0000AEB8 4157                    	push r15
 16181 0000AEBA 52                      	push rdx
 16182 0000AEBB BF11000000              	mov rdi, (1 + 8 + 8)
 16183 0000AEC0 E84AB20000              	call malloc
 16184 0000AEC5 5A                      	pop rdx
 16185 0000AEC6 415F                    	pop r15
 16186 0000AEC8 415A                    	pop r10
 16187 0000AECA 4159                    	pop r9
 16188 0000AECC 4158                    	pop r8
 16189 0000AECE 5B                      	pop rbx
 16190 0000AECF C60021                  	mov byte [rax], T_pair
 16191 0000AED2 48895001                	mov SOB_PAIR_CAR(rax), rdx
 16192 0000AED6 4D8B32                  	mov r14, qword [r10]
 16193 0000AED9 4C897009                	mov SOB_PAIR_CDR(rax), r14
 16194 0000AEDD 498902                  	mov qword [r10], rax
 16195 0000AEE0 49FFC1                  	inc r9
 16196 0000AEE3 4883EB08                	sub rbx, 8
 16197 0000AEE7 4D39C1                  	cmp r9, r8
 16198 0000AEEA 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_0237
 16199                                  .L_lambda_opt_stack_shrink_loop_0238:
 16200 0000AEEC 498D5710                	lea rdx, [r15 + 8 * 2]
 16201 0000AEF0 48C70201000000          	mov qword [rdx], 1
 16202 0000AEF7 48830201                	add qword [rdx] , 1
 16203 0000AEFB 4D89C1                  	mov r9, r8
 16204 0000AEFE 49FFC9                  	dec r9
 16205 0000AF01 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 16206                                  .L_lambda_opt_stack_shrink_loop_0239:
 16207 0000AF05 488B03                  	mov rax, qword [rbx]
 16208 0000AF08 498901                  	mov qword [r9], rax
 16209 0000AF0B 4983E908                	sub r9 , 8
 16210 0000AF0F 4883EB08                	sub rbx, 8
 16211 0000AF13 4C39FB                  	cmp rbx, r15
 16212 0000AF16 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0239
 16213 0000AF18 488B03                  	mov rax, qword [rbx]
 16214 0000AF1B 498901                  	mov qword [r9], rax
 16215 0000AF1E 4D89C1                  	mov r9, r8
 16216 0000AF21 4983E901                	sub r9 , 1
 16217 0000AF25 4983F900                	cmp r9, 0
 16218 0000AF29 7446                    je .L_lambda_opt_stack_adjusted_0072
 16219                                  .L_lambda_opt_stack_shrink_loop_023a:
 16220 0000AF2B 58                      	pop rax
 16221 0000AF2C 49FFC9                  	dec r9
 16222 0000AF2F 4983F900                	cmp r9, 0
 16223 0000AF33 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_023a
 16224 0000AF35 EB3A                    jmp .L_lambda_opt_stack_adjusted_0072
 16225                                  .L_lambda_opt_arity_check_exact_0072:
 16226 0000AF37 4989E7                  	mov r15, rsp
 16227 0000AF3A 498D5F18                	lea rbx, [r15 + 8 * 2 + 8 * 1]
 16228 0000AF3E 488B0B                  	mov rcx, qword [rbx]
 16229 0000AF41 48C703[01000000]        	mov qword [rbx], sob_nil
 16230 0000AF48 4883EB08                	sub rbx, 8
 16231                                  .L_lambda_opt_stack_shrink_loop_0236:
 16232 0000AF4C 488B13                  	mov rdx, qword [rbx]
 16233 0000AF4F 48890B                  	mov qword [rbx], rcx
 16234 0000AF52 4C39FB                  	cmp rbx, r15
 16235 0000AF55 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0072
 16236 0000AF57 4889D1                  	mov rcx, rdx
 16237 0000AF5A 4883EB08                	sub rbx, 8
 16238 0000AF5E EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_0236
 16239                                  .L_lambda_opt_stack_shrink_loop_exit_0072:
 16240 0000AF60 52                      	push rdx
 16241 0000AF61 4989E7                  	mov r15, rsp
 16242 0000AF64 4983C710                	add r15, 16
 16243 0000AF68 498B1F                  	mov rbx, qword [r15]
 16244 0000AF6B 48FFC3                  	inc rbx
 16245 0000AF6E 49891F                  	mov qword [r15], rbx
 16246                                  .L_lambda_opt_stack_adjusted_0072:
 16247 0000AF71 C8000000                	enter 0, 0
 16248                                  	; preparing a tail-call
 16249 0000AF75 488B4528                	mov rax, PARAM(1)	; param s
 16250 0000AF79 50                      	push rax
 16251 0000AF7A 488B4520                	mov rax, PARAM(0)	; param a
 16252 0000AF7E 50                      	push rax
 16253 0000AF7F 6A02                    	push 2	; arg count
 16254 0000AF81 488B4510                	mov rax, ENV
 16255 0000AF85 488B00                  	mov rax, qword [rax + 8 * 0]
 16256 0000AF88 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 16257 0000AF8B 488B00                  	mov rax, qword [rax]
 16258 0000AF8E 803804                  	cmp byte [rax], T_closure
 16259 0000AF91 0F85CFB00000            	jne L_error_non_closure
 16260 0000AF97 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16261                                  
 16262                                  	; recycling the current frame
 16263 0000AF9A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16264 0000AF9D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16265 0000AFA0 B906000000              	mov rcx, 2 + 4
 16266 0000AFA5 488B5D18                	mov rbx, COUNT
 16267 0000AFA9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16268 0000AFAE 488D55F8                	lea rdx, [rbp - 8 * 1]
 16269                                  .L_tc_recycle_frame_loop_0463:
 16270 0000AFB2 4883F900                	cmp rcx, 0
 16271 0000AFB6 7413                    	je .L_tc_recycle_frame_done_0463
 16272 0000AFB8 488B32                  	mov rsi, qword [rdx]
 16273 0000AFBB 488933                  	mov qword [rbx], rsi
 16274 0000AFBE 48FFC9                  	dec rcx
 16275 0000AFC1 4883EB08                	sub rbx, 8 * 1
 16276 0000AFC5 4883EA08                	sub rdx, 8 * 1
 16277 0000AFC9 EBE7                    	jmp .L_tc_recycle_frame_loop_0463
 16278                                  .L_tc_recycle_frame_done_0463:
 16279 0000AFCB 488D6308                	lea rsp, [rbx + 8 * 1]
 16280 0000AFCF 5D                      	pop rbp	; the proc will restore it!
 16281 0000AFD0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16282 0000AFD3 C9                      	leave
 16283 0000AFD4 C22000                  	ret AND_KILL_FRAME(2)
 16284                                  .L_lambda_opt_end_0072:	; new closure is in rax
 16285 0000AFD7 C9                      	leave
 16286 0000AFD8 C21800                  	ret AND_KILL_FRAME(1)
 16287                                  .L_lambda_simple_end_0348:	; new closure is in rax
 16288 0000AFDB 803804                  	cmp byte [rax], T_closure
 16289 0000AFDE 0F8582B00000            	jne L_error_non_closure
 16290 0000AFE4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16291                                  
 16292                                  	; recycling the current frame
 16293 0000AFE7 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16294 0000AFEA FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16295 0000AFED B905000000              	mov rcx, 1 + 4
 16296 0000AFF2 488B5D18                	mov rbx, COUNT
 16297 0000AFF6 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16298 0000AFFB 488D55F8                	lea rdx, [rbp - 8 * 1]
 16299                                  .L_tc_recycle_frame_loop_0464:
 16300 0000AFFF 4883F900                	cmp rcx, 0
 16301 0000B003 7413                    	je .L_tc_recycle_frame_done_0464
 16302 0000B005 488B32                  	mov rsi, qword [rdx]
 16303 0000B008 488933                  	mov qword [rbx], rsi
 16304 0000B00B 48FFC9                  	dec rcx
 16305 0000B00E 4883EB08                	sub rbx, 8 * 1
 16306 0000B012 4883EA08                	sub rdx, 8 * 1
 16307 0000B016 EBE7                    	jmp .L_tc_recycle_frame_loop_0464
 16308                                  .L_tc_recycle_frame_done_0464:
 16309 0000B018 488D6308                	lea rsp, [rbx + 8 * 1]
 16310 0000B01C 5D                      	pop rbp	; the proc will restore it!
 16311 0000B01D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16312 0000B020 C9                      	leave
 16313 0000B021 C21800                  	ret AND_KILL_FRAME(1)
 16314                                  .L_lambda_simple_end_0347:	; new closure is in rax
 16315 0000B024 50                      	push rax
 16316 0000B025 6A01                    	push 1	; arg count
 16317 0000B027 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16318 0000B02C E8DEB00000              	call malloc
 16319 0000B031 50                      	push rax
 16320 0000B032 BF08000000              	mov rdi, 8 * 1	; new rib
 16321 0000B037 E8D3B00000              	call malloc
 16322 0000B03C 50                      	push rax
 16323 0000B03D BF40000000              	mov rdi, 8 * 8	; extended env
 16324 0000B042 E8C8B00000              	call malloc
 16325 0000B047 488B7D10                	mov rdi, ENV
 16326 0000B04B BE00000000              	mov rsi, 0
 16327 0000B050 BA01000000              	mov rdx, 1
 16328                                  .L_lambda_simple_env_loop_034a:	; ext_env[i + 1] <-- env[i]
 16329 0000B055 4883FE07                	cmp rsi, 7
 16330 0000B059 7410                    	je .L_lambda_simple_env_end_034a
 16331 0000B05B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16332 0000B05F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16333 0000B063 48FFC6                  	inc rsi
 16334 0000B066 48FFC2                  	inc rdx
 16335 0000B069 EBEA                    	jmp .L_lambda_simple_env_loop_034a
 16336                                  .L_lambda_simple_env_end_034a:
 16337 0000B06B 5B                      	pop rbx
 16338 0000B06C BE00000000              	mov rsi, 0
 16339                                  .L_lambda_simple_params_loop_034a:	; copy params
 16340 0000B071 4883FE01                	cmp rsi, 1
 16341 0000B075 740E                    	je .L_lambda_simple_params_end_034a
 16342 0000B077 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16343 0000B07C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16344 0000B080 48FFC6                  	inc rsi
 16345 0000B083 EBEC                    	jmp .L_lambda_simple_params_loop_034a
 16346                                  .L_lambda_simple_params_end_034a:
 16347 0000B085 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16348 0000B088 4889C3                  	mov rbx, rax
 16349 0000B08B 58                      	pop rax
 16350 0000B08C C60004                  	mov byte [rax], T_closure
 16351 0000B08F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16352 0000B093 48C74009[A0B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_034a
 16353 0000B09B E919010000              	jmp .L_lambda_simple_end_034a
 16354                                  .L_lambda_simple_code_034a:	; lambda-simple body
 16355 0000B0A0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16356 0000B0A6 740B                    	je .L_lambda_simple_arity_check_ok_034a
 16357 0000B0A8 FF742410                	push qword [rsp + 8 * 2]
 16358 0000B0AC 6A01                    	push 1
 16359 0000B0AE E915B00000              	jmp L_error_incorrect_arity_simple
 16360                                  .L_lambda_simple_arity_check_ok_034a:
 16361 0000B0B3 C8000000                	enter 0, 0
 16362                                  	; preparing a non tail-call
 16363 0000B0B7 488B4510                	mov rax, ENV
 16364 0000B0BB 488B4020                	mov rax, qword [rax + 8 * 4]
 16365 0000B0BF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 16366 0000B0C2 50                      	push rax
 16367 0000B0C3 6A01                    	push 1	; arg count
 16368 0000B0C5 488B4520                	mov rax, PARAM(0)	; param make-run
 16369 0000B0C9 803804                  	cmp byte [rax], T_closure
 16370 0000B0CC 0F8594AF0000            	jne L_error_non_closure
 16371 0000B0D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16372 0000B0D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16373 0000B0D8 48890425[C2150000]      	mov qword [free_var_122], rax
 16374 0000B0E0 48B8-                   	mov rax, sob_void
 16374 0000B0E2 [0000000000000000] 
 16375                                  
 16376                                  	; preparing a non tail-call
 16377 0000B0EA 488B4510                	mov rax, ENV
 16378 0000B0EE 488B00                  	mov rax, qword [rax + 8 * 0]
 16379 0000B0F1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<=?
 16380 0000B0F4 50                      	push rax
 16381 0000B0F5 6A01                    	push 1	; arg count
 16382 0000B0F7 488B4520                	mov rax, PARAM(0)	; param make-run
 16383 0000B0FB 803804                  	cmp byte [rax], T_closure
 16384 0000B0FE 0F8562AF0000            	jne L_error_non_closure
 16385 0000B104 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16386 0000B107 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16387 0000B10A 48890425[D3150000]      	mov qword [free_var_123], rax
 16388 0000B112 48B8-                   	mov rax, sob_void
 16388 0000B114 [0000000000000000] 
 16389                                  
 16390                                  	; preparing a non tail-call
 16391 0000B11C 488B4510                	mov rax, ENV
 16392 0000B120 488B4008                	mov rax, qword [rax + 8 * 1]
 16393 0000B124 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 16394 0000B127 50                      	push rax
 16395 0000B128 6A01                    	push 1	; arg count
 16396 0000B12A 488B4520                	mov rax, PARAM(0)	; param make-run
 16397 0000B12E 803804                  	cmp byte [rax], T_closure
 16398 0000B131 0F852FAF0000            	jne L_error_non_closure
 16399 0000B137 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16400 0000B13A FF5009                  	call SOB_CLOSURE_CODE(rax)
 16401 0000B13D 48890425[E4150000]      	mov qword [free_var_124], rax
 16402 0000B145 48B8-                   	mov rax, sob_void
 16402 0000B147 [0000000000000000] 
 16403                                  
 16404                                  	; preparing a non tail-call
 16405 0000B14F 488B4510                	mov rax, ENV
 16406 0000B153 488B4010                	mov rax, qword [rax + 8 * 2]
 16407 0000B157 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>=?
 16408 0000B15A 50                      	push rax
 16409 0000B15B 6A01                    	push 1	; arg count
 16410 0000B15D 488B4520                	mov rax, PARAM(0)	; param make-run
 16411 0000B161 803804                  	cmp byte [rax], T_closure
 16412 0000B164 0F85FCAE0000            	jne L_error_non_closure
 16413 0000B16A FF7001                  	push SOB_CLOSURE_ENV(rax)
 16414 0000B16D FF5009                  	call SOB_CLOSURE_CODE(rax)
 16415 0000B170 48890425[F5150000]      	mov qword [free_var_125], rax
 16416 0000B178 48B8-                   	mov rax, sob_void
 16416 0000B17A [0000000000000000] 
 16417                                  
 16418                                  	; preparing a non tail-call
 16419 0000B182 488B4510                	mov rax, ENV
 16420 0000B186 488B4018                	mov rax, qword [rax + 8 * 3]
 16421 0000B18A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin=?
 16422 0000B18D 50                      	push rax
 16423 0000B18E 6A01                    	push 1	; arg count
 16424 0000B190 488B4520                	mov rax, PARAM(0)	; param make-run
 16425 0000B194 803804                  	cmp byte [rax], T_closure
 16426 0000B197 0F85C9AE0000            	jne L_error_non_closure
 16427 0000B19D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16428 0000B1A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16429 0000B1A3 48890425[06160000]      	mov qword [free_var_126], rax
 16430 0000B1AB 48B8-                   	mov rax, sob_void
 16430 0000B1AD [0000000000000000] 
 16431 0000B1B5 C9                      	leave
 16432 0000B1B6 C21800                  	ret AND_KILL_FRAME(1)
 16433                                  .L_lambda_simple_end_034a:	; new closure is in rax
 16434 0000B1B9 803804                  	cmp byte [rax], T_closure
 16435 0000B1BC 0F85A4AE0000            	jne L_error_non_closure
 16436 0000B1C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16437                                  
 16438                                  	; recycling the current frame
 16439 0000B1C5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16440 0000B1C8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16441 0000B1CB B905000000              	mov rcx, 1 + 4
 16442 0000B1D0 488B5D18                	mov rbx, COUNT
 16443 0000B1D4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16444 0000B1D9 488D55F8                	lea rdx, [rbp - 8 * 1]
 16445                                  .L_tc_recycle_frame_loop_0465:
 16446 0000B1DD 4883F900                	cmp rcx, 0
 16447 0000B1E1 7413                    	je .L_tc_recycle_frame_done_0465
 16448 0000B1E3 488B32                  	mov rsi, qword [rdx]
 16449 0000B1E6 488933                  	mov qword [rbx], rsi
 16450 0000B1E9 48FFC9                  	dec rcx
 16451 0000B1EC 4883EB08                	sub rbx, 8 * 1
 16452 0000B1F0 4883EA08                	sub rdx, 8 * 1
 16453 0000B1F4 EBE7                    	jmp .L_tc_recycle_frame_loop_0465
 16454                                  .L_tc_recycle_frame_done_0465:
 16455 0000B1F6 488D6308                	lea rsp, [rbx + 8 * 1]
 16456 0000B1FA 5D                      	pop rbp	; the proc will restore it!
 16457 0000B1FB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16458 0000B1FE C9                      	leave
 16459 0000B1FF C21800                  	ret AND_KILL_FRAME(1)
 16460                                  .L_lambda_simple_end_0346:	; new closure is in rax
 16461 0000B202 803804                  	cmp byte [rax], T_closure
 16462 0000B205 0F855BAE0000            	jne L_error_non_closure
 16463 0000B20B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16464                                  
 16465                                  	; recycling the current frame
 16466 0000B20E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16467 0000B211 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16468 0000B214 B905000000              	mov rcx, 1 + 4
 16469 0000B219 488B5D18                	mov rbx, COUNT
 16470 0000B21D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16471 0000B222 488D55F8                	lea rdx, [rbp - 8 * 1]
 16472                                  .L_tc_recycle_frame_loop_0466:
 16473 0000B226 4883F900                	cmp rcx, 0
 16474 0000B22A 7413                    	je .L_tc_recycle_frame_done_0466
 16475 0000B22C 488B32                  	mov rsi, qword [rdx]
 16476 0000B22F 488933                  	mov qword [rbx], rsi
 16477 0000B232 48FFC9                  	dec rcx
 16478 0000B235 4883EB08                	sub rbx, 8 * 1
 16479 0000B239 4883EA08                	sub rdx, 8 * 1
 16480 0000B23D EBE7                    	jmp .L_tc_recycle_frame_loop_0466
 16481                                  .L_tc_recycle_frame_done_0466:
 16482 0000B23F 488D6308                	lea rsp, [rbx + 8 * 1]
 16483 0000B243 5D                      	pop rbp	; the proc will restore it!
 16484 0000B244 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16485 0000B247 C9                      	leave
 16486 0000B248 C21800                  	ret AND_KILL_FRAME(1)
 16487                                  .L_lambda_simple_end_0344:	; new closure is in rax
 16488 0000B24B 803804                  	cmp byte [rax], T_closure
 16489 0000B24E 0F8512AE0000            	jne L_error_non_closure
 16490 0000B254 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16491                                  
 16492                                  	; recycling the current frame
 16493 0000B257 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16494 0000B25A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16495 0000B25D B905000000              	mov rcx, 1 + 4
 16496 0000B262 488B5D18                	mov rbx, COUNT
 16497 0000B266 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16498 0000B26B 488D55F8                	lea rdx, [rbp - 8 * 1]
 16499                                  .L_tc_recycle_frame_loop_0467:
 16500 0000B26F 4883F900                	cmp rcx, 0
 16501 0000B273 7413                    	je .L_tc_recycle_frame_done_0467
 16502 0000B275 488B32                  	mov rsi, qword [rdx]
 16503 0000B278 488933                  	mov qword [rbx], rsi
 16504 0000B27B 48FFC9                  	dec rcx
 16505 0000B27E 4883EB08                	sub rbx, 8 * 1
 16506 0000B282 4883EA08                	sub rdx, 8 * 1
 16507 0000B286 EBE7                    	jmp .L_tc_recycle_frame_loop_0467
 16508                                  .L_tc_recycle_frame_done_0467:
 16509 0000B288 488D6308                	lea rsp, [rbx + 8 * 1]
 16510 0000B28C 5D                      	pop rbp	; the proc will restore it!
 16511 0000B28D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16512 0000B290 C9                      	leave
 16513 0000B291 C21800                  	ret AND_KILL_FRAME(1)
 16514                                  .L_lambda_simple_end_0342:	; new closure is in rax
 16515 0000B294 803804                  	cmp byte [rax], T_closure
 16516 0000B297 0F85C9AD0000            	jne L_error_non_closure
 16517 0000B29D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16518                                  
 16519                                  	; recycling the current frame
 16520 0000B2A0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16521 0000B2A3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16522 0000B2A6 B905000000              	mov rcx, 1 + 4
 16523 0000B2AB 488B5D18                	mov rbx, COUNT
 16524 0000B2AF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16525 0000B2B4 488D55F8                	lea rdx, [rbp - 8 * 1]
 16526                                  .L_tc_recycle_frame_loop_0468:
 16527 0000B2B8 4883F900                	cmp rcx, 0
 16528 0000B2BC 7413                    	je .L_tc_recycle_frame_done_0468
 16529 0000B2BE 488B32                  	mov rsi, qword [rdx]
 16530 0000B2C1 488933                  	mov qword [rbx], rsi
 16531 0000B2C4 48FFC9                  	dec rcx
 16532 0000B2C7 4883EB08                	sub rbx, 8 * 1
 16533 0000B2CB 4883EA08                	sub rdx, 8 * 1
 16534 0000B2CF EBE7                    	jmp .L_tc_recycle_frame_loop_0468
 16535                                  .L_tc_recycle_frame_done_0468:
 16536 0000B2D1 488D6308                	lea rsp, [rbx + 8 * 1]
 16537 0000B2D5 5D                      	pop rbp	; the proc will restore it!
 16538 0000B2D6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16539 0000B2D9 C9                      	leave
 16540 0000B2DA C21800                  	ret AND_KILL_FRAME(1)
 16541                                  .L_lambda_simple_end_0340:	; new closure is in rax
 16542 0000B2DD 803804                  	cmp byte [rax], T_closure
 16543 0000B2E0 0F8580AD0000            	jne L_error_non_closure
 16544 0000B2E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16545                                  
 16546                                  	; recycling the current frame
 16547 0000B2E9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16548 0000B2EC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16549 0000B2EF B905000000              	mov rcx, 1 + 4
 16550 0000B2F4 488B5D18                	mov rbx, COUNT
 16551 0000B2F8 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16552 0000B2FD 488D55F8                	lea rdx, [rbp - 8 * 1]
 16553                                  .L_tc_recycle_frame_loop_0469:
 16554 0000B301 4883F900                	cmp rcx, 0
 16555 0000B305 7413                    	je .L_tc_recycle_frame_done_0469
 16556 0000B307 488B32                  	mov rsi, qword [rdx]
 16557 0000B30A 488933                  	mov qword [rbx], rsi
 16558 0000B30D 48FFC9                  	dec rcx
 16559 0000B310 4883EB08                	sub rbx, 8 * 1
 16560 0000B314 4883EA08                	sub rdx, 8 * 1
 16561 0000B318 EBE7                    	jmp .L_tc_recycle_frame_loop_0469
 16562                                  .L_tc_recycle_frame_done_0469:
 16563 0000B31A 488D6308                	lea rsp, [rbx + 8 * 1]
 16564 0000B31E 5D                      	pop rbp	; the proc will restore it!
 16565 0000B31F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16566 0000B322 C9                      	leave
 16567 0000B323 C21800                  	ret AND_KILL_FRAME(1)
 16568                                  .L_lambda_simple_end_033f:	; new closure is in rax
 16569 0000B326 803804                  	cmp byte [rax], T_closure
 16570 0000B329 0F8537AD0000            	jne L_error_non_closure
 16571 0000B32F FF7001                  	push SOB_CLOSURE_ENV(rax)
 16572                                  
 16573                                  	; recycling the current frame
 16574 0000B332 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16575 0000B335 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16576 0000B338 B905000000              	mov rcx, 1 + 4
 16577 0000B33D 488B5D18                	mov rbx, COUNT
 16578 0000B341 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16579 0000B346 488D55F8                	lea rdx, [rbp - 8 * 1]
 16580                                  .L_tc_recycle_frame_loop_046a:
 16581 0000B34A 4883F900                	cmp rcx, 0
 16582 0000B34E 7413                    	je .L_tc_recycle_frame_done_046a
 16583 0000B350 488B32                  	mov rsi, qword [rdx]
 16584 0000B353 488933                  	mov qword [rbx], rsi
 16585 0000B356 48FFC9                  	dec rcx
 16586 0000B359 4883EB08                	sub rbx, 8 * 1
 16587 0000B35D 4883EA08                	sub rdx, 8 * 1
 16588 0000B361 EBE7                    	jmp .L_tc_recycle_frame_loop_046a
 16589                                  .L_tc_recycle_frame_done_046a:
 16590 0000B363 488D6308                	lea rsp, [rbx + 8 * 1]
 16591 0000B367 5D                      	pop rbp	; the proc will restore it!
 16592 0000B368 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16593 0000B36B C9                      	leave
 16594 0000B36C C21800                  	ret AND_KILL_FRAME(1)
 16595                                  .L_lambda_simple_end_033e:	; new closure is in rax
 16596 0000B36F 803804                  	cmp byte [rax], T_closure
 16597 0000B372 0F85EEAC0000            	jne L_error_non_closure
 16598 0000B378 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16599                                  
 16600                                  	; recycling the current frame
 16601 0000B37B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16602 0000B37E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16603 0000B381 B905000000              	mov rcx, 1 + 4
 16604 0000B386 488B5D18                	mov rbx, COUNT
 16605 0000B38A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16606 0000B38F 488D55F8                	lea rdx, [rbp - 8 * 1]
 16607                                  .L_tc_recycle_frame_loop_046b:
 16608 0000B393 4883F900                	cmp rcx, 0
 16609 0000B397 7413                    	je .L_tc_recycle_frame_done_046b
 16610 0000B399 488B32                  	mov rsi, qword [rdx]
 16611 0000B39C 488933                  	mov qword [rbx], rsi
 16612 0000B39F 48FFC9                  	dec rcx
 16613 0000B3A2 4883EB08                	sub rbx, 8 * 1
 16614 0000B3A6 4883EA08                	sub rdx, 8 * 1
 16615 0000B3AA EBE7                    	jmp .L_tc_recycle_frame_loop_046b
 16616                                  .L_tc_recycle_frame_done_046b:
 16617 0000B3AC 488D6308                	lea rsp, [rbx + 8 * 1]
 16618 0000B3B0 5D                      	pop rbp	; the proc will restore it!
 16619 0000B3B1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16620 0000B3B4 C9                      	leave
 16621 0000B3B5 C21800                  	ret AND_KILL_FRAME(1)
 16622                                  .L_lambda_simple_end_033b:	; new closure is in rax
 16623 0000B3B8 803804                  	cmp byte [rax], T_closure
 16624 0000B3BB 0F85A5AC0000            	jne L_error_non_closure
 16625 0000B3C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16626 0000B3C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16627                                  
 16628 0000B3C7 4889C7                  	mov rdi, rax
 16629 0000B3CA E852AE0000              	call print_sexpr_if_not_void
 16630                                  
 16631                                  	; preparing a non tail-call
 16632 0000B3CF 48B8-                   	mov rax, L_constants + 1881
 16632 0000B3D1 [5907000000000000] 
 16633 0000B3D9 50                      	push rax
 16634 0000B3DA 6A01                    	push 1	; arg count
 16635 0000B3DC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16636 0000B3E1 E829AD0000              	call malloc
 16637 0000B3E6 50                      	push rax
 16638 0000B3E7 BF00000000              	mov rdi, 8 * 0	; new rib
 16639 0000B3EC E81EAD0000              	call malloc
 16640 0000B3F1 50                      	push rax
 16641 0000B3F2 BF08000000              	mov rdi, 8 * 1	; extended env
 16642 0000B3F7 E813AD0000              	call malloc
 16643 0000B3FC 488B7D10                	mov rdi, ENV
 16644 0000B400 BE00000000              	mov rsi, 0
 16645 0000B405 BA01000000              	mov rdx, 1
 16646                                  .L_lambda_simple_env_loop_034b:	; ext_env[i + 1] <-- env[i]
 16647 0000B40A 4883FE00                	cmp rsi, 0
 16648 0000B40E 7410                    	je .L_lambda_simple_env_end_034b
 16649 0000B410 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16650 0000B414 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16651 0000B418 48FFC6                  	inc rsi
 16652 0000B41B 48FFC2                  	inc rdx
 16653 0000B41E EBEA                    	jmp .L_lambda_simple_env_loop_034b
 16654                                  .L_lambda_simple_env_end_034b:
 16655 0000B420 5B                      	pop rbx
 16656 0000B421 BE00000000              	mov rsi, 0
 16657                                  .L_lambda_simple_params_loop_034b:	; copy params
 16658 0000B426 4883FE00                	cmp rsi, 0
 16659 0000B42A 740E                    	je .L_lambda_simple_params_end_034b
 16660 0000B42C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16661 0000B431 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16662 0000B435 48FFC6                  	inc rsi
 16663 0000B438 EBEC                    	jmp .L_lambda_simple_params_loop_034b
 16664                                  .L_lambda_simple_params_end_034b:
 16665 0000B43A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16666 0000B43D 4889C3                  	mov rbx, rax
 16667 0000B440 58                      	pop rax
 16668 0000B441 C60004                  	mov byte [rax], T_closure
 16669 0000B444 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16670 0000B448 48C74009[55B40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_034b
 16671 0000B450 E9B6050000              	jmp .L_lambda_simple_end_034b
 16672                                  .L_lambda_simple_code_034b:	; lambda-simple body
 16673 0000B455 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16674 0000B45B 740B                    	je .L_lambda_simple_arity_check_ok_034b
 16675 0000B45D FF742410                	push qword [rsp + 8 * 2]
 16676 0000B461 6A01                    	push 1
 16677 0000B463 E960AC0000              	jmp L_error_incorrect_arity_simple
 16678                                  .L_lambda_simple_arity_check_ok_034b:
 16679 0000B468 C8000000                	enter 0, 0
 16680 0000B46C BF08000000              	mov rdi, 8	; sob_box
 16681 0000B471 E899AC0000              	call malloc
 16682 0000B476 488B5D20                	mov rbx, PARAM(0)
 16683 0000B47A 488918                  	mov [rax], rbx
 16684 0000B47D 48894520                	mov PARAM(0), rax
 16685 0000B481 48B8-                   	mov rax, sob_void
 16685 0000B483 [0000000000000000] 
 16686                                  
 16687 0000B48B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16688 0000B490 E87AAC0000              	call malloc
 16689 0000B495 50                      	push rax
 16690 0000B496 BF08000000              	mov rdi, 8 * 1	; new rib
 16691 0000B49B E86FAC0000              	call malloc
 16692 0000B4A0 50                      	push rax
 16693 0000B4A1 BF10000000              	mov rdi, 8 * 2	; extended env
 16694 0000B4A6 E864AC0000              	call malloc
 16695 0000B4AB 488B7D10                	mov rdi, ENV
 16696 0000B4AF BE00000000              	mov rsi, 0
 16697 0000B4B4 BA01000000              	mov rdx, 1
 16698                                  .L_lambda_simple_env_loop_034c:	; ext_env[i + 1] <-- env[i]
 16699 0000B4B9 4883FE01                	cmp rsi, 1
 16700 0000B4BD 7410                    	je .L_lambda_simple_env_end_034c
 16701 0000B4BF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16702 0000B4C3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16703 0000B4C7 48FFC6                  	inc rsi
 16704 0000B4CA 48FFC2                  	inc rdx
 16705 0000B4CD EBEA                    	jmp .L_lambda_simple_env_loop_034c
 16706                                  .L_lambda_simple_env_end_034c:
 16707 0000B4CF 5B                      	pop rbx
 16708 0000B4D0 BE00000000              	mov rsi, 0
 16709                                  .L_lambda_simple_params_loop_034c:	; copy params
 16710 0000B4D5 4883FE01                	cmp rsi, 1
 16711 0000B4D9 740E                    	je .L_lambda_simple_params_end_034c
 16712 0000B4DB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16713 0000B4E0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16714 0000B4E4 48FFC6                  	inc rsi
 16715 0000B4E7 EBEC                    	jmp .L_lambda_simple_params_loop_034c
 16716                                  .L_lambda_simple_params_end_034c:
 16717 0000B4E9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16718 0000B4EC 4889C3                  	mov rbx, rax
 16719 0000B4EF 58                      	pop rax
 16720 0000B4F0 C60004                  	mov byte [rax], T_closure
 16721 0000B4F3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16722 0000B4F7 48C74009[04B50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_034c
 16723 0000B4FF E90D010000              	jmp .L_lambda_simple_end_034c
 16724                                  .L_lambda_simple_code_034c:	; lambda-simple body
 16725 0000B504 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16726 0000B50A 740B                    	je .L_lambda_simple_arity_check_ok_034c
 16727 0000B50C FF742410                	push qword [rsp + 8 * 2]
 16728 0000B510 6A02                    	push 2
 16729 0000B512 E9B1AB0000              	jmp L_error_incorrect_arity_simple
 16730                                  .L_lambda_simple_arity_check_ok_034c:
 16731 0000B517 C8000000                	enter 0, 0
 16732                                  	; preparing a non tail-call
 16733 0000B51B 488B4520                	mov rax, PARAM(0)	; param n
 16734 0000B51F 50                      	push rax
 16735 0000B520 6A01                    	push 1	; arg count
 16736 0000B522 488B0425[730F0000]      	mov rax, qword [free_var_27]	; free var zero?
 16737 0000B52A 803805                  	cmp byte [rax], T_undefined
 16738 0000B52D 0F84AFAA0000            	je L_error_fvar_undefined
 16739 0000B533 803804                  	cmp byte [rax], T_closure
 16740 0000B536 0F852AAB0000            	jne L_error_non_closure
 16741 0000B53C FF7001                  	push SOB_CLOSURE_ENV(rax)
 16742 0000B53F FF5009                  	call SOB_CLOSURE_CODE(rax)
 16743 0000B542 483D[02000000]          	cmp rax, sob_boolean_false
 16744 0000B548 740F                    	je .L_if_else_026b
 16745 0000B54A 48B8-                   	mov rax, L_constants + 1
 16745 0000B54C [0100000000000000] 
 16746 0000B554 E9B4000000              	jmp .L_if_end_026b
 16747                                  .L_if_else_026b:
 16748                                  	; preparing a tail-call
 16749                                  	; preparing a non tail-call
 16750 0000B559 488B4528                	mov rax, PARAM(1)	; param ch
 16751 0000B55D 50                      	push rax
 16752                                  	; preparing a non tail-call
 16753 0000B55E 48B8-                   	mov rax, L_constants + 2158
 16753 0000B560 [6E08000000000000] 
 16754 0000B568 50                      	push rax
 16755 0000B569 488B4520                	mov rax, PARAM(0)	; param n
 16756 0000B56D 50                      	push rax
 16757 0000B56E 6A02                    	push 2	; arg count
 16758 0000B570 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 16759 0000B578 803805                  	cmp byte [rax], T_undefined
 16760 0000B57B 0F8461AA0000            	je L_error_fvar_undefined
 16761 0000B581 803804                  	cmp byte [rax], T_closure
 16762 0000B584 0F85DCAA0000            	jne L_error_non_closure
 16763 0000B58A FF7001                  	push SOB_CLOSURE_ENV(rax)
 16764 0000B58D FF5009                  	call SOB_CLOSURE_CODE(rax)
 16765 0000B590 50                      	push rax
 16766 0000B591 6A02                    	push 2	; arg count
 16767 0000B593 488B4510                	mov rax, ENV
 16768 0000B597 488B00                  	mov rax, qword [rax + 8 * 0]
 16769 0000B59A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 16770 0000B59D 488B00                  	mov rax, qword [rax]
 16771 0000B5A0 803804                  	cmp byte [rax], T_closure
 16772 0000B5A3 0F85BDAA0000            	jne L_error_non_closure
 16773 0000B5A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16774 0000B5AC FF5009                  	call SOB_CLOSURE_CODE(rax)
 16775 0000B5AF 50                      	push rax
 16776 0000B5B0 488B4528                	mov rax, PARAM(1)	; param ch
 16777 0000B5B4 50                      	push rax
 16778 0000B5B5 6A02                    	push 2	; arg count
 16779 0000B5B7 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
 16780 0000B5BF 803805                  	cmp byte [rax], T_undefined
 16781 0000B5C2 0F841AAA0000            	je L_error_fvar_undefined
 16782 0000B5C8 803804                  	cmp byte [rax], T_closure
 16783 0000B5CB 0F8595AA0000            	jne L_error_non_closure
 16784 0000B5D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16785                                  
 16786                                  	; recycling the current frame
 16787 0000B5D4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16788 0000B5D7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16789 0000B5DA B906000000              	mov rcx, 2 + 4
 16790 0000B5DF 488B5D18                	mov rbx, COUNT
 16791 0000B5E3 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16792 0000B5E8 488D55F8                	lea rdx, [rbp - 8 * 1]
 16793                                  .L_tc_recycle_frame_loop_046c:
 16794 0000B5EC 4883F900                	cmp rcx, 0
 16795 0000B5F0 7413                    	je .L_tc_recycle_frame_done_046c
 16796 0000B5F2 488B32                  	mov rsi, qword [rdx]
 16797 0000B5F5 488933                  	mov qword [rbx], rsi
 16798 0000B5F8 48FFC9                  	dec rcx
 16799 0000B5FB 4883EB08                	sub rbx, 8 * 1
 16800 0000B5FF 4883EA08                	sub rdx, 8 * 1
 16801 0000B603 EBE7                    	jmp .L_tc_recycle_frame_loop_046c
 16802                                  .L_tc_recycle_frame_done_046c:
 16803 0000B605 488D6308                	lea rsp, [rbx + 8 * 1]
 16804 0000B609 5D                      	pop rbp	; the proc will restore it!
 16805 0000B60A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16806                                  .L_if_end_026b:
 16807 0000B60D C9                      	leave
 16808 0000B60E C22000                  	ret AND_KILL_FRAME(2)
 16809                                  .L_lambda_simple_end_034c:	; new closure is in rax
 16810 0000B611 50                      	push rax
 16811 0000B612 488B4520                	mov rax, PARAM(0)	; param run
 16812 0000B616 8F00                    	pop qword [rax]
 16813 0000B618 48B8-                   	mov rax, sob_void
 16813 0000B61A [0000000000000000] 
 16814                                  
 16815 0000B622 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16816 0000B627 E8E3AA0000              	call malloc
 16817 0000B62C 50                      	push rax
 16818 0000B62D BF08000000              	mov rdi, 8 * 1	; new rib
 16819 0000B632 E8D8AA0000              	call malloc
 16820 0000B637 50                      	push rax
 16821 0000B638 BF10000000              	mov rdi, 8 * 2	; extended env
 16822 0000B63D E8CDAA0000              	call malloc
 16823 0000B642 488B7D10                	mov rdi, ENV
 16824 0000B646 BE00000000              	mov rsi, 0
 16825 0000B64B BA01000000              	mov rdx, 1
 16826                                  .L_lambda_opt_env_loop_0073:	; ext_env[i + 1] <-- env[i]
 16827 0000B650 4883FE01                	cmp rsi, 1
 16828 0000B654 7410                    	je .L_lambda_opt_env_end_0073
 16829 0000B656 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16830 0000B65A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16831 0000B65E 48FFC6                  	inc rsi
 16832 0000B661 48FFC2                  	inc rdx
 16833 0000B664 EBEA                    	jmp .L_lambda_opt_env_loop_0073
 16834                                  .L_lambda_opt_env_end_0073:
 16835 0000B666 5B                      	pop rbx
 16836 0000B667 BE00000000              	mov rsi, 0
 16837                                  .L_lambda_opt_params_loop_0073:	; copy params
 16838 0000B66C 4883FE01                	cmp rsi, 1
 16839 0000B670 740E                    	je .L_lambda_opt_params_end_0073
 16840 0000B672 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16841 0000B677 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16842 0000B67B 48FFC6                  	inc rsi
 16843 0000B67E EBEC                    	jmp .L_lambda_opt_params_loop_0073
 16844                                  .L_lambda_opt_params_end_0073:
 16845 0000B680 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16846 0000B683 4889C3                  	mov rbx, rax
 16847 0000B686 58                      	pop rax
 16848 0000B687 C60004                  	mov byte [rax], T_closure
 16849 0000B68A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16850 0000B68E 48C74009[9BB60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0073
 16851 0000B696 E96C030000              	jmp .L_lambda_opt_end_0073
 16852                                  .L_lambda_opt_code_0073:	; lambda-opt body
 16853 0000B69B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16854 0000B6A1 0F8404010000            	je .L_lambda_opt_arity_check_exact_0073
 16855 0000B6A7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16856 0000B6AD 7F0B                    	jg .L_lambda_opt_arity_check_more_0073
 16857 0000B6AF FF742410                	push qword [rsp + 8 * 2]
 16858 0000B6B3 6A01                    	push 1
 16859 0000B6B5 E922AA0000              	jmp L_error_incorrect_arity_opt
 16860                                  .L_lambda_opt_arity_check_more_0073:
 16861 0000B6BA 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 16862 0000B6BF 41B901000000            	mov r9 , 1
 16863 0000B6C5 4989E7                  	mov r15, rsp
 16864 0000B6C8 4D29C8                  	sub r8, r9
 16865 0000B6CB 41B900000000            	mov r9, 0
 16866 0000B6D1 498D5F10                	lea rbx, [r15 + 8 * 2]
 16867 0000B6D5 498B4710                	mov rax, qword [r15 + 8 * 2]
 16868 0000B6D9 486BC008                	imul rax, 8
 16869 0000B6DD 4801C3                  	add rbx, rax
 16870 0000B6E0 488B13                  	mov rdx , qword [rbx]
 16871 0000B6E3 4989DA                  	mov r10 , rbx
 16872 0000B6E6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 16873 0000B6EB 52                      	push rdx
 16874 0000B6EC 53                      	push rbx
 16875 0000B6ED 4150                    	push r8
 16876 0000B6EF 4151                    	push r9
 16877 0000B6F1 4152                    	push r10
 16878 0000B6F3 4157                    	push r15
 16879 0000B6F5 E815AA0000              	call malloc
 16880 0000B6FA 415F                    	pop r15
 16881 0000B6FC 415A                    	pop r10
 16882 0000B6FE 4159                    	pop r9
 16883 0000B700 4158                    	pop r8
 16884 0000B702 5B                      	pop rbx
 16885 0000B703 5A                      	pop rdx
 16886 0000B704 C60021                  	mov byte qword [rax], T_pair
 16887 0000B707 48895001                	mov SOB_PAIR_CAR(rax), rdx
 16888 0000B70B 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 16889 0000B713 498902                  	mov qword [r10], rax
 16890 0000B716 49FFC1                  	inc r9
 16891 0000B719 4883EB08                	sub rbx, 8
 16892 0000B71D 4D39C1                  	cmp r9, r8
 16893 0000B720 743E                    	je .L_lambda_opt_stack_shrink_loop_023d
 16894                                  .L_lambda_opt_stack_shrink_loop_023c:
 16895 0000B722 488B13                  	mov rdx, qword [rbx]
 16896 0000B725 53                      	push rbx
 16897 0000B726 4150                    	push r8
 16898 0000B728 4151                    	push r9
 16899 0000B72A 4152                    	push r10
 16900 0000B72C 4157                    	push r15
 16901 0000B72E 52                      	push rdx
 16902 0000B72F BF11000000              	mov rdi, (1 + 8 + 8)
 16903 0000B734 E8D6A90000              	call malloc
 16904 0000B739 5A                      	pop rdx
 16905 0000B73A 415F                    	pop r15
 16906 0000B73C 415A                    	pop r10
 16907 0000B73E 4159                    	pop r9
 16908 0000B740 4158                    	pop r8
 16909 0000B742 5B                      	pop rbx
 16910 0000B743 C60021                  	mov byte [rax], T_pair
 16911 0000B746 48895001                	mov SOB_PAIR_CAR(rax), rdx
 16912 0000B74A 4D8B32                  	mov r14, qword [r10]
 16913 0000B74D 4C897009                	mov SOB_PAIR_CDR(rax), r14
 16914 0000B751 498902                  	mov qword [r10], rax
 16915 0000B754 49FFC1                  	inc r9
 16916 0000B757 4883EB08                	sub rbx, 8
 16917 0000B75B 4D39C1                  	cmp r9, r8
 16918 0000B75E 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_023c
 16919                                  .L_lambda_opt_stack_shrink_loop_023d:
 16920 0000B760 498D5710                	lea rdx, [r15 + 8 * 2]
 16921 0000B764 48C70201000000          	mov qword [rdx], 1
 16922 0000B76B 48830201                	add qword [rdx] , 1
 16923 0000B76F 4D89C1                  	mov r9, r8
 16924 0000B772 49FFC9                  	dec r9
 16925 0000B775 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 16926                                  .L_lambda_opt_stack_shrink_loop_023e:
 16927 0000B779 488B03                  	mov rax, qword [rbx]
 16928 0000B77C 498901                  	mov qword [r9], rax
 16929 0000B77F 4983E908                	sub r9 , 8
 16930 0000B783 4883EB08                	sub rbx, 8
 16931 0000B787 4C39FB                  	cmp rbx, r15
 16932 0000B78A 75ED                    	jne .L_lambda_opt_stack_shrink_loop_023e
 16933 0000B78C 488B03                  	mov rax, qword [rbx]
 16934 0000B78F 498901                  	mov qword [r9], rax
 16935 0000B792 4D89C1                  	mov r9, r8
 16936 0000B795 4983E901                	sub r9 , 1
 16937 0000B799 4983F900                	cmp r9, 0
 16938 0000B79D 7446                    je .L_lambda_opt_stack_adjusted_0073
 16939                                  .L_lambda_opt_stack_shrink_loop_023f:
 16940 0000B79F 58                      	pop rax
 16941 0000B7A0 49FFC9                  	dec r9
 16942 0000B7A3 4983F900                	cmp r9, 0
 16943 0000B7A7 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_023f
 16944 0000B7A9 EB3A                    jmp .L_lambda_opt_stack_adjusted_0073
 16945                                  .L_lambda_opt_arity_check_exact_0073:
 16946 0000B7AB 4989E7                  	mov r15, rsp
 16947 0000B7AE 498D5F18                	lea rbx, [r15 + 8 * 2 + 8 * 1]
 16948 0000B7B2 488B0B                  	mov rcx, qword [rbx]
 16949 0000B7B5 48C703[01000000]        	mov qword [rbx], sob_nil
 16950 0000B7BC 4883EB08                	sub rbx, 8
 16951                                  .L_lambda_opt_stack_shrink_loop_023b:
 16952 0000B7C0 488B13                  	mov rdx, qword [rbx]
 16953 0000B7C3 48890B                  	mov qword [rbx], rcx
 16954 0000B7C6 4C39FB                  	cmp rbx, r15
 16955 0000B7C9 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0073
 16956 0000B7CB 4889D1                  	mov rcx, rdx
 16957 0000B7CE 4883EB08                	sub rbx, 8
 16958 0000B7D2 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_023b
 16959                                  .L_lambda_opt_stack_shrink_loop_exit_0073:
 16960 0000B7D4 52                      	push rdx
 16961 0000B7D5 4989E7                  	mov r15, rsp
 16962 0000B7D8 4983C710                	add r15, 16
 16963 0000B7DC 498B1F                  	mov rbx, qword [r15]
 16964 0000B7DF 48FFC3                  	inc rbx
 16965 0000B7E2 49891F                  	mov qword [r15], rbx
 16966                                  .L_lambda_opt_stack_adjusted_0073:
 16967 0000B7E5 C8000000                	enter 0, 0
 16968                                  	; preparing a non tail-call
 16969 0000B7E9 488B4528                	mov rax, PARAM(1)	; param chs
 16970 0000B7ED 50                      	push rax
 16971 0000B7EE 6A01                    	push 1	; arg count
 16972 0000B7F0 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 16973 0000B7F8 803805                  	cmp byte [rax], T_undefined
 16974 0000B7FB 0F84E1A70000            	je L_error_fvar_undefined
 16975 0000B801 803804                  	cmp byte [rax], T_closure
 16976 0000B804 0F855CA80000            	jne L_error_non_closure
 16977 0000B80A FF7001                  	push SOB_CLOSURE_ENV(rax)
 16978 0000B80D FF5009                  	call SOB_CLOSURE_CODE(rax)
 16979 0000B810 483D[02000000]          	cmp rax, sob_boolean_false
 16980 0000B816 7469                    	je .L_if_else_026c
 16981                                  	; preparing a tail-call
 16982 0000B818 48B8-                   	mov rax, L_constants + 4
 16982 0000B81A [0400000000000000] 
 16983 0000B822 50                      	push rax
 16984 0000B823 488B4520                	mov rax, PARAM(0)	; param n
 16985 0000B827 50                      	push rax
 16986 0000B828 6A02                    	push 2	; arg count
 16987 0000B82A 488B4510                	mov rax, ENV
 16988 0000B82E 488B00                  	mov rax, qword [rax + 8 * 0]
 16989 0000B831 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 16990 0000B834 488B00                  	mov rax, qword [rax]
 16991 0000B837 803804                  	cmp byte [rax], T_closure
 16992 0000B83A 0F8526A80000            	jne L_error_non_closure
 16993 0000B840 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16994                                  
 16995                                  	; recycling the current frame
 16996 0000B843 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16997 0000B846 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16998 0000B849 B906000000              	mov rcx, 2 + 4
 16999 0000B84E 488B5D18                	mov rbx, COUNT
 17000 0000B852 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17001 0000B857 488D55F8                	lea rdx, [rbp - 8 * 1]
 17002                                  .L_tc_recycle_frame_loop_046d:
 17003 0000B85B 4883F900                	cmp rcx, 0
 17004 0000B85F 7413                    	je .L_tc_recycle_frame_done_046d
 17005 0000B861 488B32                  	mov rsi, qword [rdx]
 17006 0000B864 488933                  	mov qword [rbx], rsi
 17007 0000B867 48FFC9                  	dec rcx
 17008 0000B86A 4883EB08                	sub rbx, 8 * 1
 17009 0000B86E 4883EA08                	sub rdx, 8 * 1
 17010 0000B872 EBE7                    	jmp .L_tc_recycle_frame_loop_046d
 17011                                  .L_tc_recycle_frame_done_046d:
 17012 0000B874 488D6308                	lea rsp, [rbx + 8 * 1]
 17013 0000B878 5D                      	pop rbp	; the proc will restore it!
 17014 0000B879 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17015 0000B87C E982010000              	jmp .L_if_end_026c
 17016                                  .L_if_else_026c:
 17017                                  	; preparing a non tail-call
 17018 0000B881 488B4528                	mov rax, PARAM(1)	; param chs
 17019 0000B885 50                      	push rax
 17020 0000B886 6A01                    	push 1	; arg count
 17021 0000B888 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
 17022 0000B890 803805                  	cmp byte [rax], T_undefined
 17023 0000B893 0F8449A70000            	je L_error_fvar_undefined
 17024 0000B899 803804                  	cmp byte [rax], T_closure
 17025 0000B89C 0F85C4A70000            	jne L_error_non_closure
 17026 0000B8A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17027 0000B8A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17028 0000B8A8 483D[02000000]          	cmp rax, sob_boolean_false
 17029 0000B8AE 744C                    	je .L_if_else_026e
 17030                                  	; preparing a non tail-call
 17031                                  	; preparing a non tail-call
 17032 0000B8B0 488B4528                	mov rax, PARAM(1)	; param chs
 17033 0000B8B4 50                      	push rax
 17034 0000B8B5 6A01                    	push 1	; arg count
 17035 0000B8B7 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 17036 0000B8BF 803805                  	cmp byte [rax], T_undefined
 17037 0000B8C2 0F841AA70000            	je L_error_fvar_undefined
 17038 0000B8C8 803804                  	cmp byte [rax], T_closure
 17039 0000B8CB 0F8595A70000            	jne L_error_non_closure
 17040 0000B8D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17041 0000B8D4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17042 0000B8D7 50                      	push rax
 17043 0000B8D8 6A01                    	push 1	; arg count
 17044 0000B8DA 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 17045 0000B8E2 803805                  	cmp byte [rax], T_undefined
 17046 0000B8E5 0F84F7A60000            	je L_error_fvar_undefined
 17047 0000B8EB 803804                  	cmp byte [rax], T_closure
 17048 0000B8EE 0F8572A70000            	jne L_error_non_closure
 17049 0000B8F4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17050 0000B8F7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17051 0000B8FA EB0A                    	jmp .L_if_end_026e
 17052                                  .L_if_else_026e:
 17053 0000B8FC 48B8-                   	mov rax, L_constants + 2
 17053 0000B8FE [0200000000000000] 
 17054                                  .L_if_end_026e:
 17055 0000B906 483D[02000000]          	cmp rax, sob_boolean_false
 17056 0000B90C 0F8483000000            	je .L_if_else_026d
 17057                                  	; preparing a tail-call
 17058                                  	; preparing a non tail-call
 17059 0000B912 488B4528                	mov rax, PARAM(1)	; param chs
 17060 0000B916 50                      	push rax
 17061 0000B917 6A01                    	push 1	; arg count
 17062 0000B919 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 17063 0000B921 803805                  	cmp byte [rax], T_undefined
 17064 0000B924 0F84B8A60000            	je L_error_fvar_undefined
 17065 0000B92A 803804                  	cmp byte [rax], T_closure
 17066 0000B92D 0F8533A70000            	jne L_error_non_closure
 17067 0000B933 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17068 0000B936 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17069 0000B939 50                      	push rax
 17070 0000B93A 488B4520                	mov rax, PARAM(0)	; param n
 17071 0000B93E 50                      	push rax
 17072 0000B93F 6A02                    	push 2	; arg count
 17073 0000B941 488B4510                	mov rax, ENV
 17074 0000B945 488B00                  	mov rax, qword [rax + 8 * 0]
 17075 0000B948 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 17076 0000B94B 488B00                  	mov rax, qword [rax]
 17077 0000B94E 803804                  	cmp byte [rax], T_closure
 17078 0000B951 0F850FA70000            	jne L_error_non_closure
 17079 0000B957 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17080                                  
 17081                                  	; recycling the current frame
 17082 0000B95A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17083 0000B95D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17084 0000B960 B906000000              	mov rcx, 2 + 4
 17085 0000B965 488B5D18                	mov rbx, COUNT
 17086 0000B969 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17087 0000B96E 488D55F8                	lea rdx, [rbp - 8 * 1]
 17088                                  .L_tc_recycle_frame_loop_046e:
 17089 0000B972 4883F900                	cmp rcx, 0
 17090 0000B976 7413                    	je .L_tc_recycle_frame_done_046e
 17091 0000B978 488B32                  	mov rsi, qword [rdx]
 17092 0000B97B 488933                  	mov qword [rbx], rsi
 17093 0000B97E 48FFC9                  	dec rcx
 17094 0000B981 4883EB08                	sub rbx, 8 * 1
 17095 0000B985 4883EA08                	sub rdx, 8 * 1
 17096 0000B989 EBE7                    	jmp .L_tc_recycle_frame_loop_046e
 17097                                  .L_tc_recycle_frame_done_046e:
 17098 0000B98B 488D6308                	lea rsp, [rbx + 8 * 1]
 17099 0000B98F 5D                      	pop rbp	; the proc will restore it!
 17100 0000B990 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17101 0000B993 EB6E                    	jmp .L_if_end_026d
 17102                                  .L_if_else_026d:
 17103                                  	; preparing a tail-call
 17104 0000B995 48B8-                   	mov rax, L_constants + 2365
 17104 0000B997 [3D09000000000000] 
 17105 0000B99F 50                      	push rax
 17106 0000B9A0 48B8-                   	mov rax, L_constants + 2356
 17106 0000B9A2 [3409000000000000] 
 17107 0000B9AA 50                      	push rax
 17108 0000B9AB 6A02                    	push 2	; arg count
 17109 0000B9AD 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
 17110 0000B9B5 803805                  	cmp byte [rax], T_undefined
 17111 0000B9B8 0F8424A60000            	je L_error_fvar_undefined
 17112 0000B9BE 803804                  	cmp byte [rax], T_closure
 17113 0000B9C1 0F859FA60000            	jne L_error_non_closure
 17114 0000B9C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17115                                  
 17116                                  	; recycling the current frame
 17117 0000B9CA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17118 0000B9CD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17119 0000B9D0 B906000000              	mov rcx, 2 + 4
 17120 0000B9D5 488B5D18                	mov rbx, COUNT
 17121 0000B9D9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17122 0000B9DE 488D55F8                	lea rdx, [rbp - 8 * 1]
 17123                                  .L_tc_recycle_frame_loop_046f:
 17124 0000B9E2 4883F900                	cmp rcx, 0
 17125 0000B9E6 7413                    	je .L_tc_recycle_frame_done_046f
 17126 0000B9E8 488B32                  	mov rsi, qword [rdx]
 17127 0000B9EB 488933                  	mov qword [rbx], rsi
 17128 0000B9EE 48FFC9                  	dec rcx
 17129 0000B9F1 4883EB08                	sub rbx, 8 * 1
 17130 0000B9F5 4883EA08                	sub rdx, 8 * 1
 17131 0000B9F9 EBE7                    	jmp .L_tc_recycle_frame_loop_046f
 17132                                  .L_tc_recycle_frame_done_046f:
 17133 0000B9FB 488D6308                	lea rsp, [rbx + 8 * 1]
 17134 0000B9FF 5D                      	pop rbp	; the proc will restore it!
 17135 0000BA00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17136                                  .L_if_end_026d:
 17137                                  .L_if_end_026c:
 17138 0000BA03 C9                      	leave
 17139 0000BA04 C22000                  	ret AND_KILL_FRAME(2)
 17140                                  .L_lambda_opt_end_0073:	; new closure is in rax
 17141 0000BA07 C9                      	leave
 17142 0000BA08 C21800                  	ret AND_KILL_FRAME(1)
 17143                                  .L_lambda_simple_end_034b:	; new closure is in rax
 17144 0000BA0B 803804                  	cmp byte [rax], T_closure
 17145 0000BA0E 0F8552A60000            	jne L_error_non_closure
 17146 0000BA14 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17147 0000BA17 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17148 0000BA1A 48890425[17160000]      	mov qword [free_var_127], rax
 17149 0000BA22 48B8-                   	mov rax, sob_void
 17149 0000BA24 [0000000000000000] 
 17150                                  
 17151 0000BA2C 4889C7                  	mov rdi, rax
 17152 0000BA2F E8EDA70000              	call print_sexpr_if_not_void
 17153                                  
 17154 0000BA34 48B8-                   	mov rax, L_constants + 0
 17154 0000BA36 [0000000000000000] 
 17155 0000BA3E 48890425[28160000]      	mov qword [free_var_128], rax
 17156 0000BA46 48B8-                   	mov rax, sob_void
 17156 0000BA48 [0000000000000000] 
 17157                                  
 17158 0000BA50 4889C7                  	mov rdi, rax
 17159 0000BA53 E8C9A70000              	call print_sexpr_if_not_void
 17160                                  
 17161 0000BA58 48B8-                   	mov rax, L_constants + 0
 17161 0000BA5A [0000000000000000] 
 17162 0000BA62 48890425[39160000]      	mov qword [free_var_129], rax
 17163 0000BA6A 48B8-                   	mov rax, sob_void
 17163 0000BA6C [0000000000000000] 
 17164                                  
 17165 0000BA74 4889C7                  	mov rdi, rax
 17166 0000BA77 E8A5A70000              	call print_sexpr_if_not_void
 17167                                  
 17168 0000BA7C 48B8-                   	mov rax, L_constants + 0
 17168 0000BA7E [0000000000000000] 
 17169 0000BA86 48890425[4A160000]      	mov qword [free_var_130], rax
 17170 0000BA8E 48B8-                   	mov rax, sob_void
 17170 0000BA90 [0000000000000000] 
 17171                                  
 17172 0000BA98 4889C7                  	mov rdi, rax
 17173 0000BA9B E881A70000              	call print_sexpr_if_not_void
 17174                                  
 17175 0000BAA0 48B8-                   	mov rax, L_constants + 0
 17175 0000BAA2 [0000000000000000] 
 17176 0000BAAA 48890425[5B160000]      	mov qword [free_var_131], rax
 17177 0000BAB2 48B8-                   	mov rax, sob_void
 17177 0000BAB4 [0000000000000000] 
 17178                                  
 17179 0000BABC 4889C7                  	mov rdi, rax
 17180 0000BABF E85DA70000              	call print_sexpr_if_not_void
 17181                                  
 17182 0000BAC4 48B8-                   	mov rax, L_constants + 0
 17182 0000BAC6 [0000000000000000] 
 17183 0000BACE 48890425[6C160000]      	mov qword [free_var_132], rax
 17184 0000BAD6 48B8-                   	mov rax, sob_void
 17184 0000BAD8 [0000000000000000] 
 17185                                  
 17186 0000BAE0 4889C7                  	mov rdi, rax
 17187 0000BAE3 E839A70000              	call print_sexpr_if_not_void
 17188                                  
 17189                                  	; preparing a non tail-call
 17190 0000BAE8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17191 0000BAED E81DA60000              	call malloc
 17192 0000BAF2 50                      	push rax
 17193 0000BAF3 BF00000000              	mov rdi, 8 * 0	; new rib
 17194 0000BAF8 E812A60000              	call malloc
 17195 0000BAFD 50                      	push rax
 17196 0000BAFE BF08000000              	mov rdi, 8 * 1	; extended env
 17197 0000BB03 E807A60000              	call malloc
 17198 0000BB08 488B7D10                	mov rdi, ENV
 17199 0000BB0C BE00000000              	mov rsi, 0
 17200 0000BB11 BA01000000              	mov rdx, 1
 17201                                  .L_lambda_simple_env_loop_034d:	; ext_env[i + 1] <-- env[i]
 17202 0000BB16 4883FE00                	cmp rsi, 0
 17203 0000BB1A 7410                    	je .L_lambda_simple_env_end_034d
 17204 0000BB1C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17205 0000BB20 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17206 0000BB24 48FFC6                  	inc rsi
 17207 0000BB27 48FFC2                  	inc rdx
 17208 0000BB2A EBEA                    	jmp .L_lambda_simple_env_loop_034d
 17209                                  .L_lambda_simple_env_end_034d:
 17210 0000BB2C 5B                      	pop rbx
 17211 0000BB2D BE00000000              	mov rsi, 0
 17212                                  .L_lambda_simple_params_loop_034d:	; copy params
 17213 0000BB32 4883FE00                	cmp rsi, 0
 17214 0000BB36 740E                    	je .L_lambda_simple_params_end_034d
 17215 0000BB38 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17216 0000BB3D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17217 0000BB41 48FFC6                  	inc rsi
 17218 0000BB44 EBEC                    	jmp .L_lambda_simple_params_loop_034d
 17219                                  .L_lambda_simple_params_end_034d:
 17220 0000BB46 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17221 0000BB49 4889C3                  	mov rbx, rax
 17222 0000BB4C 58                      	pop rax
 17223 0000BB4D C60004                  	mov byte [rax], T_closure
 17224 0000BB50 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17225 0000BB54 48C74009[61BB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_034d
 17226 0000BB5C E983020000              	jmp .L_lambda_simple_end_034d
 17227                                  .L_lambda_simple_code_034d:	; lambda-simple body
 17228 0000BB61 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17229 0000BB67 740B                    	je .L_lambda_simple_arity_check_ok_034d
 17230 0000BB69 FF742410                	push qword [rsp + 8 * 2]
 17231 0000BB6D 6A01                    	push 1
 17232 0000BB6F E954A50000              	jmp L_error_incorrect_arity_simple
 17233                                  .L_lambda_simple_arity_check_ok_034d:
 17234 0000BB74 C8000000                	enter 0, 0
 17235 0000BB78 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17236 0000BB7D E88DA50000              	call malloc
 17237 0000BB82 50                      	push rax
 17238 0000BB83 BF08000000              	mov rdi, 8 * 1	; new rib
 17239 0000BB88 E882A50000              	call malloc
 17240 0000BB8D 50                      	push rax
 17241 0000BB8E BF10000000              	mov rdi, 8 * 2	; extended env
 17242 0000BB93 E877A50000              	call malloc
 17243 0000BB98 488B7D10                	mov rdi, ENV
 17244 0000BB9C BE00000000              	mov rsi, 0
 17245 0000BBA1 BA01000000              	mov rdx, 1
 17246                                  .L_lambda_opt_env_loop_0074:	; ext_env[i + 1] <-- env[i]
 17247 0000BBA6 4883FE01                	cmp rsi, 1
 17248 0000BBAA 7410                    	je .L_lambda_opt_env_end_0074
 17249 0000BBAC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17250 0000BBB0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17251 0000BBB4 48FFC6                  	inc rsi
 17252 0000BBB7 48FFC2                  	inc rdx
 17253 0000BBBA EBEA                    	jmp .L_lambda_opt_env_loop_0074
 17254                                  .L_lambda_opt_env_end_0074:
 17255 0000BBBC 5B                      	pop rbx
 17256 0000BBBD BE00000000              	mov rsi, 0
 17257                                  .L_lambda_opt_params_loop_0074:	; copy params
 17258 0000BBC2 4883FE01                	cmp rsi, 1
 17259 0000BBC6 740E                    	je .L_lambda_opt_params_end_0074
 17260 0000BBC8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17261 0000BBCD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17262 0000BBD1 48FFC6                  	inc rsi
 17263 0000BBD4 EBEC                    	jmp .L_lambda_opt_params_loop_0074
 17264                                  .L_lambda_opt_params_end_0074:
 17265 0000BBD6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17266 0000BBD9 4889C3                  	mov rbx, rax
 17267 0000BBDC 58                      	pop rax
 17268 0000BBDD C60004                  	mov byte [rax], T_closure
 17269 0000BBE0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17270 0000BBE4 48C74009[F1BB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0074
 17271 0000BBEC E9EF010000              	jmp .L_lambda_opt_end_0074
 17272                                  .L_lambda_opt_code_0074:	; lambda-opt body
 17273 0000BBF1 48837C241000            	cmp qword [rsp + 8 * 2], 0
 17274 0000BBF7 0F8404010000            	je .L_lambda_opt_arity_check_exact_0074
 17275 0000BBFD 48837C241000            	cmp qword [rsp + 8 * 2], 0
 17276 0000BC03 7F0B                    	jg .L_lambda_opt_arity_check_more_0074
 17277 0000BC05 FF742410                	push qword [rsp + 8 * 2]
 17278 0000BC09 6A00                    	push 0
 17279 0000BC0B E9CCA40000              	jmp L_error_incorrect_arity_opt
 17280                                  .L_lambda_opt_arity_check_more_0074:
 17281 0000BC10 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 17282 0000BC15 41B900000000            	mov r9 , 0
 17283 0000BC1B 4989E7                  	mov r15, rsp
 17284 0000BC1E 4D29C8                  	sub r8, r9
 17285 0000BC21 41B900000000            	mov r9, 0
 17286 0000BC27 498D5F10                	lea rbx, [r15 + 8 * 2]
 17287 0000BC2B 498B4710                	mov rax, qword [r15 + 8 * 2]
 17288 0000BC2F 486BC008                	imul rax, 8
 17289 0000BC33 4801C3                  	add rbx, rax
 17290 0000BC36 488B13                  	mov rdx , qword [rbx]
 17291 0000BC39 4989DA                  	mov r10 , rbx
 17292 0000BC3C BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 17293 0000BC41 52                      	push rdx
 17294 0000BC42 53                      	push rbx
 17295 0000BC43 4150                    	push r8
 17296 0000BC45 4151                    	push r9
 17297 0000BC47 4152                    	push r10
 17298 0000BC49 4157                    	push r15
 17299 0000BC4B E8BFA40000              	call malloc
 17300 0000BC50 415F                    	pop r15
 17301 0000BC52 415A                    	pop r10
 17302 0000BC54 4159                    	pop r9
 17303 0000BC56 4158                    	pop r8
 17304 0000BC58 5B                      	pop rbx
 17305 0000BC59 5A                      	pop rdx
 17306 0000BC5A C60021                  	mov byte qword [rax], T_pair
 17307 0000BC5D 48895001                	mov SOB_PAIR_CAR(rax), rdx
 17308 0000BC61 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 17309 0000BC69 498902                  	mov qword [r10], rax
 17310 0000BC6C 49FFC1                  	inc r9
 17311 0000BC6F 4883EB08                	sub rbx, 8
 17312 0000BC73 4D39C1                  	cmp r9, r8
 17313 0000BC76 743E                    	je .L_lambda_opt_stack_shrink_loop_0242
 17314                                  .L_lambda_opt_stack_shrink_loop_0241:
 17315 0000BC78 488B13                  	mov rdx, qword [rbx]
 17316 0000BC7B 53                      	push rbx
 17317 0000BC7C 4150                    	push r8
 17318 0000BC7E 4151                    	push r9
 17319 0000BC80 4152                    	push r10
 17320 0000BC82 4157                    	push r15
 17321 0000BC84 52                      	push rdx
 17322 0000BC85 BF11000000              	mov rdi, (1 + 8 + 8)
 17323 0000BC8A E880A40000              	call malloc
 17324 0000BC8F 5A                      	pop rdx
 17325 0000BC90 415F                    	pop r15
 17326 0000BC92 415A                    	pop r10
 17327 0000BC94 4159                    	pop r9
 17328 0000BC96 4158                    	pop r8
 17329 0000BC98 5B                      	pop rbx
 17330 0000BC99 C60021                  	mov byte [rax], T_pair
 17331 0000BC9C 48895001                	mov SOB_PAIR_CAR(rax), rdx
 17332 0000BCA0 4D8B32                  	mov r14, qword [r10]
 17333 0000BCA3 4C897009                	mov SOB_PAIR_CDR(rax), r14
 17334 0000BCA7 498902                  	mov qword [r10], rax
 17335 0000BCAA 49FFC1                  	inc r9
 17336 0000BCAD 4883EB08                	sub rbx, 8
 17337 0000BCB1 4D39C1                  	cmp r9, r8
 17338 0000BCB4 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_0241
 17339                                  .L_lambda_opt_stack_shrink_loop_0242:
 17340 0000BCB6 498D5710                	lea rdx, [r15 + 8 * 2]
 17341 0000BCBA 48C70200000000          	mov qword [rdx], 0
 17342 0000BCC1 48830201                	add qword [rdx] , 1
 17343 0000BCC5 4D89C1                  	mov r9, r8
 17344 0000BCC8 49FFC9                  	dec r9
 17345 0000BCCB 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 17346                                  .L_lambda_opt_stack_shrink_loop_0243:
 17347 0000BCCF 488B03                  	mov rax, qword [rbx]
 17348 0000BCD2 498901                  	mov qword [r9], rax
 17349 0000BCD5 4983E908                	sub r9 , 8
 17350 0000BCD9 4883EB08                	sub rbx, 8
 17351 0000BCDD 4C39FB                  	cmp rbx, r15
 17352 0000BCE0 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0243
 17353 0000BCE2 488B03                  	mov rax, qword [rbx]
 17354 0000BCE5 498901                  	mov qword [r9], rax
 17355 0000BCE8 4D89C1                  	mov r9, r8
 17356 0000BCEB 4983E901                	sub r9 , 1
 17357 0000BCEF 4983F900                	cmp r9, 0
 17358 0000BCF3 7446                    je .L_lambda_opt_stack_adjusted_0074
 17359                                  .L_lambda_opt_stack_shrink_loop_0244:
 17360 0000BCF5 58                      	pop rax
 17361 0000BCF6 49FFC9                  	dec r9
 17362 0000BCF9 4983F900                	cmp r9, 0
 17363 0000BCFD 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0244
 17364 0000BCFF EB3A                    jmp .L_lambda_opt_stack_adjusted_0074
 17365                                  .L_lambda_opt_arity_check_exact_0074:
 17366 0000BD01 4989E7                  	mov r15, rsp
 17367 0000BD04 498D5F10                	lea rbx, [r15 + 8 * 2 + 8 * 0]
 17368 0000BD08 488B0B                  	mov rcx, qword [rbx]
 17369 0000BD0B 48C703[01000000]        	mov qword [rbx], sob_nil
 17370 0000BD12 4883EB08                	sub rbx, 8
 17371                                  .L_lambda_opt_stack_shrink_loop_0240:
 17372 0000BD16 488B13                  	mov rdx, qword [rbx]
 17373 0000BD19 48890B                  	mov qword [rbx], rcx
 17374 0000BD1C 4C39FB                  	cmp rbx, r15
 17375 0000BD1F 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0074
 17376 0000BD21 4889D1                  	mov rcx, rdx
 17377 0000BD24 4883EB08                	sub rbx, 8
 17378 0000BD28 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_0240
 17379                                  .L_lambda_opt_stack_shrink_loop_exit_0074:
 17380 0000BD2A 52                      	push rdx
 17381 0000BD2B 4989E7                  	mov r15, rsp
 17382 0000BD2E 4983C710                	add r15, 16
 17383 0000BD32 498B1F                  	mov rbx, qword [r15]
 17384 0000BD35 48FFC3                  	inc rbx
 17385 0000BD38 49891F                  	mov qword [r15], rbx
 17386                                  .L_lambda_opt_stack_adjusted_0074:
 17387 0000BD3B C8000000                	enter 0, 0
 17388                                  	; preparing a tail-call
 17389                                  	; preparing a non tail-call
 17390 0000BD3F 488B4520                	mov rax, PARAM(0)	; param s
 17391 0000BD43 50                      	push rax
 17392 0000BD44 488B0425[400F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 17393 0000BD4C 803805                  	cmp byte [rax], T_undefined
 17394 0000BD4F 0F848DA20000            	je L_error_fvar_undefined
 17395 0000BD55 50                      	push rax
 17396 0000BD56 6A02                    	push 2	; arg count
 17397 0000BD58 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
 17398 0000BD60 803805                  	cmp byte [rax], T_undefined
 17399 0000BD63 0F8479A20000            	je L_error_fvar_undefined
 17400 0000BD69 803804                  	cmp byte [rax], T_closure
 17401 0000BD6C 0F85F4A20000            	jne L_error_non_closure
 17402 0000BD72 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17403 0000BD75 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17404 0000BD78 50                      	push rax
 17405 0000BD79 488B4510                	mov rax, ENV
 17406 0000BD7D 488B00                  	mov rax, qword [rax + 8 * 0]
 17407 0000BD80 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 17408 0000BD83 50                      	push rax
 17409 0000BD84 6A02                    	push 2	; arg count
 17410 0000BD86 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
 17411 0000BD8E 803805                  	cmp byte [rax], T_undefined
 17412 0000BD91 0F844BA20000            	je L_error_fvar_undefined
 17413 0000BD97 803804                  	cmp byte [rax], T_closure
 17414 0000BD9A 0F85C6A20000            	jne L_error_non_closure
 17415 0000BDA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17416                                  
 17417                                  	; recycling the current frame
 17418 0000BDA3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17419 0000BDA6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17420 0000BDA9 B906000000              	mov rcx, 2 + 4
 17421 0000BDAE 488B5D18                	mov rbx, COUNT
 17422 0000BDB2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17423 0000BDB7 488D55F8                	lea rdx, [rbp - 8 * 1]
 17424                                  .L_tc_recycle_frame_loop_0470:
 17425 0000BDBB 4883F900                	cmp rcx, 0
 17426 0000BDBF 7413                    	je .L_tc_recycle_frame_done_0470
 17427 0000BDC1 488B32                  	mov rsi, qword [rdx]
 17428 0000BDC4 488933                  	mov qword [rbx], rsi
 17429 0000BDC7 48FFC9                  	dec rcx
 17430 0000BDCA 4883EB08                	sub rbx, 8 * 1
 17431 0000BDCE 4883EA08                	sub rdx, 8 * 1
 17432 0000BDD2 EBE7                    	jmp .L_tc_recycle_frame_loop_0470
 17433                                  .L_tc_recycle_frame_done_0470:
 17434 0000BDD4 488D6308                	lea rsp, [rbx + 8 * 1]
 17435 0000BDD8 5D                      	pop rbp	; the proc will restore it!
 17436 0000BDD9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17437 0000BDDC C9                      	leave
 17438 0000BDDD C21800                  	ret AND_KILL_FRAME(1)
 17439                                  .L_lambda_opt_end_0074:	; new closure is in rax
 17440 0000BDE0 C9                      	leave
 17441 0000BDE1 C21800                  	ret AND_KILL_FRAME(1)
 17442                                  .L_lambda_simple_end_034d:	; new closure is in rax
 17443 0000BDE4 50                      	push rax
 17444 0000BDE5 6A01                    	push 1	; arg count
 17445 0000BDE7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17446 0000BDEC E81EA30000              	call malloc
 17447 0000BDF1 50                      	push rax
 17448 0000BDF2 BF00000000              	mov rdi, 8 * 0	; new rib
 17449 0000BDF7 E813A30000              	call malloc
 17450 0000BDFC 50                      	push rax
 17451 0000BDFD BF08000000              	mov rdi, 8 * 1	; extended env
 17452 0000BE02 E808A30000              	call malloc
 17453 0000BE07 488B7D10                	mov rdi, ENV
 17454 0000BE0B BE00000000              	mov rsi, 0
 17455 0000BE10 BA01000000              	mov rdx, 1
 17456                                  .L_lambda_simple_env_loop_034e:	; ext_env[i + 1] <-- env[i]
 17457 0000BE15 4883FE00                	cmp rsi, 0
 17458 0000BE19 7410                    	je .L_lambda_simple_env_end_034e
 17459 0000BE1B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17460 0000BE1F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17461 0000BE23 48FFC6                  	inc rsi
 17462 0000BE26 48FFC2                  	inc rdx
 17463 0000BE29 EBEA                    	jmp .L_lambda_simple_env_loop_034e
 17464                                  .L_lambda_simple_env_end_034e:
 17465 0000BE2B 5B                      	pop rbx
 17466 0000BE2C BE00000000              	mov rsi, 0
 17467                                  .L_lambda_simple_params_loop_034e:	; copy params
 17468 0000BE31 4883FE00                	cmp rsi, 0
 17469 0000BE35 740E                    	je .L_lambda_simple_params_end_034e
 17470 0000BE37 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17471 0000BE3C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17472 0000BE40 48FFC6                  	inc rsi
 17473 0000BE43 EBEC                    	jmp .L_lambda_simple_params_loop_034e
 17474                                  .L_lambda_simple_params_end_034e:
 17475 0000BE45 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17476 0000BE48 4889C3                  	mov rbx, rax
 17477 0000BE4B 58                      	pop rax
 17478 0000BE4C C60004                  	mov byte [rax], T_closure
 17479 0000BE4F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17480 0000BE53 48C74009[60BE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_034e
 17481 0000BE5B E938010000              	jmp .L_lambda_simple_end_034e
 17482                                  .L_lambda_simple_code_034e:	; lambda-simple body
 17483 0000BE60 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17484 0000BE66 740B                    	je .L_lambda_simple_arity_check_ok_034e
 17485 0000BE68 FF742410                	push qword [rsp + 8 * 2]
 17486 0000BE6C 6A01                    	push 1
 17487 0000BE6E E955A20000              	jmp L_error_incorrect_arity_simple
 17488                                  .L_lambda_simple_arity_check_ok_034e:
 17489 0000BE73 C8000000                	enter 0, 0
 17490                                  	; preparing a non tail-call
 17491 0000BE77 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 17492 0000BE7F 803805                  	cmp byte [rax], T_undefined
 17493 0000BE82 0F845AA10000            	je L_error_fvar_undefined
 17494 0000BE88 50                      	push rax
 17495 0000BE89 6A01                    	push 1	; arg count
 17496 0000BE8B 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 17497 0000BE8F 803804                  	cmp byte [rax], T_closure
 17498 0000BE92 0F85CEA10000            	jne L_error_non_closure
 17499 0000BE98 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17500 0000BE9B FF5009                  	call SOB_CLOSURE_CODE(rax)
 17501 0000BE9E 48890425[28160000]      	mov qword [free_var_128], rax
 17502 0000BEA6 48B8-                   	mov rax, sob_void
 17502 0000BEA8 [0000000000000000] 
 17503                                  
 17504                                  	; preparing a non tail-call
 17505 0000BEB0 488B0425[D3150000]      	mov rax, qword [free_var_123]	; free var <=
 17506 0000BEB8 803805                  	cmp byte [rax], T_undefined
 17507 0000BEBB 0F8421A10000            	je L_error_fvar_undefined
 17508 0000BEC1 50                      	push rax
 17509 0000BEC2 6A01                    	push 1	; arg count
 17510 0000BEC4 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 17511 0000BEC8 803804                  	cmp byte [rax], T_closure
 17512 0000BECB 0F8595A10000            	jne L_error_non_closure
 17513 0000BED1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17514 0000BED4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17515 0000BED7 48890425[39160000]      	mov qword [free_var_129], rax
 17516 0000BEDF 48B8-                   	mov rax, sob_void
 17516 0000BEE1 [0000000000000000] 
 17517                                  
 17518                                  	; preparing a non tail-call
 17519 0000BEE9 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 17520 0000BEF1 803805                  	cmp byte [rax], T_undefined
 17521 0000BEF4 0F84E8A00000            	je L_error_fvar_undefined
 17522 0000BEFA 50                      	push rax
 17523 0000BEFB 6A01                    	push 1	; arg count
 17524 0000BEFD 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 17525 0000BF01 803804                  	cmp byte [rax], T_closure
 17526 0000BF04 0F855CA10000            	jne L_error_non_closure
 17527 0000BF0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 17528 0000BF0D FF5009                  	call SOB_CLOSURE_CODE(rax)
 17529 0000BF10 48890425[4A160000]      	mov qword [free_var_130], rax
 17530 0000BF18 48B8-                   	mov rax, sob_void
 17530 0000BF1A [0000000000000000] 
 17531                                  
 17532                                  	; preparing a non tail-call
 17533 0000BF22 488B0425[E4150000]      	mov rax, qword [free_var_124]	; free var >
 17534 0000BF2A 803805                  	cmp byte [rax], T_undefined
 17535 0000BF2D 0F84AFA00000            	je L_error_fvar_undefined
 17536 0000BF33 50                      	push rax
 17537 0000BF34 6A01                    	push 1	; arg count
 17538 0000BF36 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 17539 0000BF3A 803804                  	cmp byte [rax], T_closure
 17540 0000BF3D 0F8523A10000            	jne L_error_non_closure
 17541 0000BF43 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17542 0000BF46 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17543 0000BF49 48890425[5B160000]      	mov qword [free_var_131], rax
 17544 0000BF51 48B8-                   	mov rax, sob_void
 17544 0000BF53 [0000000000000000] 
 17545                                  
 17546                                  	; preparing a non tail-call
 17547 0000BF5B 488B0425[F5150000]      	mov rax, qword [free_var_125]	; free var >=
 17548 0000BF63 803805                  	cmp byte [rax], T_undefined
 17549 0000BF66 0F8476A00000            	je L_error_fvar_undefined
 17550 0000BF6C 50                      	push rax
 17551 0000BF6D 6A01                    	push 1	; arg count
 17552 0000BF6F 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 17553 0000BF73 803804                  	cmp byte [rax], T_closure
 17554 0000BF76 0F85EAA00000            	jne L_error_non_closure
 17555 0000BF7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 17556 0000BF7F FF5009                  	call SOB_CLOSURE_CODE(rax)
 17557 0000BF82 48890425[6C160000]      	mov qword [free_var_132], rax
 17558 0000BF8A 48B8-                   	mov rax, sob_void
 17558 0000BF8C [0000000000000000] 
 17559 0000BF94 C9                      	leave
 17560 0000BF95 C21800                  	ret AND_KILL_FRAME(1)
 17561                                  .L_lambda_simple_end_034e:	; new closure is in rax
 17562 0000BF98 803804                  	cmp byte [rax], T_closure
 17563 0000BF9B 0F85C5A00000            	jne L_error_non_closure
 17564 0000BFA1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17565 0000BFA4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17566                                  
 17567 0000BFA7 4889C7                  	mov rdi, rax
 17568 0000BFAA E872A20000              	call print_sexpr_if_not_void
 17569                                  
 17570 0000BFAF 48B8-                   	mov rax, L_constants + 0
 17570 0000BFB1 [0000000000000000] 
 17571 0000BFB9 48890425[7D160000]      	mov qword [free_var_133], rax
 17572 0000BFC1 48B8-                   	mov rax, sob_void
 17572 0000BFC3 [0000000000000000] 
 17573                                  
 17574 0000BFCB 4889C7                  	mov rdi, rax
 17575 0000BFCE E84EA20000              	call print_sexpr_if_not_void
 17576                                  
 17577 0000BFD3 48B8-                   	mov rax, L_constants + 0
 17577 0000BFD5 [0000000000000000] 
 17578 0000BFDD 48890425[8E160000]      	mov qword [free_var_134], rax
 17579 0000BFE5 48B8-                   	mov rax, sob_void
 17579 0000BFE7 [0000000000000000] 
 17580                                  
 17581 0000BFEF 4889C7                  	mov rdi, rax
 17582 0000BFF2 E82AA20000              	call print_sexpr_if_not_void
 17583                                  
 17584                                  	; preparing a non tail-call
 17585                                  	; preparing a non tail-call
 17586                                  	; preparing a non tail-call
 17587 0000BFF7 48B8-                   	mov rax, L_constants + 2538
 17587 0000BFF9 [EA09000000000000] 
 17588 0000C001 50                      	push rax
 17589 0000C002 6A01                    	push 1	; arg count
 17590 0000C004 488B0425[400F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 17591 0000C00C 803805                  	cmp byte [rax], T_undefined
 17592 0000C00F 0F84CD9F0000            	je L_error_fvar_undefined
 17593 0000C015 803804                  	cmp byte [rax], T_closure
 17594 0000C018 0F8548A00000            	jne L_error_non_closure
 17595 0000C01E FF7001                  	push SOB_CLOSURE_ENV(rax)
 17596 0000C021 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17597 0000C024 50                      	push rax
 17598                                  	; preparing a non tail-call
 17599 0000C025 48B8-                   	mov rax, L_constants + 2542
 17599 0000C027 [EE09000000000000] 
 17600 0000C02F 50                      	push rax
 17601 0000C030 6A01                    	push 1	; arg count
 17602 0000C032 488B0425[400F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 17603 0000C03A 803805                  	cmp byte [rax], T_undefined
 17604 0000C03D 0F849F9F0000            	je L_error_fvar_undefined
 17605 0000C043 803804                  	cmp byte [rax], T_closure
 17606 0000C046 0F851AA00000            	jne L_error_non_closure
 17607 0000C04C FF7001                  	push SOB_CLOSURE_ENV(rax)
 17608 0000C04F FF5009                  	call SOB_CLOSURE_CODE(rax)
 17609 0000C052 50                      	push rax
 17610 0000C053 6A02                    	push 2	; arg count
 17611 0000C055 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 17612 0000C05D 803805                  	cmp byte [rax], T_undefined
 17613 0000C060 0F847C9F0000            	je L_error_fvar_undefined
 17614 0000C066 803804                  	cmp byte [rax], T_closure
 17615 0000C069 0F85F79F0000            	jne L_error_non_closure
 17616 0000C06F FF7001                  	push SOB_CLOSURE_ENV(rax)
 17617 0000C072 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17618 0000C075 50                      	push rax
 17619 0000C076 6A01                    	push 1	; arg count
 17620 0000C078 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17621 0000C07D E88DA00000              	call malloc
 17622 0000C082 50                      	push rax
 17623 0000C083 BF00000000              	mov rdi, 8 * 0	; new rib
 17624 0000C088 E882A00000              	call malloc
 17625 0000C08D 50                      	push rax
 17626 0000C08E BF08000000              	mov rdi, 8 * 1	; extended env
 17627 0000C093 E877A00000              	call malloc
 17628 0000C098 488B7D10                	mov rdi, ENV
 17629 0000C09C BE00000000              	mov rsi, 0
 17630 0000C0A1 BA01000000              	mov rdx, 1
 17631                                  .L_lambda_simple_env_loop_034f:	; ext_env[i + 1] <-- env[i]
 17632 0000C0A6 4883FE00                	cmp rsi, 0
 17633 0000C0AA 7410                    	je .L_lambda_simple_env_end_034f
 17634 0000C0AC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17635 0000C0B0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17636 0000C0B4 48FFC6                  	inc rsi
 17637 0000C0B7 48FFC2                  	inc rdx
 17638 0000C0BA EBEA                    	jmp .L_lambda_simple_env_loop_034f
 17639                                  .L_lambda_simple_env_end_034f:
 17640 0000C0BC 5B                      	pop rbx
 17641 0000C0BD BE00000000              	mov rsi, 0
 17642                                  .L_lambda_simple_params_loop_034f:	; copy params
 17643 0000C0C2 4883FE00                	cmp rsi, 0
 17644 0000C0C6 740E                    	je .L_lambda_simple_params_end_034f
 17645 0000C0C8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17646 0000C0CD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17647 0000C0D1 48FFC6                  	inc rsi
 17648 0000C0D4 EBEC                    	jmp .L_lambda_simple_params_loop_034f
 17649                                  .L_lambda_simple_params_end_034f:
 17650 0000C0D6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17651 0000C0D9 4889C3                  	mov rbx, rax
 17652 0000C0DC 58                      	pop rax
 17653 0000C0DD C60004                  	mov byte [rax], T_closure
 17654 0000C0E0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17655 0000C0E4 48C74009[F1C00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_034f
 17656 0000C0EC E961030000              	jmp .L_lambda_simple_end_034f
 17657                                  .L_lambda_simple_code_034f:	; lambda-simple body
 17658 0000C0F1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17659 0000C0F7 740B                    	je .L_lambda_simple_arity_check_ok_034f
 17660 0000C0F9 FF742410                	push qword [rsp + 8 * 2]
 17661 0000C0FD 6A01                    	push 1
 17662 0000C0FF E9C49F0000              	jmp L_error_incorrect_arity_simple
 17663                                  .L_lambda_simple_arity_check_ok_034f:
 17664 0000C104 C8000000                	enter 0, 0
 17665 0000C108 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17666 0000C10D E8FD9F0000              	call malloc
 17667 0000C112 50                      	push rax
 17668 0000C113 BF08000000              	mov rdi, 8 * 1	; new rib
 17669 0000C118 E8F29F0000              	call malloc
 17670 0000C11D 50                      	push rax
 17671 0000C11E BF10000000              	mov rdi, 8 * 2	; extended env
 17672 0000C123 E8E79F0000              	call malloc
 17673 0000C128 488B7D10                	mov rdi, ENV
 17674 0000C12C BE00000000              	mov rsi, 0
 17675 0000C131 BA01000000              	mov rdx, 1
 17676                                  .L_lambda_simple_env_loop_0350:	; ext_env[i + 1] <-- env[i]
 17677 0000C136 4883FE01                	cmp rsi, 1
 17678 0000C13A 7410                    	je .L_lambda_simple_env_end_0350
 17679 0000C13C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17680 0000C140 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17681 0000C144 48FFC6                  	inc rsi
 17682 0000C147 48FFC2                  	inc rdx
 17683 0000C14A EBEA                    	jmp .L_lambda_simple_env_loop_0350
 17684                                  .L_lambda_simple_env_end_0350:
 17685 0000C14C 5B                      	pop rbx
 17686 0000C14D BE00000000              	mov rsi, 0
 17687                                  .L_lambda_simple_params_loop_0350:	; copy params
 17688 0000C152 4883FE01                	cmp rsi, 1
 17689 0000C156 740E                    	je .L_lambda_simple_params_end_0350
 17690 0000C158 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17691 0000C15D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17692 0000C161 48FFC6                  	inc rsi
 17693 0000C164 EBEC                    	jmp .L_lambda_simple_params_loop_0350
 17694                                  .L_lambda_simple_params_end_0350:
 17695 0000C166 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17696 0000C169 4889C3                  	mov rbx, rax
 17697 0000C16C 58                      	pop rax
 17698 0000C16D C60004                  	mov byte [rax], T_closure
 17699 0000C170 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17700 0000C174 48C74009[81C10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0350
 17701 0000C17C E918010000              	jmp .L_lambda_simple_end_0350
 17702                                  .L_lambda_simple_code_0350:	; lambda-simple body
 17703 0000C181 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17704 0000C187 740B                    	je .L_lambda_simple_arity_check_ok_0350
 17705 0000C189 FF742410                	push qword [rsp + 8 * 2]
 17706 0000C18D 6A01                    	push 1
 17707 0000C18F E9349F0000              	jmp L_error_incorrect_arity_simple
 17708                                  .L_lambda_simple_arity_check_ok_0350:
 17709 0000C194 C8000000                	enter 0, 0
 17710                                  	; preparing a non tail-call
 17711 0000C198 48B8-                   	mov rax, L_constants + 2540
 17711 0000C19A [EC09000000000000] 
 17712 0000C1A2 50                      	push rax
 17713 0000C1A3 488B4520                	mov rax, PARAM(0)	; param ch
 17714 0000C1A7 50                      	push rax
 17715 0000C1A8 48B8-                   	mov rax, L_constants + 2538
 17715 0000C1AA [EA09000000000000] 
 17716 0000C1B2 50                      	push rax
 17717 0000C1B3 6A03                    	push 3	; arg count
 17718 0000C1B5 488B0425[39160000]      	mov rax, qword [free_var_129]	; free var char<=?
 17719 0000C1BD 803805                  	cmp byte [rax], T_undefined
 17720 0000C1C0 0F841C9E0000            	je L_error_fvar_undefined
 17721 0000C1C6 803804                  	cmp byte [rax], T_closure
 17722 0000C1C9 0F85979E0000            	jne L_error_non_closure
 17723 0000C1CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 17724 0000C1D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17725 0000C1D5 483D[02000000]          	cmp rax, sob_boolean_false
 17726 0000C1DB 0F84B0000000            	je .L_if_else_026f
 17727                                  	; preparing a tail-call
 17728                                  	; preparing a non tail-call
 17729 0000C1E1 488B4510                	mov rax, ENV
 17730 0000C1E5 488B00                  	mov rax, qword [rax + 8 * 0]
 17731 0000C1E8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 17732 0000C1EB 50                      	push rax
 17733                                  	; preparing a non tail-call
 17734 0000C1EC 488B4520                	mov rax, PARAM(0)	; param ch
 17735 0000C1F0 50                      	push rax
 17736 0000C1F1 6A01                    	push 1	; arg count
 17737 0000C1F3 488B0425[400F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 17738 0000C1FB 803805                  	cmp byte [rax], T_undefined
 17739 0000C1FE 0F84DE9D0000            	je L_error_fvar_undefined
 17740 0000C204 803804                  	cmp byte [rax], T_closure
 17741 0000C207 0F85599E0000            	jne L_error_non_closure
 17742 0000C20D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17743 0000C210 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17744 0000C213 50                      	push rax
 17745 0000C214 6A02                    	push 2	; arg count
 17746 0000C216 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 17747 0000C21E 803805                  	cmp byte [rax], T_undefined
 17748 0000C221 0F84BB9D0000            	je L_error_fvar_undefined
 17749 0000C227 803804                  	cmp byte [rax], T_closure
 17750 0000C22A 0F85369E0000            	jne L_error_non_closure
 17751 0000C230 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17752 0000C233 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17753 0000C236 50                      	push rax
 17754 0000C237 6A01                    	push 1	; arg count
 17755 0000C239 488B0425[510F0000]      	mov rax, qword [free_var_25]	; free var integer->char
 17756 0000C241 803805                  	cmp byte [rax], T_undefined
 17757 0000C244 0F84989D0000            	je L_error_fvar_undefined
 17758 0000C24A 803804                  	cmp byte [rax], T_closure
 17759 0000C24D 0F85139E0000            	jne L_error_non_closure
 17760 0000C253 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17761                                  
 17762                                  	; recycling the current frame
 17763 0000C256 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17764 0000C259 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17765 0000C25C B905000000              	mov rcx, 1 + 4
 17766 0000C261 488B5D18                	mov rbx, COUNT
 17767 0000C265 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17768 0000C26A 488D55F8                	lea rdx, [rbp - 8 * 1]
 17769                                  .L_tc_recycle_frame_loop_0471:
 17770 0000C26E 4883F900                	cmp rcx, 0
 17771 0000C272 7413                    	je .L_tc_recycle_frame_done_0471
 17772 0000C274 488B32                  	mov rsi, qword [rdx]
 17773 0000C277 488933                  	mov qword [rbx], rsi
 17774 0000C27A 48FFC9                  	dec rcx
 17775 0000C27D 4883EB08                	sub rbx, 8 * 1
 17776 0000C281 4883EA08                	sub rdx, 8 * 1
 17777 0000C285 EBE7                    	jmp .L_tc_recycle_frame_loop_0471
 17778                                  .L_tc_recycle_frame_done_0471:
 17779 0000C287 488D6308                	lea rsp, [rbx + 8 * 1]
 17780 0000C28B 5D                      	pop rbp	; the proc will restore it!
 17781 0000C28C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17782 0000C28F EB04                    	jmp .L_if_end_026f
 17783                                  .L_if_else_026f:
 17784 0000C291 488B4520                	mov rax, PARAM(0)	; param ch
 17785                                  .L_if_end_026f:
 17786 0000C295 C9                      	leave
 17787 0000C296 C21800                  	ret AND_KILL_FRAME(1)
 17788                                  .L_lambda_simple_end_0350:	; new closure is in rax
 17789 0000C299 48890425[7D160000]      	mov qword [free_var_133], rax
 17790 0000C2A1 48B8-                   	mov rax, sob_void
 17790 0000C2A3 [0000000000000000] 
 17791                                  
 17792 0000C2AB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17793 0000C2B0 E85A9E0000              	call malloc
 17794 0000C2B5 50                      	push rax
 17795 0000C2B6 BF08000000              	mov rdi, 8 * 1	; new rib
 17796 0000C2BB E84F9E0000              	call malloc
 17797 0000C2C0 50                      	push rax
 17798 0000C2C1 BF10000000              	mov rdi, 8 * 2	; extended env
 17799 0000C2C6 E8449E0000              	call malloc
 17800 0000C2CB 488B7D10                	mov rdi, ENV
 17801 0000C2CF BE00000000              	mov rsi, 0
 17802 0000C2D4 BA01000000              	mov rdx, 1
 17803                                  .L_lambda_simple_env_loop_0351:	; ext_env[i + 1] <-- env[i]
 17804 0000C2D9 4883FE01                	cmp rsi, 1
 17805 0000C2DD 7410                    	je .L_lambda_simple_env_end_0351
 17806 0000C2DF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17807 0000C2E3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17808 0000C2E7 48FFC6                  	inc rsi
 17809 0000C2EA 48FFC2                  	inc rdx
 17810 0000C2ED EBEA                    	jmp .L_lambda_simple_env_loop_0351
 17811                                  .L_lambda_simple_env_end_0351:
 17812 0000C2EF 5B                      	pop rbx
 17813 0000C2F0 BE00000000              	mov rsi, 0
 17814                                  .L_lambda_simple_params_loop_0351:	; copy params
 17815 0000C2F5 4883FE01                	cmp rsi, 1
 17816 0000C2F9 740E                    	je .L_lambda_simple_params_end_0351
 17817 0000C2FB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17818 0000C300 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17819 0000C304 48FFC6                  	inc rsi
 17820 0000C307 EBEC                    	jmp .L_lambda_simple_params_loop_0351
 17821                                  .L_lambda_simple_params_end_0351:
 17822 0000C309 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17823 0000C30C 4889C3                  	mov rbx, rax
 17824 0000C30F 58                      	pop rax
 17825 0000C310 C60004                  	mov byte [rax], T_closure
 17826 0000C313 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17827 0000C317 48C74009[24C30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0351
 17828 0000C31F E918010000              	jmp .L_lambda_simple_end_0351
 17829                                  .L_lambda_simple_code_0351:	; lambda-simple body
 17830 0000C324 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17831 0000C32A 740B                    	je .L_lambda_simple_arity_check_ok_0351
 17832 0000C32C FF742410                	push qword [rsp + 8 * 2]
 17833 0000C330 6A01                    	push 1
 17834 0000C332 E9919D0000              	jmp L_error_incorrect_arity_simple
 17835                                  .L_lambda_simple_arity_check_ok_0351:
 17836 0000C337 C8000000                	enter 0, 0
 17837                                  	; preparing a non tail-call
 17838 0000C33B 48B8-                   	mov rax, L_constants + 2544
 17838 0000C33D [F009000000000000] 
 17839 0000C345 50                      	push rax
 17840 0000C346 488B4520                	mov rax, PARAM(0)	; param ch
 17841 0000C34A 50                      	push rax
 17842 0000C34B 48B8-                   	mov rax, L_constants + 2542
 17842 0000C34D [EE09000000000000] 
 17843 0000C355 50                      	push rax
 17844 0000C356 6A03                    	push 3	; arg count
 17845 0000C358 488B0425[39160000]      	mov rax, qword [free_var_129]	; free var char<=?
 17846 0000C360 803805                  	cmp byte [rax], T_undefined
 17847 0000C363 0F84799C0000            	je L_error_fvar_undefined
 17848 0000C369 803804                  	cmp byte [rax], T_closure
 17849 0000C36C 0F85F49C0000            	jne L_error_non_closure
 17850 0000C372 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17851 0000C375 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17852 0000C378 483D[02000000]          	cmp rax, sob_boolean_false
 17853 0000C37E 0F84B0000000            	je .L_if_else_0270
 17854                                  	; preparing a tail-call
 17855                                  	; preparing a non tail-call
 17856 0000C384 488B4510                	mov rax, ENV
 17857 0000C388 488B00                  	mov rax, qword [rax + 8 * 0]
 17858 0000C38B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 17859 0000C38E 50                      	push rax
 17860                                  	; preparing a non tail-call
 17861 0000C38F 488B4520                	mov rax, PARAM(0)	; param ch
 17862 0000C393 50                      	push rax
 17863 0000C394 6A01                    	push 1	; arg count
 17864 0000C396 488B0425[400F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 17865 0000C39E 803805                  	cmp byte [rax], T_undefined
 17866 0000C3A1 0F843B9C0000            	je L_error_fvar_undefined
 17867 0000C3A7 803804                  	cmp byte [rax], T_closure
 17868 0000C3AA 0F85B69C0000            	jne L_error_non_closure
 17869 0000C3B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17870 0000C3B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17871 0000C3B6 50                      	push rax
 17872 0000C3B7 6A02                    	push 2	; arg count
 17873 0000C3B9 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 17874 0000C3C1 803805                  	cmp byte [rax], T_undefined
 17875 0000C3C4 0F84189C0000            	je L_error_fvar_undefined
 17876 0000C3CA 803804                  	cmp byte [rax], T_closure
 17877 0000C3CD 0F85939C0000            	jne L_error_non_closure
 17878 0000C3D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17879 0000C3D6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17880 0000C3D9 50                      	push rax
 17881 0000C3DA 6A01                    	push 1	; arg count
 17882 0000C3DC 488B0425[510F0000]      	mov rax, qword [free_var_25]	; free var integer->char
 17883 0000C3E4 803805                  	cmp byte [rax], T_undefined
 17884 0000C3E7 0F84F59B0000            	je L_error_fvar_undefined
 17885 0000C3ED 803804                  	cmp byte [rax], T_closure
 17886 0000C3F0 0F85709C0000            	jne L_error_non_closure
 17887 0000C3F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17888                                  
 17889                                  	; recycling the current frame
 17890 0000C3F9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17891 0000C3FC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17892 0000C3FF B905000000              	mov rcx, 1 + 4
 17893 0000C404 488B5D18                	mov rbx, COUNT
 17894 0000C408 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17895 0000C40D 488D55F8                	lea rdx, [rbp - 8 * 1]
 17896                                  .L_tc_recycle_frame_loop_0472:
 17897 0000C411 4883F900                	cmp rcx, 0
 17898 0000C415 7413                    	je .L_tc_recycle_frame_done_0472
 17899 0000C417 488B32                  	mov rsi, qword [rdx]
 17900 0000C41A 488933                  	mov qword [rbx], rsi
 17901 0000C41D 48FFC9                  	dec rcx
 17902 0000C420 4883EB08                	sub rbx, 8 * 1
 17903 0000C424 4883EA08                	sub rdx, 8 * 1
 17904 0000C428 EBE7                    	jmp .L_tc_recycle_frame_loop_0472
 17905                                  .L_tc_recycle_frame_done_0472:
 17906 0000C42A 488D6308                	lea rsp, [rbx + 8 * 1]
 17907 0000C42E 5D                      	pop rbp	; the proc will restore it!
 17908 0000C42F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17909 0000C432 EB04                    	jmp .L_if_end_0270
 17910                                  .L_if_else_0270:
 17911 0000C434 488B4520                	mov rax, PARAM(0)	; param ch
 17912                                  .L_if_end_0270:
 17913 0000C438 C9                      	leave
 17914 0000C439 C21800                  	ret AND_KILL_FRAME(1)
 17915                                  .L_lambda_simple_end_0351:	; new closure is in rax
 17916 0000C43C 48890425[8E160000]      	mov qword [free_var_134], rax
 17917 0000C444 48B8-                   	mov rax, sob_void
 17917 0000C446 [0000000000000000] 
 17918 0000C44E C9                      	leave
 17919 0000C44F C21800                  	ret AND_KILL_FRAME(1)
 17920                                  .L_lambda_simple_end_034f:	; new closure is in rax
 17921 0000C452 803804                  	cmp byte [rax], T_closure
 17922 0000C455 0F850B9C0000            	jne L_error_non_closure
 17923 0000C45B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17924 0000C45E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17925                                  
 17926 0000C461 4889C7                  	mov rdi, rax
 17927 0000C464 E8B89D0000              	call print_sexpr_if_not_void
 17928                                  
 17929 0000C469 48B8-                   	mov rax, L_constants + 0
 17929 0000C46B [0000000000000000] 
 17930 0000C473 48890425[9F160000]      	mov qword [free_var_135], rax
 17931 0000C47B 48B8-                   	mov rax, sob_void
 17931 0000C47D [0000000000000000] 
 17932                                  
 17933 0000C485 4889C7                  	mov rdi, rax
 17934 0000C488 E8949D0000              	call print_sexpr_if_not_void
 17935                                  
 17936 0000C48D 48B8-                   	mov rax, L_constants + 0
 17936 0000C48F [0000000000000000] 
 17937 0000C497 48890425[B0160000]      	mov qword [free_var_136], rax
 17938 0000C49F 48B8-                   	mov rax, sob_void
 17938 0000C4A1 [0000000000000000] 
 17939                                  
 17940 0000C4A9 4889C7                  	mov rdi, rax
 17941 0000C4AC E8709D0000              	call print_sexpr_if_not_void
 17942                                  
 17943 0000C4B1 48B8-                   	mov rax, L_constants + 0
 17943 0000C4B3 [0000000000000000] 
 17944 0000C4BB 48890425[C1160000]      	mov qword [free_var_137], rax
 17945 0000C4C3 48B8-                   	mov rax, sob_void
 17945 0000C4C5 [0000000000000000] 
 17946                                  
 17947 0000C4CD 4889C7                  	mov rdi, rax
 17948 0000C4D0 E84C9D0000              	call print_sexpr_if_not_void
 17949                                  
 17950 0000C4D5 48B8-                   	mov rax, L_constants + 0
 17950 0000C4D7 [0000000000000000] 
 17951 0000C4DF 48890425[D2160000]      	mov qword [free_var_138], rax
 17952 0000C4E7 48B8-                   	mov rax, sob_void
 17952 0000C4E9 [0000000000000000] 
 17953                                  
 17954 0000C4F1 4889C7                  	mov rdi, rax
 17955 0000C4F4 E8289D0000              	call print_sexpr_if_not_void
 17956                                  
 17957 0000C4F9 48B8-                   	mov rax, L_constants + 0
 17957 0000C4FB [0000000000000000] 
 17958 0000C503 48890425[E3160000]      	mov qword [free_var_139], rax
 17959 0000C50B 48B8-                   	mov rax, sob_void
 17959 0000C50D [0000000000000000] 
 17960                                  
 17961 0000C515 4889C7                  	mov rdi, rax
 17962 0000C518 E8049D0000              	call print_sexpr_if_not_void
 17963                                  
 17964                                  	; preparing a non tail-call
 17965 0000C51D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17966 0000C522 E8E89B0000              	call malloc
 17967 0000C527 50                      	push rax
 17968 0000C528 BF00000000              	mov rdi, 8 * 0	; new rib
 17969 0000C52D E8DD9B0000              	call malloc
 17970 0000C532 50                      	push rax
 17971 0000C533 BF08000000              	mov rdi, 8 * 1	; extended env
 17972 0000C538 E8D29B0000              	call malloc
 17973 0000C53D 488B7D10                	mov rdi, ENV
 17974 0000C541 BE00000000              	mov rsi, 0
 17975 0000C546 BA01000000              	mov rdx, 1
 17976                                  .L_lambda_simple_env_loop_0352:	; ext_env[i + 1] <-- env[i]
 17977 0000C54B 4883FE00                	cmp rsi, 0
 17978 0000C54F 7410                    	je .L_lambda_simple_env_end_0352
 17979 0000C551 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17980 0000C555 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17981 0000C559 48FFC6                  	inc rsi
 17982 0000C55C 48FFC2                  	inc rdx
 17983 0000C55F EBEA                    	jmp .L_lambda_simple_env_loop_0352
 17984                                  .L_lambda_simple_env_end_0352:
 17985 0000C561 5B                      	pop rbx
 17986 0000C562 BE00000000              	mov rsi, 0
 17987                                  .L_lambda_simple_params_loop_0352:	; copy params
 17988 0000C567 4883FE00                	cmp rsi, 0
 17989 0000C56B 740E                    	je .L_lambda_simple_params_end_0352
 17990 0000C56D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17991 0000C572 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17992 0000C576 48FFC6                  	inc rsi
 17993 0000C579 EBEC                    	jmp .L_lambda_simple_params_loop_0352
 17994                                  .L_lambda_simple_params_end_0352:
 17995 0000C57B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17996 0000C57E 4889C3                  	mov rbx, rax
 17997 0000C581 58                      	pop rax
 17998 0000C582 C60004                  	mov byte [rax], T_closure
 17999 0000C585 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18000 0000C589 48C74009[96C50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0352
 18001 0000C591 E986030000              	jmp .L_lambda_simple_end_0352
 18002                                  .L_lambda_simple_code_0352:	; lambda-simple body
 18003 0000C596 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18004 0000C59C 740B                    	je .L_lambda_simple_arity_check_ok_0352
 18005 0000C59E FF742410                	push qword [rsp + 8 * 2]
 18006 0000C5A2 6A01                    	push 1
 18007 0000C5A4 E91F9B0000              	jmp L_error_incorrect_arity_simple
 18008                                  .L_lambda_simple_arity_check_ok_0352:
 18009 0000C5A9 C8000000                	enter 0, 0
 18010 0000C5AD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18011 0000C5B2 E8589B0000              	call malloc
 18012 0000C5B7 50                      	push rax
 18013 0000C5B8 BF08000000              	mov rdi, 8 * 1	; new rib
 18014 0000C5BD E84D9B0000              	call malloc
 18015 0000C5C2 50                      	push rax
 18016 0000C5C3 BF10000000              	mov rdi, 8 * 2	; extended env
 18017 0000C5C8 E8429B0000              	call malloc
 18018 0000C5CD 488B7D10                	mov rdi, ENV
 18019 0000C5D1 BE00000000              	mov rsi, 0
 18020 0000C5D6 BA01000000              	mov rdx, 1
 18021                                  .L_lambda_opt_env_loop_0075:	; ext_env[i + 1] <-- env[i]
 18022 0000C5DB 4883FE01                	cmp rsi, 1
 18023 0000C5DF 7410                    	je .L_lambda_opt_env_end_0075
 18024 0000C5E1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18025 0000C5E5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18026 0000C5E9 48FFC6                  	inc rsi
 18027 0000C5EC 48FFC2                  	inc rdx
 18028 0000C5EF EBEA                    	jmp .L_lambda_opt_env_loop_0075
 18029                                  .L_lambda_opt_env_end_0075:
 18030 0000C5F1 5B                      	pop rbx
 18031 0000C5F2 BE00000000              	mov rsi, 0
 18032                                  .L_lambda_opt_params_loop_0075:	; copy params
 18033 0000C5F7 4883FE01                	cmp rsi, 1
 18034 0000C5FB 740E                    	je .L_lambda_opt_params_end_0075
 18035 0000C5FD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18036 0000C602 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18037 0000C606 48FFC6                  	inc rsi
 18038 0000C609 EBEC                    	jmp .L_lambda_opt_params_loop_0075
 18039                                  .L_lambda_opt_params_end_0075:
 18040 0000C60B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18041 0000C60E 4889C3                  	mov rbx, rax
 18042 0000C611 58                      	pop rax
 18043 0000C612 C60004                  	mov byte [rax], T_closure
 18044 0000C615 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18045 0000C619 48C74009[26C60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0075
 18046 0000C621 E9F2020000              	jmp .L_lambda_opt_end_0075
 18047                                  .L_lambda_opt_code_0075:	; lambda-opt body
 18048 0000C626 48837C241000            	cmp qword [rsp + 8 * 2], 0
 18049 0000C62C 0F8404010000            	je .L_lambda_opt_arity_check_exact_0075
 18050 0000C632 48837C241000            	cmp qword [rsp + 8 * 2], 0
 18051 0000C638 7F0B                    	jg .L_lambda_opt_arity_check_more_0075
 18052 0000C63A FF742410                	push qword [rsp + 8 * 2]
 18053 0000C63E 6A00                    	push 0
 18054 0000C640 E9979A0000              	jmp L_error_incorrect_arity_opt
 18055                                  .L_lambda_opt_arity_check_more_0075:
 18056 0000C645 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 18057 0000C64A 41B900000000            	mov r9 , 0
 18058 0000C650 4989E7                  	mov r15, rsp
 18059 0000C653 4D29C8                  	sub r8, r9
 18060 0000C656 41B900000000            	mov r9, 0
 18061 0000C65C 498D5F10                	lea rbx, [r15 + 8 * 2]
 18062 0000C660 498B4710                	mov rax, qword [r15 + 8 * 2]
 18063 0000C664 486BC008                	imul rax, 8
 18064 0000C668 4801C3                  	add rbx, rax
 18065 0000C66B 488B13                  	mov rdx , qword [rbx]
 18066 0000C66E 4989DA                  	mov r10 , rbx
 18067 0000C671 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 18068 0000C676 52                      	push rdx
 18069 0000C677 53                      	push rbx
 18070 0000C678 4150                    	push r8
 18071 0000C67A 4151                    	push r9
 18072 0000C67C 4152                    	push r10
 18073 0000C67E 4157                    	push r15
 18074 0000C680 E88A9A0000              	call malloc
 18075 0000C685 415F                    	pop r15
 18076 0000C687 415A                    	pop r10
 18077 0000C689 4159                    	pop r9
 18078 0000C68B 4158                    	pop r8
 18079 0000C68D 5B                      	pop rbx
 18080 0000C68E 5A                      	pop rdx
 18081 0000C68F C60021                  	mov byte qword [rax], T_pair
 18082 0000C692 48895001                	mov SOB_PAIR_CAR(rax), rdx
 18083 0000C696 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 18084 0000C69E 498902                  	mov qword [r10], rax
 18085 0000C6A1 49FFC1                  	inc r9
 18086 0000C6A4 4883EB08                	sub rbx, 8
 18087 0000C6A8 4D39C1                  	cmp r9, r8
 18088 0000C6AB 743E                    	je .L_lambda_opt_stack_shrink_loop_0247
 18089                                  .L_lambda_opt_stack_shrink_loop_0246:
 18090 0000C6AD 488B13                  	mov rdx, qword [rbx]
 18091 0000C6B0 53                      	push rbx
 18092 0000C6B1 4150                    	push r8
 18093 0000C6B3 4151                    	push r9
 18094 0000C6B5 4152                    	push r10
 18095 0000C6B7 4157                    	push r15
 18096 0000C6B9 52                      	push rdx
 18097 0000C6BA BF11000000              	mov rdi, (1 + 8 + 8)
 18098 0000C6BF E84B9A0000              	call malloc
 18099 0000C6C4 5A                      	pop rdx
 18100 0000C6C5 415F                    	pop r15
 18101 0000C6C7 415A                    	pop r10
 18102 0000C6C9 4159                    	pop r9
 18103 0000C6CB 4158                    	pop r8
 18104 0000C6CD 5B                      	pop rbx
 18105 0000C6CE C60021                  	mov byte [rax], T_pair
 18106 0000C6D1 48895001                	mov SOB_PAIR_CAR(rax), rdx
 18107 0000C6D5 4D8B32                  	mov r14, qword [r10]
 18108 0000C6D8 4C897009                	mov SOB_PAIR_CDR(rax), r14
 18109 0000C6DC 498902                  	mov qword [r10], rax
 18110 0000C6DF 49FFC1                  	inc r9
 18111 0000C6E2 4883EB08                	sub rbx, 8
 18112 0000C6E6 4D39C1                  	cmp r9, r8
 18113 0000C6E9 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_0246
 18114                                  .L_lambda_opt_stack_shrink_loop_0247:
 18115 0000C6EB 498D5710                	lea rdx, [r15 + 8 * 2]
 18116 0000C6EF 48C70200000000          	mov qword [rdx], 0
 18117 0000C6F6 48830201                	add qword [rdx] , 1
 18118 0000C6FA 4D89C1                  	mov r9, r8
 18119 0000C6FD 49FFC9                  	dec r9
 18120 0000C700 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 18121                                  .L_lambda_opt_stack_shrink_loop_0248:
 18122 0000C704 488B03                  	mov rax, qword [rbx]
 18123 0000C707 498901                  	mov qword [r9], rax
 18124 0000C70A 4983E908                	sub r9 , 8
 18125 0000C70E 4883EB08                	sub rbx, 8
 18126 0000C712 4C39FB                  	cmp rbx, r15
 18127 0000C715 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0248
 18128 0000C717 488B03                  	mov rax, qword [rbx]
 18129 0000C71A 498901                  	mov qword [r9], rax
 18130 0000C71D 4D89C1                  	mov r9, r8
 18131 0000C720 4983E901                	sub r9 , 1
 18132 0000C724 4983F900                	cmp r9, 0
 18133 0000C728 7446                    je .L_lambda_opt_stack_adjusted_0075
 18134                                  .L_lambda_opt_stack_shrink_loop_0249:
 18135 0000C72A 58                      	pop rax
 18136 0000C72B 49FFC9                  	dec r9
 18137 0000C72E 4983F900                	cmp r9, 0
 18138 0000C732 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0249
 18139 0000C734 EB3A                    jmp .L_lambda_opt_stack_adjusted_0075
 18140                                  .L_lambda_opt_arity_check_exact_0075:
 18141 0000C736 4989E7                  	mov r15, rsp
 18142 0000C739 498D5F10                	lea rbx, [r15 + 8 * 2 + 8 * 0]
 18143 0000C73D 488B0B                  	mov rcx, qword [rbx]
 18144 0000C740 48C703[01000000]        	mov qword [rbx], sob_nil
 18145 0000C747 4883EB08                	sub rbx, 8
 18146                                  .L_lambda_opt_stack_shrink_loop_0245:
 18147 0000C74B 488B13                  	mov rdx, qword [rbx]
 18148 0000C74E 48890B                  	mov qword [rbx], rcx
 18149 0000C751 4C39FB                  	cmp rbx, r15
 18150 0000C754 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0075
 18151 0000C756 4889D1                  	mov rcx, rdx
 18152 0000C759 4883EB08                	sub rbx, 8
 18153 0000C75D EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_0245
 18154                                  .L_lambda_opt_stack_shrink_loop_exit_0075:
 18155 0000C75F 52                      	push rdx
 18156 0000C760 4989E7                  	mov r15, rsp
 18157 0000C763 4983C710                	add r15, 16
 18158 0000C767 498B1F                  	mov rbx, qword [r15]
 18159 0000C76A 48FFC3                  	inc rbx
 18160 0000C76D 49891F                  	mov qword [r15], rbx
 18161                                  .L_lambda_opt_stack_adjusted_0075:
 18162 0000C770 C8000000                	enter 0, 0
 18163                                  	; preparing a tail-call
 18164                                  	; preparing a non tail-call
 18165 0000C774 488B4520                	mov rax, PARAM(0)	; param s
 18166 0000C778 50                      	push rax
 18167 0000C779 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18168 0000C77E E88C990000              	call malloc
 18169 0000C783 50                      	push rax
 18170 0000C784 BF08000000              	mov rdi, 8 * 1	; new rib
 18171 0000C789 E881990000              	call malloc
 18172 0000C78E 50                      	push rax
 18173 0000C78F BF18000000              	mov rdi, 8 * 3	; extended env
 18174 0000C794 E876990000              	call malloc
 18175 0000C799 488B7D10                	mov rdi, ENV
 18176 0000C79D BE00000000              	mov rsi, 0
 18177 0000C7A2 BA01000000              	mov rdx, 1
 18178                                  .L_lambda_simple_env_loop_0353:	; ext_env[i + 1] <-- env[i]
 18179 0000C7A7 4883FE02                	cmp rsi, 2
 18180 0000C7AB 7410                    	je .L_lambda_simple_env_end_0353
 18181 0000C7AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18182 0000C7B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18183 0000C7B5 48FFC6                  	inc rsi
 18184 0000C7B8 48FFC2                  	inc rdx
 18185 0000C7BB EBEA                    	jmp .L_lambda_simple_env_loop_0353
 18186                                  .L_lambda_simple_env_end_0353:
 18187 0000C7BD 5B                      	pop rbx
 18188 0000C7BE BE00000000              	mov rsi, 0
 18189                                  .L_lambda_simple_params_loop_0353:	; copy params
 18190 0000C7C3 4883FE01                	cmp rsi, 1
 18191 0000C7C7 740E                    	je .L_lambda_simple_params_end_0353
 18192 0000C7C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18193 0000C7CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18194 0000C7D2 48FFC6                  	inc rsi
 18195 0000C7D5 EBEC                    	jmp .L_lambda_simple_params_loop_0353
 18196                                  .L_lambda_simple_params_end_0353:
 18197 0000C7D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18198 0000C7DA 4889C3                  	mov rbx, rax
 18199 0000C7DD 58                      	pop rax
 18200 0000C7DE C60004                  	mov byte [rax], T_closure
 18201 0000C7E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18202 0000C7E5 48C74009[F2C70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0353
 18203 0000C7ED E99B000000              	jmp .L_lambda_simple_end_0353
 18204                                  .L_lambda_simple_code_0353:	; lambda-simple body
 18205 0000C7F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18206 0000C7F8 740B                    	je .L_lambda_simple_arity_check_ok_0353
 18207 0000C7FA FF742410                	push qword [rsp + 8 * 2]
 18208 0000C7FE 6A01                    	push 1
 18209 0000C800 E9C3980000              	jmp L_error_incorrect_arity_simple
 18210                                  .L_lambda_simple_arity_check_ok_0353:
 18211 0000C805 C8000000                	enter 0, 0
 18212                                  	; preparing a tail-call
 18213                                  	; preparing a non tail-call
 18214 0000C809 488B4520                	mov rax, PARAM(0)	; param ch
 18215 0000C80D 50                      	push rax
 18216 0000C80E 6A01                    	push 1	; arg count
 18217 0000C810 488B0425[7D160000]      	mov rax, qword [free_var_133]	; free var char-downcase
 18218 0000C818 803805                  	cmp byte [rax], T_undefined
 18219 0000C81B 0F84C1970000            	je L_error_fvar_undefined
 18220 0000C821 803804                  	cmp byte [rax], T_closure
 18221 0000C824 0F853C980000            	jne L_error_non_closure
 18222 0000C82A FF7001                  	push SOB_CLOSURE_ENV(rax)
 18223 0000C82D FF5009                  	call SOB_CLOSURE_CODE(rax)
 18224 0000C830 50                      	push rax
 18225 0000C831 6A01                    	push 1	; arg count
 18226 0000C833 488B0425[400F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 18227 0000C83B 803805                  	cmp byte [rax], T_undefined
 18228 0000C83E 0F849E970000            	je L_error_fvar_undefined
 18229 0000C844 803804                  	cmp byte [rax], T_closure
 18230 0000C847 0F8519980000            	jne L_error_non_closure
 18231 0000C84D FF7001                  	push SOB_CLOSURE_ENV(rax)
 18232                                  
 18233                                  	; recycling the current frame
 18234 0000C850 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18235 0000C853 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18236 0000C856 B905000000              	mov rcx, 1 + 4
 18237 0000C85B 488B5D18                	mov rbx, COUNT
 18238 0000C85F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18239 0000C864 488D55F8                	lea rdx, [rbp - 8 * 1]
 18240                                  .L_tc_recycle_frame_loop_0473:
 18241 0000C868 4883F900                	cmp rcx, 0
 18242 0000C86C 7413                    	je .L_tc_recycle_frame_done_0473
 18243 0000C86E 488B32                  	mov rsi, qword [rdx]
 18244 0000C871 488933                  	mov qword [rbx], rsi
 18245 0000C874 48FFC9                  	dec rcx
 18246 0000C877 4883EB08                	sub rbx, 8 * 1
 18247 0000C87B 4883EA08                	sub rdx, 8 * 1
 18248 0000C87F EBE7                    	jmp .L_tc_recycle_frame_loop_0473
 18249                                  .L_tc_recycle_frame_done_0473:
 18250 0000C881 488D6308                	lea rsp, [rbx + 8 * 1]
 18251 0000C885 5D                      	pop rbp	; the proc will restore it!
 18252 0000C886 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18253 0000C889 C9                      	leave
 18254 0000C88A C21800                  	ret AND_KILL_FRAME(1)
 18255                                  .L_lambda_simple_end_0353:	; new closure is in rax
 18256 0000C88D 50                      	push rax
 18257 0000C88E 6A02                    	push 2	; arg count
 18258 0000C890 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
 18259 0000C898 803805                  	cmp byte [rax], T_undefined
 18260 0000C89B 0F8441970000            	je L_error_fvar_undefined
 18261 0000C8A1 803804                  	cmp byte [rax], T_closure
 18262 0000C8A4 0F85BC970000            	jne L_error_non_closure
 18263 0000C8AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 18264 0000C8AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 18265 0000C8B0 50                      	push rax
 18266 0000C8B1 488B4510                	mov rax, ENV
 18267 0000C8B5 488B00                  	mov rax, qword [rax + 8 * 0]
 18268 0000C8B8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 18269 0000C8BB 50                      	push rax
 18270 0000C8BC 6A02                    	push 2	; arg count
 18271 0000C8BE 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
 18272 0000C8C6 803805                  	cmp byte [rax], T_undefined
 18273 0000C8C9 0F8413970000            	je L_error_fvar_undefined
 18274 0000C8CF 803804                  	cmp byte [rax], T_closure
 18275 0000C8D2 0F858E970000            	jne L_error_non_closure
 18276 0000C8D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18277                                  
 18278                                  	; recycling the current frame
 18279 0000C8DB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18280 0000C8DE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18281 0000C8E1 B906000000              	mov rcx, 2 + 4
 18282 0000C8E6 488B5D18                	mov rbx, COUNT
 18283 0000C8EA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18284 0000C8EF 488D55F8                	lea rdx, [rbp - 8 * 1]
 18285                                  .L_tc_recycle_frame_loop_0474:
 18286 0000C8F3 4883F900                	cmp rcx, 0
 18287 0000C8F7 7413                    	je .L_tc_recycle_frame_done_0474
 18288 0000C8F9 488B32                  	mov rsi, qword [rdx]
 18289 0000C8FC 488933                  	mov qword [rbx], rsi
 18290 0000C8FF 48FFC9                  	dec rcx
 18291 0000C902 4883EB08                	sub rbx, 8 * 1
 18292 0000C906 4883EA08                	sub rdx, 8 * 1
 18293 0000C90A EBE7                    	jmp .L_tc_recycle_frame_loop_0474
 18294                                  .L_tc_recycle_frame_done_0474:
 18295 0000C90C 488D6308                	lea rsp, [rbx + 8 * 1]
 18296 0000C910 5D                      	pop rbp	; the proc will restore it!
 18297 0000C911 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18298 0000C914 C9                      	leave
 18299 0000C915 C21800                  	ret AND_KILL_FRAME(1)
 18300                                  .L_lambda_opt_end_0075:	; new closure is in rax
 18301 0000C918 C9                      	leave
 18302 0000C919 C21800                  	ret AND_KILL_FRAME(1)
 18303                                  .L_lambda_simple_end_0352:	; new closure is in rax
 18304 0000C91C 50                      	push rax
 18305 0000C91D 6A01                    	push 1	; arg count
 18306 0000C91F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18307 0000C924 E8E6970000              	call malloc
 18308 0000C929 50                      	push rax
 18309 0000C92A BF00000000              	mov rdi, 8 * 0	; new rib
 18310 0000C92F E8DB970000              	call malloc
 18311 0000C934 50                      	push rax
 18312 0000C935 BF08000000              	mov rdi, 8 * 1	; extended env
 18313 0000C93A E8D0970000              	call malloc
 18314 0000C93F 488B7D10                	mov rdi, ENV
 18315 0000C943 BE00000000              	mov rsi, 0
 18316 0000C948 BA01000000              	mov rdx, 1
 18317                                  .L_lambda_simple_env_loop_0354:	; ext_env[i + 1] <-- env[i]
 18318 0000C94D 4883FE00                	cmp rsi, 0
 18319 0000C951 7410                    	je .L_lambda_simple_env_end_0354
 18320 0000C953 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18321 0000C957 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18322 0000C95B 48FFC6                  	inc rsi
 18323 0000C95E 48FFC2                  	inc rdx
 18324 0000C961 EBEA                    	jmp .L_lambda_simple_env_loop_0354
 18325                                  .L_lambda_simple_env_end_0354:
 18326 0000C963 5B                      	pop rbx
 18327 0000C964 BE00000000              	mov rsi, 0
 18328                                  .L_lambda_simple_params_loop_0354:	; copy params
 18329 0000C969 4883FE00                	cmp rsi, 0
 18330 0000C96D 740E                    	je .L_lambda_simple_params_end_0354
 18331 0000C96F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18332 0000C974 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18333 0000C978 48FFC6                  	inc rsi
 18334 0000C97B EBEC                    	jmp .L_lambda_simple_params_loop_0354
 18335                                  .L_lambda_simple_params_end_0354:
 18336 0000C97D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18337 0000C980 4889C3                  	mov rbx, rax
 18338 0000C983 58                      	pop rax
 18339 0000C984 C60004                  	mov byte [rax], T_closure
 18340 0000C987 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18341 0000C98B 48C74009[98C90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0354
 18342 0000C993 E938010000              	jmp .L_lambda_simple_end_0354
 18343                                  .L_lambda_simple_code_0354:	; lambda-simple body
 18344 0000C998 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18345 0000C99E 740B                    	je .L_lambda_simple_arity_check_ok_0354
 18346 0000C9A0 FF742410                	push qword [rsp + 8 * 2]
 18347 0000C9A4 6A01                    	push 1
 18348 0000C9A6 E91D970000              	jmp L_error_incorrect_arity_simple
 18349                                  .L_lambda_simple_arity_check_ok_0354:
 18350 0000C9AB C8000000                	enter 0, 0
 18351                                  	; preparing a non tail-call
 18352 0000C9AF 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 18353 0000C9B7 803805                  	cmp byte [rax], T_undefined
 18354 0000C9BA 0F8422960000            	je L_error_fvar_undefined
 18355 0000C9C0 50                      	push rax
 18356 0000C9C1 6A01                    	push 1	; arg count
 18357 0000C9C3 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 18358 0000C9C7 803804                  	cmp byte [rax], T_closure
 18359 0000C9CA 0F8596960000            	jne L_error_non_closure
 18360 0000C9D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18361 0000C9D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18362 0000C9D6 48890425[9F160000]      	mov qword [free_var_135], rax
 18363 0000C9DE 48B8-                   	mov rax, sob_void
 18363 0000C9E0 [0000000000000000] 
 18364                                  
 18365                                  	; preparing a non tail-call
 18366 0000C9E8 488B0425[D3150000]      	mov rax, qword [free_var_123]	; free var <=
 18367 0000C9F0 803805                  	cmp byte [rax], T_undefined
 18368 0000C9F3 0F84E9950000            	je L_error_fvar_undefined
 18369 0000C9F9 50                      	push rax
 18370 0000C9FA 6A01                    	push 1	; arg count
 18371 0000C9FC 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 18372 0000CA00 803804                  	cmp byte [rax], T_closure
 18373 0000CA03 0F855D960000            	jne L_error_non_closure
 18374 0000CA09 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18375 0000CA0C FF5009                  	call SOB_CLOSURE_CODE(rax)
 18376 0000CA0F 48890425[B0160000]      	mov qword [free_var_136], rax
 18377 0000CA17 48B8-                   	mov rax, sob_void
 18377 0000CA19 [0000000000000000] 
 18378                                  
 18379                                  	; preparing a non tail-call
 18380 0000CA21 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 18381 0000CA29 803805                  	cmp byte [rax], T_undefined
 18382 0000CA2C 0F84B0950000            	je L_error_fvar_undefined
 18383 0000CA32 50                      	push rax
 18384 0000CA33 6A01                    	push 1	; arg count
 18385 0000CA35 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 18386 0000CA39 803804                  	cmp byte [rax], T_closure
 18387 0000CA3C 0F8524960000            	jne L_error_non_closure
 18388 0000CA42 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18389 0000CA45 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18390 0000CA48 48890425[C1160000]      	mov qword [free_var_137], rax
 18391 0000CA50 48B8-                   	mov rax, sob_void
 18391 0000CA52 [0000000000000000] 
 18392                                  
 18393                                  	; preparing a non tail-call
 18394 0000CA5A 488B0425[E4150000]      	mov rax, qword [free_var_124]	; free var >
 18395 0000CA62 803805                  	cmp byte [rax], T_undefined
 18396 0000CA65 0F8477950000            	je L_error_fvar_undefined
 18397 0000CA6B 50                      	push rax
 18398 0000CA6C 6A01                    	push 1	; arg count
 18399 0000CA6E 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 18400 0000CA72 803804                  	cmp byte [rax], T_closure
 18401 0000CA75 0F85EB950000            	jne L_error_non_closure
 18402 0000CA7B FF7001                  	push SOB_CLOSURE_ENV(rax)
 18403 0000CA7E FF5009                  	call SOB_CLOSURE_CODE(rax)
 18404 0000CA81 48890425[D2160000]      	mov qword [free_var_138], rax
 18405 0000CA89 48B8-                   	mov rax, sob_void
 18405 0000CA8B [0000000000000000] 
 18406                                  
 18407                                  	; preparing a non tail-call
 18408 0000CA93 488B0425[F5150000]      	mov rax, qword [free_var_125]	; free var >=
 18409 0000CA9B 803805                  	cmp byte [rax], T_undefined
 18410 0000CA9E 0F843E950000            	je L_error_fvar_undefined
 18411 0000CAA4 50                      	push rax
 18412 0000CAA5 6A01                    	push 1	; arg count
 18413 0000CAA7 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 18414 0000CAAB 803804                  	cmp byte [rax], T_closure
 18415 0000CAAE 0F85B2950000            	jne L_error_non_closure
 18416 0000CAB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18417 0000CAB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18418 0000CABA 48890425[E3160000]      	mov qword [free_var_139], rax
 18419 0000CAC2 48B8-                   	mov rax, sob_void
 18419 0000CAC4 [0000000000000000] 
 18420 0000CACC C9                      	leave
 18421 0000CACD C21800                  	ret AND_KILL_FRAME(1)
 18422                                  .L_lambda_simple_end_0354:	; new closure is in rax
 18423 0000CAD0 803804                  	cmp byte [rax], T_closure
 18424 0000CAD3 0F858D950000            	jne L_error_non_closure
 18425 0000CAD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18426 0000CADC FF5009                  	call SOB_CLOSURE_CODE(rax)
 18427                                  
 18428 0000CADF 4889C7                  	mov rdi, rax
 18429 0000CAE2 E83A970000              	call print_sexpr_if_not_void
 18430                                  
 18431 0000CAE7 48B8-                   	mov rax, L_constants + 0
 18431 0000CAE9 [0000000000000000] 
 18432 0000CAF1 48890425[F4160000]      	mov qword [free_var_140], rax
 18433 0000CAF9 48B8-                   	mov rax, sob_void
 18433 0000CAFB [0000000000000000] 
 18434                                  
 18435 0000CB03 4889C7                  	mov rdi, rax
 18436 0000CB06 E816970000              	call print_sexpr_if_not_void
 18437                                  
 18438 0000CB0B 48B8-                   	mov rax, L_constants + 0
 18438 0000CB0D [0000000000000000] 
 18439 0000CB15 48890425[05170000]      	mov qword [free_var_141], rax
 18440 0000CB1D 48B8-                   	mov rax, sob_void
 18440 0000CB1F [0000000000000000] 
 18441                                  
 18442 0000CB27 4889C7                  	mov rdi, rax
 18443 0000CB2A E8F2960000              	call print_sexpr_if_not_void
 18444                                  
 18445                                  	; preparing a non tail-call
 18446 0000CB2F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18447 0000CB34 E8D6950000              	call malloc
 18448 0000CB39 50                      	push rax
 18449 0000CB3A BF00000000              	mov rdi, 8 * 0	; new rib
 18450 0000CB3F E8CB950000              	call malloc
 18451 0000CB44 50                      	push rax
 18452 0000CB45 BF08000000              	mov rdi, 8 * 1	; extended env
 18453 0000CB4A E8C0950000              	call malloc
 18454 0000CB4F 488B7D10                	mov rdi, ENV
 18455 0000CB53 BE00000000              	mov rsi, 0
 18456 0000CB58 BA01000000              	mov rdx, 1
 18457                                  .L_lambda_simple_env_loop_0355:	; ext_env[i + 1] <-- env[i]
 18458 0000CB5D 4883FE00                	cmp rsi, 0
 18459 0000CB61 7410                    	je .L_lambda_simple_env_end_0355
 18460 0000CB63 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18461 0000CB67 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18462 0000CB6B 48FFC6                  	inc rsi
 18463 0000CB6E 48FFC2                  	inc rdx
 18464 0000CB71 EBEA                    	jmp .L_lambda_simple_env_loop_0355
 18465                                  .L_lambda_simple_env_end_0355:
 18466 0000CB73 5B                      	pop rbx
 18467 0000CB74 BE00000000              	mov rsi, 0
 18468                                  .L_lambda_simple_params_loop_0355:	; copy params
 18469 0000CB79 4883FE00                	cmp rsi, 0
 18470 0000CB7D 740E                    	je .L_lambda_simple_params_end_0355
 18471 0000CB7F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18472 0000CB84 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18473 0000CB88 48FFC6                  	inc rsi
 18474 0000CB8B EBEC                    	jmp .L_lambda_simple_params_loop_0355
 18475                                  .L_lambda_simple_params_end_0355:
 18476 0000CB8D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18477 0000CB90 4889C3                  	mov rbx, rax
 18478 0000CB93 58                      	pop rax
 18479 0000CB94 C60004                  	mov byte [rax], T_closure
 18480 0000CB97 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18481 0000CB9B 48C74009[A8CB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0355
 18482 0000CBA3 E95D010000              	jmp .L_lambda_simple_end_0355
 18483                                  .L_lambda_simple_code_0355:	; lambda-simple body
 18484 0000CBA8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18485 0000CBAE 740B                    	je .L_lambda_simple_arity_check_ok_0355
 18486 0000CBB0 FF742410                	push qword [rsp + 8 * 2]
 18487 0000CBB4 6A01                    	push 1
 18488 0000CBB6 E90D950000              	jmp L_error_incorrect_arity_simple
 18489                                  .L_lambda_simple_arity_check_ok_0355:
 18490 0000CBBB C8000000                	enter 0, 0
 18491 0000CBBF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18492 0000CBC4 E846950000              	call malloc
 18493 0000CBC9 50                      	push rax
 18494 0000CBCA BF08000000              	mov rdi, 8 * 1	; new rib
 18495 0000CBCF E83B950000              	call malloc
 18496 0000CBD4 50                      	push rax
 18497 0000CBD5 BF10000000              	mov rdi, 8 * 2	; extended env
 18498 0000CBDA E830950000              	call malloc
 18499 0000CBDF 488B7D10                	mov rdi, ENV
 18500 0000CBE3 BE00000000              	mov rsi, 0
 18501 0000CBE8 BA01000000              	mov rdx, 1
 18502                                  .L_lambda_simple_env_loop_0356:	; ext_env[i + 1] <-- env[i]
 18503 0000CBED 4883FE01                	cmp rsi, 1
 18504 0000CBF1 7410                    	je .L_lambda_simple_env_end_0356
 18505 0000CBF3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18506 0000CBF7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18507 0000CBFB 48FFC6                  	inc rsi
 18508 0000CBFE 48FFC2                  	inc rdx
 18509 0000CC01 EBEA                    	jmp .L_lambda_simple_env_loop_0356
 18510                                  .L_lambda_simple_env_end_0356:
 18511 0000CC03 5B                      	pop rbx
 18512 0000CC04 BE00000000              	mov rsi, 0
 18513                                  .L_lambda_simple_params_loop_0356:	; copy params
 18514 0000CC09 4883FE01                	cmp rsi, 1
 18515 0000CC0D 740E                    	je .L_lambda_simple_params_end_0356
 18516 0000CC0F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18517 0000CC14 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18518 0000CC18 48FFC6                  	inc rsi
 18519 0000CC1B EBEC                    	jmp .L_lambda_simple_params_loop_0356
 18520                                  .L_lambda_simple_params_end_0356:
 18521 0000CC1D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18522 0000CC20 4889C3                  	mov rbx, rax
 18523 0000CC23 58                      	pop rax
 18524 0000CC24 C60004                  	mov byte [rax], T_closure
 18525 0000CC27 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18526 0000CC2B 48C74009[38CC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0356
 18527 0000CC33 E9C9000000              	jmp .L_lambda_simple_end_0356
 18528                                  .L_lambda_simple_code_0356:	; lambda-simple body
 18529 0000CC38 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18530 0000CC3E 740B                    	je .L_lambda_simple_arity_check_ok_0356
 18531 0000CC40 FF742410                	push qword [rsp + 8 * 2]
 18532 0000CC44 6A01                    	push 1
 18533 0000CC46 E97D940000              	jmp L_error_incorrect_arity_simple
 18534                                  .L_lambda_simple_arity_check_ok_0356:
 18535 0000CC4B C8000000                	enter 0, 0
 18536                                  	; preparing a tail-call
 18537                                  	; preparing a non tail-call
 18538                                  	; preparing a non tail-call
 18539 0000CC4F 488B4520                	mov rax, PARAM(0)	; param str
 18540 0000CC53 50                      	push rax
 18541 0000CC54 6A01                    	push 1	; arg count
 18542 0000CC56 488B0425[27170000]      	mov rax, qword [free_var_143]	; free var string->list
 18543 0000CC5E 803805                  	cmp byte [rax], T_undefined
 18544 0000CC61 0F847B930000            	je L_error_fvar_undefined
 18545 0000CC67 803804                  	cmp byte [rax], T_closure
 18546 0000CC6A 0F85F6930000            	jne L_error_non_closure
 18547 0000CC70 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18548 0000CC73 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18549 0000CC76 50                      	push rax
 18550 0000CC77 488B4510                	mov rax, ENV
 18551 0000CC7B 488B00                  	mov rax, qword [rax + 8 * 0]
 18552 0000CC7E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char-case-converter
 18553 0000CC81 50                      	push rax
 18554 0000CC82 6A02                    	push 2	; arg count
 18555 0000CC84 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
 18556 0000CC8C 803805                  	cmp byte [rax], T_undefined
 18557 0000CC8F 0F844D930000            	je L_error_fvar_undefined
 18558 0000CC95 803804                  	cmp byte [rax], T_closure
 18559 0000CC98 0F85C8930000            	jne L_error_non_closure
 18560 0000CC9E FF7001                  	push SOB_CLOSURE_ENV(rax)
 18561 0000CCA1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18562 0000CCA4 50                      	push rax
 18563 0000CCA5 6A01                    	push 1	; arg count
 18564 0000CCA7 488B0425[16170000]      	mov rax, qword [free_var_142]	; free var list->string
 18565 0000CCAF 803805                  	cmp byte [rax], T_undefined
 18566 0000CCB2 0F842A930000            	je L_error_fvar_undefined
 18567 0000CCB8 803804                  	cmp byte [rax], T_closure
 18568 0000CCBB 0F85A5930000            	jne L_error_non_closure
 18569 0000CCC1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18570                                  
 18571                                  	; recycling the current frame
 18572 0000CCC4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18573 0000CCC7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18574 0000CCCA B905000000              	mov rcx, 1 + 4
 18575 0000CCCF 488B5D18                	mov rbx, COUNT
 18576 0000CCD3 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18577 0000CCD8 488D55F8                	lea rdx, [rbp - 8 * 1]
 18578                                  .L_tc_recycle_frame_loop_0475:
 18579 0000CCDC 4883F900                	cmp rcx, 0
 18580 0000CCE0 7413                    	je .L_tc_recycle_frame_done_0475
 18581 0000CCE2 488B32                  	mov rsi, qword [rdx]
 18582 0000CCE5 488933                  	mov qword [rbx], rsi
 18583 0000CCE8 48FFC9                  	dec rcx
 18584 0000CCEB 4883EB08                	sub rbx, 8 * 1
 18585 0000CCEF 4883EA08                	sub rdx, 8 * 1
 18586 0000CCF3 EBE7                    	jmp .L_tc_recycle_frame_loop_0475
 18587                                  .L_tc_recycle_frame_done_0475:
 18588 0000CCF5 488D6308                	lea rsp, [rbx + 8 * 1]
 18589 0000CCF9 5D                      	pop rbp	; the proc will restore it!
 18590 0000CCFA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18591 0000CCFD C9                      	leave
 18592 0000CCFE C21800                  	ret AND_KILL_FRAME(1)
 18593                                  .L_lambda_simple_end_0356:	; new closure is in rax
 18594 0000CD01 C9                      	leave
 18595 0000CD02 C21800                  	ret AND_KILL_FRAME(1)
 18596                                  .L_lambda_simple_end_0355:	; new closure is in rax
 18597 0000CD05 50                      	push rax
 18598 0000CD06 6A01                    	push 1	; arg count
 18599 0000CD08 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18600 0000CD0D E8FD930000              	call malloc
 18601 0000CD12 50                      	push rax
 18602 0000CD13 BF00000000              	mov rdi, 8 * 0	; new rib
 18603 0000CD18 E8F2930000              	call malloc
 18604 0000CD1D 50                      	push rax
 18605 0000CD1E BF08000000              	mov rdi, 8 * 1	; extended env
 18606 0000CD23 E8E7930000              	call malloc
 18607 0000CD28 488B7D10                	mov rdi, ENV
 18608 0000CD2C BE00000000              	mov rsi, 0
 18609 0000CD31 BA01000000              	mov rdx, 1
 18610                                  .L_lambda_simple_env_loop_0357:	; ext_env[i + 1] <-- env[i]
 18611 0000CD36 4883FE00                	cmp rsi, 0
 18612 0000CD3A 7410                    	je .L_lambda_simple_env_end_0357
 18613 0000CD3C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18614 0000CD40 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18615 0000CD44 48FFC6                  	inc rsi
 18616 0000CD47 48FFC2                  	inc rdx
 18617 0000CD4A EBEA                    	jmp .L_lambda_simple_env_loop_0357
 18618                                  .L_lambda_simple_env_end_0357:
 18619 0000CD4C 5B                      	pop rbx
 18620 0000CD4D BE00000000              	mov rsi, 0
 18621                                  .L_lambda_simple_params_loop_0357:	; copy params
 18622 0000CD52 4883FE00                	cmp rsi, 0
 18623 0000CD56 740E                    	je .L_lambda_simple_params_end_0357
 18624 0000CD58 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18625 0000CD5D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18626 0000CD61 48FFC6                  	inc rsi
 18627 0000CD64 EBEC                    	jmp .L_lambda_simple_params_loop_0357
 18628                                  .L_lambda_simple_params_end_0357:
 18629 0000CD66 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18630 0000CD69 4889C3                  	mov rbx, rax
 18631 0000CD6C 58                      	pop rax
 18632 0000CD6D C60004                  	mov byte [rax], T_closure
 18633 0000CD70 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18634 0000CD74 48C74009[81CD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0357
 18635 0000CD7C E98D000000              	jmp .L_lambda_simple_end_0357
 18636                                  .L_lambda_simple_code_0357:	; lambda-simple body
 18637 0000CD81 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18638 0000CD87 740B                    	je .L_lambda_simple_arity_check_ok_0357
 18639 0000CD89 FF742410                	push qword [rsp + 8 * 2]
 18640 0000CD8D 6A01                    	push 1
 18641 0000CD8F E934930000              	jmp L_error_incorrect_arity_simple
 18642                                  .L_lambda_simple_arity_check_ok_0357:
 18643 0000CD94 C8000000                	enter 0, 0
 18644                                  	; preparing a non tail-call
 18645 0000CD98 488B0425[7D160000]      	mov rax, qword [free_var_133]	; free var char-downcase
 18646 0000CDA0 803805                  	cmp byte [rax], T_undefined
 18647 0000CDA3 0F8439920000            	je L_error_fvar_undefined
 18648 0000CDA9 50                      	push rax
 18649 0000CDAA 6A01                    	push 1	; arg count
 18650 0000CDAC 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 18651 0000CDB0 803804                  	cmp byte [rax], T_closure
 18652 0000CDB3 0F85AD920000            	jne L_error_non_closure
 18653 0000CDB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18654 0000CDBC FF5009                  	call SOB_CLOSURE_CODE(rax)
 18655 0000CDBF 48890425[F4160000]      	mov qword [free_var_140], rax
 18656 0000CDC7 48B8-                   	mov rax, sob_void
 18656 0000CDC9 [0000000000000000] 
 18657                                  
 18658                                  	; preparing a non tail-call
 18659 0000CDD1 488B0425[8E160000]      	mov rax, qword [free_var_134]	; free var char-upcase
 18660 0000CDD9 803805                  	cmp byte [rax], T_undefined
 18661 0000CDDC 0F8400920000            	je L_error_fvar_undefined
 18662 0000CDE2 50                      	push rax
 18663 0000CDE3 6A01                    	push 1	; arg count
 18664 0000CDE5 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 18665 0000CDE9 803804                  	cmp byte [rax], T_closure
 18666 0000CDEC 0F8574920000            	jne L_error_non_closure
 18667 0000CDF2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18668 0000CDF5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18669 0000CDF8 48890425[05170000]      	mov qword [free_var_141], rax
 18670 0000CE00 48B8-                   	mov rax, sob_void
 18670 0000CE02 [0000000000000000] 
 18671 0000CE0A C9                      	leave
 18672 0000CE0B C21800                  	ret AND_KILL_FRAME(1)
 18673                                  .L_lambda_simple_end_0357:	; new closure is in rax
 18674 0000CE0E 803804                  	cmp byte [rax], T_closure
 18675 0000CE11 0F854F920000            	jne L_error_non_closure
 18676 0000CE17 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18677 0000CE1A FF5009                  	call SOB_CLOSURE_CODE(rax)
 18678                                  
 18679 0000CE1D 4889C7                  	mov rdi, rax
 18680 0000CE20 E8FC930000              	call print_sexpr_if_not_void
 18681                                  
 18682 0000CE25 48B8-                   	mov rax, L_constants + 0
 18682 0000CE27 [0000000000000000] 
 18683 0000CE2F 48890425[38170000]      	mov qword [free_var_144], rax
 18684 0000CE37 48B8-                   	mov rax, sob_void
 18684 0000CE39 [0000000000000000] 
 18685                                  
 18686 0000CE41 4889C7                  	mov rdi, rax
 18687 0000CE44 E8D8930000              	call print_sexpr_if_not_void
 18688                                  
 18689 0000CE49 48B8-                   	mov rax, L_constants + 0
 18689 0000CE4B [0000000000000000] 
 18690 0000CE53 48890425[49170000]      	mov qword [free_var_145], rax
 18691 0000CE5B 48B8-                   	mov rax, sob_void
 18691 0000CE5D [0000000000000000] 
 18692                                  
 18693 0000CE65 4889C7                  	mov rdi, rax
 18694 0000CE68 E8B4930000              	call print_sexpr_if_not_void
 18695                                  
 18696 0000CE6D 48B8-                   	mov rax, L_constants + 0
 18696 0000CE6F [0000000000000000] 
 18697 0000CE77 48890425[5A170000]      	mov qword [free_var_146], rax
 18698 0000CE7F 48B8-                   	mov rax, sob_void
 18698 0000CE81 [0000000000000000] 
 18699                                  
 18700 0000CE89 4889C7                  	mov rdi, rax
 18701 0000CE8C E890930000              	call print_sexpr_if_not_void
 18702                                  
 18703 0000CE91 48B8-                   	mov rax, L_constants + 0
 18703 0000CE93 [0000000000000000] 
 18704 0000CE9B 48890425[6B170000]      	mov qword [free_var_147], rax
 18705 0000CEA3 48B8-                   	mov rax, sob_void
 18705 0000CEA5 [0000000000000000] 
 18706                                  
 18707 0000CEAD 4889C7                  	mov rdi, rax
 18708 0000CEB0 E86C930000              	call print_sexpr_if_not_void
 18709                                  
 18710 0000CEB5 48B8-                   	mov rax, L_constants + 0
 18710 0000CEB7 [0000000000000000] 
 18711 0000CEBF 48890425[7C170000]      	mov qword [free_var_148], rax
 18712 0000CEC7 48B8-                   	mov rax, sob_void
 18712 0000CEC9 [0000000000000000] 
 18713                                  
 18714 0000CED1 4889C7                  	mov rdi, rax
 18715 0000CED4 E848930000              	call print_sexpr_if_not_void
 18716                                  
 18717 0000CED9 48B8-                   	mov rax, L_constants + 0
 18717 0000CEDB [0000000000000000] 
 18718 0000CEE3 48890425[8D170000]      	mov qword [free_var_149], rax
 18719 0000CEEB 48B8-                   	mov rax, sob_void
 18719 0000CEED [0000000000000000] 
 18720                                  
 18721 0000CEF5 4889C7                  	mov rdi, rax
 18722 0000CEF8 E824930000              	call print_sexpr_if_not_void
 18723                                  
 18724 0000CEFD 48B8-                   	mov rax, L_constants + 0
 18724 0000CEFF [0000000000000000] 
 18725 0000CF07 48890425[9E170000]      	mov qword [free_var_150], rax
 18726 0000CF0F 48B8-                   	mov rax, sob_void
 18726 0000CF11 [0000000000000000] 
 18727                                  
 18728 0000CF19 4889C7                  	mov rdi, rax
 18729 0000CF1C E800930000              	call print_sexpr_if_not_void
 18730                                  
 18731 0000CF21 48B8-                   	mov rax, L_constants + 0
 18731 0000CF23 [0000000000000000] 
 18732 0000CF2B 48890425[AF170000]      	mov qword [free_var_151], rax
 18733 0000CF33 48B8-                   	mov rax, sob_void
 18733 0000CF35 [0000000000000000] 
 18734                                  
 18735 0000CF3D 4889C7                  	mov rdi, rax
 18736 0000CF40 E8DC920000              	call print_sexpr_if_not_void
 18737                                  
 18738 0000CF45 48B8-                   	mov rax, L_constants + 0
 18738 0000CF47 [0000000000000000] 
 18739 0000CF4F 48890425[C0170000]      	mov qword [free_var_152], rax
 18740 0000CF57 48B8-                   	mov rax, sob_void
 18740 0000CF59 [0000000000000000] 
 18741                                  
 18742 0000CF61 4889C7                  	mov rdi, rax
 18743 0000CF64 E8B8920000              	call print_sexpr_if_not_void
 18744                                  
 18745 0000CF69 48B8-                   	mov rax, L_constants + 0
 18745 0000CF6B [0000000000000000] 
 18746 0000CF73 48890425[D1170000]      	mov qword [free_var_153], rax
 18747 0000CF7B 48B8-                   	mov rax, sob_void
 18747 0000CF7D [0000000000000000] 
 18748                                  
 18749 0000CF85 4889C7                  	mov rdi, rax
 18750 0000CF88 E894920000              	call print_sexpr_if_not_void
 18751                                  
 18752                                  	; preparing a non tail-call
 18753 0000CF8D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18754 0000CF92 E878910000              	call malloc
 18755 0000CF97 50                      	push rax
 18756 0000CF98 BF00000000              	mov rdi, 8 * 0	; new rib
 18757 0000CF9D E86D910000              	call malloc
 18758 0000CFA2 50                      	push rax
 18759 0000CFA3 BF08000000              	mov rdi, 8 * 1	; extended env
 18760 0000CFA8 E862910000              	call malloc
 18761 0000CFAD 488B7D10                	mov rdi, ENV
 18762 0000CFB1 BE00000000              	mov rsi, 0
 18763 0000CFB6 BA01000000              	mov rdx, 1
 18764                                  .L_lambda_simple_env_loop_0358:	; ext_env[i + 1] <-- env[i]
 18765 0000CFBB 4883FE00                	cmp rsi, 0
 18766 0000CFBF 7410                    	je .L_lambda_simple_env_end_0358
 18767 0000CFC1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18768 0000CFC5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18769 0000CFC9 48FFC6                  	inc rsi
 18770 0000CFCC 48FFC2                  	inc rdx
 18771 0000CFCF EBEA                    	jmp .L_lambda_simple_env_loop_0358
 18772                                  .L_lambda_simple_env_end_0358:
 18773 0000CFD1 5B                      	pop rbx
 18774 0000CFD2 BE00000000              	mov rsi, 0
 18775                                  .L_lambda_simple_params_loop_0358:	; copy params
 18776 0000CFD7 4883FE00                	cmp rsi, 0
 18777 0000CFDB 740E                    	je .L_lambda_simple_params_end_0358
 18778 0000CFDD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18779 0000CFE2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18780 0000CFE6 48FFC6                  	inc rsi
 18781 0000CFE9 EBEC                    	jmp .L_lambda_simple_params_loop_0358
 18782                                  .L_lambda_simple_params_end_0358:
 18783 0000CFEB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18784 0000CFEE 4889C3                  	mov rbx, rax
 18785 0000CFF1 58                      	pop rax
 18786 0000CFF2 C60004                  	mov byte [rax], T_closure
 18787 0000CFF5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18788 0000CFF9 48C74009[06D00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0358
 18789 0000D001 E9120D0000              	jmp .L_lambda_simple_end_0358
 18790                                  .L_lambda_simple_code_0358:	; lambda-simple body
 18791 0000D006 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18792 0000D00C 740B                    	je .L_lambda_simple_arity_check_ok_0358
 18793 0000D00E FF742410                	push qword [rsp + 8 * 2]
 18794 0000D012 6A02                    	push 2
 18795 0000D014 E9AF900000              	jmp L_error_incorrect_arity_simple
 18796                                  .L_lambda_simple_arity_check_ok_0358:
 18797 0000D019 C8000000                	enter 0, 0
 18798                                  	; preparing a tail-call
 18799 0000D01D 48B8-                   	mov rax, L_constants + 1881
 18799 0000D01F [5907000000000000] 
 18800 0000D027 50                      	push rax
 18801 0000D028 6A01                    	push 1	; arg count
 18802 0000D02A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18803 0000D02F E8DB900000              	call malloc
 18804 0000D034 50                      	push rax
 18805 0000D035 BF10000000              	mov rdi, 8 * 2	; new rib
 18806 0000D03A E8D0900000              	call malloc
 18807 0000D03F 50                      	push rax
 18808 0000D040 BF10000000              	mov rdi, 8 * 2	; extended env
 18809 0000D045 E8C5900000              	call malloc
 18810 0000D04A 488B7D10                	mov rdi, ENV
 18811 0000D04E BE00000000              	mov rsi, 0
 18812 0000D053 BA01000000              	mov rdx, 1
 18813                                  .L_lambda_simple_env_loop_0359:	; ext_env[i + 1] <-- env[i]
 18814 0000D058 4883FE01                	cmp rsi, 1
 18815 0000D05C 7410                    	je .L_lambda_simple_env_end_0359
 18816 0000D05E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18817 0000D062 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18818 0000D066 48FFC6                  	inc rsi
 18819 0000D069 48FFC2                  	inc rdx
 18820 0000D06C EBEA                    	jmp .L_lambda_simple_env_loop_0359
 18821                                  .L_lambda_simple_env_end_0359:
 18822 0000D06E 5B                      	pop rbx
 18823 0000D06F BE00000000              	mov rsi, 0
 18824                                  .L_lambda_simple_params_loop_0359:	; copy params
 18825 0000D074 4883FE02                	cmp rsi, 2
 18826 0000D078 740E                    	je .L_lambda_simple_params_end_0359
 18827 0000D07A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18828 0000D07F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18829 0000D083 48FFC6                  	inc rsi
 18830 0000D086 EBEC                    	jmp .L_lambda_simple_params_loop_0359
 18831                                  .L_lambda_simple_params_end_0359:
 18832 0000D088 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18833 0000D08B 4889C3                  	mov rbx, rax
 18834 0000D08E 58                      	pop rax
 18835 0000D08F C60004                  	mov byte [rax], T_closure
 18836 0000D092 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18837 0000D096 48C74009[A3D00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0359
 18838 0000D09E E92C0C0000              	jmp .L_lambda_simple_end_0359
 18839                                  .L_lambda_simple_code_0359:	; lambda-simple body
 18840 0000D0A3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18841 0000D0A9 740B                    	je .L_lambda_simple_arity_check_ok_0359
 18842 0000D0AB FF742410                	push qword [rsp + 8 * 2]
 18843 0000D0AF 6A01                    	push 1
 18844 0000D0B1 E912900000              	jmp L_error_incorrect_arity_simple
 18845                                  .L_lambda_simple_arity_check_ok_0359:
 18846 0000D0B6 C8000000                	enter 0, 0
 18847 0000D0BA BF08000000              	mov rdi, 8	; sob_box
 18848 0000D0BF E84B900000              	call malloc
 18849 0000D0C4 488B5D20                	mov rbx, PARAM(0)
 18850 0000D0C8 488918                  	mov [rax], rbx
 18851 0000D0CB 48894520                	mov PARAM(0), rax
 18852 0000D0CF 48B8-                   	mov rax, sob_void
 18852 0000D0D1 [0000000000000000] 
 18853                                  
 18854 0000D0D9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18855 0000D0DE E82C900000              	call malloc
 18856 0000D0E3 50                      	push rax
 18857 0000D0E4 BF08000000              	mov rdi, 8 * 1	; new rib
 18858 0000D0E9 E821900000              	call malloc
 18859 0000D0EE 50                      	push rax
 18860 0000D0EF BF18000000              	mov rdi, 8 * 3	; extended env
 18861 0000D0F4 E816900000              	call malloc
 18862 0000D0F9 488B7D10                	mov rdi, ENV
 18863 0000D0FD BE00000000              	mov rsi, 0
 18864 0000D102 BA01000000              	mov rdx, 1
 18865                                  .L_lambda_simple_env_loop_035a:	; ext_env[i + 1] <-- env[i]
 18866 0000D107 4883FE02                	cmp rsi, 2
 18867 0000D10B 7410                    	je .L_lambda_simple_env_end_035a
 18868 0000D10D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18869 0000D111 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18870 0000D115 48FFC6                  	inc rsi
 18871 0000D118 48FFC2                  	inc rdx
 18872 0000D11B EBEA                    	jmp .L_lambda_simple_env_loop_035a
 18873                                  .L_lambda_simple_env_end_035a:
 18874 0000D11D 5B                      	pop rbx
 18875 0000D11E BE00000000              	mov rsi, 0
 18876                                  .L_lambda_simple_params_loop_035a:	; copy params
 18877 0000D123 4883FE01                	cmp rsi, 1
 18878 0000D127 740E                    	je .L_lambda_simple_params_end_035a
 18879 0000D129 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18880 0000D12E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18881 0000D132 48FFC6                  	inc rsi
 18882 0000D135 EBEC                    	jmp .L_lambda_simple_params_loop_035a
 18883                                  .L_lambda_simple_params_end_035a:
 18884 0000D137 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18885 0000D13A 4889C3                  	mov rbx, rax
 18886 0000D13D 58                      	pop rax
 18887 0000D13E C60004                  	mov byte [rax], T_closure
 18888 0000D141 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18889 0000D145 48C74009[52D10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_035a
 18890 0000D14D E983020000              	jmp .L_lambda_simple_end_035a
 18891                                  .L_lambda_simple_code_035a:	; lambda-simple body
 18892 0000D152 48837C241005            	cmp qword [rsp + 8 * 2], 5
 18893 0000D158 740B                    	je .L_lambda_simple_arity_check_ok_035a
 18894 0000D15A FF742410                	push qword [rsp + 8 * 2]
 18895 0000D15E 6A05                    	push 5
 18896 0000D160 E9638F0000              	jmp L_error_incorrect_arity_simple
 18897                                  .L_lambda_simple_arity_check_ok_035a:
 18898 0000D165 C8000000                	enter 0, 0
 18899                                  	; preparing a non tail-call
 18900 0000D169 488B4530                	mov rax, PARAM(2)	; param len1
 18901 0000D16D 50                      	push rax
 18902 0000D16E 488B4520                	mov rax, PARAM(0)	; param i
 18903 0000D172 50                      	push rax
 18904 0000D173 6A02                    	push 2	; arg count
 18905 0000D175 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 18906 0000D17D 803805                  	cmp byte [rax], T_undefined
 18907 0000D180 0F845C8E0000            	je L_error_fvar_undefined
 18908 0000D186 803804                  	cmp byte [rax], T_closure
 18909 0000D189 0F85D78E0000            	jne L_error_non_closure
 18910 0000D18F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18911 0000D192 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18912 0000D195 483D[02000000]          	cmp rax, sob_boolean_false
 18913 0000D19B 742E                    	je .L_if_else_0271
 18914                                  	; preparing a non tail-call
 18915 0000D19D 488B4540                	mov rax, PARAM(4)	; param len2
 18916 0000D1A1 50                      	push rax
 18917 0000D1A2 488B4530                	mov rax, PARAM(2)	; param len1
 18918 0000D1A6 50                      	push rax
 18919 0000D1A7 6A02                    	push 2	; arg count
 18920 0000D1A9 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 18921 0000D1B1 803805                  	cmp byte [rax], T_undefined
 18922 0000D1B4 0F84288E0000            	je L_error_fvar_undefined
 18923 0000D1BA 803804                  	cmp byte [rax], T_closure
 18924 0000D1BD 0F85A38E0000            	jne L_error_non_closure
 18925 0000D1C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18926 0000D1C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18927 0000D1C9 EB0A                    	jmp .L_if_end_0271
 18928                                  .L_if_else_0271:
 18929 0000D1CB 48B8-                   	mov rax, L_constants + 2
 18929 0000D1CD [0200000000000000] 
 18930                                  .L_if_end_0271:
 18931 0000D1D5 483D[02000000]          	cmp rax, sob_boolean_false
 18932 0000D1DB 0F85F0010000            	jne .L_or_end_003a
 18933                                  	; preparing a non tail-call
 18934 0000D1E1 488B4530                	mov rax, PARAM(2)	; param len1
 18935 0000D1E5 50                      	push rax
 18936 0000D1E6 488B4520                	mov rax, PARAM(0)	; param i
 18937 0000D1EA 50                      	push rax
 18938 0000D1EB 6A02                    	push 2	; arg count
 18939 0000D1ED 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 18940 0000D1F5 803805                  	cmp byte [rax], T_undefined
 18941 0000D1F8 0F84E48D0000            	je L_error_fvar_undefined
 18942 0000D1FE 803804                  	cmp byte [rax], T_closure
 18943 0000D201 0F855F8E0000            	jne L_error_non_closure
 18944 0000D207 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18945 0000D20A FF5009                  	call SOB_CLOSURE_CODE(rax)
 18946 0000D20D 483D[02000000]          	cmp rax, sob_boolean_false
 18947 0000D213 0F84AE010000            	je .L_if_else_0272
 18948                                  	; preparing a non tail-call
 18949                                  	; preparing a non tail-call
 18950 0000D219 488B4520                	mov rax, PARAM(0)	; param i
 18951 0000D21D 50                      	push rax
 18952 0000D21E 488B4538                	mov rax, PARAM(3)	; param str2
 18953 0000D222 50                      	push rax
 18954 0000D223 6A02                    	push 2	; arg count
 18955 0000D225 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18956 0000D22D 803805                  	cmp byte [rax], T_undefined
 18957 0000D230 0F84AC8D0000            	je L_error_fvar_undefined
 18958 0000D236 803804                  	cmp byte [rax], T_closure
 18959 0000D239 0F85278E0000            	jne L_error_non_closure
 18960 0000D23F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18961 0000D242 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18962 0000D245 50                      	push rax
 18963                                  	; preparing a non tail-call
 18964 0000D246 488B4520                	mov rax, PARAM(0)	; param i
 18965 0000D24A 50                      	push rax
 18966 0000D24B 488B4528                	mov rax, PARAM(1)	; param str1
 18967 0000D24F 50                      	push rax
 18968 0000D250 6A02                    	push 2	; arg count
 18969 0000D252 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18970 0000D25A 803805                  	cmp byte [rax], T_undefined
 18971 0000D25D 0F847F8D0000            	je L_error_fvar_undefined
 18972 0000D263 803804                  	cmp byte [rax], T_closure
 18973 0000D266 0F85FA8D0000            	jne L_error_non_closure
 18974 0000D26C FF7001                  	push SOB_CLOSURE_ENV(rax)
 18975 0000D26F FF5009                  	call SOB_CLOSURE_CODE(rax)
 18976 0000D272 50                      	push rax
 18977 0000D273 6A02                    	push 2	; arg count
 18978 0000D275 488B4510                	mov rax, ENV
 18979 0000D279 488B4008                	mov rax, qword [rax + 8 * 1]
 18980 0000D27D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 18981 0000D280 803804                  	cmp byte [rax], T_closure
 18982 0000D283 0F85DD8D0000            	jne L_error_non_closure
 18983 0000D289 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18984 0000D28C FF5009                  	call SOB_CLOSURE_CODE(rax)
 18985 0000D28F 483D[02000000]          	cmp rax, sob_boolean_false
 18986 0000D295 0F852A010000            	jne .L_or_end_003b
 18987                                  	; preparing a non tail-call
 18988                                  	; preparing a non tail-call
 18989 0000D29B 488B4520                	mov rax, PARAM(0)	; param i
 18990 0000D29F 50                      	push rax
 18991 0000D2A0 488B4538                	mov rax, PARAM(3)	; param str2
 18992 0000D2A4 50                      	push rax
 18993 0000D2A5 6A02                    	push 2	; arg count
 18994 0000D2A7 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18995 0000D2AF 803805                  	cmp byte [rax], T_undefined
 18996 0000D2B2 0F842A8D0000            	je L_error_fvar_undefined
 18997 0000D2B8 803804                  	cmp byte [rax], T_closure
 18998 0000D2BB 0F85A58D0000            	jne L_error_non_closure
 18999 0000D2C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19000 0000D2C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19001 0000D2C7 50                      	push rax
 19002                                  	; preparing a non tail-call
 19003 0000D2C8 488B4520                	mov rax, PARAM(0)	; param i
 19004 0000D2CC 50                      	push rax
 19005 0000D2CD 488B4528                	mov rax, PARAM(1)	; param str1
 19006 0000D2D1 50                      	push rax
 19007 0000D2D2 6A02                    	push 2	; arg count
 19008 0000D2D4 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 19009 0000D2DC 803805                  	cmp byte [rax], T_undefined
 19010 0000D2DF 0F84FD8C0000            	je L_error_fvar_undefined
 19011 0000D2E5 803804                  	cmp byte [rax], T_closure
 19012 0000D2E8 0F85788D0000            	jne L_error_non_closure
 19013 0000D2EE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19014 0000D2F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19015 0000D2F4 50                      	push rax
 19016 0000D2F5 6A02                    	push 2	; arg count
 19017 0000D2F7 488B4510                	mov rax, ENV
 19018 0000D2FB 488B4008                	mov rax, qword [rax + 8 * 1]
 19019 0000D2FF 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 19020 0000D303 803804                  	cmp byte [rax], T_closure
 19021 0000D306 0F855A8D0000            	jne L_error_non_closure
 19022 0000D30C FF7001                  	push SOB_CLOSURE_ENV(rax)
 19023 0000D30F FF5009                  	call SOB_CLOSURE_CODE(rax)
 19024 0000D312 483D[02000000]          	cmp rax, sob_boolean_false
 19025 0000D318 0F849D000000            	je .L_if_else_0273
 19026                                  	; preparing a tail-call
 19027 0000D31E 488B4540                	mov rax, PARAM(4)	; param len2
 19028 0000D322 50                      	push rax
 19029 0000D323 488B4538                	mov rax, PARAM(3)	; param str2
 19030 0000D327 50                      	push rax
 19031 0000D328 488B4530                	mov rax, PARAM(2)	; param len1
 19032 0000D32C 50                      	push rax
 19033 0000D32D 488B4528                	mov rax, PARAM(1)	; param str1
 19034 0000D331 50                      	push rax
 19035                                  	; preparing a non tail-call
 19036 0000D332 48B8-                   	mov rax, L_constants + 2158
 19036 0000D334 [6E08000000000000] 
 19037 0000D33C 50                      	push rax
 19038 0000D33D 488B4520                	mov rax, PARAM(0)	; param i
 19039 0000D341 50                      	push rax
 19040 0000D342 6A02                    	push 2	; arg count
 19041 0000D344 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 19042 0000D34C 803805                  	cmp byte [rax], T_undefined
 19043 0000D34F 0F848D8C0000            	je L_error_fvar_undefined
 19044 0000D355 803804                  	cmp byte [rax], T_closure
 19045 0000D358 0F85088D0000            	jne L_error_non_closure
 19046 0000D35E FF7001                  	push SOB_CLOSURE_ENV(rax)
 19047 0000D361 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19048 0000D364 50                      	push rax
 19049 0000D365 6A05                    	push 5	; arg count
 19050 0000D367 488B4510                	mov rax, ENV
 19051 0000D36B 488B00                  	mov rax, qword [rax + 8 * 0]
 19052 0000D36E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19053 0000D371 488B00                  	mov rax, qword [rax]
 19054 0000D374 803804                  	cmp byte [rax], T_closure
 19055 0000D377 0F85E98C0000            	jne L_error_non_closure
 19056 0000D37D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19057                                  
 19058                                  	; recycling the current frame
 19059 0000D380 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19060 0000D383 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19061 0000D386 B909000000              	mov rcx, 5 + 4
 19062 0000D38B 488B5D18                	mov rbx, COUNT
 19063 0000D38F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19064 0000D394 488D55F8                	lea rdx, [rbp - 8 * 1]
 19065                                  .L_tc_recycle_frame_loop_0476:
 19066 0000D398 4883F900                	cmp rcx, 0
 19067 0000D39C 7413                    	je .L_tc_recycle_frame_done_0476
 19068 0000D39E 488B32                  	mov rsi, qword [rdx]
 19069 0000D3A1 488933                  	mov qword [rbx], rsi
 19070 0000D3A4 48FFC9                  	dec rcx
 19071 0000D3A7 4883EB08                	sub rbx, 8 * 1
 19072 0000D3AB 4883EA08                	sub rdx, 8 * 1
 19073 0000D3AF EBE7                    	jmp .L_tc_recycle_frame_loop_0476
 19074                                  .L_tc_recycle_frame_done_0476:
 19075 0000D3B1 488D6308                	lea rsp, [rbx + 8 * 1]
 19076 0000D3B5 5D                      	pop rbp	; the proc will restore it!
 19077 0000D3B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19078 0000D3B9 EB0A                    	jmp .L_if_end_0273
 19079                                  .L_if_else_0273:
 19080 0000D3BB 48B8-                   	mov rax, L_constants + 2
 19080 0000D3BD [0200000000000000] 
 19081                                  .L_if_end_0273:
 19082                                  .L_or_end_003b:
 19083 0000D3C5 EB0A                    	jmp .L_if_end_0272
 19084                                  .L_if_else_0272:
 19085 0000D3C7 48B8-                   	mov rax, L_constants + 2
 19085 0000D3C9 [0200000000000000] 
 19086                                  .L_if_end_0272:
 19087                                  .L_or_end_003a:
 19088 0000D3D1 C9                      	leave
 19089 0000D3D2 C23800                  	ret AND_KILL_FRAME(5)
 19090                                  .L_lambda_simple_end_035a:	; new closure is in rax
 19091 0000D3D5 50                      	push rax
 19092 0000D3D6 488B4520                	mov rax, PARAM(0)	; param run
 19093 0000D3DA 8F00                    	pop qword [rax]
 19094 0000D3DC 48B8-                   	mov rax, sob_void
 19094 0000D3DE [0000000000000000] 
 19095                                  
 19096                                  	; preparing a tail-call
 19097 0000D3E6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19098 0000D3EB E81F8D0000              	call malloc
 19099 0000D3F0 50                      	push rax
 19100 0000D3F1 BF08000000              	mov rdi, 8 * 1	; new rib
 19101 0000D3F6 E8148D0000              	call malloc
 19102 0000D3FB 50                      	push rax
 19103 0000D3FC BF18000000              	mov rdi, 8 * 3	; extended env
 19104 0000D401 E8098D0000              	call malloc
 19105 0000D406 488B7D10                	mov rdi, ENV
 19106 0000D40A BE00000000              	mov rsi, 0
 19107 0000D40F BA01000000              	mov rdx, 1
 19108                                  .L_lambda_simple_env_loop_035b:	; ext_env[i + 1] <-- env[i]
 19109 0000D414 4883FE02                	cmp rsi, 2
 19110 0000D418 7410                    	je .L_lambda_simple_env_end_035b
 19111 0000D41A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19112 0000D41E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19113 0000D422 48FFC6                  	inc rsi
 19114 0000D425 48FFC2                  	inc rdx
 19115 0000D428 EBEA                    	jmp .L_lambda_simple_env_loop_035b
 19116                                  .L_lambda_simple_env_end_035b:
 19117 0000D42A 5B                      	pop rbx
 19118 0000D42B BE00000000              	mov rsi, 0
 19119                                  .L_lambda_simple_params_loop_035b:	; copy params
 19120 0000D430 4883FE01                	cmp rsi, 1
 19121 0000D434 740E                    	je .L_lambda_simple_params_end_035b
 19122 0000D436 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19123 0000D43B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19124 0000D43F 48FFC6                  	inc rsi
 19125 0000D442 EBEC                    	jmp .L_lambda_simple_params_loop_035b
 19126                                  .L_lambda_simple_params_end_035b:
 19127 0000D444 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19128 0000D447 4889C3                  	mov rbx, rax
 19129 0000D44A 58                      	pop rax
 19130 0000D44B C60004                  	mov byte [rax], T_closure
 19131 0000D44E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19132 0000D452 48C74009[5FD40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_035b
 19133 0000D45A E985020000              	jmp .L_lambda_simple_end_035b
 19134                                  .L_lambda_simple_code_035b:	; lambda-simple body
 19135 0000D45F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19136 0000D465 740B                    	je .L_lambda_simple_arity_check_ok_035b
 19137 0000D467 FF742410                	push qword [rsp + 8 * 2]
 19138 0000D46B 6A02                    	push 2
 19139 0000D46D E9568C0000              	jmp L_error_incorrect_arity_simple
 19140                                  .L_lambda_simple_arity_check_ok_035b:
 19141 0000D472 C8000000                	enter 0, 0
 19142                                  	; preparing a tail-call
 19143                                  	; preparing a non tail-call
 19144 0000D476 488B4528                	mov rax, PARAM(1)	; param str2
 19145 0000D47A 50                      	push rax
 19146 0000D47B 6A01                    	push 1	; arg count
 19147 0000D47D 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 19148 0000D485 803805                  	cmp byte [rax], T_undefined
 19149 0000D488 0F84548B0000            	je L_error_fvar_undefined
 19150 0000D48E 803804                  	cmp byte [rax], T_closure
 19151 0000D491 0F85CF8B0000            	jne L_error_non_closure
 19152 0000D497 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19153 0000D49A FF5009                  	call SOB_CLOSURE_CODE(rax)
 19154 0000D49D 50                      	push rax
 19155                                  	; preparing a non tail-call
 19156 0000D49E 488B4520                	mov rax, PARAM(0)	; param str1
 19157 0000D4A2 50                      	push rax
 19158 0000D4A3 6A01                    	push 1	; arg count
 19159 0000D4A5 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 19160 0000D4AD 803805                  	cmp byte [rax], T_undefined
 19161 0000D4B0 0F842C8B0000            	je L_error_fvar_undefined
 19162 0000D4B6 803804                  	cmp byte [rax], T_closure
 19163 0000D4B9 0F85A78B0000            	jne L_error_non_closure
 19164 0000D4BF FF7001                  	push SOB_CLOSURE_ENV(rax)
 19165 0000D4C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19166 0000D4C5 50                      	push rax
 19167 0000D4C6 6A02                    	push 2	; arg count
 19168 0000D4C8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19169 0000D4CD E83D8C0000              	call malloc
 19170 0000D4D2 50                      	push rax
 19171 0000D4D3 BF10000000              	mov rdi, 8 * 2	; new rib
 19172 0000D4D8 E8328C0000              	call malloc
 19173 0000D4DD 50                      	push rax
 19174 0000D4DE BF20000000              	mov rdi, 8 * 4	; extended env
 19175 0000D4E3 E8278C0000              	call malloc
 19176 0000D4E8 488B7D10                	mov rdi, ENV
 19177 0000D4EC BE00000000              	mov rsi, 0
 19178 0000D4F1 BA01000000              	mov rdx, 1
 19179                                  .L_lambda_simple_env_loop_035c:	; ext_env[i + 1] <-- env[i]
 19180 0000D4F6 4883FE03                	cmp rsi, 3
 19181 0000D4FA 7410                    	je .L_lambda_simple_env_end_035c
 19182 0000D4FC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19183 0000D500 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19184 0000D504 48FFC6                  	inc rsi
 19185 0000D507 48FFC2                  	inc rdx
 19186 0000D50A EBEA                    	jmp .L_lambda_simple_env_loop_035c
 19187                                  .L_lambda_simple_env_end_035c:
 19188 0000D50C 5B                      	pop rbx
 19189 0000D50D BE00000000              	mov rsi, 0
 19190                                  .L_lambda_simple_params_loop_035c:	; copy params
 19191 0000D512 4883FE02                	cmp rsi, 2
 19192 0000D516 740E                    	je .L_lambda_simple_params_end_035c
 19193 0000D518 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19194 0000D51D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19195 0000D521 48FFC6                  	inc rsi
 19196 0000D524 EBEC                    	jmp .L_lambda_simple_params_loop_035c
 19197                                  .L_lambda_simple_params_end_035c:
 19198 0000D526 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19199 0000D529 4889C3                  	mov rbx, rax
 19200 0000D52C 58                      	pop rax
 19201 0000D52D C60004                  	mov byte [rax], T_closure
 19202 0000D530 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19203 0000D534 48C74009[41D50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_035c
 19204 0000D53C E95A010000              	jmp .L_lambda_simple_end_035c
 19205                                  .L_lambda_simple_code_035c:	; lambda-simple body
 19206 0000D541 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19207 0000D547 740B                    	je .L_lambda_simple_arity_check_ok_035c
 19208 0000D549 FF742410                	push qword [rsp + 8 * 2]
 19209 0000D54D 6A02                    	push 2
 19210 0000D54F E9748B0000              	jmp L_error_incorrect_arity_simple
 19211                                  .L_lambda_simple_arity_check_ok_035c:
 19212 0000D554 C8000000                	enter 0, 0
 19213                                  	; preparing a non tail-call
 19214 0000D558 488B4528                	mov rax, PARAM(1)	; param len2
 19215 0000D55C 50                      	push rax
 19216 0000D55D 488B4520                	mov rax, PARAM(0)	; param len1
 19217 0000D561 50                      	push rax
 19218 0000D562 6A02                    	push 2	; arg count
 19219 0000D564 488B0425[D3150000]      	mov rax, qword [free_var_123]	; free var <=
 19220 0000D56C 803805                  	cmp byte [rax], T_undefined
 19221 0000D56F 0F846D8A0000            	je L_error_fvar_undefined
 19222 0000D575 803804                  	cmp byte [rax], T_closure
 19223 0000D578 0F85E88A0000            	jne L_error_non_closure
 19224 0000D57E FF7001                  	push SOB_CLOSURE_ENV(rax)
 19225 0000D581 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19226 0000D584 483D[02000000]          	cmp rax, sob_boolean_false
 19227 0000D58A 0F8486000000            	je .L_if_else_0274
 19228                                  	; preparing a tail-call
 19229 0000D590 488B4528                	mov rax, PARAM(1)	; param len2
 19230 0000D594 50                      	push rax
 19231 0000D595 488B4510                	mov rax, ENV
 19232 0000D599 488B00                  	mov rax, qword [rax + 8 * 0]
 19233 0000D59C 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19234 0000D5A0 50                      	push rax
 19235 0000D5A1 488B4520                	mov rax, PARAM(0)	; param len1
 19236 0000D5A5 50                      	push rax
 19237 0000D5A6 488B4510                	mov rax, ENV
 19238 0000D5AA 488B00                  	mov rax, qword [rax + 8 * 0]
 19239 0000D5AD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19240 0000D5B0 50                      	push rax
 19241 0000D5B1 48B8-                   	mov rax, L_constants + 2023
 19241 0000D5B3 [E707000000000000] 
 19242 0000D5BB 50                      	push rax
 19243 0000D5BC 6A05                    	push 5	; arg count
 19244 0000D5BE 488B4510                	mov rax, ENV
 19245 0000D5C2 488B4008                	mov rax, qword [rax + 8 * 1]
 19246 0000D5C6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19247 0000D5C9 488B00                  	mov rax, qword [rax]
 19248 0000D5CC 803804                  	cmp byte [rax], T_closure
 19249 0000D5CF 0F85918A0000            	jne L_error_non_closure
 19250 0000D5D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19251                                  
 19252                                  	; recycling the current frame
 19253 0000D5D8 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19254 0000D5DB FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19255 0000D5DE B909000000              	mov rcx, 5 + 4
 19256 0000D5E3 488B5D18                	mov rbx, COUNT
 19257 0000D5E7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19258 0000D5EC 488D55F8                	lea rdx, [rbp - 8 * 1]
 19259                                  .L_tc_recycle_frame_loop_0477:
 19260 0000D5F0 4883F900                	cmp rcx, 0
 19261 0000D5F4 7413                    	je .L_tc_recycle_frame_done_0477
 19262 0000D5F6 488B32                  	mov rsi, qword [rdx]
 19263 0000D5F9 488933                  	mov qword [rbx], rsi
 19264 0000D5FC 48FFC9                  	dec rcx
 19265 0000D5FF 4883EB08                	sub rbx, 8 * 1
 19266 0000D603 4883EA08                	sub rdx, 8 * 1
 19267 0000D607 EBE7                    	jmp .L_tc_recycle_frame_loop_0477
 19268                                  .L_tc_recycle_frame_done_0477:
 19269 0000D609 488D6308                	lea rsp, [rbx + 8 * 1]
 19270 0000D60D 5D                      	pop rbp	; the proc will restore it!
 19271 0000D60E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19272 0000D611 E981000000              	jmp .L_if_end_0274
 19273                                  .L_if_else_0274:
 19274                                  	; preparing a tail-call
 19275 0000D616 488B4520                	mov rax, PARAM(0)	; param len1
 19276 0000D61A 50                      	push rax
 19277 0000D61B 488B4510                	mov rax, ENV
 19278 0000D61F 488B00                  	mov rax, qword [rax + 8 * 0]
 19279 0000D622 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19280 0000D625 50                      	push rax
 19281 0000D626 488B4528                	mov rax, PARAM(1)	; param len2
 19282 0000D62A 50                      	push rax
 19283 0000D62B 488B4510                	mov rax, ENV
 19284 0000D62F 488B00                  	mov rax, qword [rax + 8 * 0]
 19285 0000D632 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19286 0000D636 50                      	push rax
 19287 0000D637 48B8-                   	mov rax, L_constants + 2023
 19287 0000D639 [E707000000000000] 
 19288 0000D641 50                      	push rax
 19289 0000D642 6A05                    	push 5	; arg count
 19290 0000D644 488B4510                	mov rax, ENV
 19291 0000D648 488B4008                	mov rax, qword [rax + 8 * 1]
 19292 0000D64C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19293 0000D64F 488B00                  	mov rax, qword [rax]
 19294 0000D652 803804                  	cmp byte [rax], T_closure
 19295 0000D655 0F850B8A0000            	jne L_error_non_closure
 19296 0000D65B FF7001                  	push SOB_CLOSURE_ENV(rax)
 19297                                  
 19298                                  	; recycling the current frame
 19299 0000D65E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19300 0000D661 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19301 0000D664 B909000000              	mov rcx, 5 + 4
 19302 0000D669 488B5D18                	mov rbx, COUNT
 19303 0000D66D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19304 0000D672 488D55F8                	lea rdx, [rbp - 8 * 1]
 19305                                  .L_tc_recycle_frame_loop_0478:
 19306 0000D676 4883F900                	cmp rcx, 0
 19307 0000D67A 7413                    	je .L_tc_recycle_frame_done_0478
 19308 0000D67C 488B32                  	mov rsi, qword [rdx]
 19309 0000D67F 488933                  	mov qword [rbx], rsi
 19310 0000D682 48FFC9                  	dec rcx
 19311 0000D685 4883EB08                	sub rbx, 8 * 1
 19312 0000D689 4883EA08                	sub rdx, 8 * 1
 19313 0000D68D EBE7                    	jmp .L_tc_recycle_frame_loop_0478
 19314                                  .L_tc_recycle_frame_done_0478:
 19315 0000D68F 488D6308                	lea rsp, [rbx + 8 * 1]
 19316 0000D693 5D                      	pop rbp	; the proc will restore it!
 19317 0000D694 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19318                                  .L_if_end_0274:
 19319 0000D697 C9                      	leave
 19320 0000D698 C22000                  	ret AND_KILL_FRAME(2)
 19321                                  .L_lambda_simple_end_035c:	; new closure is in rax
 19322 0000D69B 803804                  	cmp byte [rax], T_closure
 19323 0000D69E 0F85C2890000            	jne L_error_non_closure
 19324 0000D6A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19325                                  
 19326                                  	; recycling the current frame
 19327 0000D6A7 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19328 0000D6AA FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19329 0000D6AD B906000000              	mov rcx, 2 + 4
 19330 0000D6B2 488B5D18                	mov rbx, COUNT
 19331 0000D6B6 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19332 0000D6BB 488D55F8                	lea rdx, [rbp - 8 * 1]
 19333                                  .L_tc_recycle_frame_loop_0479:
 19334 0000D6BF 4883F900                	cmp rcx, 0
 19335 0000D6C3 7413                    	je .L_tc_recycle_frame_done_0479
 19336 0000D6C5 488B32                  	mov rsi, qword [rdx]
 19337 0000D6C8 488933                  	mov qword [rbx], rsi
 19338 0000D6CB 48FFC9                  	dec rcx
 19339 0000D6CE 4883EB08                	sub rbx, 8 * 1
 19340 0000D6D2 4883EA08                	sub rdx, 8 * 1
 19341 0000D6D6 EBE7                    	jmp .L_tc_recycle_frame_loop_0479
 19342                                  .L_tc_recycle_frame_done_0479:
 19343 0000D6D8 488D6308                	lea rsp, [rbx + 8 * 1]
 19344 0000D6DC 5D                      	pop rbp	; the proc will restore it!
 19345 0000D6DD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19346 0000D6E0 C9                      	leave
 19347 0000D6E1 C22000                  	ret AND_KILL_FRAME(2)
 19348                                  .L_lambda_simple_end_035b:	; new closure is in rax
 19349 0000D6E4 50                      	push rax
 19350 0000D6E5 6A01                    	push 1	; arg count
 19351 0000D6E7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19352 0000D6EC E81E8A0000              	call malloc
 19353 0000D6F1 50                      	push rax
 19354 0000D6F2 BF08000000              	mov rdi, 8 * 1	; new rib
 19355 0000D6F7 E8138A0000              	call malloc
 19356 0000D6FC 50                      	push rax
 19357 0000D6FD BF18000000              	mov rdi, 8 * 3	; extended env
 19358 0000D702 E8088A0000              	call malloc
 19359 0000D707 488B7D10                	mov rdi, ENV
 19360 0000D70B BE00000000              	mov rsi, 0
 19361 0000D710 BA01000000              	mov rdx, 1
 19362                                  .L_lambda_simple_env_loop_035d:	; ext_env[i + 1] <-- env[i]
 19363 0000D715 4883FE02                	cmp rsi, 2
 19364 0000D719 7410                    	je .L_lambda_simple_env_end_035d
 19365 0000D71B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19366 0000D71F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19367 0000D723 48FFC6                  	inc rsi
 19368 0000D726 48FFC2                  	inc rdx
 19369 0000D729 EBEA                    	jmp .L_lambda_simple_env_loop_035d
 19370                                  .L_lambda_simple_env_end_035d:
 19371 0000D72B 5B                      	pop rbx
 19372 0000D72C BE00000000              	mov rsi, 0
 19373                                  .L_lambda_simple_params_loop_035d:	; copy params
 19374 0000D731 4883FE01                	cmp rsi, 1
 19375 0000D735 740E                    	je .L_lambda_simple_params_end_035d
 19376 0000D737 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19377 0000D73C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19378 0000D740 48FFC6                  	inc rsi
 19379 0000D743 EBEC                    	jmp .L_lambda_simple_params_loop_035d
 19380                                  .L_lambda_simple_params_end_035d:
 19381 0000D745 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19382 0000D748 4889C3                  	mov rbx, rax
 19383 0000D74B 58                      	pop rax
 19384 0000D74C C60004                  	mov byte [rax], T_closure
 19385 0000D74F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19386 0000D753 48C74009[60D70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_035d
 19387 0000D75B E926050000              	jmp .L_lambda_simple_end_035d
 19388                                  .L_lambda_simple_code_035d:	; lambda-simple body
 19389 0000D760 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19390 0000D766 740B                    	je .L_lambda_simple_arity_check_ok_035d
 19391 0000D768 FF742410                	push qword [rsp + 8 * 2]
 19392 0000D76C 6A01                    	push 1
 19393 0000D76E E955890000              	jmp L_error_incorrect_arity_simple
 19394                                  .L_lambda_simple_arity_check_ok_035d:
 19395 0000D773 C8000000                	enter 0, 0
 19396                                  	; preparing a tail-call
 19397 0000D777 48B8-                   	mov rax, L_constants + 1881
 19397 0000D779 [5907000000000000] 
 19398 0000D781 50                      	push rax
 19399 0000D782 6A01                    	push 1	; arg count
 19400 0000D784 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19401 0000D789 E881890000              	call malloc
 19402 0000D78E 50                      	push rax
 19403 0000D78F BF08000000              	mov rdi, 8 * 1	; new rib
 19404 0000D794 E876890000              	call malloc
 19405 0000D799 50                      	push rax
 19406 0000D79A BF20000000              	mov rdi, 8 * 4	; extended env
 19407 0000D79F E86B890000              	call malloc
 19408 0000D7A4 488B7D10                	mov rdi, ENV
 19409 0000D7A8 BE00000000              	mov rsi, 0
 19410 0000D7AD BA01000000              	mov rdx, 1
 19411                                  .L_lambda_simple_env_loop_035e:	; ext_env[i + 1] <-- env[i]
 19412 0000D7B2 4883FE03                	cmp rsi, 3
 19413 0000D7B6 7410                    	je .L_lambda_simple_env_end_035e
 19414 0000D7B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19415 0000D7BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19416 0000D7C0 48FFC6                  	inc rsi
 19417 0000D7C3 48FFC2                  	inc rdx
 19418 0000D7C6 EBEA                    	jmp .L_lambda_simple_env_loop_035e
 19419                                  .L_lambda_simple_env_end_035e:
 19420 0000D7C8 5B                      	pop rbx
 19421 0000D7C9 BE00000000              	mov rsi, 0
 19422                                  .L_lambda_simple_params_loop_035e:	; copy params
 19423 0000D7CE 4883FE01                	cmp rsi, 1
 19424 0000D7D2 740E                    	je .L_lambda_simple_params_end_035e
 19425 0000D7D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19426 0000D7D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19427 0000D7DD 48FFC6                  	inc rsi
 19428 0000D7E0 EBEC                    	jmp .L_lambda_simple_params_loop_035e
 19429                                  .L_lambda_simple_params_end_035e:
 19430 0000D7E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19431 0000D7E5 4889C3                  	mov rbx, rax
 19432 0000D7E8 58                      	pop rax
 19433 0000D7E9 C60004                  	mov byte [rax], T_closure
 19434 0000D7EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19435 0000D7F0 48C74009[FDD70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_035e
 19436 0000D7F8 E940040000              	jmp .L_lambda_simple_end_035e
 19437                                  .L_lambda_simple_code_035e:	; lambda-simple body
 19438 0000D7FD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19439 0000D803 740B                    	je .L_lambda_simple_arity_check_ok_035e
 19440 0000D805 FF742410                	push qword [rsp + 8 * 2]
 19441 0000D809 6A01                    	push 1
 19442 0000D80B E9B8880000              	jmp L_error_incorrect_arity_simple
 19443                                  .L_lambda_simple_arity_check_ok_035e:
 19444 0000D810 C8000000                	enter 0, 0
 19445 0000D814 BF08000000              	mov rdi, 8	; sob_box
 19446 0000D819 E8F1880000              	call malloc
 19447 0000D81E 488B5D20                	mov rbx, PARAM(0)
 19448 0000D822 488918                  	mov [rax], rbx
 19449 0000D825 48894520                	mov PARAM(0), rax
 19450 0000D829 48B8-                   	mov rax, sob_void
 19450 0000D82B [0000000000000000] 
 19451                                  
 19452 0000D833 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19453 0000D838 E8D2880000              	call malloc
 19454 0000D83D 50                      	push rax
 19455 0000D83E BF08000000              	mov rdi, 8 * 1	; new rib
 19456 0000D843 E8C7880000              	call malloc
 19457 0000D848 50                      	push rax
 19458 0000D849 BF28000000              	mov rdi, 8 * 5	; extended env
 19459 0000D84E E8BC880000              	call malloc
 19460 0000D853 488B7D10                	mov rdi, ENV
 19461 0000D857 BE00000000              	mov rsi, 0
 19462 0000D85C BA01000000              	mov rdx, 1
 19463                                  .L_lambda_simple_env_loop_035f:	; ext_env[i + 1] <-- env[i]
 19464 0000D861 4883FE04                	cmp rsi, 4
 19465 0000D865 7410                    	je .L_lambda_simple_env_end_035f
 19466 0000D867 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19467 0000D86B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19468 0000D86F 48FFC6                  	inc rsi
 19469 0000D872 48FFC2                  	inc rdx
 19470 0000D875 EBEA                    	jmp .L_lambda_simple_env_loop_035f
 19471                                  .L_lambda_simple_env_end_035f:
 19472 0000D877 5B                      	pop rbx
 19473 0000D878 BE00000000              	mov rsi, 0
 19474                                  .L_lambda_simple_params_loop_035f:	; copy params
 19475 0000D87D 4883FE01                	cmp rsi, 1
 19476 0000D881 740E                    	je .L_lambda_simple_params_end_035f
 19477 0000D883 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19478 0000D888 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19479 0000D88C 48FFC6                  	inc rsi
 19480 0000D88F EBEC                    	jmp .L_lambda_simple_params_loop_035f
 19481                                  .L_lambda_simple_params_end_035f:
 19482 0000D891 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19483 0000D894 4889C3                  	mov rbx, rax
 19484 0000D897 58                      	pop rax
 19485 0000D898 C60004                  	mov byte [rax], T_closure
 19486 0000D89B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19487 0000D89F 48C74009[ACD80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_035f
 19488 0000D8A7 E953010000              	jmp .L_lambda_simple_end_035f
 19489                                  .L_lambda_simple_code_035f:	; lambda-simple body
 19490 0000D8AC 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19491 0000D8B2 740B                    	je .L_lambda_simple_arity_check_ok_035f
 19492 0000D8B4 FF742410                	push qword [rsp + 8 * 2]
 19493 0000D8B8 6A02                    	push 2
 19494 0000D8BA E909880000              	jmp L_error_incorrect_arity_simple
 19495                                  .L_lambda_simple_arity_check_ok_035f:
 19496 0000D8BF C8000000                	enter 0, 0
 19497                                  	; preparing a non tail-call
 19498 0000D8C3 488B4528                	mov rax, PARAM(1)	; param strs
 19499 0000D8C7 50                      	push rax
 19500 0000D8C8 6A01                    	push 1	; arg count
 19501 0000D8CA 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 19502 0000D8D2 803805                  	cmp byte [rax], T_undefined
 19503 0000D8D5 0F8407870000            	je L_error_fvar_undefined
 19504 0000D8DB 803804                  	cmp byte [rax], T_closure
 19505 0000D8DE 0F8582870000            	jne L_error_non_closure
 19506 0000D8E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19507 0000D8E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19508 0000D8EA 483D[02000000]          	cmp rax, sob_boolean_false
 19509 0000D8F0 0F8505010000            	jne .L_or_end_003c
 19510                                  	; preparing a non tail-call
 19511                                  	; preparing a non tail-call
 19512 0000D8F6 488B4528                	mov rax, PARAM(1)	; param strs
 19513 0000D8FA 50                      	push rax
 19514 0000D8FB 6A01                    	push 1	; arg count
 19515 0000D8FD 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 19516 0000D905 803805                  	cmp byte [rax], T_undefined
 19517 0000D908 0F84D4860000            	je L_error_fvar_undefined
 19518 0000D90E 803804                  	cmp byte [rax], T_closure
 19519 0000D911 0F854F870000            	jne L_error_non_closure
 19520 0000D917 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19521 0000D91A FF5009                  	call SOB_CLOSURE_CODE(rax)
 19522 0000D91D 50                      	push rax
 19523 0000D91E 488B4520                	mov rax, PARAM(0)	; param str
 19524 0000D922 50                      	push rax
 19525 0000D923 6A02                    	push 2	; arg count
 19526 0000D925 488B4510                	mov rax, ENV
 19527 0000D929 488B4008                	mov rax, qword [rax + 8 * 1]
 19528 0000D92D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<?
 19529 0000D930 803804                  	cmp byte [rax], T_closure
 19530 0000D933 0F852D870000            	jne L_error_non_closure
 19531 0000D939 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19532 0000D93C FF5009                  	call SOB_CLOSURE_CODE(rax)
 19533 0000D93F 483D[02000000]          	cmp rax, sob_boolean_false
 19534 0000D945 0F84A6000000            	je .L_if_else_0275
 19535                                  	; preparing a tail-call
 19536                                  	; preparing a non tail-call
 19537 0000D94B 488B4528                	mov rax, PARAM(1)	; param strs
 19538 0000D94F 50                      	push rax
 19539 0000D950 6A01                    	push 1	; arg count
 19540 0000D952 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 19541 0000D95A 803805                  	cmp byte [rax], T_undefined
 19542 0000D95D 0F847F860000            	je L_error_fvar_undefined
 19543 0000D963 803804                  	cmp byte [rax], T_closure
 19544 0000D966 0F85FA860000            	jne L_error_non_closure
 19545 0000D96C FF7001                  	push SOB_CLOSURE_ENV(rax)
 19546 0000D96F FF5009                  	call SOB_CLOSURE_CODE(rax)
 19547 0000D972 50                      	push rax
 19548                                  	; preparing a non tail-call
 19549 0000D973 488B4528                	mov rax, PARAM(1)	; param strs
 19550 0000D977 50                      	push rax
 19551 0000D978 6A01                    	push 1	; arg count
 19552 0000D97A 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 19553 0000D982 803805                  	cmp byte [rax], T_undefined
 19554 0000D985 0F8457860000            	je L_error_fvar_undefined
 19555 0000D98B 803804                  	cmp byte [rax], T_closure
 19556 0000D98E 0F85D2860000            	jne L_error_non_closure
 19557 0000D994 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19558 0000D997 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19559 0000D99A 50                      	push rax
 19560 0000D99B 6A02                    	push 2	; arg count
 19561 0000D99D 488B4510                	mov rax, ENV
 19562 0000D9A1 488B00                  	mov rax, qword [rax + 8 * 0]
 19563 0000D9A4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19564 0000D9A7 488B00                  	mov rax, qword [rax]
 19565 0000D9AA 803804                  	cmp byte [rax], T_closure
 19566 0000D9AD 0F85B3860000            	jne L_error_non_closure
 19567 0000D9B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19568                                  
 19569                                  	; recycling the current frame
 19570 0000D9B6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19571 0000D9B9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19572 0000D9BC B906000000              	mov rcx, 2 + 4
 19573 0000D9C1 488B5D18                	mov rbx, COUNT
 19574 0000D9C5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19575 0000D9CA 488D55F8                	lea rdx, [rbp - 8 * 1]
 19576                                  .L_tc_recycle_frame_loop_047a:
 19577 0000D9CE 4883F900                	cmp rcx, 0
 19578 0000D9D2 7413                    	je .L_tc_recycle_frame_done_047a
 19579 0000D9D4 488B32                  	mov rsi, qword [rdx]
 19580 0000D9D7 488933                  	mov qword [rbx], rsi
 19581 0000D9DA 48FFC9                  	dec rcx
 19582 0000D9DD 4883EB08                	sub rbx, 8 * 1
 19583 0000D9E1 4883EA08                	sub rdx, 8 * 1
 19584 0000D9E5 EBE7                    	jmp .L_tc_recycle_frame_loop_047a
 19585                                  .L_tc_recycle_frame_done_047a:
 19586 0000D9E7 488D6308                	lea rsp, [rbx + 8 * 1]
 19587 0000D9EB 5D                      	pop rbp	; the proc will restore it!
 19588 0000D9EC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19589 0000D9EF EB0A                    	jmp .L_if_end_0275
 19590                                  .L_if_else_0275:
 19591 0000D9F1 48B8-                   	mov rax, L_constants + 2
 19591 0000D9F3 [0200000000000000] 
 19592                                  .L_if_end_0275:
 19593                                  .L_or_end_003c:
 19594 0000D9FB C9                      	leave
 19595 0000D9FC C22000                  	ret AND_KILL_FRAME(2)
 19596                                  .L_lambda_simple_end_035f:	; new closure is in rax
 19597 0000D9FF 50                      	push rax
 19598 0000DA00 488B4520                	mov rax, PARAM(0)	; param run
 19599 0000DA04 8F00                    	pop qword [rax]
 19600 0000DA06 48B8-                   	mov rax, sob_void
 19600 0000DA08 [0000000000000000] 
 19601                                  
 19602 0000DA10 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19603 0000DA15 E8F5860000              	call malloc
 19604 0000DA1A 50                      	push rax
 19605 0000DA1B BF08000000              	mov rdi, 8 * 1	; new rib
 19606 0000DA20 E8EA860000              	call malloc
 19607 0000DA25 50                      	push rax
 19608 0000DA26 BF28000000              	mov rdi, 8 * 5	; extended env
 19609 0000DA2B E8DF860000              	call malloc
 19610 0000DA30 488B7D10                	mov rdi, ENV
 19611 0000DA34 BE00000000              	mov rsi, 0
 19612 0000DA39 BA01000000              	mov rdx, 1
 19613                                  .L_lambda_opt_env_loop_0076:	; ext_env[i + 1] <-- env[i]
 19614 0000DA3E 4883FE04                	cmp rsi, 4
 19615 0000DA42 7410                    	je .L_lambda_opt_env_end_0076
 19616 0000DA44 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19617 0000DA48 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19618 0000DA4C 48FFC6                  	inc rsi
 19619 0000DA4F 48FFC2                  	inc rdx
 19620 0000DA52 EBEA                    	jmp .L_lambda_opt_env_loop_0076
 19621                                  .L_lambda_opt_env_end_0076:
 19622 0000DA54 5B                      	pop rbx
 19623 0000DA55 BE00000000              	mov rsi, 0
 19624                                  .L_lambda_opt_params_loop_0076:	; copy params
 19625 0000DA5A 4883FE01                	cmp rsi, 1
 19626 0000DA5E 740E                    	je .L_lambda_opt_params_end_0076
 19627 0000DA60 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19628 0000DA65 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19629 0000DA69 48FFC6                  	inc rsi
 19630 0000DA6C EBEC                    	jmp .L_lambda_opt_params_loop_0076
 19631                                  .L_lambda_opt_params_end_0076:
 19632 0000DA6E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19633 0000DA71 4889C3                  	mov rbx, rax
 19634 0000DA74 58                      	pop rax
 19635 0000DA75 C60004                  	mov byte [rax], T_closure
 19636 0000DA78 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19637 0000DA7C 48C74009[89DA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0076
 19638 0000DA84 E9B0010000              	jmp .L_lambda_opt_end_0076
 19639                                  .L_lambda_opt_code_0076:	; lambda-opt body
 19640 0000DA89 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19641 0000DA8F 0F8404010000            	je .L_lambda_opt_arity_check_exact_0076
 19642 0000DA95 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19643 0000DA9B 7F0B                    	jg .L_lambda_opt_arity_check_more_0076
 19644 0000DA9D FF742410                	push qword [rsp + 8 * 2]
 19645 0000DAA1 6A01                    	push 1
 19646 0000DAA3 E934860000              	jmp L_error_incorrect_arity_opt
 19647                                  .L_lambda_opt_arity_check_more_0076:
 19648 0000DAA8 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 19649 0000DAAD 41B901000000            	mov r9 , 1
 19650 0000DAB3 4989E7                  	mov r15, rsp
 19651 0000DAB6 4D29C8                  	sub r8, r9
 19652 0000DAB9 41B900000000            	mov r9, 0
 19653 0000DABF 498D5F10                	lea rbx, [r15 + 8 * 2]
 19654 0000DAC3 498B4710                	mov rax, qword [r15 + 8 * 2]
 19655 0000DAC7 486BC008                	imul rax, 8
 19656 0000DACB 4801C3                  	add rbx, rax
 19657 0000DACE 488B13                  	mov rdx , qword [rbx]
 19658 0000DAD1 4989DA                  	mov r10 , rbx
 19659 0000DAD4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 19660 0000DAD9 52                      	push rdx
 19661 0000DADA 53                      	push rbx
 19662 0000DADB 4150                    	push r8
 19663 0000DADD 4151                    	push r9
 19664 0000DADF 4152                    	push r10
 19665 0000DAE1 4157                    	push r15
 19666 0000DAE3 E827860000              	call malloc
 19667 0000DAE8 415F                    	pop r15
 19668 0000DAEA 415A                    	pop r10
 19669 0000DAEC 4159                    	pop r9
 19670 0000DAEE 4158                    	pop r8
 19671 0000DAF0 5B                      	pop rbx
 19672 0000DAF1 5A                      	pop rdx
 19673 0000DAF2 C60021                  	mov byte qword [rax], T_pair
 19674 0000DAF5 48895001                	mov SOB_PAIR_CAR(rax), rdx
 19675 0000DAF9 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 19676 0000DB01 498902                  	mov qword [r10], rax
 19677 0000DB04 49FFC1                  	inc r9
 19678 0000DB07 4883EB08                	sub rbx, 8
 19679 0000DB0B 4D39C1                  	cmp r9, r8
 19680 0000DB0E 743E                    	je .L_lambda_opt_stack_shrink_loop_024c
 19681                                  .L_lambda_opt_stack_shrink_loop_024b:
 19682 0000DB10 488B13                  	mov rdx, qword [rbx]
 19683 0000DB13 53                      	push rbx
 19684 0000DB14 4150                    	push r8
 19685 0000DB16 4151                    	push r9
 19686 0000DB18 4152                    	push r10
 19687 0000DB1A 4157                    	push r15
 19688 0000DB1C 52                      	push rdx
 19689 0000DB1D BF11000000              	mov rdi, (1 + 8 + 8)
 19690 0000DB22 E8E8850000              	call malloc
 19691 0000DB27 5A                      	pop rdx
 19692 0000DB28 415F                    	pop r15
 19693 0000DB2A 415A                    	pop r10
 19694 0000DB2C 4159                    	pop r9
 19695 0000DB2E 4158                    	pop r8
 19696 0000DB30 5B                      	pop rbx
 19697 0000DB31 C60021                  	mov byte [rax], T_pair
 19698 0000DB34 48895001                	mov SOB_PAIR_CAR(rax), rdx
 19699 0000DB38 4D8B32                  	mov r14, qword [r10]
 19700 0000DB3B 4C897009                	mov SOB_PAIR_CDR(rax), r14
 19701 0000DB3F 498902                  	mov qword [r10], rax
 19702 0000DB42 49FFC1                  	inc r9
 19703 0000DB45 4883EB08                	sub rbx, 8
 19704 0000DB49 4D39C1                  	cmp r9, r8
 19705 0000DB4C 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_024b
 19706                                  .L_lambda_opt_stack_shrink_loop_024c:
 19707 0000DB4E 498D5710                	lea rdx, [r15 + 8 * 2]
 19708 0000DB52 48C70201000000          	mov qword [rdx], 1
 19709 0000DB59 48830201                	add qword [rdx] , 1
 19710 0000DB5D 4D89C1                  	mov r9, r8
 19711 0000DB60 49FFC9                  	dec r9
 19712 0000DB63 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 19713                                  .L_lambda_opt_stack_shrink_loop_024d:
 19714 0000DB67 488B03                  	mov rax, qword [rbx]
 19715 0000DB6A 498901                  	mov qword [r9], rax
 19716 0000DB6D 4983E908                	sub r9 , 8
 19717 0000DB71 4883EB08                	sub rbx, 8
 19718 0000DB75 4C39FB                  	cmp rbx, r15
 19719 0000DB78 75ED                    	jne .L_lambda_opt_stack_shrink_loop_024d
 19720 0000DB7A 488B03                  	mov rax, qword [rbx]
 19721 0000DB7D 498901                  	mov qword [r9], rax
 19722 0000DB80 4D89C1                  	mov r9, r8
 19723 0000DB83 4983E901                	sub r9 , 1
 19724 0000DB87 4983F900                	cmp r9, 0
 19725 0000DB8B 7446                    je .L_lambda_opt_stack_adjusted_0076
 19726                                  .L_lambda_opt_stack_shrink_loop_024e:
 19727 0000DB8D 58                      	pop rax
 19728 0000DB8E 49FFC9                  	dec r9
 19729 0000DB91 4983F900                	cmp r9, 0
 19730 0000DB95 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_024e
 19731 0000DB97 EB3A                    jmp .L_lambda_opt_stack_adjusted_0076
 19732                                  .L_lambda_opt_arity_check_exact_0076:
 19733 0000DB99 4989E7                  	mov r15, rsp
 19734 0000DB9C 498D5F18                	lea rbx, [r15 + 8 * 2 + 8 * 1]
 19735 0000DBA0 488B0B                  	mov rcx, qword [rbx]
 19736 0000DBA3 48C703[01000000]        	mov qword [rbx], sob_nil
 19737 0000DBAA 4883EB08                	sub rbx, 8
 19738                                  .L_lambda_opt_stack_shrink_loop_024a:
 19739 0000DBAE 488B13                  	mov rdx, qword [rbx]
 19740 0000DBB1 48890B                  	mov qword [rbx], rcx
 19741 0000DBB4 4C39FB                  	cmp rbx, r15
 19742 0000DBB7 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0076
 19743 0000DBB9 4889D1                  	mov rcx, rdx
 19744 0000DBBC 4883EB08                	sub rbx, 8
 19745 0000DBC0 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_024a
 19746                                  .L_lambda_opt_stack_shrink_loop_exit_0076:
 19747 0000DBC2 52                      	push rdx
 19748 0000DBC3 4989E7                  	mov r15, rsp
 19749 0000DBC6 4983C710                	add r15, 16
 19750 0000DBCA 498B1F                  	mov rbx, qword [r15]
 19751 0000DBCD 48FFC3                  	inc rbx
 19752 0000DBD0 49891F                  	mov qword [r15], rbx
 19753                                  .L_lambda_opt_stack_adjusted_0076:
 19754 0000DBD3 C8000000                	enter 0, 0
 19755                                  	; preparing a tail-call
 19756 0000DBD7 488B4528                	mov rax, PARAM(1)	; param strs
 19757 0000DBDB 50                      	push rax
 19758 0000DBDC 488B4520                	mov rax, PARAM(0)	; param str
 19759 0000DBE0 50                      	push rax
 19760 0000DBE1 6A02                    	push 2	; arg count
 19761 0000DBE3 488B4510                	mov rax, ENV
 19762 0000DBE7 488B00                  	mov rax, qword [rax + 8 * 0]
 19763 0000DBEA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19764 0000DBED 488B00                  	mov rax, qword [rax]
 19765 0000DBF0 803804                  	cmp byte [rax], T_closure
 19766 0000DBF3 0F856D840000            	jne L_error_non_closure
 19767 0000DBF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19768                                  
 19769                                  	; recycling the current frame
 19770 0000DBFC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19771 0000DBFF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19772 0000DC02 B906000000              	mov rcx, 2 + 4
 19773 0000DC07 488B5D18                	mov rbx, COUNT
 19774 0000DC0B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19775 0000DC10 488D55F8                	lea rdx, [rbp - 8 * 1]
 19776                                  .L_tc_recycle_frame_loop_047b:
 19777 0000DC14 4883F900                	cmp rcx, 0
 19778 0000DC18 7413                    	je .L_tc_recycle_frame_done_047b
 19779 0000DC1A 488B32                  	mov rsi, qword [rdx]
 19780 0000DC1D 488933                  	mov qword [rbx], rsi
 19781 0000DC20 48FFC9                  	dec rcx
 19782 0000DC23 4883EB08                	sub rbx, 8 * 1
 19783 0000DC27 4883EA08                	sub rdx, 8 * 1
 19784 0000DC2B EBE7                    	jmp .L_tc_recycle_frame_loop_047b
 19785                                  .L_tc_recycle_frame_done_047b:
 19786 0000DC2D 488D6308                	lea rsp, [rbx + 8 * 1]
 19787 0000DC31 5D                      	pop rbp	; the proc will restore it!
 19788 0000DC32 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19789 0000DC35 C9                      	leave
 19790 0000DC36 C22000                  	ret AND_KILL_FRAME(2)
 19791                                  .L_lambda_opt_end_0076:	; new closure is in rax
 19792 0000DC39 C9                      	leave
 19793 0000DC3A C21800                  	ret AND_KILL_FRAME(1)
 19794                                  .L_lambda_simple_end_035e:	; new closure is in rax
 19795 0000DC3D 803804                  	cmp byte [rax], T_closure
 19796 0000DC40 0F8520840000            	jne L_error_non_closure
 19797 0000DC46 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19798                                  
 19799                                  	; recycling the current frame
 19800 0000DC49 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19801 0000DC4C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19802 0000DC4F B905000000              	mov rcx, 1 + 4
 19803 0000DC54 488B5D18                	mov rbx, COUNT
 19804 0000DC58 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19805 0000DC5D 488D55F8                	lea rdx, [rbp - 8 * 1]
 19806                                  .L_tc_recycle_frame_loop_047c:
 19807 0000DC61 4883F900                	cmp rcx, 0
 19808 0000DC65 7413                    	je .L_tc_recycle_frame_done_047c
 19809 0000DC67 488B32                  	mov rsi, qword [rdx]
 19810 0000DC6A 488933                  	mov qword [rbx], rsi
 19811 0000DC6D 48FFC9                  	dec rcx
 19812 0000DC70 4883EB08                	sub rbx, 8 * 1
 19813 0000DC74 4883EA08                	sub rdx, 8 * 1
 19814 0000DC78 EBE7                    	jmp .L_tc_recycle_frame_loop_047c
 19815                                  .L_tc_recycle_frame_done_047c:
 19816 0000DC7A 488D6308                	lea rsp, [rbx + 8 * 1]
 19817 0000DC7E 5D                      	pop rbp	; the proc will restore it!
 19818 0000DC7F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19819 0000DC82 C9                      	leave
 19820 0000DC83 C21800                  	ret AND_KILL_FRAME(1)
 19821                                  .L_lambda_simple_end_035d:	; new closure is in rax
 19822 0000DC86 803804                  	cmp byte [rax], T_closure
 19823 0000DC89 0F85D7830000            	jne L_error_non_closure
 19824 0000DC8F FF7001                  	push SOB_CLOSURE_ENV(rax)
 19825                                  
 19826                                  	; recycling the current frame
 19827 0000DC92 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19828 0000DC95 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19829 0000DC98 B905000000              	mov rcx, 1 + 4
 19830 0000DC9D 488B5D18                	mov rbx, COUNT
 19831 0000DCA1 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19832 0000DCA6 488D55F8                	lea rdx, [rbp - 8 * 1]
 19833                                  .L_tc_recycle_frame_loop_047d:
 19834 0000DCAA 4883F900                	cmp rcx, 0
 19835 0000DCAE 7413                    	je .L_tc_recycle_frame_done_047d
 19836 0000DCB0 488B32                  	mov rsi, qword [rdx]
 19837 0000DCB3 488933                  	mov qword [rbx], rsi
 19838 0000DCB6 48FFC9                  	dec rcx
 19839 0000DCB9 4883EB08                	sub rbx, 8 * 1
 19840 0000DCBD 4883EA08                	sub rdx, 8 * 1
 19841 0000DCC1 EBE7                    	jmp .L_tc_recycle_frame_loop_047d
 19842                                  .L_tc_recycle_frame_done_047d:
 19843 0000DCC3 488D6308                	lea rsp, [rbx + 8 * 1]
 19844 0000DCC7 5D                      	pop rbp	; the proc will restore it!
 19845 0000DCC8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19846 0000DCCB C9                      	leave
 19847 0000DCCC C21800                  	ret AND_KILL_FRAME(1)
 19848                                  .L_lambda_simple_end_0359:	; new closure is in rax
 19849 0000DCCF 803804                  	cmp byte [rax], T_closure
 19850 0000DCD2 0F858E830000            	jne L_error_non_closure
 19851 0000DCD8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19852                                  
 19853                                  	; recycling the current frame
 19854 0000DCDB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19855 0000DCDE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19856 0000DCE1 B905000000              	mov rcx, 1 + 4
 19857 0000DCE6 488B5D18                	mov rbx, COUNT
 19858 0000DCEA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19859 0000DCEF 488D55F8                	lea rdx, [rbp - 8 * 1]
 19860                                  .L_tc_recycle_frame_loop_047e:
 19861 0000DCF3 4883F900                	cmp rcx, 0
 19862 0000DCF7 7413                    	je .L_tc_recycle_frame_done_047e
 19863 0000DCF9 488B32                  	mov rsi, qword [rdx]
 19864 0000DCFC 488933                  	mov qword [rbx], rsi
 19865 0000DCFF 48FFC9                  	dec rcx
 19866 0000DD02 4883EB08                	sub rbx, 8 * 1
 19867 0000DD06 4883EA08                	sub rdx, 8 * 1
 19868 0000DD0A EBE7                    	jmp .L_tc_recycle_frame_loop_047e
 19869                                  .L_tc_recycle_frame_done_047e:
 19870 0000DD0C 488D6308                	lea rsp, [rbx + 8 * 1]
 19871 0000DD10 5D                      	pop rbp	; the proc will restore it!
 19872 0000DD11 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19873 0000DD14 C9                      	leave
 19874 0000DD15 C22000                  	ret AND_KILL_FRAME(2)
 19875                                  .L_lambda_simple_end_0358:	; new closure is in rax
 19876 0000DD18 50                      	push rax
 19877 0000DD19 6A01                    	push 1	; arg count
 19878 0000DD1B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19879 0000DD20 E8EA830000              	call malloc
 19880 0000DD25 50                      	push rax
 19881 0000DD26 BF00000000              	mov rdi, 8 * 0	; new rib
 19882 0000DD2B E8DF830000              	call malloc
 19883 0000DD30 50                      	push rax
 19884 0000DD31 BF08000000              	mov rdi, 8 * 1	; extended env
 19885 0000DD36 E8D4830000              	call malloc
 19886 0000DD3B 488B7D10                	mov rdi, ENV
 19887 0000DD3F BE00000000              	mov rsi, 0
 19888 0000DD44 BA01000000              	mov rdx, 1
 19889                                  .L_lambda_simple_env_loop_0360:	; ext_env[i + 1] <-- env[i]
 19890 0000DD49 4883FE00                	cmp rsi, 0
 19891 0000DD4D 7410                    	je .L_lambda_simple_env_end_0360
 19892 0000DD4F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19893 0000DD53 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19894 0000DD57 48FFC6                  	inc rsi
 19895 0000DD5A 48FFC2                  	inc rdx
 19896 0000DD5D EBEA                    	jmp .L_lambda_simple_env_loop_0360
 19897                                  .L_lambda_simple_env_end_0360:
 19898 0000DD5F 5B                      	pop rbx
 19899 0000DD60 BE00000000              	mov rsi, 0
 19900                                  .L_lambda_simple_params_loop_0360:	; copy params
 19901 0000DD65 4883FE00                	cmp rsi, 0
 19902 0000DD69 740E                    	je .L_lambda_simple_params_end_0360
 19903 0000DD6B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19904 0000DD70 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19905 0000DD74 48FFC6                  	inc rsi
 19906 0000DD77 EBEC                    	jmp .L_lambda_simple_params_loop_0360
 19907                                  .L_lambda_simple_params_end_0360:
 19908 0000DD79 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19909 0000DD7C 4889C3                  	mov rbx, rax
 19910 0000DD7F 58                      	pop rax
 19911 0000DD80 C60004                  	mov byte [rax], T_closure
 19912 0000DD83 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19913 0000DD87 48C74009[94DD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0360
 19914 0000DD8F E947010000              	jmp .L_lambda_simple_end_0360
 19915                                  .L_lambda_simple_code_0360:	; lambda-simple body
 19916 0000DD94 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19917 0000DD9A 740B                    	je .L_lambda_simple_arity_check_ok_0360
 19918 0000DD9C FF742410                	push qword [rsp + 8 * 2]
 19919 0000DDA0 6A01                    	push 1
 19920 0000DDA2 E921830000              	jmp L_error_incorrect_arity_simple
 19921                                  .L_lambda_simple_arity_check_ok_0360:
 19922 0000DDA7 C8000000                	enter 0, 0
 19923                                  	; preparing a non tail-call
 19924 0000DDAB 488B0425[4A160000]      	mov rax, qword [free_var_130]	; free var char=?
 19925 0000DDB3 803805                  	cmp byte [rax], T_undefined
 19926 0000DDB6 0F8426820000            	je L_error_fvar_undefined
 19927 0000DDBC 50                      	push rax
 19928 0000DDBD 488B0425[28160000]      	mov rax, qword [free_var_128]	; free var char<?
 19929 0000DDC5 803805                  	cmp byte [rax], T_undefined
 19930 0000DDC8 0F8414820000            	je L_error_fvar_undefined
 19931 0000DDCE 50                      	push rax
 19932 0000DDCF 6A02                    	push 2	; arg count
 19933 0000DDD1 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19934 0000DDD5 803804                  	cmp byte [rax], T_closure
 19935 0000DDD8 0F8588820000            	jne L_error_non_closure
 19936 0000DDDE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19937 0000DDE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19938 0000DDE4 48890425[38170000]      	mov qword [free_var_144], rax
 19939 0000DDEC 48B8-                   	mov rax, sob_void
 19939 0000DDEE [0000000000000000] 
 19940                                  
 19941                                  	; preparing a non tail-call
 19942 0000DDF6 488B0425[C1160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 19943 0000DDFE 803805                  	cmp byte [rax], T_undefined
 19944 0000DE01 0F84DB810000            	je L_error_fvar_undefined
 19945 0000DE07 50                      	push rax
 19946 0000DE08 488B0425[9F160000]      	mov rax, qword [free_var_135]	; free var char-ci<?
 19947 0000DE10 803805                  	cmp byte [rax], T_undefined
 19948 0000DE13 0F84C9810000            	je L_error_fvar_undefined
 19949 0000DE19 50                      	push rax
 19950 0000DE1A 6A02                    	push 2	; arg count
 19951 0000DE1C 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19952 0000DE20 803804                  	cmp byte [rax], T_closure
 19953 0000DE23 0F853D820000            	jne L_error_non_closure
 19954 0000DE29 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19955 0000DE2C FF5009                  	call SOB_CLOSURE_CODE(rax)
 19956 0000DE2F 48890425[8D170000]      	mov qword [free_var_149], rax
 19957 0000DE37 48B8-                   	mov rax, sob_void
 19957 0000DE39 [0000000000000000] 
 19958                                  
 19959                                  	; preparing a non tail-call
 19960 0000DE41 488B0425[4A160000]      	mov rax, qword [free_var_130]	; free var char=?
 19961 0000DE49 803805                  	cmp byte [rax], T_undefined
 19962 0000DE4C 0F8490810000            	je L_error_fvar_undefined
 19963 0000DE52 50                      	push rax
 19964 0000DE53 488B0425[5B160000]      	mov rax, qword [free_var_131]	; free var char>?
 19965 0000DE5B 803805                  	cmp byte [rax], T_undefined
 19966 0000DE5E 0F847E810000            	je L_error_fvar_undefined
 19967 0000DE64 50                      	push rax
 19968 0000DE65 6A02                    	push 2	; arg count
 19969 0000DE67 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19970 0000DE6B 803804                  	cmp byte [rax], T_closure
 19971 0000DE6E 0F85F2810000            	jne L_error_non_closure
 19972 0000DE74 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19973 0000DE77 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19974 0000DE7A 48890425[7C170000]      	mov qword [free_var_148], rax
 19975 0000DE82 48B8-                   	mov rax, sob_void
 19975 0000DE84 [0000000000000000] 
 19976                                  
 19977                                  	; preparing a non tail-call
 19978 0000DE8C 488B0425[C1160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 19979 0000DE94 803805                  	cmp byte [rax], T_undefined
 19980 0000DE97 0F8445810000            	je L_error_fvar_undefined
 19981 0000DE9D 50                      	push rax
 19982 0000DE9E 488B0425[D2160000]      	mov rax, qword [free_var_138]	; free var char-ci>?
 19983 0000DEA6 803805                  	cmp byte [rax], T_undefined
 19984 0000DEA9 0F8433810000            	je L_error_fvar_undefined
 19985 0000DEAF 50                      	push rax
 19986 0000DEB0 6A02                    	push 2	; arg count
 19987 0000DEB2 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19988 0000DEB6 803804                  	cmp byte [rax], T_closure
 19989 0000DEB9 0F85A7810000            	jne L_error_non_closure
 19990 0000DEBF FF7001                  	push SOB_CLOSURE_ENV(rax)
 19991 0000DEC2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19992 0000DEC5 48890425[D1170000]      	mov qword [free_var_153], rax
 19993 0000DECD 48B8-                   	mov rax, sob_void
 19993 0000DECF [0000000000000000] 
 19994 0000DED7 C9                      	leave
 19995 0000DED8 C21800                  	ret AND_KILL_FRAME(1)
 19996                                  .L_lambda_simple_end_0360:	; new closure is in rax
 19997 0000DEDB 803804                  	cmp byte [rax], T_closure
 19998 0000DEDE 0F8582810000            	jne L_error_non_closure
 19999 0000DEE4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20000 0000DEE7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20001                                  
 20002 0000DEEA 4889C7                  	mov rdi, rax
 20003 0000DEED E82F830000              	call print_sexpr_if_not_void
 20004                                  
 20005                                  	; preparing a non tail-call
 20006 0000DEF2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20007 0000DEF7 E813820000              	call malloc
 20008 0000DEFC 50                      	push rax
 20009 0000DEFD BF00000000              	mov rdi, 8 * 0	; new rib
 20010 0000DF02 E808820000              	call malloc
 20011 0000DF07 50                      	push rax
 20012 0000DF08 BF08000000              	mov rdi, 8 * 1	; extended env
 20013 0000DF0D E8FD810000              	call malloc
 20014 0000DF12 488B7D10                	mov rdi, ENV
 20015 0000DF16 BE00000000              	mov rsi, 0
 20016 0000DF1B BA01000000              	mov rdx, 1
 20017                                  .L_lambda_simple_env_loop_0361:	; ext_env[i + 1] <-- env[i]
 20018 0000DF20 4883FE00                	cmp rsi, 0
 20019 0000DF24 7410                    	je .L_lambda_simple_env_end_0361
 20020 0000DF26 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20021 0000DF2A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20022 0000DF2E 48FFC6                  	inc rsi
 20023 0000DF31 48FFC2                  	inc rdx
 20024 0000DF34 EBEA                    	jmp .L_lambda_simple_env_loop_0361
 20025                                  .L_lambda_simple_env_end_0361:
 20026 0000DF36 5B                      	pop rbx
 20027 0000DF37 BE00000000              	mov rsi, 0
 20028                                  .L_lambda_simple_params_loop_0361:	; copy params
 20029 0000DF3C 4883FE00                	cmp rsi, 0
 20030 0000DF40 740E                    	je .L_lambda_simple_params_end_0361
 20031 0000DF42 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20032 0000DF47 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20033 0000DF4B 48FFC6                  	inc rsi
 20034 0000DF4E EBEC                    	jmp .L_lambda_simple_params_loop_0361
 20035                                  .L_lambda_simple_params_end_0361:
 20036 0000DF50 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20037 0000DF53 4889C3                  	mov rbx, rax
 20038 0000DF56 58                      	pop rax
 20039 0000DF57 C60004                  	mov byte [rax], T_closure
 20040 0000DF5A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20041 0000DF5E 48C74009[6BDF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0361
 20042 0000DF66 E9D20C0000              	jmp .L_lambda_simple_end_0361
 20043                                  .L_lambda_simple_code_0361:	; lambda-simple body
 20044 0000DF6B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20045 0000DF71 740B                    	je .L_lambda_simple_arity_check_ok_0361
 20046 0000DF73 FF742410                	push qword [rsp + 8 * 2]
 20047 0000DF77 6A02                    	push 2
 20048 0000DF79 E94A810000              	jmp L_error_incorrect_arity_simple
 20049                                  .L_lambda_simple_arity_check_ok_0361:
 20050 0000DF7E C8000000                	enter 0, 0
 20051                                  	; preparing a tail-call
 20052 0000DF82 48B8-                   	mov rax, L_constants + 1881
 20052 0000DF84 [5907000000000000] 
 20053 0000DF8C 50                      	push rax
 20054 0000DF8D 6A01                    	push 1	; arg count
 20055 0000DF8F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20056 0000DF94 E876810000              	call malloc
 20057 0000DF99 50                      	push rax
 20058 0000DF9A BF10000000              	mov rdi, 8 * 2	; new rib
 20059 0000DF9F E86B810000              	call malloc
 20060 0000DFA4 50                      	push rax
 20061 0000DFA5 BF10000000              	mov rdi, 8 * 2	; extended env
 20062 0000DFAA E860810000              	call malloc
 20063 0000DFAF 488B7D10                	mov rdi, ENV
 20064 0000DFB3 BE00000000              	mov rsi, 0
 20065 0000DFB8 BA01000000              	mov rdx, 1
 20066                                  .L_lambda_simple_env_loop_0362:	; ext_env[i + 1] <-- env[i]
 20067 0000DFBD 4883FE01                	cmp rsi, 1
 20068 0000DFC1 7410                    	je .L_lambda_simple_env_end_0362
 20069 0000DFC3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20070 0000DFC7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20071 0000DFCB 48FFC6                  	inc rsi
 20072 0000DFCE 48FFC2                  	inc rdx
 20073 0000DFD1 EBEA                    	jmp .L_lambda_simple_env_loop_0362
 20074                                  .L_lambda_simple_env_end_0362:
 20075 0000DFD3 5B                      	pop rbx
 20076 0000DFD4 BE00000000              	mov rsi, 0
 20077                                  .L_lambda_simple_params_loop_0362:	; copy params
 20078 0000DFD9 4883FE02                	cmp rsi, 2
 20079 0000DFDD 740E                    	je .L_lambda_simple_params_end_0362
 20080 0000DFDF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20081 0000DFE4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20082 0000DFE8 48FFC6                  	inc rsi
 20083 0000DFEB EBEC                    	jmp .L_lambda_simple_params_loop_0362
 20084                                  .L_lambda_simple_params_end_0362:
 20085 0000DFED 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20086 0000DFF0 4889C3                  	mov rbx, rax
 20087 0000DFF3 58                      	pop rax
 20088 0000DFF4 C60004                  	mov byte [rax], T_closure
 20089 0000DFF7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20090 0000DFFB 48C74009[08E00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0362
 20091 0000E003 E9EC0B0000              	jmp .L_lambda_simple_end_0362
 20092                                  .L_lambda_simple_code_0362:	; lambda-simple body
 20093 0000E008 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20094 0000E00E 740B                    	je .L_lambda_simple_arity_check_ok_0362
 20095 0000E010 FF742410                	push qword [rsp + 8 * 2]
 20096 0000E014 6A01                    	push 1
 20097 0000E016 E9AD800000              	jmp L_error_incorrect_arity_simple
 20098                                  .L_lambda_simple_arity_check_ok_0362:
 20099 0000E01B C8000000                	enter 0, 0
 20100 0000E01F BF08000000              	mov rdi, 8	; sob_box
 20101 0000E024 E8E6800000              	call malloc
 20102 0000E029 488B5D20                	mov rbx, PARAM(0)
 20103 0000E02D 488918                  	mov [rax], rbx
 20104 0000E030 48894520                	mov PARAM(0), rax
 20105 0000E034 48B8-                   	mov rax, sob_void
 20105 0000E036 [0000000000000000] 
 20106                                  
 20107 0000E03E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20108 0000E043 E8C7800000              	call malloc
 20109 0000E048 50                      	push rax
 20110 0000E049 BF08000000              	mov rdi, 8 * 1	; new rib
 20111 0000E04E E8BC800000              	call malloc
 20112 0000E053 50                      	push rax
 20113 0000E054 BF18000000              	mov rdi, 8 * 3	; extended env
 20114 0000E059 E8B1800000              	call malloc
 20115 0000E05E 488B7D10                	mov rdi, ENV
 20116 0000E062 BE00000000              	mov rsi, 0
 20117 0000E067 BA01000000              	mov rdx, 1
 20118                                  .L_lambda_simple_env_loop_0363:	; ext_env[i + 1] <-- env[i]
 20119 0000E06C 4883FE02                	cmp rsi, 2
 20120 0000E070 7410                    	je .L_lambda_simple_env_end_0363
 20121 0000E072 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20122 0000E076 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20123 0000E07A 48FFC6                  	inc rsi
 20124 0000E07D 48FFC2                  	inc rdx
 20125 0000E080 EBEA                    	jmp .L_lambda_simple_env_loop_0363
 20126                                  .L_lambda_simple_env_end_0363:
 20127 0000E082 5B                      	pop rbx
 20128 0000E083 BE00000000              	mov rsi, 0
 20129                                  .L_lambda_simple_params_loop_0363:	; copy params
 20130 0000E088 4883FE01                	cmp rsi, 1
 20131 0000E08C 740E                    	je .L_lambda_simple_params_end_0363
 20132 0000E08E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20133 0000E093 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20134 0000E097 48FFC6                  	inc rsi
 20135 0000E09A EBEC                    	jmp .L_lambda_simple_params_loop_0363
 20136                                  .L_lambda_simple_params_end_0363:
 20137 0000E09C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20138 0000E09F 4889C3                  	mov rbx, rax
 20139 0000E0A2 58                      	pop rax
 20140 0000E0A3 C60004                  	mov byte [rax], T_closure
 20141 0000E0A6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20142 0000E0AA 48C74009[B7E00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0363
 20143 0000E0B2 E943020000              	jmp .L_lambda_simple_end_0363
 20144                                  .L_lambda_simple_code_0363:	; lambda-simple body
 20145 0000E0B7 48837C241005            	cmp qword [rsp + 8 * 2], 5
 20146 0000E0BD 740B                    	je .L_lambda_simple_arity_check_ok_0363
 20147 0000E0BF FF742410                	push qword [rsp + 8 * 2]
 20148 0000E0C3 6A05                    	push 5
 20149 0000E0C5 E9FE7F0000              	jmp L_error_incorrect_arity_simple
 20150                                  .L_lambda_simple_arity_check_ok_0363:
 20151 0000E0CA C8000000                	enter 0, 0
 20152                                  	; preparing a non tail-call
 20153 0000E0CE 488B4530                	mov rax, PARAM(2)	; param len1
 20154 0000E0D2 50                      	push rax
 20155 0000E0D3 488B4520                	mov rax, PARAM(0)	; param i
 20156 0000E0D7 50                      	push rax
 20157 0000E0D8 6A02                    	push 2	; arg count
 20158 0000E0DA 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 20159 0000E0E2 803805                  	cmp byte [rax], T_undefined
 20160 0000E0E5 0F84F77E0000            	je L_error_fvar_undefined
 20161 0000E0EB 803804                  	cmp byte [rax], T_closure
 20162 0000E0EE 0F85727F0000            	jne L_error_non_closure
 20163 0000E0F4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20164 0000E0F7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20165 0000E0FA 483D[02000000]          	cmp rax, sob_boolean_false
 20166 0000E100 0F85F0010000            	jne .L_or_end_003d
 20167                                  	; preparing a non tail-call
 20168                                  	; preparing a non tail-call
 20169 0000E106 488B4520                	mov rax, PARAM(0)	; param i
 20170 0000E10A 50                      	push rax
 20171 0000E10B 488B4538                	mov rax, PARAM(3)	; param str2
 20172 0000E10F 50                      	push rax
 20173 0000E110 6A02                    	push 2	; arg count
 20174 0000E112 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 20175 0000E11A 803805                  	cmp byte [rax], T_undefined
 20176 0000E11D 0F84BF7E0000            	je L_error_fvar_undefined
 20177 0000E123 803804                  	cmp byte [rax], T_closure
 20178 0000E126 0F853A7F0000            	jne L_error_non_closure
 20179 0000E12C FF7001                  	push SOB_CLOSURE_ENV(rax)
 20180 0000E12F FF5009                  	call SOB_CLOSURE_CODE(rax)
 20181 0000E132 50                      	push rax
 20182                                  	; preparing a non tail-call
 20183 0000E133 488B4520                	mov rax, PARAM(0)	; param i
 20184 0000E137 50                      	push rax
 20185 0000E138 488B4528                	mov rax, PARAM(1)	; param str1
 20186 0000E13C 50                      	push rax
 20187 0000E13D 6A02                    	push 2	; arg count
 20188 0000E13F 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 20189 0000E147 803805                  	cmp byte [rax], T_undefined
 20190 0000E14A 0F84927E0000            	je L_error_fvar_undefined
 20191 0000E150 803804                  	cmp byte [rax], T_closure
 20192 0000E153 0F850D7F0000            	jne L_error_non_closure
 20193 0000E159 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20194 0000E15C FF5009                  	call SOB_CLOSURE_CODE(rax)
 20195 0000E15F 50                      	push rax
 20196 0000E160 6A02                    	push 2	; arg count
 20197 0000E162 488B4510                	mov rax, ENV
 20198 0000E166 488B4008                	mov rax, qword [rax + 8 * 1]
 20199 0000E16A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 20200 0000E16D 803804                  	cmp byte [rax], T_closure
 20201 0000E170 0F85F07E0000            	jne L_error_non_closure
 20202 0000E176 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20203 0000E179 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20204 0000E17C 483D[02000000]          	cmp rax, sob_boolean_false
 20205 0000E182 0F856E010000            	jne .L_or_end_003d
 20206                                  	; preparing a non tail-call
 20207 0000E188 488B4530                	mov rax, PARAM(2)	; param len1
 20208 0000E18C 50                      	push rax
 20209 0000E18D 488B4520                	mov rax, PARAM(0)	; param i
 20210 0000E191 50                      	push rax
 20211 0000E192 6A02                    	push 2	; arg count
 20212 0000E194 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 20213 0000E19C 803805                  	cmp byte [rax], T_undefined
 20214 0000E19F 0F843D7E0000            	je L_error_fvar_undefined
 20215 0000E1A5 803804                  	cmp byte [rax], T_closure
 20216 0000E1A8 0F85B87E0000            	jne L_error_non_closure
 20217 0000E1AE FF7001                  	push SOB_CLOSURE_ENV(rax)
 20218 0000E1B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20219 0000E1B4 483D[02000000]          	cmp rax, sob_boolean_false
 20220 0000E1BA 0F842C010000            	je .L_if_else_0276
 20221                                  	; preparing a non tail-call
 20222                                  	; preparing a non tail-call
 20223 0000E1C0 488B4520                	mov rax, PARAM(0)	; param i
 20224 0000E1C4 50                      	push rax
 20225 0000E1C5 488B4538                	mov rax, PARAM(3)	; param str2
 20226 0000E1C9 50                      	push rax
 20227 0000E1CA 6A02                    	push 2	; arg count
 20228 0000E1CC 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 20229 0000E1D4 803805                  	cmp byte [rax], T_undefined
 20230 0000E1D7 0F84057E0000            	je L_error_fvar_undefined
 20231 0000E1DD 803804                  	cmp byte [rax], T_closure
 20232 0000E1E0 0F85807E0000            	jne L_error_non_closure
 20233 0000E1E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20234 0000E1E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20235 0000E1EC 50                      	push rax
 20236                                  	; preparing a non tail-call
 20237 0000E1ED 488B4520                	mov rax, PARAM(0)	; param i
 20238 0000E1F1 50                      	push rax
 20239 0000E1F2 488B4528                	mov rax, PARAM(1)	; param str1
 20240 0000E1F6 50                      	push rax
 20241 0000E1F7 6A02                    	push 2	; arg count
 20242 0000E1F9 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 20243 0000E201 803805                  	cmp byte [rax], T_undefined
 20244 0000E204 0F84D87D0000            	je L_error_fvar_undefined
 20245 0000E20A 803804                  	cmp byte [rax], T_closure
 20246 0000E20D 0F85537E0000            	jne L_error_non_closure
 20247 0000E213 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20248 0000E216 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20249 0000E219 50                      	push rax
 20250 0000E21A 6A02                    	push 2	; arg count
 20251 0000E21C 488B4510                	mov rax, ENV
 20252 0000E220 488B4008                	mov rax, qword [rax + 8 * 1]
 20253 0000E224 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 20254 0000E228 803804                  	cmp byte [rax], T_closure
 20255 0000E22B 0F85357E0000            	jne L_error_non_closure
 20256 0000E231 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20257 0000E234 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20258 0000E237 483D[02000000]          	cmp rax, sob_boolean_false
 20259 0000E23D 0F849D000000            	je .L_if_else_0277
 20260                                  	; preparing a tail-call
 20261 0000E243 488B4540                	mov rax, PARAM(4)	; param len2
 20262 0000E247 50                      	push rax
 20263 0000E248 488B4538                	mov rax, PARAM(3)	; param str2
 20264 0000E24C 50                      	push rax
 20265 0000E24D 488B4530                	mov rax, PARAM(2)	; param len1
 20266 0000E251 50                      	push rax
 20267 0000E252 488B4528                	mov rax, PARAM(1)	; param str1
 20268 0000E256 50                      	push rax
 20269                                  	; preparing a non tail-call
 20270 0000E257 48B8-                   	mov rax, L_constants + 2158
 20270 0000E259 [6E08000000000000] 
 20271 0000E261 50                      	push rax
 20272 0000E262 488B4520                	mov rax, PARAM(0)	; param i
 20273 0000E266 50                      	push rax
 20274 0000E267 6A02                    	push 2	; arg count
 20275 0000E269 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 20276 0000E271 803805                  	cmp byte [rax], T_undefined
 20277 0000E274 0F84687D0000            	je L_error_fvar_undefined
 20278 0000E27A 803804                  	cmp byte [rax], T_closure
 20279 0000E27D 0F85E37D0000            	jne L_error_non_closure
 20280 0000E283 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20281 0000E286 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20282 0000E289 50                      	push rax
 20283 0000E28A 6A05                    	push 5	; arg count
 20284 0000E28C 488B4510                	mov rax, ENV
 20285 0000E290 488B00                  	mov rax, qword [rax + 8 * 0]
 20286 0000E293 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20287 0000E296 488B00                  	mov rax, qword [rax]
 20288 0000E299 803804                  	cmp byte [rax], T_closure
 20289 0000E29C 0F85C47D0000            	jne L_error_non_closure
 20290 0000E2A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20291                                  
 20292                                  	; recycling the current frame
 20293 0000E2A5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20294 0000E2A8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20295 0000E2AB B909000000              	mov rcx, 5 + 4
 20296 0000E2B0 488B5D18                	mov rbx, COUNT
 20297 0000E2B4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20298 0000E2B9 488D55F8                	lea rdx, [rbp - 8 * 1]
 20299                                  .L_tc_recycle_frame_loop_047f:
 20300 0000E2BD 4883F900                	cmp rcx, 0
 20301 0000E2C1 7413                    	je .L_tc_recycle_frame_done_047f
 20302 0000E2C3 488B32                  	mov rsi, qword [rdx]
 20303 0000E2C6 488933                  	mov qword [rbx], rsi
 20304 0000E2C9 48FFC9                  	dec rcx
 20305 0000E2CC 4883EB08                	sub rbx, 8 * 1
 20306 0000E2D0 4883EA08                	sub rdx, 8 * 1
 20307 0000E2D4 EBE7                    	jmp .L_tc_recycle_frame_loop_047f
 20308                                  .L_tc_recycle_frame_done_047f:
 20309 0000E2D6 488D6308                	lea rsp, [rbx + 8 * 1]
 20310 0000E2DA 5D                      	pop rbp	; the proc will restore it!
 20311 0000E2DB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20312 0000E2DE EB0A                    	jmp .L_if_end_0277
 20313                                  .L_if_else_0277:
 20314 0000E2E0 48B8-                   	mov rax, L_constants + 2
 20314 0000E2E2 [0200000000000000] 
 20315                                  .L_if_end_0277:
 20316 0000E2EA EB0A                    	jmp .L_if_end_0276
 20317                                  .L_if_else_0276:
 20318 0000E2EC 48B8-                   	mov rax, L_constants + 2
 20318 0000E2EE [0200000000000000] 
 20319                                  .L_if_end_0276:
 20320                                  .L_or_end_003d:
 20321 0000E2F6 C9                      	leave
 20322 0000E2F7 C23800                  	ret AND_KILL_FRAME(5)
 20323                                  .L_lambda_simple_end_0363:	; new closure is in rax
 20324 0000E2FA 50                      	push rax
 20325 0000E2FB 488B4520                	mov rax, PARAM(0)	; param run
 20326 0000E2FF 8F00                    	pop qword [rax]
 20327 0000E301 48B8-                   	mov rax, sob_void
 20327 0000E303 [0000000000000000] 
 20328                                  
 20329                                  	; preparing a tail-call
 20330 0000E30B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20331 0000E310 E8FA7D0000              	call malloc
 20332 0000E315 50                      	push rax
 20333 0000E316 BF08000000              	mov rdi, 8 * 1	; new rib
 20334 0000E31B E8EF7D0000              	call malloc
 20335 0000E320 50                      	push rax
 20336 0000E321 BF18000000              	mov rdi, 8 * 3	; extended env
 20337 0000E326 E8E47D0000              	call malloc
 20338 0000E32B 488B7D10                	mov rdi, ENV
 20339 0000E32F BE00000000              	mov rsi, 0
 20340 0000E334 BA01000000              	mov rdx, 1
 20341                                  .L_lambda_simple_env_loop_0364:	; ext_env[i + 1] <-- env[i]
 20342 0000E339 4883FE02                	cmp rsi, 2
 20343 0000E33D 7410                    	je .L_lambda_simple_env_end_0364
 20344 0000E33F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20345 0000E343 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20346 0000E347 48FFC6                  	inc rsi
 20347 0000E34A 48FFC2                  	inc rdx
 20348 0000E34D EBEA                    	jmp .L_lambda_simple_env_loop_0364
 20349                                  .L_lambda_simple_env_end_0364:
 20350 0000E34F 5B                      	pop rbx
 20351 0000E350 BE00000000              	mov rsi, 0
 20352                                  .L_lambda_simple_params_loop_0364:	; copy params
 20353 0000E355 4883FE01                	cmp rsi, 1
 20354 0000E359 740E                    	je .L_lambda_simple_params_end_0364
 20355 0000E35B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20356 0000E360 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20357 0000E364 48FFC6                  	inc rsi
 20358 0000E367 EBEC                    	jmp .L_lambda_simple_params_loop_0364
 20359                                  .L_lambda_simple_params_end_0364:
 20360 0000E369 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20361 0000E36C 4889C3                  	mov rbx, rax
 20362 0000E36F 58                      	pop rax
 20363 0000E370 C60004                  	mov byte [rax], T_closure
 20364 0000E373 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20365 0000E377 48C74009[84E30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0364
 20366 0000E37F E985020000              	jmp .L_lambda_simple_end_0364
 20367                                  .L_lambda_simple_code_0364:	; lambda-simple body
 20368 0000E384 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20369 0000E38A 740B                    	je .L_lambda_simple_arity_check_ok_0364
 20370 0000E38C FF742410                	push qword [rsp + 8 * 2]
 20371 0000E390 6A02                    	push 2
 20372 0000E392 E9317D0000              	jmp L_error_incorrect_arity_simple
 20373                                  .L_lambda_simple_arity_check_ok_0364:
 20374 0000E397 C8000000                	enter 0, 0
 20375                                  	; preparing a tail-call
 20376                                  	; preparing a non tail-call
 20377 0000E39B 488B4528                	mov rax, PARAM(1)	; param str2
 20378 0000E39F 50                      	push rax
 20379 0000E3A0 6A01                    	push 1	; arg count
 20380 0000E3A2 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 20381 0000E3AA 803805                  	cmp byte [rax], T_undefined
 20382 0000E3AD 0F842F7C0000            	je L_error_fvar_undefined
 20383 0000E3B3 803804                  	cmp byte [rax], T_closure
 20384 0000E3B6 0F85AA7C0000            	jne L_error_non_closure
 20385 0000E3BC FF7001                  	push SOB_CLOSURE_ENV(rax)
 20386 0000E3BF FF5009                  	call SOB_CLOSURE_CODE(rax)
 20387 0000E3C2 50                      	push rax
 20388                                  	; preparing a non tail-call
 20389 0000E3C3 488B4520                	mov rax, PARAM(0)	; param str1
 20390 0000E3C7 50                      	push rax
 20391 0000E3C8 6A01                    	push 1	; arg count
 20392 0000E3CA 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 20393 0000E3D2 803805                  	cmp byte [rax], T_undefined
 20394 0000E3D5 0F84077C0000            	je L_error_fvar_undefined
 20395 0000E3DB 803804                  	cmp byte [rax], T_closure
 20396 0000E3DE 0F85827C0000            	jne L_error_non_closure
 20397 0000E3E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20398 0000E3E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20399 0000E3EA 50                      	push rax
 20400 0000E3EB 6A02                    	push 2	; arg count
 20401 0000E3ED BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20402 0000E3F2 E8187D0000              	call malloc
 20403 0000E3F7 50                      	push rax
 20404 0000E3F8 BF10000000              	mov rdi, 8 * 2	; new rib
 20405 0000E3FD E80D7D0000              	call malloc
 20406 0000E402 50                      	push rax
 20407 0000E403 BF20000000              	mov rdi, 8 * 4	; extended env
 20408 0000E408 E8027D0000              	call malloc
 20409 0000E40D 488B7D10                	mov rdi, ENV
 20410 0000E411 BE00000000              	mov rsi, 0
 20411 0000E416 BA01000000              	mov rdx, 1
 20412                                  .L_lambda_simple_env_loop_0365:	; ext_env[i + 1] <-- env[i]
 20413 0000E41B 4883FE03                	cmp rsi, 3
 20414 0000E41F 7410                    	je .L_lambda_simple_env_end_0365
 20415 0000E421 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20416 0000E425 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20417 0000E429 48FFC6                  	inc rsi
 20418 0000E42C 48FFC2                  	inc rdx
 20419 0000E42F EBEA                    	jmp .L_lambda_simple_env_loop_0365
 20420                                  .L_lambda_simple_env_end_0365:
 20421 0000E431 5B                      	pop rbx
 20422 0000E432 BE00000000              	mov rsi, 0
 20423                                  .L_lambda_simple_params_loop_0365:	; copy params
 20424 0000E437 4883FE02                	cmp rsi, 2
 20425 0000E43B 740E                    	je .L_lambda_simple_params_end_0365
 20426 0000E43D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20427 0000E442 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20428 0000E446 48FFC6                  	inc rsi
 20429 0000E449 EBEC                    	jmp .L_lambda_simple_params_loop_0365
 20430                                  .L_lambda_simple_params_end_0365:
 20431 0000E44B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20432 0000E44E 4889C3                  	mov rbx, rax
 20433 0000E451 58                      	pop rax
 20434 0000E452 C60004                  	mov byte [rax], T_closure
 20435 0000E455 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20436 0000E459 48C74009[66E40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0365
 20437 0000E461 E95A010000              	jmp .L_lambda_simple_end_0365
 20438                                  .L_lambda_simple_code_0365:	; lambda-simple body
 20439 0000E466 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20440 0000E46C 740B                    	je .L_lambda_simple_arity_check_ok_0365
 20441 0000E46E FF742410                	push qword [rsp + 8 * 2]
 20442 0000E472 6A02                    	push 2
 20443 0000E474 E94F7C0000              	jmp L_error_incorrect_arity_simple
 20444                                  .L_lambda_simple_arity_check_ok_0365:
 20445 0000E479 C8000000                	enter 0, 0
 20446                                  	; preparing a non tail-call
 20447 0000E47D 488B4528                	mov rax, PARAM(1)	; param len2
 20448 0000E481 50                      	push rax
 20449 0000E482 488B4520                	mov rax, PARAM(0)	; param len1
 20450 0000E486 50                      	push rax
 20451 0000E487 6A02                    	push 2	; arg count
 20452 0000E489 488B0425[D3150000]      	mov rax, qword [free_var_123]	; free var <=
 20453 0000E491 803805                  	cmp byte [rax], T_undefined
 20454 0000E494 0F84487B0000            	je L_error_fvar_undefined
 20455 0000E49A 803804                  	cmp byte [rax], T_closure
 20456 0000E49D 0F85C37B0000            	jne L_error_non_closure
 20457 0000E4A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20458 0000E4A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20459 0000E4A9 483D[02000000]          	cmp rax, sob_boolean_false
 20460 0000E4AF 0F8486000000            	je .L_if_else_0278
 20461                                  	; preparing a tail-call
 20462 0000E4B5 488B4528                	mov rax, PARAM(1)	; param len2
 20463 0000E4B9 50                      	push rax
 20464 0000E4BA 488B4510                	mov rax, ENV
 20465 0000E4BE 488B00                  	mov rax, qword [rax + 8 * 0]
 20466 0000E4C1 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 20467 0000E4C5 50                      	push rax
 20468 0000E4C6 488B4520                	mov rax, PARAM(0)	; param len1
 20469 0000E4CA 50                      	push rax
 20470 0000E4CB 488B4510                	mov rax, ENV
 20471 0000E4CF 488B00                  	mov rax, qword [rax + 8 * 0]
 20472 0000E4D2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 20473 0000E4D5 50                      	push rax
 20474 0000E4D6 48B8-                   	mov rax, L_constants + 2023
 20474 0000E4D8 [E707000000000000] 
 20475 0000E4E0 50                      	push rax
 20476 0000E4E1 6A05                    	push 5	; arg count
 20477 0000E4E3 488B4510                	mov rax, ENV
 20478 0000E4E7 488B4008                	mov rax, qword [rax + 8 * 1]
 20479 0000E4EB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20480 0000E4EE 488B00                  	mov rax, qword [rax]
 20481 0000E4F1 803804                  	cmp byte [rax], T_closure
 20482 0000E4F4 0F856C7B0000            	jne L_error_non_closure
 20483 0000E4FA FF7001                  	push SOB_CLOSURE_ENV(rax)
 20484                                  
 20485                                  	; recycling the current frame
 20486 0000E4FD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20487 0000E500 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20488 0000E503 B909000000              	mov rcx, 5 + 4
 20489 0000E508 488B5D18                	mov rbx, COUNT
 20490 0000E50C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20491 0000E511 488D55F8                	lea rdx, [rbp - 8 * 1]
 20492                                  .L_tc_recycle_frame_loop_0480:
 20493 0000E515 4883F900                	cmp rcx, 0
 20494 0000E519 7413                    	je .L_tc_recycle_frame_done_0480
 20495 0000E51B 488B32                  	mov rsi, qword [rdx]
 20496 0000E51E 488933                  	mov qword [rbx], rsi
 20497 0000E521 48FFC9                  	dec rcx
 20498 0000E524 4883EB08                	sub rbx, 8 * 1
 20499 0000E528 4883EA08                	sub rdx, 8 * 1
 20500 0000E52C EBE7                    	jmp .L_tc_recycle_frame_loop_0480
 20501                                  .L_tc_recycle_frame_done_0480:
 20502 0000E52E 488D6308                	lea rsp, [rbx + 8 * 1]
 20503 0000E532 5D                      	pop rbp	; the proc will restore it!
 20504 0000E533 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20505 0000E536 E981000000              	jmp .L_if_end_0278
 20506                                  .L_if_else_0278:
 20507                                  	; preparing a tail-call
 20508 0000E53B 488B4520                	mov rax, PARAM(0)	; param len1
 20509 0000E53F 50                      	push rax
 20510 0000E540 488B4510                	mov rax, ENV
 20511 0000E544 488B00                  	mov rax, qword [rax + 8 * 0]
 20512 0000E547 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 20513 0000E54A 50                      	push rax
 20514 0000E54B 488B4528                	mov rax, PARAM(1)	; param len2
 20515 0000E54F 50                      	push rax
 20516 0000E550 488B4510                	mov rax, ENV
 20517 0000E554 488B00                  	mov rax, qword [rax + 8 * 0]
 20518 0000E557 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 20519 0000E55B 50                      	push rax
 20520 0000E55C 48B8-                   	mov rax, L_constants + 2023
 20520 0000E55E [E707000000000000] 
 20521 0000E566 50                      	push rax
 20522 0000E567 6A05                    	push 5	; arg count
 20523 0000E569 488B4510                	mov rax, ENV
 20524 0000E56D 488B4008                	mov rax, qword [rax + 8 * 1]
 20525 0000E571 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20526 0000E574 488B00                  	mov rax, qword [rax]
 20527 0000E577 803804                  	cmp byte [rax], T_closure
 20528 0000E57A 0F85E67A0000            	jne L_error_non_closure
 20529 0000E580 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20530                                  
 20531                                  	; recycling the current frame
 20532 0000E583 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20533 0000E586 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20534 0000E589 B909000000              	mov rcx, 5 + 4
 20535 0000E58E 488B5D18                	mov rbx, COUNT
 20536 0000E592 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20537 0000E597 488D55F8                	lea rdx, [rbp - 8 * 1]
 20538                                  .L_tc_recycle_frame_loop_0481:
 20539 0000E59B 4883F900                	cmp rcx, 0
 20540 0000E59F 7413                    	je .L_tc_recycle_frame_done_0481
 20541 0000E5A1 488B32                  	mov rsi, qword [rdx]
 20542 0000E5A4 488933                  	mov qword [rbx], rsi
 20543 0000E5A7 48FFC9                  	dec rcx
 20544 0000E5AA 4883EB08                	sub rbx, 8 * 1
 20545 0000E5AE 4883EA08                	sub rdx, 8 * 1
 20546 0000E5B2 EBE7                    	jmp .L_tc_recycle_frame_loop_0481
 20547                                  .L_tc_recycle_frame_done_0481:
 20548 0000E5B4 488D6308                	lea rsp, [rbx + 8 * 1]
 20549 0000E5B8 5D                      	pop rbp	; the proc will restore it!
 20550 0000E5B9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20551                                  .L_if_end_0278:
 20552 0000E5BC C9                      	leave
 20553 0000E5BD C22000                  	ret AND_KILL_FRAME(2)
 20554                                  .L_lambda_simple_end_0365:	; new closure is in rax
 20555 0000E5C0 803804                  	cmp byte [rax], T_closure
 20556 0000E5C3 0F859D7A0000            	jne L_error_non_closure
 20557 0000E5C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20558                                  
 20559                                  	; recycling the current frame
 20560 0000E5CC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20561 0000E5CF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20562 0000E5D2 B906000000              	mov rcx, 2 + 4
 20563 0000E5D7 488B5D18                	mov rbx, COUNT
 20564 0000E5DB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20565 0000E5E0 488D55F8                	lea rdx, [rbp - 8 * 1]
 20566                                  .L_tc_recycle_frame_loop_0482:
 20567 0000E5E4 4883F900                	cmp rcx, 0
 20568 0000E5E8 7413                    	je .L_tc_recycle_frame_done_0482
 20569 0000E5EA 488B32                  	mov rsi, qword [rdx]
 20570 0000E5ED 488933                  	mov qword [rbx], rsi
 20571 0000E5F0 48FFC9                  	dec rcx
 20572 0000E5F3 4883EB08                	sub rbx, 8 * 1
 20573 0000E5F7 4883EA08                	sub rdx, 8 * 1
 20574 0000E5FB EBE7                    	jmp .L_tc_recycle_frame_loop_0482
 20575                                  .L_tc_recycle_frame_done_0482:
 20576 0000E5FD 488D6308                	lea rsp, [rbx + 8 * 1]
 20577 0000E601 5D                      	pop rbp	; the proc will restore it!
 20578 0000E602 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20579 0000E605 C9                      	leave
 20580 0000E606 C22000                  	ret AND_KILL_FRAME(2)
 20581                                  .L_lambda_simple_end_0364:	; new closure is in rax
 20582 0000E609 50                      	push rax
 20583 0000E60A 6A01                    	push 1	; arg count
 20584 0000E60C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20585 0000E611 E8F97A0000              	call malloc
 20586 0000E616 50                      	push rax
 20587 0000E617 BF08000000              	mov rdi, 8 * 1	; new rib
 20588 0000E61C E8EE7A0000              	call malloc
 20589 0000E621 50                      	push rax
 20590 0000E622 BF18000000              	mov rdi, 8 * 3	; extended env
 20591 0000E627 E8E37A0000              	call malloc
 20592 0000E62C 488B7D10                	mov rdi, ENV
 20593 0000E630 BE00000000              	mov rsi, 0
 20594 0000E635 BA01000000              	mov rdx, 1
 20595                                  .L_lambda_simple_env_loop_0366:	; ext_env[i + 1] <-- env[i]
 20596 0000E63A 4883FE02                	cmp rsi, 2
 20597 0000E63E 7410                    	je .L_lambda_simple_env_end_0366
 20598 0000E640 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20599 0000E644 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20600 0000E648 48FFC6                  	inc rsi
 20601 0000E64B 48FFC2                  	inc rdx
 20602 0000E64E EBEA                    	jmp .L_lambda_simple_env_loop_0366
 20603                                  .L_lambda_simple_env_end_0366:
 20604 0000E650 5B                      	pop rbx
 20605 0000E651 BE00000000              	mov rsi, 0
 20606                                  .L_lambda_simple_params_loop_0366:	; copy params
 20607 0000E656 4883FE01                	cmp rsi, 1
 20608 0000E65A 740E                    	je .L_lambda_simple_params_end_0366
 20609 0000E65C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20610 0000E661 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20611 0000E665 48FFC6                  	inc rsi
 20612 0000E668 EBEC                    	jmp .L_lambda_simple_params_loop_0366
 20613                                  .L_lambda_simple_params_end_0366:
 20614 0000E66A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20615 0000E66D 4889C3                  	mov rbx, rax
 20616 0000E670 58                      	pop rax
 20617 0000E671 C60004                  	mov byte [rax], T_closure
 20618 0000E674 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20619 0000E678 48C74009[85E60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0366
 20620 0000E680 E926050000              	jmp .L_lambda_simple_end_0366
 20621                                  .L_lambda_simple_code_0366:	; lambda-simple body
 20622 0000E685 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20623 0000E68B 740B                    	je .L_lambda_simple_arity_check_ok_0366
 20624 0000E68D FF742410                	push qword [rsp + 8 * 2]
 20625 0000E691 6A01                    	push 1
 20626 0000E693 E9307A0000              	jmp L_error_incorrect_arity_simple
 20627                                  .L_lambda_simple_arity_check_ok_0366:
 20628 0000E698 C8000000                	enter 0, 0
 20629                                  	; preparing a tail-call
 20630 0000E69C 48B8-                   	mov rax, L_constants + 1881
 20630 0000E69E [5907000000000000] 
 20631 0000E6A6 50                      	push rax
 20632 0000E6A7 6A01                    	push 1	; arg count
 20633 0000E6A9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20634 0000E6AE E85C7A0000              	call malloc
 20635 0000E6B3 50                      	push rax
 20636 0000E6B4 BF08000000              	mov rdi, 8 * 1	; new rib
 20637 0000E6B9 E8517A0000              	call malloc
 20638 0000E6BE 50                      	push rax
 20639 0000E6BF BF20000000              	mov rdi, 8 * 4	; extended env
 20640 0000E6C4 E8467A0000              	call malloc
 20641 0000E6C9 488B7D10                	mov rdi, ENV
 20642 0000E6CD BE00000000              	mov rsi, 0
 20643 0000E6D2 BA01000000              	mov rdx, 1
 20644                                  .L_lambda_simple_env_loop_0367:	; ext_env[i + 1] <-- env[i]
 20645 0000E6D7 4883FE03                	cmp rsi, 3
 20646 0000E6DB 7410                    	je .L_lambda_simple_env_end_0367
 20647 0000E6DD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20648 0000E6E1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20649 0000E6E5 48FFC6                  	inc rsi
 20650 0000E6E8 48FFC2                  	inc rdx
 20651 0000E6EB EBEA                    	jmp .L_lambda_simple_env_loop_0367
 20652                                  .L_lambda_simple_env_end_0367:
 20653 0000E6ED 5B                      	pop rbx
 20654 0000E6EE BE00000000              	mov rsi, 0
 20655                                  .L_lambda_simple_params_loop_0367:	; copy params
 20656 0000E6F3 4883FE01                	cmp rsi, 1
 20657 0000E6F7 740E                    	je .L_lambda_simple_params_end_0367
 20658 0000E6F9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20659 0000E6FE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20660 0000E702 48FFC6                  	inc rsi
 20661 0000E705 EBEC                    	jmp .L_lambda_simple_params_loop_0367
 20662                                  .L_lambda_simple_params_end_0367:
 20663 0000E707 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20664 0000E70A 4889C3                  	mov rbx, rax
 20665 0000E70D 58                      	pop rax
 20666 0000E70E C60004                  	mov byte [rax], T_closure
 20667 0000E711 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20668 0000E715 48C74009[22E70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0367
 20669 0000E71D E940040000              	jmp .L_lambda_simple_end_0367
 20670                                  .L_lambda_simple_code_0367:	; lambda-simple body
 20671 0000E722 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20672 0000E728 740B                    	je .L_lambda_simple_arity_check_ok_0367
 20673 0000E72A FF742410                	push qword [rsp + 8 * 2]
 20674 0000E72E 6A01                    	push 1
 20675 0000E730 E993790000              	jmp L_error_incorrect_arity_simple
 20676                                  .L_lambda_simple_arity_check_ok_0367:
 20677 0000E735 C8000000                	enter 0, 0
 20678 0000E739 BF08000000              	mov rdi, 8	; sob_box
 20679 0000E73E E8CC790000              	call malloc
 20680 0000E743 488B5D20                	mov rbx, PARAM(0)
 20681 0000E747 488918                  	mov [rax], rbx
 20682 0000E74A 48894520                	mov PARAM(0), rax
 20683 0000E74E 48B8-                   	mov rax, sob_void
 20683 0000E750 [0000000000000000] 
 20684                                  
 20685 0000E758 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20686 0000E75D E8AD790000              	call malloc
 20687 0000E762 50                      	push rax
 20688 0000E763 BF08000000              	mov rdi, 8 * 1	; new rib
 20689 0000E768 E8A2790000              	call malloc
 20690 0000E76D 50                      	push rax
 20691 0000E76E BF28000000              	mov rdi, 8 * 5	; extended env
 20692 0000E773 E897790000              	call malloc
 20693 0000E778 488B7D10                	mov rdi, ENV
 20694 0000E77C BE00000000              	mov rsi, 0
 20695 0000E781 BA01000000              	mov rdx, 1
 20696                                  .L_lambda_simple_env_loop_0368:	; ext_env[i + 1] <-- env[i]
 20697 0000E786 4883FE04                	cmp rsi, 4
 20698 0000E78A 7410                    	je .L_lambda_simple_env_end_0368
 20699 0000E78C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20700 0000E790 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20701 0000E794 48FFC6                  	inc rsi
 20702 0000E797 48FFC2                  	inc rdx
 20703 0000E79A EBEA                    	jmp .L_lambda_simple_env_loop_0368
 20704                                  .L_lambda_simple_env_end_0368:
 20705 0000E79C 5B                      	pop rbx
 20706 0000E79D BE00000000              	mov rsi, 0
 20707                                  .L_lambda_simple_params_loop_0368:	; copy params
 20708 0000E7A2 4883FE01                	cmp rsi, 1
 20709 0000E7A6 740E                    	je .L_lambda_simple_params_end_0368
 20710 0000E7A8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20711 0000E7AD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20712 0000E7B1 48FFC6                  	inc rsi
 20713 0000E7B4 EBEC                    	jmp .L_lambda_simple_params_loop_0368
 20714                                  .L_lambda_simple_params_end_0368:
 20715 0000E7B6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20716 0000E7B9 4889C3                  	mov rbx, rax
 20717 0000E7BC 58                      	pop rax
 20718 0000E7BD C60004                  	mov byte [rax], T_closure
 20719 0000E7C0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20720 0000E7C4 48C74009[D1E70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0368
 20721 0000E7CC E953010000              	jmp .L_lambda_simple_end_0368
 20722                                  .L_lambda_simple_code_0368:	; lambda-simple body
 20723 0000E7D1 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20724 0000E7D7 740B                    	je .L_lambda_simple_arity_check_ok_0368
 20725 0000E7D9 FF742410                	push qword [rsp + 8 * 2]
 20726 0000E7DD 6A02                    	push 2
 20727 0000E7DF E9E4780000              	jmp L_error_incorrect_arity_simple
 20728                                  .L_lambda_simple_arity_check_ok_0368:
 20729 0000E7E4 C8000000                	enter 0, 0
 20730                                  	; preparing a non tail-call
 20731 0000E7E8 488B4528                	mov rax, PARAM(1)	; param strs
 20732 0000E7EC 50                      	push rax
 20733 0000E7ED 6A01                    	push 1	; arg count
 20734 0000E7EF 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 20735 0000E7F7 803805                  	cmp byte [rax], T_undefined
 20736 0000E7FA 0F84E2770000            	je L_error_fvar_undefined
 20737 0000E800 803804                  	cmp byte [rax], T_closure
 20738 0000E803 0F855D780000            	jne L_error_non_closure
 20739 0000E809 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20740 0000E80C FF5009                  	call SOB_CLOSURE_CODE(rax)
 20741 0000E80F 483D[02000000]          	cmp rax, sob_boolean_false
 20742 0000E815 0F8505010000            	jne .L_or_end_003e
 20743                                  	; preparing a non tail-call
 20744                                  	; preparing a non tail-call
 20745 0000E81B 488B4528                	mov rax, PARAM(1)	; param strs
 20746 0000E81F 50                      	push rax
 20747 0000E820 6A01                    	push 1	; arg count
 20748 0000E822 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 20749 0000E82A 803805                  	cmp byte [rax], T_undefined
 20750 0000E82D 0F84AF770000            	je L_error_fvar_undefined
 20751 0000E833 803804                  	cmp byte [rax], T_closure
 20752 0000E836 0F852A780000            	jne L_error_non_closure
 20753 0000E83C FF7001                  	push SOB_CLOSURE_ENV(rax)
 20754 0000E83F FF5009                  	call SOB_CLOSURE_CODE(rax)
 20755 0000E842 50                      	push rax
 20756 0000E843 488B4520                	mov rax, PARAM(0)	; param str
 20757 0000E847 50                      	push rax
 20758 0000E848 6A02                    	push 2	; arg count
 20759 0000E84A 488B4510                	mov rax, ENV
 20760 0000E84E 488B4008                	mov rax, qword [rax + 8 * 1]
 20761 0000E852 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<=?
 20762 0000E855 803804                  	cmp byte [rax], T_closure
 20763 0000E858 0F8508780000            	jne L_error_non_closure
 20764 0000E85E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20765 0000E861 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20766 0000E864 483D[02000000]          	cmp rax, sob_boolean_false
 20767 0000E86A 0F84A6000000            	je .L_if_else_0279
 20768                                  	; preparing a tail-call
 20769                                  	; preparing a non tail-call
 20770 0000E870 488B4528                	mov rax, PARAM(1)	; param strs
 20771 0000E874 50                      	push rax
 20772 0000E875 6A01                    	push 1	; arg count
 20773 0000E877 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 20774 0000E87F 803805                  	cmp byte [rax], T_undefined
 20775 0000E882 0F845A770000            	je L_error_fvar_undefined
 20776 0000E888 803804                  	cmp byte [rax], T_closure
 20777 0000E88B 0F85D5770000            	jne L_error_non_closure
 20778 0000E891 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20779 0000E894 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20780 0000E897 50                      	push rax
 20781                                  	; preparing a non tail-call
 20782 0000E898 488B4528                	mov rax, PARAM(1)	; param strs
 20783 0000E89C 50                      	push rax
 20784 0000E89D 6A01                    	push 1	; arg count
 20785 0000E89F 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 20786 0000E8A7 803805                  	cmp byte [rax], T_undefined
 20787 0000E8AA 0F8432770000            	je L_error_fvar_undefined
 20788 0000E8B0 803804                  	cmp byte [rax], T_closure
 20789 0000E8B3 0F85AD770000            	jne L_error_non_closure
 20790 0000E8B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20791 0000E8BC FF5009                  	call SOB_CLOSURE_CODE(rax)
 20792 0000E8BF 50                      	push rax
 20793 0000E8C0 6A02                    	push 2	; arg count
 20794 0000E8C2 488B4510                	mov rax, ENV
 20795 0000E8C6 488B00                  	mov rax, qword [rax + 8 * 0]
 20796 0000E8C9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20797 0000E8CC 488B00                  	mov rax, qword [rax]
 20798 0000E8CF 803804                  	cmp byte [rax], T_closure
 20799 0000E8D2 0F858E770000            	jne L_error_non_closure
 20800 0000E8D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20801                                  
 20802                                  	; recycling the current frame
 20803 0000E8DB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20804 0000E8DE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20805 0000E8E1 B906000000              	mov rcx, 2 + 4
 20806 0000E8E6 488B5D18                	mov rbx, COUNT
 20807 0000E8EA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20808 0000E8EF 488D55F8                	lea rdx, [rbp - 8 * 1]
 20809                                  .L_tc_recycle_frame_loop_0483:
 20810 0000E8F3 4883F900                	cmp rcx, 0
 20811 0000E8F7 7413                    	je .L_tc_recycle_frame_done_0483
 20812 0000E8F9 488B32                  	mov rsi, qword [rdx]
 20813 0000E8FC 488933                  	mov qword [rbx], rsi
 20814 0000E8FF 48FFC9                  	dec rcx
 20815 0000E902 4883EB08                	sub rbx, 8 * 1
 20816 0000E906 4883EA08                	sub rdx, 8 * 1
 20817 0000E90A EBE7                    	jmp .L_tc_recycle_frame_loop_0483
 20818                                  .L_tc_recycle_frame_done_0483:
 20819 0000E90C 488D6308                	lea rsp, [rbx + 8 * 1]
 20820 0000E910 5D                      	pop rbp	; the proc will restore it!
 20821 0000E911 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20822 0000E914 EB0A                    	jmp .L_if_end_0279
 20823                                  .L_if_else_0279:
 20824 0000E916 48B8-                   	mov rax, L_constants + 2
 20824 0000E918 [0200000000000000] 
 20825                                  .L_if_end_0279:
 20826                                  .L_or_end_003e:
 20827 0000E920 C9                      	leave
 20828 0000E921 C22000                  	ret AND_KILL_FRAME(2)
 20829                                  .L_lambda_simple_end_0368:	; new closure is in rax
 20830 0000E924 50                      	push rax
 20831 0000E925 488B4520                	mov rax, PARAM(0)	; param run
 20832 0000E929 8F00                    	pop qword [rax]
 20833 0000E92B 48B8-                   	mov rax, sob_void
 20833 0000E92D [0000000000000000] 
 20834                                  
 20835 0000E935 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20836 0000E93A E8D0770000              	call malloc
 20837 0000E93F 50                      	push rax
 20838 0000E940 BF08000000              	mov rdi, 8 * 1	; new rib
 20839 0000E945 E8C5770000              	call malloc
 20840 0000E94A 50                      	push rax
 20841 0000E94B BF28000000              	mov rdi, 8 * 5	; extended env
 20842 0000E950 E8BA770000              	call malloc
 20843 0000E955 488B7D10                	mov rdi, ENV
 20844 0000E959 BE00000000              	mov rsi, 0
 20845 0000E95E BA01000000              	mov rdx, 1
 20846                                  .L_lambda_opt_env_loop_0077:	; ext_env[i + 1] <-- env[i]
 20847 0000E963 4883FE04                	cmp rsi, 4
 20848 0000E967 7410                    	je .L_lambda_opt_env_end_0077
 20849 0000E969 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20850 0000E96D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20851 0000E971 48FFC6                  	inc rsi
 20852 0000E974 48FFC2                  	inc rdx
 20853 0000E977 EBEA                    	jmp .L_lambda_opt_env_loop_0077
 20854                                  .L_lambda_opt_env_end_0077:
 20855 0000E979 5B                      	pop rbx
 20856 0000E97A BE00000000              	mov rsi, 0
 20857                                  .L_lambda_opt_params_loop_0077:	; copy params
 20858 0000E97F 4883FE01                	cmp rsi, 1
 20859 0000E983 740E                    	je .L_lambda_opt_params_end_0077
 20860 0000E985 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20861 0000E98A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20862 0000E98E 48FFC6                  	inc rsi
 20863 0000E991 EBEC                    	jmp .L_lambda_opt_params_loop_0077
 20864                                  .L_lambda_opt_params_end_0077:
 20865 0000E993 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20866 0000E996 4889C3                  	mov rbx, rax
 20867 0000E999 58                      	pop rax
 20868 0000E99A C60004                  	mov byte [rax], T_closure
 20869 0000E99D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20870 0000E9A1 48C74009[AEE90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0077
 20871 0000E9A9 E9B0010000              	jmp .L_lambda_opt_end_0077
 20872                                  .L_lambda_opt_code_0077:	; lambda-opt body
 20873 0000E9AE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20874 0000E9B4 0F8404010000            	je .L_lambda_opt_arity_check_exact_0077
 20875 0000E9BA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20876 0000E9C0 7F0B                    	jg .L_lambda_opt_arity_check_more_0077
 20877 0000E9C2 FF742410                	push qword [rsp + 8 * 2]
 20878 0000E9C6 6A01                    	push 1
 20879 0000E9C8 E90F770000              	jmp L_error_incorrect_arity_opt
 20880                                  .L_lambda_opt_arity_check_more_0077:
 20881 0000E9CD 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 20882 0000E9D2 41B901000000            	mov r9 , 1
 20883 0000E9D8 4989E7                  	mov r15, rsp
 20884 0000E9DB 4D29C8                  	sub r8, r9
 20885 0000E9DE 41B900000000            	mov r9, 0
 20886 0000E9E4 498D5F10                	lea rbx, [r15 + 8 * 2]
 20887 0000E9E8 498B4710                	mov rax, qword [r15 + 8 * 2]
 20888 0000E9EC 486BC008                	imul rax, 8
 20889 0000E9F0 4801C3                  	add rbx, rax
 20890 0000E9F3 488B13                  	mov rdx , qword [rbx]
 20891 0000E9F6 4989DA                  	mov r10 , rbx
 20892 0000E9F9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 20893 0000E9FE 52                      	push rdx
 20894 0000E9FF 53                      	push rbx
 20895 0000EA00 4150                    	push r8
 20896 0000EA02 4151                    	push r9
 20897 0000EA04 4152                    	push r10
 20898 0000EA06 4157                    	push r15
 20899 0000EA08 E802770000              	call malloc
 20900 0000EA0D 415F                    	pop r15
 20901 0000EA0F 415A                    	pop r10
 20902 0000EA11 4159                    	pop r9
 20903 0000EA13 4158                    	pop r8
 20904 0000EA15 5B                      	pop rbx
 20905 0000EA16 5A                      	pop rdx
 20906 0000EA17 C60021                  	mov byte qword [rax], T_pair
 20907 0000EA1A 48895001                	mov SOB_PAIR_CAR(rax), rdx
 20908 0000EA1E 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 20909 0000EA26 498902                  	mov qword [r10], rax
 20910 0000EA29 49FFC1                  	inc r9
 20911 0000EA2C 4883EB08                	sub rbx, 8
 20912 0000EA30 4D39C1                  	cmp r9, r8
 20913 0000EA33 743E                    	je .L_lambda_opt_stack_shrink_loop_0251
 20914                                  .L_lambda_opt_stack_shrink_loop_0250:
 20915 0000EA35 488B13                  	mov rdx, qword [rbx]
 20916 0000EA38 53                      	push rbx
 20917 0000EA39 4150                    	push r8
 20918 0000EA3B 4151                    	push r9
 20919 0000EA3D 4152                    	push r10
 20920 0000EA3F 4157                    	push r15
 20921 0000EA41 52                      	push rdx
 20922 0000EA42 BF11000000              	mov rdi, (1 + 8 + 8)
 20923 0000EA47 E8C3760000              	call malloc
 20924 0000EA4C 5A                      	pop rdx
 20925 0000EA4D 415F                    	pop r15
 20926 0000EA4F 415A                    	pop r10
 20927 0000EA51 4159                    	pop r9
 20928 0000EA53 4158                    	pop r8
 20929 0000EA55 5B                      	pop rbx
 20930 0000EA56 C60021                  	mov byte [rax], T_pair
 20931 0000EA59 48895001                	mov SOB_PAIR_CAR(rax), rdx
 20932 0000EA5D 4D8B32                  	mov r14, qword [r10]
 20933 0000EA60 4C897009                	mov SOB_PAIR_CDR(rax), r14
 20934 0000EA64 498902                  	mov qword [r10], rax
 20935 0000EA67 49FFC1                  	inc r9
 20936 0000EA6A 4883EB08                	sub rbx, 8
 20937 0000EA6E 4D39C1                  	cmp r9, r8
 20938 0000EA71 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_0250
 20939                                  .L_lambda_opt_stack_shrink_loop_0251:
 20940 0000EA73 498D5710                	lea rdx, [r15 + 8 * 2]
 20941 0000EA77 48C70201000000          	mov qword [rdx], 1
 20942 0000EA7E 48830201                	add qword [rdx] , 1
 20943 0000EA82 4D89C1                  	mov r9, r8
 20944 0000EA85 49FFC9                  	dec r9
 20945 0000EA88 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 20946                                  .L_lambda_opt_stack_shrink_loop_0252:
 20947 0000EA8C 488B03                  	mov rax, qword [rbx]
 20948 0000EA8F 498901                  	mov qword [r9], rax
 20949 0000EA92 4983E908                	sub r9 , 8
 20950 0000EA96 4883EB08                	sub rbx, 8
 20951 0000EA9A 4C39FB                  	cmp rbx, r15
 20952 0000EA9D 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0252
 20953 0000EA9F 488B03                  	mov rax, qword [rbx]
 20954 0000EAA2 498901                  	mov qword [r9], rax
 20955 0000EAA5 4D89C1                  	mov r9, r8
 20956 0000EAA8 4983E901                	sub r9 , 1
 20957 0000EAAC 4983F900                	cmp r9, 0
 20958 0000EAB0 7446                    je .L_lambda_opt_stack_adjusted_0077
 20959                                  .L_lambda_opt_stack_shrink_loop_0253:
 20960 0000EAB2 58                      	pop rax
 20961 0000EAB3 49FFC9                  	dec r9
 20962 0000EAB6 4983F900                	cmp r9, 0
 20963 0000EABA 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0253
 20964 0000EABC EB3A                    jmp .L_lambda_opt_stack_adjusted_0077
 20965                                  .L_lambda_opt_arity_check_exact_0077:
 20966 0000EABE 4989E7                  	mov r15, rsp
 20967 0000EAC1 498D5F18                	lea rbx, [r15 + 8 * 2 + 8 * 1]
 20968 0000EAC5 488B0B                  	mov rcx, qword [rbx]
 20969 0000EAC8 48C703[01000000]        	mov qword [rbx], sob_nil
 20970 0000EACF 4883EB08                	sub rbx, 8
 20971                                  .L_lambda_opt_stack_shrink_loop_024f:
 20972 0000EAD3 488B13                  	mov rdx, qword [rbx]
 20973 0000EAD6 48890B                  	mov qword [rbx], rcx
 20974 0000EAD9 4C39FB                  	cmp rbx, r15
 20975 0000EADC 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0077
 20976 0000EADE 4889D1                  	mov rcx, rdx
 20977 0000EAE1 4883EB08                	sub rbx, 8
 20978 0000EAE5 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_024f
 20979                                  .L_lambda_opt_stack_shrink_loop_exit_0077:
 20980 0000EAE7 52                      	push rdx
 20981 0000EAE8 4989E7                  	mov r15, rsp
 20982 0000EAEB 4983C710                	add r15, 16
 20983 0000EAEF 498B1F                  	mov rbx, qword [r15]
 20984 0000EAF2 48FFC3                  	inc rbx
 20985 0000EAF5 49891F                  	mov qword [r15], rbx
 20986                                  .L_lambda_opt_stack_adjusted_0077:
 20987 0000EAF8 C8000000                	enter 0, 0
 20988                                  	; preparing a tail-call
 20989 0000EAFC 488B4528                	mov rax, PARAM(1)	; param strs
 20990 0000EB00 50                      	push rax
 20991 0000EB01 488B4520                	mov rax, PARAM(0)	; param str
 20992 0000EB05 50                      	push rax
 20993 0000EB06 6A02                    	push 2	; arg count
 20994 0000EB08 488B4510                	mov rax, ENV
 20995 0000EB0C 488B00                  	mov rax, qword [rax + 8 * 0]
 20996 0000EB0F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20997 0000EB12 488B00                  	mov rax, qword [rax]
 20998 0000EB15 803804                  	cmp byte [rax], T_closure
 20999 0000EB18 0F8548750000            	jne L_error_non_closure
 21000 0000EB1E FF7001                  	push SOB_CLOSURE_ENV(rax)
 21001                                  
 21002                                  	; recycling the current frame
 21003 0000EB21 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21004 0000EB24 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21005 0000EB27 B906000000              	mov rcx, 2 + 4
 21006 0000EB2C 488B5D18                	mov rbx, COUNT
 21007 0000EB30 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21008 0000EB35 488D55F8                	lea rdx, [rbp - 8 * 1]
 21009                                  .L_tc_recycle_frame_loop_0484:
 21010 0000EB39 4883F900                	cmp rcx, 0
 21011 0000EB3D 7413                    	je .L_tc_recycle_frame_done_0484
 21012 0000EB3F 488B32                  	mov rsi, qword [rdx]
 21013 0000EB42 488933                  	mov qword [rbx], rsi
 21014 0000EB45 48FFC9                  	dec rcx
 21015 0000EB48 4883EB08                	sub rbx, 8 * 1
 21016 0000EB4C 4883EA08                	sub rdx, 8 * 1
 21017 0000EB50 EBE7                    	jmp .L_tc_recycle_frame_loop_0484
 21018                                  .L_tc_recycle_frame_done_0484:
 21019 0000EB52 488D6308                	lea rsp, [rbx + 8 * 1]
 21020 0000EB56 5D                      	pop rbp	; the proc will restore it!
 21021 0000EB57 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21022 0000EB5A C9                      	leave
 21023 0000EB5B C22000                  	ret AND_KILL_FRAME(2)
 21024                                  .L_lambda_opt_end_0077:	; new closure is in rax
 21025 0000EB5E C9                      	leave
 21026 0000EB5F C21800                  	ret AND_KILL_FRAME(1)
 21027                                  .L_lambda_simple_end_0367:	; new closure is in rax
 21028 0000EB62 803804                  	cmp byte [rax], T_closure
 21029 0000EB65 0F85FB740000            	jne L_error_non_closure
 21030 0000EB6B FF7001                  	push SOB_CLOSURE_ENV(rax)
 21031                                  
 21032                                  	; recycling the current frame
 21033 0000EB6E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21034 0000EB71 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21035 0000EB74 B905000000              	mov rcx, 1 + 4
 21036 0000EB79 488B5D18                	mov rbx, COUNT
 21037 0000EB7D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21038 0000EB82 488D55F8                	lea rdx, [rbp - 8 * 1]
 21039                                  .L_tc_recycle_frame_loop_0485:
 21040 0000EB86 4883F900                	cmp rcx, 0
 21041 0000EB8A 7413                    	je .L_tc_recycle_frame_done_0485
 21042 0000EB8C 488B32                  	mov rsi, qword [rdx]
 21043 0000EB8F 488933                  	mov qword [rbx], rsi
 21044 0000EB92 48FFC9                  	dec rcx
 21045 0000EB95 4883EB08                	sub rbx, 8 * 1
 21046 0000EB99 4883EA08                	sub rdx, 8 * 1
 21047 0000EB9D EBE7                    	jmp .L_tc_recycle_frame_loop_0485
 21048                                  .L_tc_recycle_frame_done_0485:
 21049 0000EB9F 488D6308                	lea rsp, [rbx + 8 * 1]
 21050 0000EBA3 5D                      	pop rbp	; the proc will restore it!
 21051 0000EBA4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21052 0000EBA7 C9                      	leave
 21053 0000EBA8 C21800                  	ret AND_KILL_FRAME(1)
 21054                                  .L_lambda_simple_end_0366:	; new closure is in rax
 21055 0000EBAB 803804                  	cmp byte [rax], T_closure
 21056 0000EBAE 0F85B2740000            	jne L_error_non_closure
 21057 0000EBB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21058                                  
 21059                                  	; recycling the current frame
 21060 0000EBB7 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21061 0000EBBA FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21062 0000EBBD B905000000              	mov rcx, 1 + 4
 21063 0000EBC2 488B5D18                	mov rbx, COUNT
 21064 0000EBC6 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21065 0000EBCB 488D55F8                	lea rdx, [rbp - 8 * 1]
 21066                                  .L_tc_recycle_frame_loop_0486:
 21067 0000EBCF 4883F900                	cmp rcx, 0
 21068 0000EBD3 7413                    	je .L_tc_recycle_frame_done_0486
 21069 0000EBD5 488B32                  	mov rsi, qword [rdx]
 21070 0000EBD8 488933                  	mov qword [rbx], rsi
 21071 0000EBDB 48FFC9                  	dec rcx
 21072 0000EBDE 4883EB08                	sub rbx, 8 * 1
 21073 0000EBE2 4883EA08                	sub rdx, 8 * 1
 21074 0000EBE6 EBE7                    	jmp .L_tc_recycle_frame_loop_0486
 21075                                  .L_tc_recycle_frame_done_0486:
 21076 0000EBE8 488D6308                	lea rsp, [rbx + 8 * 1]
 21077 0000EBEC 5D                      	pop rbp	; the proc will restore it!
 21078 0000EBED FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21079 0000EBF0 C9                      	leave
 21080 0000EBF1 C21800                  	ret AND_KILL_FRAME(1)
 21081                                  .L_lambda_simple_end_0362:	; new closure is in rax
 21082 0000EBF4 803804                  	cmp byte [rax], T_closure
 21083 0000EBF7 0F8569740000            	jne L_error_non_closure
 21084 0000EBFD FF7001                  	push SOB_CLOSURE_ENV(rax)
 21085                                  
 21086                                  	; recycling the current frame
 21087 0000EC00 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21088 0000EC03 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21089 0000EC06 B905000000              	mov rcx, 1 + 4
 21090 0000EC0B 488B5D18                	mov rbx, COUNT
 21091 0000EC0F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21092 0000EC14 488D55F8                	lea rdx, [rbp - 8 * 1]
 21093                                  .L_tc_recycle_frame_loop_0487:
 21094 0000EC18 4883F900                	cmp rcx, 0
 21095 0000EC1C 7413                    	je .L_tc_recycle_frame_done_0487
 21096 0000EC1E 488B32                  	mov rsi, qword [rdx]
 21097 0000EC21 488933                  	mov qword [rbx], rsi
 21098 0000EC24 48FFC9                  	dec rcx
 21099 0000EC27 4883EB08                	sub rbx, 8 * 1
 21100 0000EC2B 4883EA08                	sub rdx, 8 * 1
 21101 0000EC2F EBE7                    	jmp .L_tc_recycle_frame_loop_0487
 21102                                  .L_tc_recycle_frame_done_0487:
 21103 0000EC31 488D6308                	lea rsp, [rbx + 8 * 1]
 21104 0000EC35 5D                      	pop rbp	; the proc will restore it!
 21105 0000EC36 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21106 0000EC39 C9                      	leave
 21107 0000EC3A C22000                  	ret AND_KILL_FRAME(2)
 21108                                  .L_lambda_simple_end_0361:	; new closure is in rax
 21109 0000EC3D 50                      	push rax
 21110 0000EC3E 6A01                    	push 1	; arg count
 21111 0000EC40 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21112 0000EC45 E8C5740000              	call malloc
 21113 0000EC4A 50                      	push rax
 21114 0000EC4B BF00000000              	mov rdi, 8 * 0	; new rib
 21115 0000EC50 E8BA740000              	call malloc
 21116 0000EC55 50                      	push rax
 21117 0000EC56 BF08000000              	mov rdi, 8 * 1	; extended env
 21118 0000EC5B E8AF740000              	call malloc
 21119 0000EC60 488B7D10                	mov rdi, ENV
 21120 0000EC64 BE00000000              	mov rsi, 0
 21121 0000EC69 BA01000000              	mov rdx, 1
 21122                                  .L_lambda_simple_env_loop_0369:	; ext_env[i + 1] <-- env[i]
 21123 0000EC6E 4883FE00                	cmp rsi, 0
 21124 0000EC72 7410                    	je .L_lambda_simple_env_end_0369
 21125 0000EC74 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21126 0000EC78 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21127 0000EC7C 48FFC6                  	inc rsi
 21128 0000EC7F 48FFC2                  	inc rdx
 21129 0000EC82 EBEA                    	jmp .L_lambda_simple_env_loop_0369
 21130                                  .L_lambda_simple_env_end_0369:
 21131 0000EC84 5B                      	pop rbx
 21132 0000EC85 BE00000000              	mov rsi, 0
 21133                                  .L_lambda_simple_params_loop_0369:	; copy params
 21134 0000EC8A 4883FE00                	cmp rsi, 0
 21135 0000EC8E 740E                    	je .L_lambda_simple_params_end_0369
 21136 0000EC90 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21137 0000EC95 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21138 0000EC99 48FFC6                  	inc rsi
 21139 0000EC9C EBEC                    	jmp .L_lambda_simple_params_loop_0369
 21140                                  .L_lambda_simple_params_end_0369:
 21141 0000EC9E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21142 0000ECA1 4889C3                  	mov rbx, rax
 21143 0000ECA4 58                      	pop rax
 21144 0000ECA5 C60004                  	mov byte [rax], T_closure
 21145 0000ECA8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21146 0000ECAC 48C74009[B9EC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0369
 21147 0000ECB4 E947010000              	jmp .L_lambda_simple_end_0369
 21148                                  .L_lambda_simple_code_0369:	; lambda-simple body
 21149 0000ECB9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21150 0000ECBF 740B                    	je .L_lambda_simple_arity_check_ok_0369
 21151 0000ECC1 FF742410                	push qword [rsp + 8 * 2]
 21152 0000ECC5 6A01                    	push 1
 21153 0000ECC7 E9FC730000              	jmp L_error_incorrect_arity_simple
 21154                                  .L_lambda_simple_arity_check_ok_0369:
 21155 0000ECCC C8000000                	enter 0, 0
 21156                                  	; preparing a non tail-call
 21157 0000ECD0 488B0425[4A160000]      	mov rax, qword [free_var_130]	; free var char=?
 21158 0000ECD8 803805                  	cmp byte [rax], T_undefined
 21159 0000ECDB 0F8401730000            	je L_error_fvar_undefined
 21160 0000ECE1 50                      	push rax
 21161 0000ECE2 488B0425[28160000]      	mov rax, qword [free_var_128]	; free var char<?
 21162 0000ECEA 803805                  	cmp byte [rax], T_undefined
 21163 0000ECED 0F84EF720000            	je L_error_fvar_undefined
 21164 0000ECF3 50                      	push rax
 21165 0000ECF4 6A02                    	push 2	; arg count
 21166 0000ECF6 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21167 0000ECFA 803804                  	cmp byte [rax], T_closure
 21168 0000ECFD 0F8563730000            	jne L_error_non_closure
 21169 0000ED03 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21170 0000ED06 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21171 0000ED09 48890425[49170000]      	mov qword [free_var_145], rax
 21172 0000ED11 48B8-                   	mov rax, sob_void
 21172 0000ED13 [0000000000000000] 
 21173                                  
 21174                                  	; preparing a non tail-call
 21175 0000ED1B 488B0425[C1160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 21176 0000ED23 803805                  	cmp byte [rax], T_undefined
 21177 0000ED26 0F84B6720000            	je L_error_fvar_undefined
 21178 0000ED2C 50                      	push rax
 21179 0000ED2D 488B0425[9F160000]      	mov rax, qword [free_var_135]	; free var char-ci<?
 21180 0000ED35 803805                  	cmp byte [rax], T_undefined
 21181 0000ED38 0F84A4720000            	je L_error_fvar_undefined
 21182 0000ED3E 50                      	push rax
 21183 0000ED3F 6A02                    	push 2	; arg count
 21184 0000ED41 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21185 0000ED45 803804                  	cmp byte [rax], T_closure
 21186 0000ED48 0F8518730000            	jne L_error_non_closure
 21187 0000ED4E FF7001                  	push SOB_CLOSURE_ENV(rax)
 21188 0000ED51 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21189 0000ED54 48890425[9E170000]      	mov qword [free_var_150], rax
 21190 0000ED5C 48B8-                   	mov rax, sob_void
 21190 0000ED5E [0000000000000000] 
 21191                                  
 21192                                  	; preparing a non tail-call
 21193 0000ED66 488B0425[4A160000]      	mov rax, qword [free_var_130]	; free var char=?
 21194 0000ED6E 803805                  	cmp byte [rax], T_undefined
 21195 0000ED71 0F846B720000            	je L_error_fvar_undefined
 21196 0000ED77 50                      	push rax
 21197 0000ED78 488B0425[5B160000]      	mov rax, qword [free_var_131]	; free var char>?
 21198 0000ED80 803805                  	cmp byte [rax], T_undefined
 21199 0000ED83 0F8459720000            	je L_error_fvar_undefined
 21200 0000ED89 50                      	push rax
 21201 0000ED8A 6A02                    	push 2	; arg count
 21202 0000ED8C 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21203 0000ED90 803804                  	cmp byte [rax], T_closure
 21204 0000ED93 0F85CD720000            	jne L_error_non_closure
 21205 0000ED99 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21206 0000ED9C FF5009                  	call SOB_CLOSURE_CODE(rax)
 21207 0000ED9F 48890425[6B170000]      	mov qword [free_var_147], rax
 21208 0000EDA7 48B8-                   	mov rax, sob_void
 21208 0000EDA9 [0000000000000000] 
 21209                                  
 21210                                  	; preparing a non tail-call
 21211 0000EDB1 488B0425[C1160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 21212 0000EDB9 803805                  	cmp byte [rax], T_undefined
 21213 0000EDBC 0F8420720000            	je L_error_fvar_undefined
 21214 0000EDC2 50                      	push rax
 21215 0000EDC3 488B0425[D2160000]      	mov rax, qword [free_var_138]	; free var char-ci>?
 21216 0000EDCB 803805                  	cmp byte [rax], T_undefined
 21217 0000EDCE 0F840E720000            	je L_error_fvar_undefined
 21218 0000EDD4 50                      	push rax
 21219 0000EDD5 6A02                    	push 2	; arg count
 21220 0000EDD7 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21221 0000EDDB 803804                  	cmp byte [rax], T_closure
 21222 0000EDDE 0F8582720000            	jne L_error_non_closure
 21223 0000EDE4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21224 0000EDE7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21225 0000EDEA 48890425[C0170000]      	mov qword [free_var_152], rax
 21226 0000EDF2 48B8-                   	mov rax, sob_void
 21226 0000EDF4 [0000000000000000] 
 21227 0000EDFC C9                      	leave
 21228 0000EDFD C21800                  	ret AND_KILL_FRAME(1)
 21229                                  .L_lambda_simple_end_0369:	; new closure is in rax
 21230 0000EE00 803804                  	cmp byte [rax], T_closure
 21231 0000EE03 0F855D720000            	jne L_error_non_closure
 21232 0000EE09 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21233 0000EE0C FF5009                  	call SOB_CLOSURE_CODE(rax)
 21234                                  
 21235 0000EE0F 4889C7                  	mov rdi, rax
 21236 0000EE12 E80A740000              	call print_sexpr_if_not_void
 21237                                  
 21238                                  	; preparing a non tail-call
 21239 0000EE17 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21240 0000EE1C E8EE720000              	call malloc
 21241 0000EE21 50                      	push rax
 21242 0000EE22 BF00000000              	mov rdi, 8 * 0	; new rib
 21243 0000EE27 E8E3720000              	call malloc
 21244 0000EE2C 50                      	push rax
 21245 0000EE2D BF08000000              	mov rdi, 8 * 1	; extended env
 21246 0000EE32 E8D8720000              	call malloc
 21247 0000EE37 488B7D10                	mov rdi, ENV
 21248 0000EE3B BE00000000              	mov rsi, 0
 21249 0000EE40 BA01000000              	mov rdx, 1
 21250                                  .L_lambda_simple_env_loop_036a:	; ext_env[i + 1] <-- env[i]
 21251 0000EE45 4883FE00                	cmp rsi, 0
 21252 0000EE49 7410                    	je .L_lambda_simple_env_end_036a
 21253 0000EE4B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21254 0000EE4F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21255 0000EE53 48FFC6                  	inc rsi
 21256 0000EE56 48FFC2                  	inc rdx
 21257 0000EE59 EBEA                    	jmp .L_lambda_simple_env_loop_036a
 21258                                  .L_lambda_simple_env_end_036a:
 21259 0000EE5B 5B                      	pop rbx
 21260 0000EE5C BE00000000              	mov rsi, 0
 21261                                  .L_lambda_simple_params_loop_036a:	; copy params
 21262 0000EE61 4883FE00                	cmp rsi, 0
 21263 0000EE65 740E                    	je .L_lambda_simple_params_end_036a
 21264 0000EE67 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21265 0000EE6C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21266 0000EE70 48FFC6                  	inc rsi
 21267 0000EE73 EBEC                    	jmp .L_lambda_simple_params_loop_036a
 21268                                  .L_lambda_simple_params_end_036a:
 21269 0000EE75 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21270 0000EE78 4889C3                  	mov rbx, rax
 21271 0000EE7B 58                      	pop rax
 21272 0000EE7C C60004                  	mov byte [rax], T_closure
 21273 0000EE7F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21274 0000EE83 48C74009[90EE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_036a
 21275 0000EE8B E9CB0B0000              	jmp .L_lambda_simple_end_036a
 21276                                  .L_lambda_simple_code_036a:	; lambda-simple body
 21277 0000EE90 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21278 0000EE96 740B                    	je .L_lambda_simple_arity_check_ok_036a
 21279 0000EE98 FF742410                	push qword [rsp + 8 * 2]
 21280 0000EE9C 6A01                    	push 1
 21281 0000EE9E E925720000              	jmp L_error_incorrect_arity_simple
 21282                                  .L_lambda_simple_arity_check_ok_036a:
 21283 0000EEA3 C8000000                	enter 0, 0
 21284                                  	; preparing a tail-call
 21285 0000EEA7 48B8-                   	mov rax, L_constants + 1881
 21285 0000EEA9 [5907000000000000] 
 21286 0000EEB1 50                      	push rax
 21287 0000EEB2 6A01                    	push 1	; arg count
 21288 0000EEB4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21289 0000EEB9 E851720000              	call malloc
 21290 0000EEBE 50                      	push rax
 21291 0000EEBF BF08000000              	mov rdi, 8 * 1	; new rib
 21292 0000EEC4 E846720000              	call malloc
 21293 0000EEC9 50                      	push rax
 21294 0000EECA BF10000000              	mov rdi, 8 * 2	; extended env
 21295 0000EECF E83B720000              	call malloc
 21296 0000EED4 488B7D10                	mov rdi, ENV
 21297 0000EED8 BE00000000              	mov rsi, 0
 21298 0000EEDD BA01000000              	mov rdx, 1
 21299                                  .L_lambda_simple_env_loop_036b:	; ext_env[i + 1] <-- env[i]
 21300 0000EEE2 4883FE01                	cmp rsi, 1
 21301 0000EEE6 7410                    	je .L_lambda_simple_env_end_036b
 21302 0000EEE8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21303 0000EEEC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21304 0000EEF0 48FFC6                  	inc rsi
 21305 0000EEF3 48FFC2                  	inc rdx
 21306 0000EEF6 EBEA                    	jmp .L_lambda_simple_env_loop_036b
 21307                                  .L_lambda_simple_env_end_036b:
 21308 0000EEF8 5B                      	pop rbx
 21309 0000EEF9 BE00000000              	mov rsi, 0
 21310                                  .L_lambda_simple_params_loop_036b:	; copy params
 21311 0000EEFE 4883FE01                	cmp rsi, 1
 21312 0000EF02 740E                    	je .L_lambda_simple_params_end_036b
 21313 0000EF04 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21314 0000EF09 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21315 0000EF0D 48FFC6                  	inc rsi
 21316 0000EF10 EBEC                    	jmp .L_lambda_simple_params_loop_036b
 21317                                  .L_lambda_simple_params_end_036b:
 21318 0000EF12 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21319 0000EF15 4889C3                  	mov rbx, rax
 21320 0000EF18 58                      	pop rax
 21321 0000EF19 C60004                  	mov byte [rax], T_closure
 21322 0000EF1C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21323 0000EF20 48C74009[2DEF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_036b
 21324 0000EF28 E9E50A0000              	jmp .L_lambda_simple_end_036b
 21325                                  .L_lambda_simple_code_036b:	; lambda-simple body
 21326 0000EF2D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21327 0000EF33 740B                    	je .L_lambda_simple_arity_check_ok_036b
 21328 0000EF35 FF742410                	push qword [rsp + 8 * 2]
 21329 0000EF39 6A01                    	push 1
 21330 0000EF3B E988710000              	jmp L_error_incorrect_arity_simple
 21331                                  .L_lambda_simple_arity_check_ok_036b:
 21332 0000EF40 C8000000                	enter 0, 0
 21333 0000EF44 BF08000000              	mov rdi, 8	; sob_box
 21334 0000EF49 E8C1710000              	call malloc
 21335 0000EF4E 488B5D20                	mov rbx, PARAM(0)
 21336 0000EF52 488918                  	mov [rax], rbx
 21337 0000EF55 48894520                	mov PARAM(0), rax
 21338 0000EF59 48B8-                   	mov rax, sob_void
 21338 0000EF5B [0000000000000000] 
 21339                                  
 21340 0000EF63 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21341 0000EF68 E8A2710000              	call malloc
 21342 0000EF6D 50                      	push rax
 21343 0000EF6E BF08000000              	mov rdi, 8 * 1	; new rib
 21344 0000EF73 E897710000              	call malloc
 21345 0000EF78 50                      	push rax
 21346 0000EF79 BF18000000              	mov rdi, 8 * 3	; extended env
 21347 0000EF7E E88C710000              	call malloc
 21348 0000EF83 488B7D10                	mov rdi, ENV
 21349 0000EF87 BE00000000              	mov rsi, 0
 21350 0000EF8C BA01000000              	mov rdx, 1
 21351                                  .L_lambda_simple_env_loop_036c:	; ext_env[i + 1] <-- env[i]
 21352 0000EF91 4883FE02                	cmp rsi, 2
 21353 0000EF95 7410                    	je .L_lambda_simple_env_end_036c
 21354 0000EF97 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21355 0000EF9B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21356 0000EF9F 48FFC6                  	inc rsi
 21357 0000EFA2 48FFC2                  	inc rdx
 21358 0000EFA5 EBEA                    	jmp .L_lambda_simple_env_loop_036c
 21359                                  .L_lambda_simple_env_end_036c:
 21360 0000EFA7 5B                      	pop rbx
 21361 0000EFA8 BE00000000              	mov rsi, 0
 21362                                  .L_lambda_simple_params_loop_036c:	; copy params
 21363 0000EFAD 4883FE01                	cmp rsi, 1
 21364 0000EFB1 740E                    	je .L_lambda_simple_params_end_036c
 21365 0000EFB3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21366 0000EFB8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21367 0000EFBC 48FFC6                  	inc rsi
 21368 0000EFBF EBEC                    	jmp .L_lambda_simple_params_loop_036c
 21369                                  .L_lambda_simple_params_end_036c:
 21370 0000EFC1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21371 0000EFC4 4889C3                  	mov rbx, rax
 21372 0000EFC7 58                      	pop rax
 21373 0000EFC8 C60004                  	mov byte [rax], T_closure
 21374 0000EFCB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21375 0000EFCF 48C74009[DCEF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_036c
 21376 0000EFD7 E9BB010000              	jmp .L_lambda_simple_end_036c
 21377                                  .L_lambda_simple_code_036c:	; lambda-simple body
 21378 0000EFDC 48837C241004            	cmp qword [rsp + 8 * 2], 4
 21379 0000EFE2 740B                    	je .L_lambda_simple_arity_check_ok_036c
 21380 0000EFE4 FF742410                	push qword [rsp + 8 * 2]
 21381 0000EFE8 6A04                    	push 4
 21382 0000EFEA E9D9700000              	jmp L_error_incorrect_arity_simple
 21383                                  .L_lambda_simple_arity_check_ok_036c:
 21384 0000EFEF C8000000                	enter 0, 0
 21385                                  	; preparing a non tail-call
 21386 0000EFF3 488B4538                	mov rax, PARAM(3)	; param len
 21387 0000EFF7 50                      	push rax
 21388 0000EFF8 488B4520                	mov rax, PARAM(0)	; param i
 21389 0000EFFC 50                      	push rax
 21390 0000EFFD 6A02                    	push 2	; arg count
 21391 0000EFFF 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 21392 0000F007 803805                  	cmp byte [rax], T_undefined
 21393 0000F00A 0F84D26F0000            	je L_error_fvar_undefined
 21394 0000F010 803804                  	cmp byte [rax], T_closure
 21395 0000F013 0F854D700000            	jne L_error_non_closure
 21396 0000F019 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21397 0000F01C FF5009                  	call SOB_CLOSURE_CODE(rax)
 21398 0000F01F 483D[02000000]          	cmp rax, sob_boolean_false
 21399 0000F025 0F8568010000            	jne .L_or_end_003f
 21400                                  	; preparing a non tail-call
 21401 0000F02B 488B4538                	mov rax, PARAM(3)	; param len
 21402 0000F02F 50                      	push rax
 21403 0000F030 488B4520                	mov rax, PARAM(0)	; param i
 21404 0000F034 50                      	push rax
 21405 0000F035 6A02                    	push 2	; arg count
 21406 0000F037 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 21407 0000F03F 803805                  	cmp byte [rax], T_undefined
 21408 0000F042 0F849A6F0000            	je L_error_fvar_undefined
 21409 0000F048 803804                  	cmp byte [rax], T_closure
 21410 0000F04B 0F8515700000            	jne L_error_non_closure
 21411 0000F051 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21412 0000F054 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21413 0000F057 483D[02000000]          	cmp rax, sob_boolean_false
 21414 0000F05D 0F8426010000            	je .L_if_else_027a
 21415                                  	; preparing a non tail-call
 21416                                  	; preparing a non tail-call
 21417 0000F063 488B4520                	mov rax, PARAM(0)	; param i
 21418 0000F067 50                      	push rax
 21419 0000F068 488B4530                	mov rax, PARAM(2)	; param str2
 21420 0000F06C 50                      	push rax
 21421 0000F06D 6A02                    	push 2	; arg count
 21422 0000F06F 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 21423 0000F077 803805                  	cmp byte [rax], T_undefined
 21424 0000F07A 0F84626F0000            	je L_error_fvar_undefined
 21425 0000F080 803804                  	cmp byte [rax], T_closure
 21426 0000F083 0F85DD6F0000            	jne L_error_non_closure
 21427 0000F089 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21428 0000F08C FF5009                  	call SOB_CLOSURE_CODE(rax)
 21429 0000F08F 50                      	push rax
 21430                                  	; preparing a non tail-call
 21431 0000F090 488B4520                	mov rax, PARAM(0)	; param i
 21432 0000F094 50                      	push rax
 21433 0000F095 488B4528                	mov rax, PARAM(1)	; param str1
 21434 0000F099 50                      	push rax
 21435 0000F09A 6A02                    	push 2	; arg count
 21436 0000F09C 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 21437 0000F0A4 803805                  	cmp byte [rax], T_undefined
 21438 0000F0A7 0F84356F0000            	je L_error_fvar_undefined
 21439 0000F0AD 803804                  	cmp byte [rax], T_closure
 21440 0000F0B0 0F85B06F0000            	jne L_error_non_closure
 21441 0000F0B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21442 0000F0B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21443 0000F0BC 50                      	push rax
 21444 0000F0BD 6A02                    	push 2	; arg count
 21445 0000F0BF 488B4510                	mov rax, ENV
 21446 0000F0C3 488B4008                	mov rax, qword [rax + 8 * 1]
 21447 0000F0C7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char=?
 21448 0000F0CA 803804                  	cmp byte [rax], T_closure
 21449 0000F0CD 0F85936F0000            	jne L_error_non_closure
 21450 0000F0D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21451 0000F0D6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21452 0000F0D9 483D[02000000]          	cmp rax, sob_boolean_false
 21453 0000F0DF 0F8498000000            	je .L_if_else_027b
 21454                                  	; preparing a tail-call
 21455 0000F0E5 488B4538                	mov rax, PARAM(3)	; param len
 21456 0000F0E9 50                      	push rax
 21457 0000F0EA 488B4530                	mov rax, PARAM(2)	; param str2
 21458 0000F0EE 50                      	push rax
 21459 0000F0EF 488B4528                	mov rax, PARAM(1)	; param str1
 21460 0000F0F3 50                      	push rax
 21461                                  	; preparing a non tail-call
 21462 0000F0F4 48B8-                   	mov rax, L_constants + 2158
 21462 0000F0F6 [6E08000000000000] 
 21463 0000F0FE 50                      	push rax
 21464 0000F0FF 488B4520                	mov rax, PARAM(0)	; param i
 21465 0000F103 50                      	push rax
 21466 0000F104 6A02                    	push 2	; arg count
 21467 0000F106 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 21468 0000F10E 803805                  	cmp byte [rax], T_undefined
 21469 0000F111 0F84CB6E0000            	je L_error_fvar_undefined
 21470 0000F117 803804                  	cmp byte [rax], T_closure
 21471 0000F11A 0F85466F0000            	jne L_error_non_closure
 21472 0000F120 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21473 0000F123 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21474 0000F126 50                      	push rax
 21475 0000F127 6A04                    	push 4	; arg count
 21476 0000F129 488B4510                	mov rax, ENV
 21477 0000F12D 488B00                  	mov rax, qword [rax + 8 * 0]
 21478 0000F130 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21479 0000F133 488B00                  	mov rax, qword [rax]
 21480 0000F136 803804                  	cmp byte [rax], T_closure
 21481 0000F139 0F85276F0000            	jne L_error_non_closure
 21482 0000F13F FF7001                  	push SOB_CLOSURE_ENV(rax)
 21483                                  
 21484                                  	; recycling the current frame
 21485 0000F142 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21486 0000F145 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21487 0000F148 B908000000              	mov rcx, 4 + 4
 21488 0000F14D 488B5D18                	mov rbx, COUNT
 21489 0000F151 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21490 0000F156 488D55F8                	lea rdx, [rbp - 8 * 1]
 21491                                  .L_tc_recycle_frame_loop_0488:
 21492 0000F15A 4883F900                	cmp rcx, 0
 21493 0000F15E 7413                    	je .L_tc_recycle_frame_done_0488
 21494 0000F160 488B32                  	mov rsi, qword [rdx]
 21495 0000F163 488933                  	mov qword [rbx], rsi
 21496 0000F166 48FFC9                  	dec rcx
 21497 0000F169 4883EB08                	sub rbx, 8 * 1
 21498 0000F16D 4883EA08                	sub rdx, 8 * 1
 21499 0000F171 EBE7                    	jmp .L_tc_recycle_frame_loop_0488
 21500                                  .L_tc_recycle_frame_done_0488:
 21501 0000F173 488D6308                	lea rsp, [rbx + 8 * 1]
 21502 0000F177 5D                      	pop rbp	; the proc will restore it!
 21503 0000F178 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21504 0000F17B EB0A                    	jmp .L_if_end_027b
 21505                                  .L_if_else_027b:
 21506 0000F17D 48B8-                   	mov rax, L_constants + 2
 21506 0000F17F [0200000000000000] 
 21507                                  .L_if_end_027b:
 21508 0000F187 EB0A                    	jmp .L_if_end_027a
 21509                                  .L_if_else_027a:
 21510 0000F189 48B8-                   	mov rax, L_constants + 2
 21510 0000F18B [0200000000000000] 
 21511                                  .L_if_end_027a:
 21512                                  .L_or_end_003f:
 21513 0000F193 C9                      	leave
 21514 0000F194 C23000                  	ret AND_KILL_FRAME(4)
 21515                                  .L_lambda_simple_end_036c:	; new closure is in rax
 21516 0000F197 50                      	push rax
 21517 0000F198 488B4520                	mov rax, PARAM(0)	; param run
 21518 0000F19C 8F00                    	pop qword [rax]
 21519 0000F19E 48B8-                   	mov rax, sob_void
 21519 0000F1A0 [0000000000000000] 
 21520                                  
 21521                                  	; preparing a tail-call
 21522 0000F1A8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21523 0000F1AD E85D6F0000              	call malloc
 21524 0000F1B2 50                      	push rax
 21525 0000F1B3 BF08000000              	mov rdi, 8 * 1	; new rib
 21526 0000F1B8 E8526F0000              	call malloc
 21527 0000F1BD 50                      	push rax
 21528 0000F1BE BF18000000              	mov rdi, 8 * 3	; extended env
 21529 0000F1C3 E8476F0000              	call malloc
 21530 0000F1C8 488B7D10                	mov rdi, ENV
 21531 0000F1CC BE00000000              	mov rsi, 0
 21532 0000F1D1 BA01000000              	mov rdx, 1
 21533                                  .L_lambda_simple_env_loop_036d:	; ext_env[i + 1] <-- env[i]
 21534 0000F1D6 4883FE02                	cmp rsi, 2
 21535 0000F1DA 7410                    	je .L_lambda_simple_env_end_036d
 21536 0000F1DC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21537 0000F1E0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21538 0000F1E4 48FFC6                  	inc rsi
 21539 0000F1E7 48FFC2                  	inc rdx
 21540 0000F1EA EBEA                    	jmp .L_lambda_simple_env_loop_036d
 21541                                  .L_lambda_simple_env_end_036d:
 21542 0000F1EC 5B                      	pop rbx
 21543 0000F1ED BE00000000              	mov rsi, 0
 21544                                  .L_lambda_simple_params_loop_036d:	; copy params
 21545 0000F1F2 4883FE01                	cmp rsi, 1
 21546 0000F1F6 740E                    	je .L_lambda_simple_params_end_036d
 21547 0000F1F8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21548 0000F1FD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21549 0000F201 48FFC6                  	inc rsi
 21550 0000F204 EBEC                    	jmp .L_lambda_simple_params_loop_036d
 21551                                  .L_lambda_simple_params_end_036d:
 21552 0000F206 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21553 0000F209 4889C3                  	mov rbx, rax
 21554 0000F20C 58                      	pop rax
 21555 0000F20D C60004                  	mov byte [rax], T_closure
 21556 0000F210 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21557 0000F214 48C74009[21F20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_036d
 21558 0000F21C E906020000              	jmp .L_lambda_simple_end_036d
 21559                                  .L_lambda_simple_code_036d:	; lambda-simple body
 21560 0000F221 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21561 0000F227 740B                    	je .L_lambda_simple_arity_check_ok_036d
 21562 0000F229 FF742410                	push qword [rsp + 8 * 2]
 21563 0000F22D 6A02                    	push 2
 21564 0000F22F E9946E0000              	jmp L_error_incorrect_arity_simple
 21565                                  .L_lambda_simple_arity_check_ok_036d:
 21566 0000F234 C8000000                	enter 0, 0
 21567                                  	; preparing a tail-call
 21568                                  	; preparing a non tail-call
 21569 0000F238 488B4528                	mov rax, PARAM(1)	; param str2
 21570 0000F23C 50                      	push rax
 21571 0000F23D 6A01                    	push 1	; arg count
 21572 0000F23F 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 21573 0000F247 803805                  	cmp byte [rax], T_undefined
 21574 0000F24A 0F84926D0000            	je L_error_fvar_undefined
 21575 0000F250 803804                  	cmp byte [rax], T_closure
 21576 0000F253 0F850D6E0000            	jne L_error_non_closure
 21577 0000F259 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21578 0000F25C FF5009                  	call SOB_CLOSURE_CODE(rax)
 21579 0000F25F 50                      	push rax
 21580                                  	; preparing a non tail-call
 21581 0000F260 488B4520                	mov rax, PARAM(0)	; param str1
 21582 0000F264 50                      	push rax
 21583 0000F265 6A01                    	push 1	; arg count
 21584 0000F267 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 21585 0000F26F 803805                  	cmp byte [rax], T_undefined
 21586 0000F272 0F846A6D0000            	je L_error_fvar_undefined
 21587 0000F278 803804                  	cmp byte [rax], T_closure
 21588 0000F27B 0F85E56D0000            	jne L_error_non_closure
 21589 0000F281 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21590 0000F284 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21591 0000F287 50                      	push rax
 21592 0000F288 6A02                    	push 2	; arg count
 21593 0000F28A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21594 0000F28F E87B6E0000              	call malloc
 21595 0000F294 50                      	push rax
 21596 0000F295 BF10000000              	mov rdi, 8 * 2	; new rib
 21597 0000F29A E8706E0000              	call malloc
 21598 0000F29F 50                      	push rax
 21599 0000F2A0 BF20000000              	mov rdi, 8 * 4	; extended env
 21600 0000F2A5 E8656E0000              	call malloc
 21601 0000F2AA 488B7D10                	mov rdi, ENV
 21602 0000F2AE BE00000000              	mov rsi, 0
 21603 0000F2B3 BA01000000              	mov rdx, 1
 21604                                  .L_lambda_simple_env_loop_036e:	; ext_env[i + 1] <-- env[i]
 21605 0000F2B8 4883FE03                	cmp rsi, 3
 21606 0000F2BC 7410                    	je .L_lambda_simple_env_end_036e
 21607 0000F2BE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21608 0000F2C2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21609 0000F2C6 48FFC6                  	inc rsi
 21610 0000F2C9 48FFC2                  	inc rdx
 21611 0000F2CC EBEA                    	jmp .L_lambda_simple_env_loop_036e
 21612                                  .L_lambda_simple_env_end_036e:
 21613 0000F2CE 5B                      	pop rbx
 21614 0000F2CF BE00000000              	mov rsi, 0
 21615                                  .L_lambda_simple_params_loop_036e:	; copy params
 21616 0000F2D4 4883FE02                	cmp rsi, 2
 21617 0000F2D8 740E                    	je .L_lambda_simple_params_end_036e
 21618 0000F2DA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21619 0000F2DF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21620 0000F2E3 48FFC6                  	inc rsi
 21621 0000F2E6 EBEC                    	jmp .L_lambda_simple_params_loop_036e
 21622                                  .L_lambda_simple_params_end_036e:
 21623 0000F2E8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21624 0000F2EB 4889C3                  	mov rbx, rax
 21625 0000F2EE 58                      	pop rax
 21626 0000F2EF C60004                  	mov byte [rax], T_closure
 21627 0000F2F2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21628 0000F2F6 48C74009[03F30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_036e
 21629 0000F2FE E9DB000000              	jmp .L_lambda_simple_end_036e
 21630                                  .L_lambda_simple_code_036e:	; lambda-simple body
 21631 0000F303 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21632 0000F309 740B                    	je .L_lambda_simple_arity_check_ok_036e
 21633 0000F30B FF742410                	push qword [rsp + 8 * 2]
 21634 0000F30F 6A02                    	push 2
 21635 0000F311 E9B26D0000              	jmp L_error_incorrect_arity_simple
 21636                                  .L_lambda_simple_arity_check_ok_036e:
 21637 0000F316 C8000000                	enter 0, 0
 21638                                  	; preparing a non tail-call
 21639 0000F31A 488B4528                	mov rax, PARAM(1)	; param len2
 21640 0000F31E 50                      	push rax
 21641 0000F31F 488B4520                	mov rax, PARAM(0)	; param len1
 21642 0000F323 50                      	push rax
 21643 0000F324 6A02                    	push 2	; arg count
 21644 0000F326 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 21645 0000F32E 803805                  	cmp byte [rax], T_undefined
 21646 0000F331 0F84AB6C0000            	je L_error_fvar_undefined
 21647 0000F337 803804                  	cmp byte [rax], T_closure
 21648 0000F33A 0F85266D0000            	jne L_error_non_closure
 21649 0000F340 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21650 0000F343 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21651 0000F346 483D[02000000]          	cmp rax, sob_boolean_false
 21652 0000F34C 0F847E000000            	je .L_if_else_027c
 21653                                  	; preparing a tail-call
 21654 0000F352 488B4520                	mov rax, PARAM(0)	; param len1
 21655 0000F356 50                      	push rax
 21656 0000F357 488B4510                	mov rax, ENV
 21657 0000F35B 488B00                  	mov rax, qword [rax + 8 * 0]
 21658 0000F35E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 21659 0000F362 50                      	push rax
 21660 0000F363 488B4510                	mov rax, ENV
 21661 0000F367 488B00                  	mov rax, qword [rax + 8 * 0]
 21662 0000F36A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 21663 0000F36D 50                      	push rax
 21664 0000F36E 48B8-                   	mov rax, L_constants + 2023
 21664 0000F370 [E707000000000000] 
 21665 0000F378 50                      	push rax
 21666 0000F379 6A04                    	push 4	; arg count
 21667 0000F37B 488B4510                	mov rax, ENV
 21668 0000F37F 488B4008                	mov rax, qword [rax + 8 * 1]
 21669 0000F383 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21670 0000F386 488B00                  	mov rax, qword [rax]
 21671 0000F389 803804                  	cmp byte [rax], T_closure
 21672 0000F38C 0F85D46C0000            	jne L_error_non_closure
 21673 0000F392 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21674                                  
 21675                                  	; recycling the current frame
 21676 0000F395 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21677 0000F398 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21678 0000F39B B908000000              	mov rcx, 4 + 4
 21679 0000F3A0 488B5D18                	mov rbx, COUNT
 21680 0000F3A4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21681 0000F3A9 488D55F8                	lea rdx, [rbp - 8 * 1]
 21682                                  .L_tc_recycle_frame_loop_0489:
 21683 0000F3AD 4883F900                	cmp rcx, 0
 21684 0000F3B1 7413                    	je .L_tc_recycle_frame_done_0489
 21685 0000F3B3 488B32                  	mov rsi, qword [rdx]
 21686 0000F3B6 488933                  	mov qword [rbx], rsi
 21687 0000F3B9 48FFC9                  	dec rcx
 21688 0000F3BC 4883EB08                	sub rbx, 8 * 1
 21689 0000F3C0 4883EA08                	sub rdx, 8 * 1
 21690 0000F3C4 EBE7                    	jmp .L_tc_recycle_frame_loop_0489
 21691                                  .L_tc_recycle_frame_done_0489:
 21692 0000F3C6 488D6308                	lea rsp, [rbx + 8 * 1]
 21693 0000F3CA 5D                      	pop rbp	; the proc will restore it!
 21694 0000F3CB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21695 0000F3CE EB0A                    	jmp .L_if_end_027c
 21696                                  .L_if_else_027c:
 21697 0000F3D0 48B8-                   	mov rax, L_constants + 2
 21697 0000F3D2 [0200000000000000] 
 21698                                  .L_if_end_027c:
 21699 0000F3DA C9                      	leave
 21700 0000F3DB C22000                  	ret AND_KILL_FRAME(2)
 21701                                  .L_lambda_simple_end_036e:	; new closure is in rax
 21702 0000F3DE 803804                  	cmp byte [rax], T_closure
 21703 0000F3E1 0F857F6C0000            	jne L_error_non_closure
 21704 0000F3E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21705                                  
 21706                                  	; recycling the current frame
 21707 0000F3EA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21708 0000F3ED FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21709 0000F3F0 B906000000              	mov rcx, 2 + 4
 21710 0000F3F5 488B5D18                	mov rbx, COUNT
 21711 0000F3F9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21712 0000F3FE 488D55F8                	lea rdx, [rbp - 8 * 1]
 21713                                  .L_tc_recycle_frame_loop_048a:
 21714 0000F402 4883F900                	cmp rcx, 0
 21715 0000F406 7413                    	je .L_tc_recycle_frame_done_048a
 21716 0000F408 488B32                  	mov rsi, qword [rdx]
 21717 0000F40B 488933                  	mov qword [rbx], rsi
 21718 0000F40E 48FFC9                  	dec rcx
 21719 0000F411 4883EB08                	sub rbx, 8 * 1
 21720 0000F415 4883EA08                	sub rdx, 8 * 1
 21721 0000F419 EBE7                    	jmp .L_tc_recycle_frame_loop_048a
 21722                                  .L_tc_recycle_frame_done_048a:
 21723 0000F41B 488D6308                	lea rsp, [rbx + 8 * 1]
 21724 0000F41F 5D                      	pop rbp	; the proc will restore it!
 21725 0000F420 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21726 0000F423 C9                      	leave
 21727 0000F424 C22000                  	ret AND_KILL_FRAME(2)
 21728                                  .L_lambda_simple_end_036d:	; new closure is in rax
 21729 0000F427 50                      	push rax
 21730 0000F428 6A01                    	push 1	; arg count
 21731 0000F42A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21732 0000F42F E8DB6C0000              	call malloc
 21733 0000F434 50                      	push rax
 21734 0000F435 BF08000000              	mov rdi, 8 * 1	; new rib
 21735 0000F43A E8D06C0000              	call malloc
 21736 0000F43F 50                      	push rax
 21737 0000F440 BF18000000              	mov rdi, 8 * 3	; extended env
 21738 0000F445 E8C56C0000              	call malloc
 21739 0000F44A 488B7D10                	mov rdi, ENV
 21740 0000F44E BE00000000              	mov rsi, 0
 21741 0000F453 BA01000000              	mov rdx, 1
 21742                                  .L_lambda_simple_env_loop_036f:	; ext_env[i + 1] <-- env[i]
 21743 0000F458 4883FE02                	cmp rsi, 2
 21744 0000F45C 7410                    	je .L_lambda_simple_env_end_036f
 21745 0000F45E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21746 0000F462 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21747 0000F466 48FFC6                  	inc rsi
 21748 0000F469 48FFC2                  	inc rdx
 21749 0000F46C EBEA                    	jmp .L_lambda_simple_env_loop_036f
 21750                                  .L_lambda_simple_env_end_036f:
 21751 0000F46E 5B                      	pop rbx
 21752 0000F46F BE00000000              	mov rsi, 0
 21753                                  .L_lambda_simple_params_loop_036f:	; copy params
 21754 0000F474 4883FE01                	cmp rsi, 1
 21755 0000F478 740E                    	je .L_lambda_simple_params_end_036f
 21756 0000F47A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21757 0000F47F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21758 0000F483 48FFC6                  	inc rsi
 21759 0000F486 EBEC                    	jmp .L_lambda_simple_params_loop_036f
 21760                                  .L_lambda_simple_params_end_036f:
 21761 0000F488 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21762 0000F48B 4889C3                  	mov rbx, rax
 21763 0000F48E 58                      	pop rax
 21764 0000F48F C60004                  	mov byte [rax], T_closure
 21765 0000F492 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21766 0000F496 48C74009[A3F40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_036f
 21767 0000F49E E926050000              	jmp .L_lambda_simple_end_036f
 21768                                  .L_lambda_simple_code_036f:	; lambda-simple body
 21769 0000F4A3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21770 0000F4A9 740B                    	je .L_lambda_simple_arity_check_ok_036f
 21771 0000F4AB FF742410                	push qword [rsp + 8 * 2]
 21772 0000F4AF 6A01                    	push 1
 21773 0000F4B1 E9126C0000              	jmp L_error_incorrect_arity_simple
 21774                                  .L_lambda_simple_arity_check_ok_036f:
 21775 0000F4B6 C8000000                	enter 0, 0
 21776                                  	; preparing a tail-call
 21777 0000F4BA 48B8-                   	mov rax, L_constants + 1881
 21777 0000F4BC [5907000000000000] 
 21778 0000F4C4 50                      	push rax
 21779 0000F4C5 6A01                    	push 1	; arg count
 21780 0000F4C7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21781 0000F4CC E83E6C0000              	call malloc
 21782 0000F4D1 50                      	push rax
 21783 0000F4D2 BF08000000              	mov rdi, 8 * 1	; new rib
 21784 0000F4D7 E8336C0000              	call malloc
 21785 0000F4DC 50                      	push rax
 21786 0000F4DD BF20000000              	mov rdi, 8 * 4	; extended env
 21787 0000F4E2 E8286C0000              	call malloc
 21788 0000F4E7 488B7D10                	mov rdi, ENV
 21789 0000F4EB BE00000000              	mov rsi, 0
 21790 0000F4F0 BA01000000              	mov rdx, 1
 21791                                  .L_lambda_simple_env_loop_0370:	; ext_env[i + 1] <-- env[i]
 21792 0000F4F5 4883FE03                	cmp rsi, 3
 21793 0000F4F9 7410                    	je .L_lambda_simple_env_end_0370
 21794 0000F4FB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21795 0000F4FF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21796 0000F503 48FFC6                  	inc rsi
 21797 0000F506 48FFC2                  	inc rdx
 21798 0000F509 EBEA                    	jmp .L_lambda_simple_env_loop_0370
 21799                                  .L_lambda_simple_env_end_0370:
 21800 0000F50B 5B                      	pop rbx
 21801 0000F50C BE00000000              	mov rsi, 0
 21802                                  .L_lambda_simple_params_loop_0370:	; copy params
 21803 0000F511 4883FE01                	cmp rsi, 1
 21804 0000F515 740E                    	je .L_lambda_simple_params_end_0370
 21805 0000F517 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21806 0000F51C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21807 0000F520 48FFC6                  	inc rsi
 21808 0000F523 EBEC                    	jmp .L_lambda_simple_params_loop_0370
 21809                                  .L_lambda_simple_params_end_0370:
 21810 0000F525 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21811 0000F528 4889C3                  	mov rbx, rax
 21812 0000F52B 58                      	pop rax
 21813 0000F52C C60004                  	mov byte [rax], T_closure
 21814 0000F52F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21815 0000F533 48C74009[40F50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0370
 21816 0000F53B E940040000              	jmp .L_lambda_simple_end_0370
 21817                                  .L_lambda_simple_code_0370:	; lambda-simple body
 21818 0000F540 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21819 0000F546 740B                    	je .L_lambda_simple_arity_check_ok_0370
 21820 0000F548 FF742410                	push qword [rsp + 8 * 2]
 21821 0000F54C 6A01                    	push 1
 21822 0000F54E E9756B0000              	jmp L_error_incorrect_arity_simple
 21823                                  .L_lambda_simple_arity_check_ok_0370:
 21824 0000F553 C8000000                	enter 0, 0
 21825 0000F557 BF08000000              	mov rdi, 8	; sob_box
 21826 0000F55C E8AE6B0000              	call malloc
 21827 0000F561 488B5D20                	mov rbx, PARAM(0)
 21828 0000F565 488918                  	mov [rax], rbx
 21829 0000F568 48894520                	mov PARAM(0), rax
 21830 0000F56C 48B8-                   	mov rax, sob_void
 21830 0000F56E [0000000000000000] 
 21831                                  
 21832 0000F576 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21833 0000F57B E88F6B0000              	call malloc
 21834 0000F580 50                      	push rax
 21835 0000F581 BF08000000              	mov rdi, 8 * 1	; new rib
 21836 0000F586 E8846B0000              	call malloc
 21837 0000F58B 50                      	push rax
 21838 0000F58C BF28000000              	mov rdi, 8 * 5	; extended env
 21839 0000F591 E8796B0000              	call malloc
 21840 0000F596 488B7D10                	mov rdi, ENV
 21841 0000F59A BE00000000              	mov rsi, 0
 21842 0000F59F BA01000000              	mov rdx, 1
 21843                                  .L_lambda_simple_env_loop_0371:	; ext_env[i + 1] <-- env[i]
 21844 0000F5A4 4883FE04                	cmp rsi, 4
 21845 0000F5A8 7410                    	je .L_lambda_simple_env_end_0371
 21846 0000F5AA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21847 0000F5AE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21848 0000F5B2 48FFC6                  	inc rsi
 21849 0000F5B5 48FFC2                  	inc rdx
 21850 0000F5B8 EBEA                    	jmp .L_lambda_simple_env_loop_0371
 21851                                  .L_lambda_simple_env_end_0371:
 21852 0000F5BA 5B                      	pop rbx
 21853 0000F5BB BE00000000              	mov rsi, 0
 21854                                  .L_lambda_simple_params_loop_0371:	; copy params
 21855 0000F5C0 4883FE01                	cmp rsi, 1
 21856 0000F5C4 740E                    	je .L_lambda_simple_params_end_0371
 21857 0000F5C6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21858 0000F5CB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21859 0000F5CF 48FFC6                  	inc rsi
 21860 0000F5D2 EBEC                    	jmp .L_lambda_simple_params_loop_0371
 21861                                  .L_lambda_simple_params_end_0371:
 21862 0000F5D4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21863 0000F5D7 4889C3                  	mov rbx, rax
 21864 0000F5DA 58                      	pop rax
 21865 0000F5DB C60004                  	mov byte [rax], T_closure
 21866 0000F5DE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21867 0000F5E2 48C74009[EFF50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0371
 21868 0000F5EA E953010000              	jmp .L_lambda_simple_end_0371
 21869                                  .L_lambda_simple_code_0371:	; lambda-simple body
 21870 0000F5EF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21871 0000F5F5 740B                    	je .L_lambda_simple_arity_check_ok_0371
 21872 0000F5F7 FF742410                	push qword [rsp + 8 * 2]
 21873 0000F5FB 6A02                    	push 2
 21874 0000F5FD E9C66A0000              	jmp L_error_incorrect_arity_simple
 21875                                  .L_lambda_simple_arity_check_ok_0371:
 21876 0000F602 C8000000                	enter 0, 0
 21877                                  	; preparing a non tail-call
 21878 0000F606 488B4528                	mov rax, PARAM(1)	; param strs
 21879 0000F60A 50                      	push rax
 21880 0000F60B 6A01                    	push 1	; arg count
 21881 0000F60D 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 21882 0000F615 803805                  	cmp byte [rax], T_undefined
 21883 0000F618 0F84C4690000            	je L_error_fvar_undefined
 21884 0000F61E 803804                  	cmp byte [rax], T_closure
 21885 0000F621 0F853F6A0000            	jne L_error_non_closure
 21886 0000F627 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21887 0000F62A FF5009                  	call SOB_CLOSURE_CODE(rax)
 21888 0000F62D 483D[02000000]          	cmp rax, sob_boolean_false
 21889 0000F633 0F8505010000            	jne .L_or_end_0040
 21890                                  	; preparing a non tail-call
 21891                                  	; preparing a non tail-call
 21892 0000F639 488B4528                	mov rax, PARAM(1)	; param strs
 21893 0000F63D 50                      	push rax
 21894 0000F63E 6A01                    	push 1	; arg count
 21895 0000F640 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 21896 0000F648 803805                  	cmp byte [rax], T_undefined
 21897 0000F64B 0F8491690000            	je L_error_fvar_undefined
 21898 0000F651 803804                  	cmp byte [rax], T_closure
 21899 0000F654 0F850C6A0000            	jne L_error_non_closure
 21900 0000F65A FF7001                  	push SOB_CLOSURE_ENV(rax)
 21901 0000F65D FF5009                  	call SOB_CLOSURE_CODE(rax)
 21902 0000F660 50                      	push rax
 21903 0000F661 488B4520                	mov rax, PARAM(0)	; param str
 21904 0000F665 50                      	push rax
 21905 0000F666 6A02                    	push 2	; arg count
 21906 0000F668 488B4510                	mov rax, ENV
 21907 0000F66C 488B4008                	mov rax, qword [rax + 8 * 1]
 21908 0000F670 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string=?
 21909 0000F673 803804                  	cmp byte [rax], T_closure
 21910 0000F676 0F85EA690000            	jne L_error_non_closure
 21911 0000F67C FF7001                  	push SOB_CLOSURE_ENV(rax)
 21912 0000F67F FF5009                  	call SOB_CLOSURE_CODE(rax)
 21913 0000F682 483D[02000000]          	cmp rax, sob_boolean_false
 21914 0000F688 0F84A6000000            	je .L_if_else_027d
 21915                                  	; preparing a tail-call
 21916                                  	; preparing a non tail-call
 21917 0000F68E 488B4528                	mov rax, PARAM(1)	; param strs
 21918 0000F692 50                      	push rax
 21919 0000F693 6A01                    	push 1	; arg count
 21920 0000F695 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 21921 0000F69D 803805                  	cmp byte [rax], T_undefined
 21922 0000F6A0 0F843C690000            	je L_error_fvar_undefined
 21923 0000F6A6 803804                  	cmp byte [rax], T_closure
 21924 0000F6A9 0F85B7690000            	jne L_error_non_closure
 21925 0000F6AF FF7001                  	push SOB_CLOSURE_ENV(rax)
 21926 0000F6B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21927 0000F6B5 50                      	push rax
 21928                                  	; preparing a non tail-call
 21929 0000F6B6 488B4528                	mov rax, PARAM(1)	; param strs
 21930 0000F6BA 50                      	push rax
 21931 0000F6BB 6A01                    	push 1	; arg count
 21932 0000F6BD 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 21933 0000F6C5 803805                  	cmp byte [rax], T_undefined
 21934 0000F6C8 0F8414690000            	je L_error_fvar_undefined
 21935 0000F6CE 803804                  	cmp byte [rax], T_closure
 21936 0000F6D1 0F858F690000            	jne L_error_non_closure
 21937 0000F6D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21938 0000F6DA FF5009                  	call SOB_CLOSURE_CODE(rax)
 21939 0000F6DD 50                      	push rax
 21940 0000F6DE 6A02                    	push 2	; arg count
 21941 0000F6E0 488B4510                	mov rax, ENV
 21942 0000F6E4 488B00                  	mov rax, qword [rax + 8 * 0]
 21943 0000F6E7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21944 0000F6EA 488B00                  	mov rax, qword [rax]
 21945 0000F6ED 803804                  	cmp byte [rax], T_closure
 21946 0000F6F0 0F8570690000            	jne L_error_non_closure
 21947 0000F6F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21948                                  
 21949                                  	; recycling the current frame
 21950 0000F6F9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21951 0000F6FC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21952 0000F6FF B906000000              	mov rcx, 2 + 4
 21953 0000F704 488B5D18                	mov rbx, COUNT
 21954 0000F708 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21955 0000F70D 488D55F8                	lea rdx, [rbp - 8 * 1]
 21956                                  .L_tc_recycle_frame_loop_048b:
 21957 0000F711 4883F900                	cmp rcx, 0
 21958 0000F715 7413                    	je .L_tc_recycle_frame_done_048b
 21959 0000F717 488B32                  	mov rsi, qword [rdx]
 21960 0000F71A 488933                  	mov qword [rbx], rsi
 21961 0000F71D 48FFC9                  	dec rcx
 21962 0000F720 4883EB08                	sub rbx, 8 * 1
 21963 0000F724 4883EA08                	sub rdx, 8 * 1
 21964 0000F728 EBE7                    	jmp .L_tc_recycle_frame_loop_048b
 21965                                  .L_tc_recycle_frame_done_048b:
 21966 0000F72A 488D6308                	lea rsp, [rbx + 8 * 1]
 21967 0000F72E 5D                      	pop rbp	; the proc will restore it!
 21968 0000F72F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21969 0000F732 EB0A                    	jmp .L_if_end_027d
 21970                                  .L_if_else_027d:
 21971 0000F734 48B8-                   	mov rax, L_constants + 2
 21971 0000F736 [0200000000000000] 
 21972                                  .L_if_end_027d:
 21973                                  .L_or_end_0040:
 21974 0000F73E C9                      	leave
 21975 0000F73F C22000                  	ret AND_KILL_FRAME(2)
 21976                                  .L_lambda_simple_end_0371:	; new closure is in rax
 21977 0000F742 50                      	push rax
 21978 0000F743 488B4520                	mov rax, PARAM(0)	; param run
 21979 0000F747 8F00                    	pop qword [rax]
 21980 0000F749 48B8-                   	mov rax, sob_void
 21980 0000F74B [0000000000000000] 
 21981                                  
 21982 0000F753 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21983 0000F758 E8B2690000              	call malloc
 21984 0000F75D 50                      	push rax
 21985 0000F75E BF08000000              	mov rdi, 8 * 1	; new rib
 21986 0000F763 E8A7690000              	call malloc
 21987 0000F768 50                      	push rax
 21988 0000F769 BF28000000              	mov rdi, 8 * 5	; extended env
 21989 0000F76E E89C690000              	call malloc
 21990 0000F773 488B7D10                	mov rdi, ENV
 21991 0000F777 BE00000000              	mov rsi, 0
 21992 0000F77C BA01000000              	mov rdx, 1
 21993                                  .L_lambda_opt_env_loop_0078:	; ext_env[i + 1] <-- env[i]
 21994 0000F781 4883FE04                	cmp rsi, 4
 21995 0000F785 7410                    	je .L_lambda_opt_env_end_0078
 21996 0000F787 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21997 0000F78B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21998 0000F78F 48FFC6                  	inc rsi
 21999 0000F792 48FFC2                  	inc rdx
 22000 0000F795 EBEA                    	jmp .L_lambda_opt_env_loop_0078
 22001                                  .L_lambda_opt_env_end_0078:
 22002 0000F797 5B                      	pop rbx
 22003 0000F798 BE00000000              	mov rsi, 0
 22004                                  .L_lambda_opt_params_loop_0078:	; copy params
 22005 0000F79D 4883FE01                	cmp rsi, 1
 22006 0000F7A1 740E                    	je .L_lambda_opt_params_end_0078
 22007 0000F7A3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22008 0000F7A8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22009 0000F7AC 48FFC6                  	inc rsi
 22010 0000F7AF EBEC                    	jmp .L_lambda_opt_params_loop_0078
 22011                                  .L_lambda_opt_params_end_0078:
 22012 0000F7B1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22013 0000F7B4 4889C3                  	mov rbx, rax
 22014 0000F7B7 58                      	pop rax
 22015 0000F7B8 C60004                  	mov byte [rax], T_closure
 22016 0000F7BB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22017 0000F7BF 48C74009[CCF70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0078
 22018 0000F7C7 E9B0010000              	jmp .L_lambda_opt_end_0078
 22019                                  .L_lambda_opt_code_0078:	; lambda-opt body
 22020 0000F7CC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22021 0000F7D2 0F8404010000            	je .L_lambda_opt_arity_check_exact_0078
 22022 0000F7D8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22023 0000F7DE 7F0B                    	jg .L_lambda_opt_arity_check_more_0078
 22024 0000F7E0 FF742410                	push qword [rsp + 8 * 2]
 22025 0000F7E4 6A01                    	push 1
 22026 0000F7E6 E9F1680000              	jmp L_error_incorrect_arity_opt
 22027                                  .L_lambda_opt_arity_check_more_0078:
 22028 0000F7EB 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 22029 0000F7F0 41B901000000            	mov r9 , 1
 22030 0000F7F6 4989E7                  	mov r15, rsp
 22031 0000F7F9 4D29C8                  	sub r8, r9
 22032 0000F7FC 41B900000000            	mov r9, 0
 22033 0000F802 498D5F10                	lea rbx, [r15 + 8 * 2]
 22034 0000F806 498B4710                	mov rax, qword [r15 + 8 * 2]
 22035 0000F80A 486BC008                	imul rax, 8
 22036 0000F80E 4801C3                  	add rbx, rax
 22037 0000F811 488B13                  	mov rdx , qword [rbx]
 22038 0000F814 4989DA                  	mov r10 , rbx
 22039 0000F817 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 22040 0000F81C 52                      	push rdx
 22041 0000F81D 53                      	push rbx
 22042 0000F81E 4150                    	push r8
 22043 0000F820 4151                    	push r9
 22044 0000F822 4152                    	push r10
 22045 0000F824 4157                    	push r15
 22046 0000F826 E8E4680000              	call malloc
 22047 0000F82B 415F                    	pop r15
 22048 0000F82D 415A                    	pop r10
 22049 0000F82F 4159                    	pop r9
 22050 0000F831 4158                    	pop r8
 22051 0000F833 5B                      	pop rbx
 22052 0000F834 5A                      	pop rdx
 22053 0000F835 C60021                  	mov byte qword [rax], T_pair
 22054 0000F838 48895001                	mov SOB_PAIR_CAR(rax), rdx
 22055 0000F83C 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 22056 0000F844 498902                  	mov qword [r10], rax
 22057 0000F847 49FFC1                  	inc r9
 22058 0000F84A 4883EB08                	sub rbx, 8
 22059 0000F84E 4D39C1                  	cmp r9, r8
 22060 0000F851 743E                    	je .L_lambda_opt_stack_shrink_loop_0256
 22061                                  .L_lambda_opt_stack_shrink_loop_0255:
 22062 0000F853 488B13                  	mov rdx, qword [rbx]
 22063 0000F856 53                      	push rbx
 22064 0000F857 4150                    	push r8
 22065 0000F859 4151                    	push r9
 22066 0000F85B 4152                    	push r10
 22067 0000F85D 4157                    	push r15
 22068 0000F85F 52                      	push rdx
 22069 0000F860 BF11000000              	mov rdi, (1 + 8 + 8)
 22070 0000F865 E8A5680000              	call malloc
 22071 0000F86A 5A                      	pop rdx
 22072 0000F86B 415F                    	pop r15
 22073 0000F86D 415A                    	pop r10
 22074 0000F86F 4159                    	pop r9
 22075 0000F871 4158                    	pop r8
 22076 0000F873 5B                      	pop rbx
 22077 0000F874 C60021                  	mov byte [rax], T_pair
 22078 0000F877 48895001                	mov SOB_PAIR_CAR(rax), rdx
 22079 0000F87B 4D8B32                  	mov r14, qword [r10]
 22080 0000F87E 4C897009                	mov SOB_PAIR_CDR(rax), r14
 22081 0000F882 498902                  	mov qword [r10], rax
 22082 0000F885 49FFC1                  	inc r9
 22083 0000F888 4883EB08                	sub rbx, 8
 22084 0000F88C 4D39C1                  	cmp r9, r8
 22085 0000F88F 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_0255
 22086                                  .L_lambda_opt_stack_shrink_loop_0256:
 22087 0000F891 498D5710                	lea rdx, [r15 + 8 * 2]
 22088 0000F895 48C70201000000          	mov qword [rdx], 1
 22089 0000F89C 48830201                	add qword [rdx] , 1
 22090 0000F8A0 4D89C1                  	mov r9, r8
 22091 0000F8A3 49FFC9                  	dec r9
 22092 0000F8A6 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 22093                                  .L_lambda_opt_stack_shrink_loop_0257:
 22094 0000F8AA 488B03                  	mov rax, qword [rbx]
 22095 0000F8AD 498901                  	mov qword [r9], rax
 22096 0000F8B0 4983E908                	sub r9 , 8
 22097 0000F8B4 4883EB08                	sub rbx, 8
 22098 0000F8B8 4C39FB                  	cmp rbx, r15
 22099 0000F8BB 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0257
 22100 0000F8BD 488B03                  	mov rax, qword [rbx]
 22101 0000F8C0 498901                  	mov qword [r9], rax
 22102 0000F8C3 4D89C1                  	mov r9, r8
 22103 0000F8C6 4983E901                	sub r9 , 1
 22104 0000F8CA 4983F900                	cmp r9, 0
 22105 0000F8CE 7446                    je .L_lambda_opt_stack_adjusted_0078
 22106                                  .L_lambda_opt_stack_shrink_loop_0258:
 22107 0000F8D0 58                      	pop rax
 22108 0000F8D1 49FFC9                  	dec r9
 22109 0000F8D4 4983F900                	cmp r9, 0
 22110 0000F8D8 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0258
 22111 0000F8DA EB3A                    jmp .L_lambda_opt_stack_adjusted_0078
 22112                                  .L_lambda_opt_arity_check_exact_0078:
 22113 0000F8DC 4989E7                  	mov r15, rsp
 22114 0000F8DF 498D5F18                	lea rbx, [r15 + 8 * 2 + 8 * 1]
 22115 0000F8E3 488B0B                  	mov rcx, qword [rbx]
 22116 0000F8E6 48C703[01000000]        	mov qword [rbx], sob_nil
 22117 0000F8ED 4883EB08                	sub rbx, 8
 22118                                  .L_lambda_opt_stack_shrink_loop_0254:
 22119 0000F8F1 488B13                  	mov rdx, qword [rbx]
 22120 0000F8F4 48890B                  	mov qword [rbx], rcx
 22121 0000F8F7 4C39FB                  	cmp rbx, r15
 22122 0000F8FA 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0078
 22123 0000F8FC 4889D1                  	mov rcx, rdx
 22124 0000F8FF 4883EB08                	sub rbx, 8
 22125 0000F903 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_0254
 22126                                  .L_lambda_opt_stack_shrink_loop_exit_0078:
 22127 0000F905 52                      	push rdx
 22128 0000F906 4989E7                  	mov r15, rsp
 22129 0000F909 4983C710                	add r15, 16
 22130 0000F90D 498B1F                  	mov rbx, qword [r15]
 22131 0000F910 48FFC3                  	inc rbx
 22132 0000F913 49891F                  	mov qword [r15], rbx
 22133                                  .L_lambda_opt_stack_adjusted_0078:
 22134 0000F916 C8000000                	enter 0, 0
 22135                                  	; preparing a tail-call
 22136 0000F91A 488B4528                	mov rax, PARAM(1)	; param strs
 22137 0000F91E 50                      	push rax
 22138 0000F91F 488B4520                	mov rax, PARAM(0)	; param str
 22139 0000F923 50                      	push rax
 22140 0000F924 6A02                    	push 2	; arg count
 22141 0000F926 488B4510                	mov rax, ENV
 22142 0000F92A 488B00                  	mov rax, qword [rax + 8 * 0]
 22143 0000F92D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22144 0000F930 488B00                  	mov rax, qword [rax]
 22145 0000F933 803804                  	cmp byte [rax], T_closure
 22146 0000F936 0F852A670000            	jne L_error_non_closure
 22147 0000F93C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22148                                  
 22149                                  	; recycling the current frame
 22150 0000F93F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22151 0000F942 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22152 0000F945 B906000000              	mov rcx, 2 + 4
 22153 0000F94A 488B5D18                	mov rbx, COUNT
 22154 0000F94E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22155 0000F953 488D55F8                	lea rdx, [rbp - 8 * 1]
 22156                                  .L_tc_recycle_frame_loop_048c:
 22157 0000F957 4883F900                	cmp rcx, 0
 22158 0000F95B 7413                    	je .L_tc_recycle_frame_done_048c
 22159 0000F95D 488B32                  	mov rsi, qword [rdx]
 22160 0000F960 488933                  	mov qword [rbx], rsi
 22161 0000F963 48FFC9                  	dec rcx
 22162 0000F966 4883EB08                	sub rbx, 8 * 1
 22163 0000F96A 4883EA08                	sub rdx, 8 * 1
 22164 0000F96E EBE7                    	jmp .L_tc_recycle_frame_loop_048c
 22165                                  .L_tc_recycle_frame_done_048c:
 22166 0000F970 488D6308                	lea rsp, [rbx + 8 * 1]
 22167 0000F974 5D                      	pop rbp	; the proc will restore it!
 22168 0000F975 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22169 0000F978 C9                      	leave
 22170 0000F979 C22000                  	ret AND_KILL_FRAME(2)
 22171                                  .L_lambda_opt_end_0078:	; new closure is in rax
 22172 0000F97C C9                      	leave
 22173 0000F97D C21800                  	ret AND_KILL_FRAME(1)
 22174                                  .L_lambda_simple_end_0370:	; new closure is in rax
 22175 0000F980 803804                  	cmp byte [rax], T_closure
 22176 0000F983 0F85DD660000            	jne L_error_non_closure
 22177 0000F989 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22178                                  
 22179                                  	; recycling the current frame
 22180 0000F98C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22181 0000F98F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22182 0000F992 B905000000              	mov rcx, 1 + 4
 22183 0000F997 488B5D18                	mov rbx, COUNT
 22184 0000F99B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22185 0000F9A0 488D55F8                	lea rdx, [rbp - 8 * 1]
 22186                                  .L_tc_recycle_frame_loop_048d:
 22187 0000F9A4 4883F900                	cmp rcx, 0
 22188 0000F9A8 7413                    	je .L_tc_recycle_frame_done_048d
 22189 0000F9AA 488B32                  	mov rsi, qword [rdx]
 22190 0000F9AD 488933                  	mov qword [rbx], rsi
 22191 0000F9B0 48FFC9                  	dec rcx
 22192 0000F9B3 4883EB08                	sub rbx, 8 * 1
 22193 0000F9B7 4883EA08                	sub rdx, 8 * 1
 22194 0000F9BB EBE7                    	jmp .L_tc_recycle_frame_loop_048d
 22195                                  .L_tc_recycle_frame_done_048d:
 22196 0000F9BD 488D6308                	lea rsp, [rbx + 8 * 1]
 22197 0000F9C1 5D                      	pop rbp	; the proc will restore it!
 22198 0000F9C2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22199 0000F9C5 C9                      	leave
 22200 0000F9C6 C21800                  	ret AND_KILL_FRAME(1)
 22201                                  .L_lambda_simple_end_036f:	; new closure is in rax
 22202 0000F9C9 803804                  	cmp byte [rax], T_closure
 22203 0000F9CC 0F8594660000            	jne L_error_non_closure
 22204 0000F9D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22205                                  
 22206                                  	; recycling the current frame
 22207 0000F9D5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22208 0000F9D8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22209 0000F9DB B905000000              	mov rcx, 1 + 4
 22210 0000F9E0 488B5D18                	mov rbx, COUNT
 22211 0000F9E4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22212 0000F9E9 488D55F8                	lea rdx, [rbp - 8 * 1]
 22213                                  .L_tc_recycle_frame_loop_048e:
 22214 0000F9ED 4883F900                	cmp rcx, 0
 22215 0000F9F1 7413                    	je .L_tc_recycle_frame_done_048e
 22216 0000F9F3 488B32                  	mov rsi, qword [rdx]
 22217 0000F9F6 488933                  	mov qword [rbx], rsi
 22218 0000F9F9 48FFC9                  	dec rcx
 22219 0000F9FC 4883EB08                	sub rbx, 8 * 1
 22220 0000FA00 4883EA08                	sub rdx, 8 * 1
 22221 0000FA04 EBE7                    	jmp .L_tc_recycle_frame_loop_048e
 22222                                  .L_tc_recycle_frame_done_048e:
 22223 0000FA06 488D6308                	lea rsp, [rbx + 8 * 1]
 22224 0000FA0A 5D                      	pop rbp	; the proc will restore it!
 22225 0000FA0B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22226 0000FA0E C9                      	leave
 22227 0000FA0F C21800                  	ret AND_KILL_FRAME(1)
 22228                                  .L_lambda_simple_end_036b:	; new closure is in rax
 22229 0000FA12 803804                  	cmp byte [rax], T_closure
 22230 0000FA15 0F854B660000            	jne L_error_non_closure
 22231 0000FA1B FF7001                  	push SOB_CLOSURE_ENV(rax)
 22232                                  
 22233                                  	; recycling the current frame
 22234 0000FA1E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22235 0000FA21 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22236 0000FA24 B905000000              	mov rcx, 1 + 4
 22237 0000FA29 488B5D18                	mov rbx, COUNT
 22238 0000FA2D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22239 0000FA32 488D55F8                	lea rdx, [rbp - 8 * 1]
 22240                                  .L_tc_recycle_frame_loop_048f:
 22241 0000FA36 4883F900                	cmp rcx, 0
 22242 0000FA3A 7413                    	je .L_tc_recycle_frame_done_048f
 22243 0000FA3C 488B32                  	mov rsi, qword [rdx]
 22244 0000FA3F 488933                  	mov qword [rbx], rsi
 22245 0000FA42 48FFC9                  	dec rcx
 22246 0000FA45 4883EB08                	sub rbx, 8 * 1
 22247 0000FA49 4883EA08                	sub rdx, 8 * 1
 22248 0000FA4D EBE7                    	jmp .L_tc_recycle_frame_loop_048f
 22249                                  .L_tc_recycle_frame_done_048f:
 22250 0000FA4F 488D6308                	lea rsp, [rbx + 8 * 1]
 22251 0000FA53 5D                      	pop rbp	; the proc will restore it!
 22252 0000FA54 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22253 0000FA57 C9                      	leave
 22254 0000FA58 C21800                  	ret AND_KILL_FRAME(1)
 22255                                  .L_lambda_simple_end_036a:	; new closure is in rax
 22256 0000FA5B 50                      	push rax
 22257 0000FA5C 6A01                    	push 1	; arg count
 22258 0000FA5E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22259 0000FA63 E8A7660000              	call malloc
 22260 0000FA68 50                      	push rax
 22261 0000FA69 BF00000000              	mov rdi, 8 * 0	; new rib
 22262 0000FA6E E89C660000              	call malloc
 22263 0000FA73 50                      	push rax
 22264 0000FA74 BF08000000              	mov rdi, 8 * 1	; extended env
 22265 0000FA79 E891660000              	call malloc
 22266 0000FA7E 488B7D10                	mov rdi, ENV
 22267 0000FA82 BE00000000              	mov rsi, 0
 22268 0000FA87 BA01000000              	mov rdx, 1
 22269                                  .L_lambda_simple_env_loop_0372:	; ext_env[i + 1] <-- env[i]
 22270 0000FA8C 4883FE00                	cmp rsi, 0
 22271 0000FA90 7410                    	je .L_lambda_simple_env_end_0372
 22272 0000FA92 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22273 0000FA96 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22274 0000FA9A 48FFC6                  	inc rsi
 22275 0000FA9D 48FFC2                  	inc rdx
 22276 0000FAA0 EBEA                    	jmp .L_lambda_simple_env_loop_0372
 22277                                  .L_lambda_simple_env_end_0372:
 22278 0000FAA2 5B                      	pop rbx
 22279 0000FAA3 BE00000000              	mov rsi, 0
 22280                                  .L_lambda_simple_params_loop_0372:	; copy params
 22281 0000FAA8 4883FE00                	cmp rsi, 0
 22282 0000FAAC 740E                    	je .L_lambda_simple_params_end_0372
 22283 0000FAAE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22284 0000FAB3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22285 0000FAB7 48FFC6                  	inc rsi
 22286 0000FABA EBEC                    	jmp .L_lambda_simple_params_loop_0372
 22287                                  .L_lambda_simple_params_end_0372:
 22288 0000FABC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22289 0000FABF 4889C3                  	mov rbx, rax
 22290 0000FAC2 58                      	pop rax
 22291 0000FAC3 C60004                  	mov byte [rax], T_closure
 22292 0000FAC6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22293 0000FACA 48C74009[D7FA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0372
 22294 0000FAD2 E98D000000              	jmp .L_lambda_simple_end_0372
 22295                                  .L_lambda_simple_code_0372:	; lambda-simple body
 22296 0000FAD7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22297 0000FADD 740B                    	je .L_lambda_simple_arity_check_ok_0372
 22298 0000FADF FF742410                	push qword [rsp + 8 * 2]
 22299 0000FAE3 6A01                    	push 1
 22300 0000FAE5 E9DE650000              	jmp L_error_incorrect_arity_simple
 22301                                  .L_lambda_simple_arity_check_ok_0372:
 22302 0000FAEA C8000000                	enter 0, 0
 22303                                  	; preparing a non tail-call
 22304 0000FAEE 488B0425[4A160000]      	mov rax, qword [free_var_130]	; free var char=?
 22305 0000FAF6 803805                  	cmp byte [rax], T_undefined
 22306 0000FAF9 0F84E3640000            	je L_error_fvar_undefined
 22307 0000FAFF 50                      	push rax
 22308 0000FB00 6A01                    	push 1	; arg count
 22309 0000FB02 488B4520                	mov rax, PARAM(0)	; param make-string=?
 22310 0000FB06 803804                  	cmp byte [rax], T_closure
 22311 0000FB09 0F8557650000            	jne L_error_non_closure
 22312 0000FB0F FF7001                  	push SOB_CLOSURE_ENV(rax)
 22313 0000FB12 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22314 0000FB15 48890425[5A170000]      	mov qword [free_var_146], rax
 22315 0000FB1D 48B8-                   	mov rax, sob_void
 22315 0000FB1F [0000000000000000] 
 22316                                  
 22317                                  	; preparing a non tail-call
 22318 0000FB27 488B0425[C1160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 22319 0000FB2F 803805                  	cmp byte [rax], T_undefined
 22320 0000FB32 0F84AA640000            	je L_error_fvar_undefined
 22321 0000FB38 50                      	push rax
 22322 0000FB39 6A01                    	push 1	; arg count
 22323 0000FB3B 488B4520                	mov rax, PARAM(0)	; param make-string=?
 22324 0000FB3F 803804                  	cmp byte [rax], T_closure
 22325 0000FB42 0F851E650000            	jne L_error_non_closure
 22326 0000FB48 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22327 0000FB4B FF5009                  	call SOB_CLOSURE_CODE(rax)
 22328 0000FB4E 48890425[AF170000]      	mov qword [free_var_151], rax
 22329 0000FB56 48B8-                   	mov rax, sob_void
 22329 0000FB58 [0000000000000000] 
 22330 0000FB60 C9                      	leave
 22331 0000FB61 C21800                  	ret AND_KILL_FRAME(1)
 22332                                  .L_lambda_simple_end_0372:	; new closure is in rax
 22333 0000FB64 803804                  	cmp byte [rax], T_closure
 22334 0000FB67 0F85F9640000            	jne L_error_non_closure
 22335 0000FB6D FF7001                  	push SOB_CLOSURE_ENV(rax)
 22336 0000FB70 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22337                                  
 22338 0000FB73 4889C7                  	mov rdi, rax
 22339 0000FB76 E8A6660000              	call print_sexpr_if_not_void
 22340                                  
 22341 0000FB7B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22342 0000FB80 E88A650000              	call malloc
 22343 0000FB85 50                      	push rax
 22344 0000FB86 BF00000000              	mov rdi, 8 * 0	; new rib
 22345 0000FB8B E87F650000              	call malloc
 22346 0000FB90 50                      	push rax
 22347 0000FB91 BF08000000              	mov rdi, 8 * 1	; extended env
 22348 0000FB96 E874650000              	call malloc
 22349 0000FB9B 488B7D10                	mov rdi, ENV
 22350 0000FB9F BE00000000              	mov rsi, 0
 22351 0000FBA4 BA01000000              	mov rdx, 1
 22352                                  .L_lambda_simple_env_loop_0373:	; ext_env[i + 1] <-- env[i]
 22353 0000FBA9 4883FE00                	cmp rsi, 0
 22354 0000FBAD 7410                    	je .L_lambda_simple_env_end_0373
 22355 0000FBAF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22356 0000FBB3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22357 0000FBB7 48FFC6                  	inc rsi
 22358 0000FBBA 48FFC2                  	inc rdx
 22359 0000FBBD EBEA                    	jmp .L_lambda_simple_env_loop_0373
 22360                                  .L_lambda_simple_env_end_0373:
 22361 0000FBBF 5B                      	pop rbx
 22362 0000FBC0 BE00000000              	mov rsi, 0
 22363                                  .L_lambda_simple_params_loop_0373:	; copy params
 22364 0000FBC5 4883FE00                	cmp rsi, 0
 22365 0000FBC9 740E                    	je .L_lambda_simple_params_end_0373
 22366 0000FBCB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22367 0000FBD0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22368 0000FBD4 48FFC6                  	inc rsi
 22369 0000FBD7 EBEC                    	jmp .L_lambda_simple_params_loop_0373
 22370                                  .L_lambda_simple_params_end_0373:
 22371 0000FBD9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22372 0000FBDC 4889C3                  	mov rbx, rax
 22373 0000FBDF 58                      	pop rax
 22374 0000FBE0 C60004                  	mov byte [rax], T_closure
 22375 0000FBE3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22376 0000FBE7 48C74009[F4FB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0373
 22377 0000FBEF E907010000              	jmp .L_lambda_simple_end_0373
 22378                                  .L_lambda_simple_code_0373:	; lambda-simple body
 22379 0000FBF4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22380 0000FBFA 740B                    	je .L_lambda_simple_arity_check_ok_0373
 22381 0000FBFC FF742410                	push qword [rsp + 8 * 2]
 22382 0000FC00 6A01                    	push 1
 22383 0000FC02 E9C1640000              	jmp L_error_incorrect_arity_simple
 22384                                  .L_lambda_simple_arity_check_ok_0373:
 22385 0000FC07 C8000000                	enter 0, 0
 22386                                  	; preparing a non tail-call
 22387 0000FC0B 488B4520                	mov rax, PARAM(0)	; param s
 22388 0000FC0F 50                      	push rax
 22389 0000FC10 6A01                    	push 1	; arg count
 22390 0000FC12 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 22391 0000FC1A 803805                  	cmp byte [rax], T_undefined
 22392 0000FC1D 0F84BF630000            	je L_error_fvar_undefined
 22393 0000FC23 803804                  	cmp byte [rax], T_closure
 22394 0000FC26 0F853A640000            	jne L_error_non_closure
 22395 0000FC2C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22396 0000FC2F FF5009                  	call SOB_CLOSURE_CODE(rax)
 22397 0000FC32 483D[02000000]          	cmp rax, sob_boolean_false
 22398 0000FC38 740F                    	je .L_if_else_027e
 22399 0000FC3A 48B8-                   	mov rax, L_constants + 2023
 22399 0000FC3C [E707000000000000] 
 22400 0000FC44 E9AE000000              	jmp .L_if_end_027e
 22401                                  .L_if_else_027e:
 22402                                  	; preparing a tail-call
 22403                                  	; preparing a non tail-call
 22404                                  	; preparing a non tail-call
 22405 0000FC49 488B4520                	mov rax, PARAM(0)	; param s
 22406 0000FC4D 50                      	push rax
 22407 0000FC4E 6A01                    	push 1	; arg count
 22408 0000FC50 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 22409 0000FC58 803805                  	cmp byte [rax], T_undefined
 22410 0000FC5B 0F8481630000            	je L_error_fvar_undefined
 22411 0000FC61 803804                  	cmp byte [rax], T_closure
 22412 0000FC64 0F85FC630000            	jne L_error_non_closure
 22413 0000FC6A FF7001                  	push SOB_CLOSURE_ENV(rax)
 22414 0000FC6D FF5009                  	call SOB_CLOSURE_CODE(rax)
 22415 0000FC70 50                      	push rax
 22416 0000FC71 6A01                    	push 1	; arg count
 22417 0000FC73 488B0425[E2170000]      	mov rax, qword [free_var_154]	; free var length
 22418 0000FC7B 803805                  	cmp byte [rax], T_undefined
 22419 0000FC7E 0F845E630000            	je L_error_fvar_undefined
 22420 0000FC84 803804                  	cmp byte [rax], T_closure
 22421 0000FC87 0F85D9630000            	jne L_error_non_closure
 22422 0000FC8D FF7001                  	push SOB_CLOSURE_ENV(rax)
 22423 0000FC90 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22424 0000FC93 50                      	push rax
 22425 0000FC94 48B8-                   	mov rax, L_constants + 2158
 22425 0000FC96 [6E08000000000000] 
 22426 0000FC9E 50                      	push rax
 22427 0000FC9F 6A02                    	push 2	; arg count
 22428 0000FCA1 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 22429 0000FCA9 803805                  	cmp byte [rax], T_undefined
 22430 0000FCAC 0F8430630000            	je L_error_fvar_undefined
 22431 0000FCB2 803804                  	cmp byte [rax], T_closure
 22432 0000FCB5 0F85AB630000            	jne L_error_non_closure
 22433 0000FCBB FF7001                  	push SOB_CLOSURE_ENV(rax)
 22434                                  
 22435                                  	; recycling the current frame
 22436 0000FCBE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22437 0000FCC1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22438 0000FCC4 B906000000              	mov rcx, 2 + 4
 22439 0000FCC9 488B5D18                	mov rbx, COUNT
 22440 0000FCCD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22441 0000FCD2 488D55F8                	lea rdx, [rbp - 8 * 1]
 22442                                  .L_tc_recycle_frame_loop_0490:
 22443 0000FCD6 4883F900                	cmp rcx, 0
 22444 0000FCDA 7413                    	je .L_tc_recycle_frame_done_0490
 22445 0000FCDC 488B32                  	mov rsi, qword [rdx]
 22446 0000FCDF 488933                  	mov qword [rbx], rsi
 22447 0000FCE2 48FFC9                  	dec rcx
 22448 0000FCE5 4883EB08                	sub rbx, 8 * 1
 22449 0000FCE9 4883EA08                	sub rdx, 8 * 1
 22450 0000FCED EBE7                    	jmp .L_tc_recycle_frame_loop_0490
 22451                                  .L_tc_recycle_frame_done_0490:
 22452 0000FCEF 488D6308                	lea rsp, [rbx + 8 * 1]
 22453 0000FCF3 5D                      	pop rbp	; the proc will restore it!
 22454 0000FCF4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22455                                  .L_if_end_027e:
 22456 0000FCF7 C9                      	leave
 22457 0000FCF8 C21800                  	ret AND_KILL_FRAME(1)
 22458                                  .L_lambda_simple_end_0373:	; new closure is in rax
 22459 0000FCFB 48890425[E2170000]      	mov qword [free_var_154], rax
 22460 0000FD03 48B8-                   	mov rax, sob_void
 22460 0000FD05 [0000000000000000] 
 22461                                  
 22462 0000FD0D 4889C7                  	mov rdi, rax
 22463 0000FD10 E80C650000              	call print_sexpr_if_not_void
 22464                                  
 22465 0000FD15 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22466 0000FD1A E8F0630000              	call malloc
 22467 0000FD1F 50                      	push rax
 22468 0000FD20 BF00000000              	mov rdi, 8 * 0	; new rib
 22469 0000FD25 E8E5630000              	call malloc
 22470 0000FD2A 50                      	push rax
 22471 0000FD2B BF08000000              	mov rdi, 8 * 1	; extended env
 22472 0000FD30 E8DA630000              	call malloc
 22473 0000FD35 488B7D10                	mov rdi, ENV
 22474 0000FD39 BE00000000              	mov rsi, 0
 22475 0000FD3E BA01000000              	mov rdx, 1
 22476                                  .L_lambda_simple_env_loop_0374:	; ext_env[i + 1] <-- env[i]
 22477 0000FD43 4883FE00                	cmp rsi, 0
 22478 0000FD47 7410                    	je .L_lambda_simple_env_end_0374
 22479 0000FD49 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22480 0000FD4D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22481 0000FD51 48FFC6                  	inc rsi
 22482 0000FD54 48FFC2                  	inc rdx
 22483 0000FD57 EBEA                    	jmp .L_lambda_simple_env_loop_0374
 22484                                  .L_lambda_simple_env_end_0374:
 22485 0000FD59 5B                      	pop rbx
 22486 0000FD5A BE00000000              	mov rsi, 0
 22487                                  .L_lambda_simple_params_loop_0374:	; copy params
 22488 0000FD5F 4883FE00                	cmp rsi, 0
 22489 0000FD63 740E                    	je .L_lambda_simple_params_end_0374
 22490 0000FD65 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22491 0000FD6A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22492 0000FD6E 48FFC6                  	inc rsi
 22493 0000FD71 EBEC                    	jmp .L_lambda_simple_params_loop_0374
 22494                                  .L_lambda_simple_params_end_0374:
 22495 0000FD73 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22496 0000FD76 4889C3                  	mov rbx, rax
 22497 0000FD79 58                      	pop rax
 22498 0000FD7A C60004                  	mov byte [rax], T_closure
 22499 0000FD7D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22500 0000FD81 48C74009[8EFD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0374
 22501 0000FD89 E90D010000              	jmp .L_lambda_simple_end_0374
 22502                                  .L_lambda_simple_code_0374:	; lambda-simple body
 22503 0000FD8E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22504 0000FD94 740B                    	je .L_lambda_simple_arity_check_ok_0374
 22505 0000FD96 FF742410                	push qword [rsp + 8 * 2]
 22506 0000FD9A 6A01                    	push 1
 22507 0000FD9C E927630000              	jmp L_error_incorrect_arity_simple
 22508                                  .L_lambda_simple_arity_check_ok_0374:
 22509 0000FDA1 C8000000                	enter 0, 0
 22510                                  	; preparing a non tail-call
 22511 0000FDA5 488B4520                	mov rax, PARAM(0)	; param e
 22512 0000FDA9 50                      	push rax
 22513 0000FDAA 6A01                    	push 1	; arg count
 22514 0000FDAC 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 22515 0000FDB4 803805                  	cmp byte [rax], T_undefined
 22516 0000FDB7 0F8425620000            	je L_error_fvar_undefined
 22517 0000FDBD 803804                  	cmp byte [rax], T_closure
 22518 0000FDC0 0F85A0620000            	jne L_error_non_closure
 22519 0000FDC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22520 0000FDC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22521 0000FDCC 483D[02000000]          	cmp rax, sob_boolean_false
 22522 0000FDD2 0F85BF000000            	jne .L_or_end_0041
 22523                                  	; preparing a non tail-call
 22524 0000FDD8 488B4520                	mov rax, PARAM(0)	; param e
 22525 0000FDDC 50                      	push rax
 22526 0000FDDD 6A01                    	push 1	; arg count
 22527 0000FDDF 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
 22528 0000FDE7 803805                  	cmp byte [rax], T_undefined
 22529 0000FDEA 0F84F2610000            	je L_error_fvar_undefined
 22530 0000FDF0 803804                  	cmp byte [rax], T_closure
 22531 0000FDF3 0F856D620000            	jne L_error_non_closure
 22532 0000FDF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22533 0000FDFC FF5009                  	call SOB_CLOSURE_CODE(rax)
 22534 0000FDFF 483D[02000000]          	cmp rax, sob_boolean_false
 22535 0000FE05 0F8482000000            	je .L_if_else_027f
 22536                                  	; preparing a tail-call
 22537                                  	; preparing a non tail-call
 22538 0000FE0B 488B4520                	mov rax, PARAM(0)	; param e
 22539 0000FE0F 50                      	push rax
 22540 0000FE10 6A01                    	push 1	; arg count
 22541 0000FE12 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 22542 0000FE1A 803805                  	cmp byte [rax], T_undefined
 22543 0000FE1D 0F84BF610000            	je L_error_fvar_undefined
 22544 0000FE23 803804                  	cmp byte [rax], T_closure
 22545 0000FE26 0F853A620000            	jne L_error_non_closure
 22546 0000FE2C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22547 0000FE2F FF5009                  	call SOB_CLOSURE_CODE(rax)
 22548 0000FE32 50                      	push rax
 22549 0000FE33 6A01                    	push 1	; arg count
 22550 0000FE35 488B0425[6E140000]      	mov rax, qword [free_var_102]	; free var list?
 22551 0000FE3D 803805                  	cmp byte [rax], T_undefined
 22552 0000FE40 0F849C610000            	je L_error_fvar_undefined
 22553 0000FE46 803804                  	cmp byte [rax], T_closure
 22554 0000FE49 0F8517620000            	jne L_error_non_closure
 22555 0000FE4F FF7001                  	push SOB_CLOSURE_ENV(rax)
 22556                                  
 22557                                  	; recycling the current frame
 22558 0000FE52 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22559 0000FE55 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22560 0000FE58 B905000000              	mov rcx, 1 + 4
 22561 0000FE5D 488B5D18                	mov rbx, COUNT
 22562 0000FE61 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22563 0000FE66 488D55F8                	lea rdx, [rbp - 8 * 1]
 22564                                  .L_tc_recycle_frame_loop_0491:
 22565 0000FE6A 4883F900                	cmp rcx, 0
 22566 0000FE6E 7413                    	je .L_tc_recycle_frame_done_0491
 22567 0000FE70 488B32                  	mov rsi, qword [rdx]
 22568 0000FE73 488933                  	mov qword [rbx], rsi
 22569 0000FE76 48FFC9                  	dec rcx
 22570 0000FE79 4883EB08                	sub rbx, 8 * 1
 22571 0000FE7D 4883EA08                	sub rdx, 8 * 1
 22572 0000FE81 EBE7                    	jmp .L_tc_recycle_frame_loop_0491
 22573                                  .L_tc_recycle_frame_done_0491:
 22574 0000FE83 488D6308                	lea rsp, [rbx + 8 * 1]
 22575 0000FE87 5D                      	pop rbp	; the proc will restore it!
 22576 0000FE88 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22577 0000FE8B EB0A                    	jmp .L_if_end_027f
 22578                                  .L_if_else_027f:
 22579 0000FE8D 48B8-                   	mov rax, L_constants + 2
 22579 0000FE8F [0200000000000000] 
 22580                                  .L_if_end_027f:
 22581                                  .L_or_end_0041:
 22582 0000FE97 C9                      	leave
 22583 0000FE98 C21800                  	ret AND_KILL_FRAME(1)
 22584                                  .L_lambda_simple_end_0374:	; new closure is in rax
 22585 0000FE9B 48890425[6E140000]      	mov qword [free_var_102], rax
 22586 0000FEA3 48B8-                   	mov rax, sob_void
 22586 0000FEA5 [0000000000000000] 
 22587                                  
 22588 0000FEAD 4889C7                  	mov rdi, rax
 22589 0000FEB0 E86C630000              	call print_sexpr_if_not_void
 22590                                  
 22591                                  	; preparing a non tail-call
 22592 0000FEB5 488B0425[71110000]      	mov rax, qword [free_var_57]	; free var make-vector
 22593 0000FEBD 803805                  	cmp byte [rax], T_undefined
 22594 0000FEC0 0F841C610000            	je L_error_fvar_undefined
 22595 0000FEC6 50                      	push rax
 22596 0000FEC7 6A01                    	push 1	; arg count
 22597 0000FEC9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22598 0000FECE E83C620000              	call malloc
 22599 0000FED3 50                      	push rax
 22600 0000FED4 BF00000000              	mov rdi, 8 * 0	; new rib
 22601 0000FED9 E831620000              	call malloc
 22602 0000FEDE 50                      	push rax
 22603 0000FEDF BF08000000              	mov rdi, 8 * 1	; extended env
 22604 0000FEE4 E826620000              	call malloc
 22605 0000FEE9 488B7D10                	mov rdi, ENV
 22606 0000FEED BE00000000              	mov rsi, 0
 22607 0000FEF2 BA01000000              	mov rdx, 1
 22608                                  .L_lambda_simple_env_loop_0375:	; ext_env[i + 1] <-- env[i]
 22609 0000FEF7 4883FE00                	cmp rsi, 0
 22610 0000FEFB 7410                    	je .L_lambda_simple_env_end_0375
 22611 0000FEFD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22612 0000FF01 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22613 0000FF05 48FFC6                  	inc rsi
 22614 0000FF08 48FFC2                  	inc rdx
 22615 0000FF0B EBEA                    	jmp .L_lambda_simple_env_loop_0375
 22616                                  .L_lambda_simple_env_end_0375:
 22617 0000FF0D 5B                      	pop rbx
 22618 0000FF0E BE00000000              	mov rsi, 0
 22619                                  .L_lambda_simple_params_loop_0375:	; copy params
 22620 0000FF13 4883FE00                	cmp rsi, 0
 22621 0000FF17 740E                    	je .L_lambda_simple_params_end_0375
 22622 0000FF19 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22623 0000FF1E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22624 0000FF22 48FFC6                  	inc rsi
 22625 0000FF25 EBEC                    	jmp .L_lambda_simple_params_loop_0375
 22626                                  .L_lambda_simple_params_end_0375:
 22627 0000FF27 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22628 0000FF2A 4889C3                  	mov rbx, rax
 22629 0000FF2D 58                      	pop rax
 22630 0000FF2E C60004                  	mov byte [rax], T_closure
 22631 0000FF31 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22632 0000FF35 48C74009[42FF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0375
 22633 0000FF3D E950040000              	jmp .L_lambda_simple_end_0375
 22634                                  .L_lambda_simple_code_0375:	; lambda-simple body
 22635 0000FF42 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22636 0000FF48 740B                    	je .L_lambda_simple_arity_check_ok_0375
 22637 0000FF4A FF742410                	push qword [rsp + 8 * 2]
 22638 0000FF4E 6A01                    	push 1
 22639 0000FF50 E973610000              	jmp L_error_incorrect_arity_simple
 22640                                  .L_lambda_simple_arity_check_ok_0375:
 22641 0000FF55 C8000000                	enter 0, 0
 22642 0000FF59 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22643 0000FF5E E8AC610000              	call malloc
 22644 0000FF63 50                      	push rax
 22645 0000FF64 BF08000000              	mov rdi, 8 * 1	; new rib
 22646 0000FF69 E8A1610000              	call malloc
 22647 0000FF6E 50                      	push rax
 22648 0000FF6F BF10000000              	mov rdi, 8 * 2	; extended env
 22649 0000FF74 E896610000              	call malloc
 22650 0000FF79 488B7D10                	mov rdi, ENV
 22651 0000FF7D BE00000000              	mov rsi, 0
 22652 0000FF82 BA01000000              	mov rdx, 1
 22653                                  .L_lambda_opt_env_loop_0079:	; ext_env[i + 1] <-- env[i]
 22654 0000FF87 4883FE01                	cmp rsi, 1
 22655 0000FF8B 7410                    	je .L_lambda_opt_env_end_0079
 22656 0000FF8D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22657 0000FF91 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22658 0000FF95 48FFC6                  	inc rsi
 22659 0000FF98 48FFC2                  	inc rdx
 22660 0000FF9B EBEA                    	jmp .L_lambda_opt_env_loop_0079
 22661                                  .L_lambda_opt_env_end_0079:
 22662 0000FF9D 5B                      	pop rbx
 22663 0000FF9E BE00000000              	mov rsi, 0
 22664                                  .L_lambda_opt_params_loop_0079:	; copy params
 22665 0000FFA3 4883FE01                	cmp rsi, 1
 22666 0000FFA7 740E                    	je .L_lambda_opt_params_end_0079
 22667 0000FFA9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22668 0000FFAE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22669 0000FFB2 48FFC6                  	inc rsi
 22670 0000FFB5 EBEC                    	jmp .L_lambda_opt_params_loop_0079
 22671                                  .L_lambda_opt_params_end_0079:
 22672 0000FFB7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22673 0000FFBA 4889C3                  	mov rbx, rax
 22674 0000FFBD 58                      	pop rax
 22675 0000FFBE C60004                  	mov byte [rax], T_closure
 22676 0000FFC1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22677 0000FFC5 48C74009[D2FF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0079
 22678 0000FFCD E9BC030000              	jmp .L_lambda_opt_end_0079
 22679                                  .L_lambda_opt_code_0079:	; lambda-opt body
 22680 0000FFD2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22681 0000FFD8 0F8404010000            	je .L_lambda_opt_arity_check_exact_0079
 22682 0000FFDE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22683 0000FFE4 7F0B                    	jg .L_lambda_opt_arity_check_more_0079
 22684 0000FFE6 FF742410                	push qword [rsp + 8 * 2]
 22685 0000FFEA 6A01                    	push 1
 22686 0000FFEC E9EB600000              	jmp L_error_incorrect_arity_opt
 22687                                  .L_lambda_opt_arity_check_more_0079:
 22688 0000FFF1 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 22689 0000FFF6 41B901000000            	mov r9 , 1
 22690 0000FFFC 4989E7                  	mov r15, rsp
 22691 0000FFFF 4D29C8                  	sub r8, r9
 22692 00010002 41B900000000            	mov r9, 0
 22693 00010008 498D5F10                	lea rbx, [r15 + 8 * 2]
 22694 0001000C 498B4710                	mov rax, qword [r15 + 8 * 2]
 22695 00010010 486BC008                	imul rax, 8
 22696 00010014 4801C3                  	add rbx, rax
 22697 00010017 488B13                  	mov rdx , qword [rbx]
 22698 0001001A 4989DA                  	mov r10 , rbx
 22699 0001001D BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 22700 00010022 52                      	push rdx
 22701 00010023 53                      	push rbx
 22702 00010024 4150                    	push r8
 22703 00010026 4151                    	push r9
 22704 00010028 4152                    	push r10
 22705 0001002A 4157                    	push r15
 22706 0001002C E8DE600000              	call malloc
 22707 00010031 415F                    	pop r15
 22708 00010033 415A                    	pop r10
 22709 00010035 4159                    	pop r9
 22710 00010037 4158                    	pop r8
 22711 00010039 5B                      	pop rbx
 22712 0001003A 5A                      	pop rdx
 22713 0001003B C60021                  	mov byte qword [rax], T_pair
 22714 0001003E 48895001                	mov SOB_PAIR_CAR(rax), rdx
 22715 00010042 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 22716 0001004A 498902                  	mov qword [r10], rax
 22717 0001004D 49FFC1                  	inc r9
 22718 00010050 4883EB08                	sub rbx, 8
 22719 00010054 4D39C1                  	cmp r9, r8
 22720 00010057 743E                    	je .L_lambda_opt_stack_shrink_loop_025b
 22721                                  .L_lambda_opt_stack_shrink_loop_025a:
 22722 00010059 488B13                  	mov rdx, qword [rbx]
 22723 0001005C 53                      	push rbx
 22724 0001005D 4150                    	push r8
 22725 0001005F 4151                    	push r9
 22726 00010061 4152                    	push r10
 22727 00010063 4157                    	push r15
 22728 00010065 52                      	push rdx
 22729 00010066 BF11000000              	mov rdi, (1 + 8 + 8)
 22730 0001006B E89F600000              	call malloc
 22731 00010070 5A                      	pop rdx
 22732 00010071 415F                    	pop r15
 22733 00010073 415A                    	pop r10
 22734 00010075 4159                    	pop r9
 22735 00010077 4158                    	pop r8
 22736 00010079 5B                      	pop rbx
 22737 0001007A C60021                  	mov byte [rax], T_pair
 22738 0001007D 48895001                	mov SOB_PAIR_CAR(rax), rdx
 22739 00010081 4D8B32                  	mov r14, qword [r10]
 22740 00010084 4C897009                	mov SOB_PAIR_CDR(rax), r14
 22741 00010088 498902                  	mov qword [r10], rax
 22742 0001008B 49FFC1                  	inc r9
 22743 0001008E 4883EB08                	sub rbx, 8
 22744 00010092 4D39C1                  	cmp r9, r8
 22745 00010095 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_025a
 22746                                  .L_lambda_opt_stack_shrink_loop_025b:
 22747 00010097 498D5710                	lea rdx, [r15 + 8 * 2]
 22748 0001009B 48C70201000000          	mov qword [rdx], 1
 22749 000100A2 48830201                	add qword [rdx] , 1
 22750 000100A6 4D89C1                  	mov r9, r8
 22751 000100A9 49FFC9                  	dec r9
 22752 000100AC 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 22753                                  .L_lambda_opt_stack_shrink_loop_025c:
 22754 000100B0 488B03                  	mov rax, qword [rbx]
 22755 000100B3 498901                  	mov qword [r9], rax
 22756 000100B6 4983E908                	sub r9 , 8
 22757 000100BA 4883EB08                	sub rbx, 8
 22758 000100BE 4C39FB                  	cmp rbx, r15
 22759 000100C1 75ED                    	jne .L_lambda_opt_stack_shrink_loop_025c
 22760 000100C3 488B03                  	mov rax, qword [rbx]
 22761 000100C6 498901                  	mov qword [r9], rax
 22762 000100C9 4D89C1                  	mov r9, r8
 22763 000100CC 4983E901                	sub r9 , 1
 22764 000100D0 4983F900                	cmp r9, 0
 22765 000100D4 7446                    je .L_lambda_opt_stack_adjusted_0079
 22766                                  .L_lambda_opt_stack_shrink_loop_025d:
 22767 000100D6 58                      	pop rax
 22768 000100D7 49FFC9                  	dec r9
 22769 000100DA 4983F900                	cmp r9, 0
 22770 000100DE 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_025d
 22771 000100E0 EB3A                    jmp .L_lambda_opt_stack_adjusted_0079
 22772                                  .L_lambda_opt_arity_check_exact_0079:
 22773 000100E2 4989E7                  	mov r15, rsp
 22774 000100E5 498D5F18                	lea rbx, [r15 + 8 * 2 + 8 * 1]
 22775 000100E9 488B0B                  	mov rcx, qword [rbx]
 22776 000100EC 48C703[01000000]        	mov qword [rbx], sob_nil
 22777 000100F3 4883EB08                	sub rbx, 8
 22778                                  .L_lambda_opt_stack_shrink_loop_0259:
 22779 000100F7 488B13                  	mov rdx, qword [rbx]
 22780 000100FA 48890B                  	mov qword [rbx], rcx
 22781 000100FD 4C39FB                  	cmp rbx, r15
 22782 00010100 7409                    je .L_lambda_opt_stack_shrink_loop_exit_0079
 22783 00010102 4889D1                  	mov rcx, rdx
 22784 00010105 4883EB08                	sub rbx, 8
 22785 00010109 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_0259
 22786                                  .L_lambda_opt_stack_shrink_loop_exit_0079:
 22787 0001010B 52                      	push rdx
 22788 0001010C 4989E7                  	mov r15, rsp
 22789 0001010F 4983C710                	add r15, 16
 22790 00010113 498B1F                  	mov rbx, qword [r15]
 22791 00010116 48FFC3                  	inc rbx
 22792 00010119 49891F                  	mov qword [r15], rbx
 22793                                  .L_lambda_opt_stack_adjusted_0079:
 22794 0001011C C8000000                	enter 0, 0
 22795                                  	; preparing a tail-call
 22796                                  	; preparing a non tail-call
 22797 00010120 488B4528                	mov rax, PARAM(1)	; param xs
 22798 00010124 50                      	push rax
 22799 00010125 6A01                    	push 1	; arg count
 22800 00010127 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 22801 0001012F 803805                  	cmp byte [rax], T_undefined
 22802 00010132 0F84AA5E0000            	je L_error_fvar_undefined
 22803 00010138 803804                  	cmp byte [rax], T_closure
 22804 0001013B 0F85255F0000            	jne L_error_non_closure
 22805 00010141 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22806 00010144 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22807 00010147 483D[02000000]          	cmp rax, sob_boolean_false
 22808 0001014D 740F                    	je .L_if_else_0280
 22809 0001014F 48B8-                   	mov rax, L_constants + 0
 22809 00010151 [0000000000000000] 
 22810 00010159 E9EE000000              	jmp .L_if_end_0280
 22811                                  .L_if_else_0280:
 22812                                  	; preparing a non tail-call
 22813 0001015E 488B4528                	mov rax, PARAM(1)	; param xs
 22814 00010162 50                      	push rax
 22815 00010163 6A01                    	push 1	; arg count
 22816 00010165 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
 22817 0001016D 803805                  	cmp byte [rax], T_undefined
 22818 00010170 0F846C5E0000            	je L_error_fvar_undefined
 22819 00010176 803804                  	cmp byte [rax], T_closure
 22820 00010179 0F85E75E0000            	jne L_error_non_closure
 22821 0001017F FF7001                  	push SOB_CLOSURE_ENV(rax)
 22822 00010182 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22823 00010185 483D[02000000]          	cmp rax, sob_boolean_false
 22824 0001018B 744C                    	je .L_if_else_0282
 22825                                  	; preparing a non tail-call
 22826                                  	; preparing a non tail-call
 22827 0001018D 488B4528                	mov rax, PARAM(1)	; param xs
 22828 00010191 50                      	push rax
 22829 00010192 6A01                    	push 1	; arg count
 22830 00010194 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 22831 0001019C 803805                  	cmp byte [rax], T_undefined
 22832 0001019F 0F843D5E0000            	je L_error_fvar_undefined
 22833 000101A5 803804                  	cmp byte [rax], T_closure
 22834 000101A8 0F85B85E0000            	jne L_error_non_closure
 22835 000101AE FF7001                  	push SOB_CLOSURE_ENV(rax)
 22836 000101B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22837 000101B4 50                      	push rax
 22838 000101B5 6A01                    	push 1	; arg count
 22839 000101B7 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 22840 000101BF 803805                  	cmp byte [rax], T_undefined
 22841 000101C2 0F841A5E0000            	je L_error_fvar_undefined
 22842 000101C8 803804                  	cmp byte [rax], T_closure
 22843 000101CB 0F85955E0000            	jne L_error_non_closure
 22844 000101D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22845 000101D4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22846 000101D7 EB0A                    	jmp .L_if_end_0282
 22847                                  .L_if_else_0282:
 22848 000101D9 48B8-                   	mov rax, L_constants + 2
 22848 000101DB [0200000000000000] 
 22849                                  .L_if_end_0282:
 22850 000101E3 483D[02000000]          	cmp rax, sob_boolean_false
 22851 000101E9 7429                    	je .L_if_else_0281
 22852                                  	; preparing a non tail-call
 22853 000101EB 488B4528                	mov rax, PARAM(1)	; param xs
 22854 000101EF 50                      	push rax
 22855 000101F0 6A01                    	push 1	; arg count
 22856 000101F2 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 22857 000101FA 803805                  	cmp byte [rax], T_undefined
 22858 000101FD 0F84DF5D0000            	je L_error_fvar_undefined
 22859 00010203 803804                  	cmp byte [rax], T_closure
 22860 00010206 0F855A5E0000            	jne L_error_non_closure
 22861 0001020C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22862 0001020F FF5009                  	call SOB_CLOSURE_CODE(rax)
 22863 00010212 EB38                    	jmp .L_if_end_0281
 22864                                  .L_if_else_0281:
 22865                                  	; preparing a non tail-call
 22866 00010214 48B8-                   	mov rax, L_constants + 2939
 22866 00010216 [7B0B000000000000] 
 22867 0001021E 50                      	push rax
 22868 0001021F 48B8-                   	mov rax, L_constants + 2930
 22868 00010221 [720B000000000000] 
 22869 00010229 50                      	push rax
 22870 0001022A 6A02                    	push 2	; arg count
 22871 0001022C 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
 22872 00010234 803805                  	cmp byte [rax], T_undefined
 22873 00010237 0F84A55D0000            	je L_error_fvar_undefined
 22874 0001023D 803804                  	cmp byte [rax], T_closure
 22875 00010240 0F85205E0000            	jne L_error_non_closure
 22876 00010246 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22877 00010249 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22878                                  .L_if_end_0281:
 22879                                  .L_if_end_0280:
 22880 0001024C 50                      	push rax
 22881 0001024D 6A01                    	push 1	; arg count
 22882 0001024F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22883 00010254 E8B65E0000              	call malloc
 22884 00010259 50                      	push rax
 22885 0001025A BF10000000              	mov rdi, 8 * 2	; new rib
 22886 0001025F E8AB5E0000              	call malloc
 22887 00010264 50                      	push rax
 22888 00010265 BF18000000              	mov rdi, 8 * 3	; extended env
 22889 0001026A E8A05E0000              	call malloc
 22890 0001026F 488B7D10                	mov rdi, ENV
 22891 00010273 BE00000000              	mov rsi, 0
 22892 00010278 BA01000000              	mov rdx, 1
 22893                                  .L_lambda_simple_env_loop_0376:	; ext_env[i + 1] <-- env[i]
 22894 0001027D 4883FE02                	cmp rsi, 2
 22895 00010281 7410                    	je .L_lambda_simple_env_end_0376
 22896 00010283 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22897 00010287 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22898 0001028B 48FFC6                  	inc rsi
 22899 0001028E 48FFC2                  	inc rdx
 22900 00010291 EBEA                    	jmp .L_lambda_simple_env_loop_0376
 22901                                  .L_lambda_simple_env_end_0376:
 22902 00010293 5B                      	pop rbx
 22903 00010294 BE00000000              	mov rsi, 0
 22904                                  .L_lambda_simple_params_loop_0376:	; copy params
 22905 00010299 4883FE02                	cmp rsi, 2
 22906 0001029D 740E                    	je .L_lambda_simple_params_end_0376
 22907 0001029F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22908 000102A4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22909 000102A8 48FFC6                  	inc rsi
 22910 000102AB EBEC                    	jmp .L_lambda_simple_params_loop_0376
 22911                                  .L_lambda_simple_params_end_0376:
 22912 000102AD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22913 000102B0 4889C3                  	mov rbx, rax
 22914 000102B3 58                      	pop rax
 22915 000102B4 C60004                  	mov byte [rax], T_closure
 22916 000102B7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22917 000102BB 48C74009[C8020100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0376
 22918 000102C3 E97D000000              	jmp .L_lambda_simple_end_0376
 22919                                  .L_lambda_simple_code_0376:	; lambda-simple body
 22920 000102C8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22921 000102CE 740B                    	je .L_lambda_simple_arity_check_ok_0376
 22922 000102D0 FF742410                	push qword [rsp + 8 * 2]
 22923 000102D4 6A01                    	push 1
 22924 000102D6 E9ED5D0000              	jmp L_error_incorrect_arity_simple
 22925                                  .L_lambda_simple_arity_check_ok_0376:
 22926 000102DB C8000000                	enter 0, 0
 22927                                  	; preparing a tail-call
 22928 000102DF 488B4520                	mov rax, PARAM(0)	; param x
 22929 000102E3 50                      	push rax
 22930 000102E4 488B4510                	mov rax, ENV
 22931 000102E8 488B00                  	mov rax, qword [rax + 8 * 0]
 22932 000102EB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 22933 000102EE 50                      	push rax
 22934 000102EF 6A02                    	push 2	; arg count
 22935 000102F1 488B4510                	mov rax, ENV
 22936 000102F5 488B4008                	mov rax, qword [rax + 8 * 1]
 22937 000102F9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
 22938 000102FC 803804                  	cmp byte [rax], T_closure
 22939 000102FF 0F85615D0000            	jne L_error_non_closure
 22940 00010305 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22941                                  
 22942                                  	; recycling the current frame
 22943 00010308 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22944 0001030B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22945 0001030E B906000000              	mov rcx, 2 + 4
 22946 00010313 488B5D18                	mov rbx, COUNT
 22947 00010317 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22948 0001031C 488D55F8                	lea rdx, [rbp - 8 * 1]
 22949                                  .L_tc_recycle_frame_loop_0492:
 22950 00010320 4883F900                	cmp rcx, 0
 22951 00010324 7413                    	je .L_tc_recycle_frame_done_0492
 22952 00010326 488B32                  	mov rsi, qword [rdx]
 22953 00010329 488933                  	mov qword [rbx], rsi
 22954 0001032C 48FFC9                  	dec rcx
 22955 0001032F 4883EB08                	sub rbx, 8 * 1
 22956 00010333 4883EA08                	sub rdx, 8 * 1
 22957 00010337 EBE7                    	jmp .L_tc_recycle_frame_loop_0492
 22958                                  .L_tc_recycle_frame_done_0492:
 22959 00010339 488D6308                	lea rsp, [rbx + 8 * 1]
 22960 0001033D 5D                      	pop rbp	; the proc will restore it!
 22961 0001033E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22962 00010341 C9                      	leave
 22963 00010342 C21800                  	ret AND_KILL_FRAME(1)
 22964                                  .L_lambda_simple_end_0376:	; new closure is in rax
 22965 00010345 803804                  	cmp byte [rax], T_closure
 22966 00010348 0F85185D0000            	jne L_error_non_closure
 22967 0001034E FF7001                  	push SOB_CLOSURE_ENV(rax)
 22968                                  
 22969                                  	; recycling the current frame
 22970 00010351 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22971 00010354 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22972 00010357 B905000000              	mov rcx, 1 + 4
 22973 0001035C 488B5D18                	mov rbx, COUNT
 22974 00010360 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22975 00010365 488D55F8                	lea rdx, [rbp - 8 * 1]
 22976                                  .L_tc_recycle_frame_loop_0493:
 22977 00010369 4883F900                	cmp rcx, 0
 22978 0001036D 7413                    	je .L_tc_recycle_frame_done_0493
 22979 0001036F 488B32                  	mov rsi, qword [rdx]
 22980 00010372 488933                  	mov qword [rbx], rsi
 22981 00010375 48FFC9                  	dec rcx
 22982 00010378 4883EB08                	sub rbx, 8 * 1
 22983 0001037C 4883EA08                	sub rdx, 8 * 1
 22984 00010380 EBE7                    	jmp .L_tc_recycle_frame_loop_0493
 22985                                  .L_tc_recycle_frame_done_0493:
 22986 00010382 488D6308                	lea rsp, [rbx + 8 * 1]
 22987 00010386 5D                      	pop rbp	; the proc will restore it!
 22988 00010387 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22989 0001038A C9                      	leave
 22990 0001038B C22000                  	ret AND_KILL_FRAME(2)
 22991                                  .L_lambda_opt_end_0079:	; new closure is in rax
 22992 0001038E C9                      	leave
 22993 0001038F C21800                  	ret AND_KILL_FRAME(1)
 22994                                  .L_lambda_simple_end_0375:	; new closure is in rax
 22995 00010392 803804                  	cmp byte [rax], T_closure
 22996 00010395 0F85CB5C0000            	jne L_error_non_closure
 22997 0001039B FF7001                  	push SOB_CLOSURE_ENV(rax)
 22998 0001039E FF5009                  	call SOB_CLOSURE_CODE(rax)
 22999 000103A1 48890425[71110000]      	mov qword [free_var_57], rax
 23000 000103A9 48B8-                   	mov rax, sob_void
 23000 000103AB [0000000000000000] 
 23001                                  
 23002 000103B3 4889C7                  	mov rdi, rax
 23003 000103B6 E8665E0000              	call print_sexpr_if_not_void
 23004                                  
 23005                                  	; preparing a non tail-call
 23006 000103BB 488B0425[82110000]      	mov rax, qword [free_var_58]	; free var make-string
 23007 000103C3 803805                  	cmp byte [rax], T_undefined
 23008 000103C6 0F84165C0000            	je L_error_fvar_undefined
 23009 000103CC 50                      	push rax
 23010 000103CD 6A01                    	push 1	; arg count
 23011 000103CF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23012 000103D4 E8365D0000              	call malloc
 23013 000103D9 50                      	push rax
 23014 000103DA BF00000000              	mov rdi, 8 * 0	; new rib
 23015 000103DF E82B5D0000              	call malloc
 23016 000103E4 50                      	push rax
 23017 000103E5 BF08000000              	mov rdi, 8 * 1	; extended env
 23018 000103EA E8205D0000              	call malloc
 23019 000103EF 488B7D10                	mov rdi, ENV
 23020 000103F3 BE00000000              	mov rsi, 0
 23021 000103F8 BA01000000              	mov rdx, 1
 23022                                  .L_lambda_simple_env_loop_0377:	; ext_env[i + 1] <-- env[i]
 23023 000103FD 4883FE00                	cmp rsi, 0
 23024 00010401 7410                    	je .L_lambda_simple_env_end_0377
 23025 00010403 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23026 00010407 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23027 0001040B 48FFC6                  	inc rsi
 23028 0001040E 48FFC2                  	inc rdx
 23029 00010411 EBEA                    	jmp .L_lambda_simple_env_loop_0377
 23030                                  .L_lambda_simple_env_end_0377:
 23031 00010413 5B                      	pop rbx
 23032 00010414 BE00000000              	mov rsi, 0
 23033                                  .L_lambda_simple_params_loop_0377:	; copy params
 23034 00010419 4883FE00                	cmp rsi, 0
 23035 0001041D 740E                    	je .L_lambda_simple_params_end_0377
 23036 0001041F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23037 00010424 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23038 00010428 48FFC6                  	inc rsi
 23039 0001042B EBEC                    	jmp .L_lambda_simple_params_loop_0377
 23040                                  .L_lambda_simple_params_end_0377:
 23041 0001042D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23042 00010430 4889C3                  	mov rbx, rax
 23043 00010433 58                      	pop rax
 23044 00010434 C60004                  	mov byte [rax], T_closure
 23045 00010437 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23046 0001043B 48C74009[48040100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0377
 23047 00010443 E950040000              	jmp .L_lambda_simple_end_0377
 23048                                  .L_lambda_simple_code_0377:	; lambda-simple body
 23049 00010448 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23050 0001044E 740B                    	je .L_lambda_simple_arity_check_ok_0377
 23051 00010450 FF742410                	push qword [rsp + 8 * 2]
 23052 00010454 6A01                    	push 1
 23053 00010456 E96D5C0000              	jmp L_error_incorrect_arity_simple
 23054                                  .L_lambda_simple_arity_check_ok_0377:
 23055 0001045B C8000000                	enter 0, 0
 23056 0001045F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23057 00010464 E8A65C0000              	call malloc
 23058 00010469 50                      	push rax
 23059 0001046A BF08000000              	mov rdi, 8 * 1	; new rib
 23060 0001046F E89B5C0000              	call malloc
 23061 00010474 50                      	push rax
 23062 00010475 BF10000000              	mov rdi, 8 * 2	; extended env
 23063 0001047A E8905C0000              	call malloc
 23064 0001047F 488B7D10                	mov rdi, ENV
 23065 00010483 BE00000000              	mov rsi, 0
 23066 00010488 BA01000000              	mov rdx, 1
 23067                                  .L_lambda_opt_env_loop_007a:	; ext_env[i + 1] <-- env[i]
 23068 0001048D 4883FE01                	cmp rsi, 1
 23069 00010491 7410                    	je .L_lambda_opt_env_end_007a
 23070 00010493 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23071 00010497 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23072 0001049B 48FFC6                  	inc rsi
 23073 0001049E 48FFC2                  	inc rdx
 23074 000104A1 EBEA                    	jmp .L_lambda_opt_env_loop_007a
 23075                                  .L_lambda_opt_env_end_007a:
 23076 000104A3 5B                      	pop rbx
 23077 000104A4 BE00000000              	mov rsi, 0
 23078                                  .L_lambda_opt_params_loop_007a:	; copy params
 23079 000104A9 4883FE01                	cmp rsi, 1
 23080 000104AD 740E                    	je .L_lambda_opt_params_end_007a
 23081 000104AF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23082 000104B4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23083 000104B8 48FFC6                  	inc rsi
 23084 000104BB EBEC                    	jmp .L_lambda_opt_params_loop_007a
 23085                                  .L_lambda_opt_params_end_007a:
 23086 000104BD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23087 000104C0 4889C3                  	mov rbx, rax
 23088 000104C3 58                      	pop rax
 23089 000104C4 C60004                  	mov byte [rax], T_closure
 23090 000104C7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23091 000104CB 48C74009[D8040100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_007a
 23092 000104D3 E9BC030000              	jmp .L_lambda_opt_end_007a
 23093                                  .L_lambda_opt_code_007a:	; lambda-opt body
 23094 000104D8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23095 000104DE 0F8404010000            	je .L_lambda_opt_arity_check_exact_007a
 23096 000104E4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23097 000104EA 7F0B                    	jg .L_lambda_opt_arity_check_more_007a
 23098 000104EC FF742410                	push qword [rsp + 8 * 2]
 23099 000104F0 6A01                    	push 1
 23100 000104F2 E9E55B0000              	jmp L_error_incorrect_arity_opt
 23101                                  .L_lambda_opt_arity_check_more_007a:
 23102 000104F7 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 23103 000104FC 41B901000000            	mov r9 , 1
 23104 00010502 4989E7                  	mov r15, rsp
 23105 00010505 4D29C8                  	sub r8, r9
 23106 00010508 41B900000000            	mov r9, 0
 23107 0001050E 498D5F10                	lea rbx, [r15 + 8 * 2]
 23108 00010512 498B4710                	mov rax, qword [r15 + 8 * 2]
 23109 00010516 486BC008                	imul rax, 8
 23110 0001051A 4801C3                  	add rbx, rax
 23111 0001051D 488B13                  	mov rdx , qword [rbx]
 23112 00010520 4989DA                  	mov r10 , rbx
 23113 00010523 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 23114 00010528 52                      	push rdx
 23115 00010529 53                      	push rbx
 23116 0001052A 4150                    	push r8
 23117 0001052C 4151                    	push r9
 23118 0001052E 4152                    	push r10
 23119 00010530 4157                    	push r15
 23120 00010532 E8D85B0000              	call malloc
 23121 00010537 415F                    	pop r15
 23122 00010539 415A                    	pop r10
 23123 0001053B 4159                    	pop r9
 23124 0001053D 4158                    	pop r8
 23125 0001053F 5B                      	pop rbx
 23126 00010540 5A                      	pop rdx
 23127 00010541 C60021                  	mov byte qword [rax], T_pair
 23128 00010544 48895001                	mov SOB_PAIR_CAR(rax), rdx
 23129 00010548 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 23130 00010550 498902                  	mov qword [r10], rax
 23131 00010553 49FFC1                  	inc r9
 23132 00010556 4883EB08                	sub rbx, 8
 23133 0001055A 4D39C1                  	cmp r9, r8
 23134 0001055D 743E                    	je .L_lambda_opt_stack_shrink_loop_0260
 23135                                  .L_lambda_opt_stack_shrink_loop_025f:
 23136 0001055F 488B13                  	mov rdx, qword [rbx]
 23137 00010562 53                      	push rbx
 23138 00010563 4150                    	push r8
 23139 00010565 4151                    	push r9
 23140 00010567 4152                    	push r10
 23141 00010569 4157                    	push r15
 23142 0001056B 52                      	push rdx
 23143 0001056C BF11000000              	mov rdi, (1 + 8 + 8)
 23144 00010571 E8995B0000              	call malloc
 23145 00010576 5A                      	pop rdx
 23146 00010577 415F                    	pop r15
 23147 00010579 415A                    	pop r10
 23148 0001057B 4159                    	pop r9
 23149 0001057D 4158                    	pop r8
 23150 0001057F 5B                      	pop rbx
 23151 00010580 C60021                  	mov byte [rax], T_pair
 23152 00010583 48895001                	mov SOB_PAIR_CAR(rax), rdx
 23153 00010587 4D8B32                  	mov r14, qword [r10]
 23154 0001058A 4C897009                	mov SOB_PAIR_CDR(rax), r14
 23155 0001058E 498902                  	mov qword [r10], rax
 23156 00010591 49FFC1                  	inc r9
 23157 00010594 4883EB08                	sub rbx, 8
 23158 00010598 4D39C1                  	cmp r9, r8
 23159 0001059B 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_025f
 23160                                  .L_lambda_opt_stack_shrink_loop_0260:
 23161 0001059D 498D5710                	lea rdx, [r15 + 8 * 2]
 23162 000105A1 48C70201000000          	mov qword [rdx], 1
 23163 000105A8 48830201                	add qword [rdx] , 1
 23164 000105AC 4D89C1                  	mov r9, r8
 23165 000105AF 49FFC9                  	dec r9
 23166 000105B2 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 23167                                  .L_lambda_opt_stack_shrink_loop_0261:
 23168 000105B6 488B03                  	mov rax, qword [rbx]
 23169 000105B9 498901                  	mov qword [r9], rax
 23170 000105BC 4983E908                	sub r9 , 8
 23171 000105C0 4883EB08                	sub rbx, 8
 23172 000105C4 4C39FB                  	cmp rbx, r15
 23173 000105C7 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0261
 23174 000105C9 488B03                  	mov rax, qword [rbx]
 23175 000105CC 498901                  	mov qword [r9], rax
 23176 000105CF 4D89C1                  	mov r9, r8
 23177 000105D2 4983E901                	sub r9 , 1
 23178 000105D6 4983F900                	cmp r9, 0
 23179 000105DA 7446                    je .L_lambda_opt_stack_adjusted_007a
 23180                                  .L_lambda_opt_stack_shrink_loop_0262:
 23181 000105DC 58                      	pop rax
 23182 000105DD 49FFC9                  	dec r9
 23183 000105E0 4983F900                	cmp r9, 0
 23184 000105E4 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0262
 23185 000105E6 EB3A                    jmp .L_lambda_opt_stack_adjusted_007a
 23186                                  .L_lambda_opt_arity_check_exact_007a:
 23187 000105E8 4989E7                  	mov r15, rsp
 23188 000105EB 498D5F18                	lea rbx, [r15 + 8 * 2 + 8 * 1]
 23189 000105EF 488B0B                  	mov rcx, qword [rbx]
 23190 000105F2 48C703[01000000]        	mov qword [rbx], sob_nil
 23191 000105F9 4883EB08                	sub rbx, 8
 23192                                  .L_lambda_opt_stack_shrink_loop_025e:
 23193 000105FD 488B13                  	mov rdx, qword [rbx]
 23194 00010600 48890B                  	mov qword [rbx], rcx
 23195 00010603 4C39FB                  	cmp rbx, r15
 23196 00010606 7409                    je .L_lambda_opt_stack_shrink_loop_exit_007a
 23197 00010608 4889D1                  	mov rcx, rdx
 23198 0001060B 4883EB08                	sub rbx, 8
 23199 0001060F EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_025e
 23200                                  .L_lambda_opt_stack_shrink_loop_exit_007a:
 23201 00010611 52                      	push rdx
 23202 00010612 4989E7                  	mov r15, rsp
 23203 00010615 4983C710                	add r15, 16
 23204 00010619 498B1F                  	mov rbx, qword [r15]
 23205 0001061C 48FFC3                  	inc rbx
 23206 0001061F 49891F                  	mov qword [r15], rbx
 23207                                  .L_lambda_opt_stack_adjusted_007a:
 23208 00010622 C8000000                	enter 0, 0
 23209                                  	; preparing a tail-call
 23210                                  	; preparing a non tail-call
 23211 00010626 488B4528                	mov rax, PARAM(1)	; param chs
 23212 0001062A 50                      	push rax
 23213 0001062B 6A01                    	push 1	; arg count
 23214 0001062D 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 23215 00010635 803805                  	cmp byte [rax], T_undefined
 23216 00010638 0F84A4590000            	je L_error_fvar_undefined
 23217 0001063E 803804                  	cmp byte [rax], T_closure
 23218 00010641 0F851F5A0000            	jne L_error_non_closure
 23219 00010647 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23220 0001064A FF5009                  	call SOB_CLOSURE_CODE(rax)
 23221 0001064D 483D[02000000]          	cmp rax, sob_boolean_false
 23222 00010653 740F                    	je .L_if_else_0283
 23223 00010655 48B8-                   	mov rax, L_constants + 4
 23223 00010657 [0400000000000000] 
 23224 0001065F E9EE000000              	jmp .L_if_end_0283
 23225                                  .L_if_else_0283:
 23226                                  	; preparing a non tail-call
 23227 00010664 488B4528                	mov rax, PARAM(1)	; param chs
 23228 00010668 50                      	push rax
 23229 00010669 6A01                    	push 1	; arg count
 23230 0001066B 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
 23231 00010673 803805                  	cmp byte [rax], T_undefined
 23232 00010676 0F8466590000            	je L_error_fvar_undefined
 23233 0001067C 803804                  	cmp byte [rax], T_closure
 23234 0001067F 0F85E1590000            	jne L_error_non_closure
 23235 00010685 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23236 00010688 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23237 0001068B 483D[02000000]          	cmp rax, sob_boolean_false
 23238 00010691 744C                    	je .L_if_else_0285
 23239                                  	; preparing a non tail-call
 23240                                  	; preparing a non tail-call
 23241 00010693 488B4528                	mov rax, PARAM(1)	; param chs
 23242 00010697 50                      	push rax
 23243 00010698 6A01                    	push 1	; arg count
 23244 0001069A 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 23245 000106A2 803805                  	cmp byte [rax], T_undefined
 23246 000106A5 0F8437590000            	je L_error_fvar_undefined
 23247 000106AB 803804                  	cmp byte [rax], T_closure
 23248 000106AE 0F85B2590000            	jne L_error_non_closure
 23249 000106B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23250 000106B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23251 000106BA 50                      	push rax
 23252 000106BB 6A01                    	push 1	; arg count
 23253 000106BD 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 23254 000106C5 803805                  	cmp byte [rax], T_undefined
 23255 000106C8 0F8414590000            	je L_error_fvar_undefined
 23256 000106CE 803804                  	cmp byte [rax], T_closure
 23257 000106D1 0F858F590000            	jne L_error_non_closure
 23258 000106D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23259 000106DA FF5009                  	call SOB_CLOSURE_CODE(rax)
 23260 000106DD EB0A                    	jmp .L_if_end_0285
 23261                                  .L_if_else_0285:
 23262 000106DF 48B8-                   	mov rax, L_constants + 2
 23262 000106E1 [0200000000000000] 
 23263                                  .L_if_end_0285:
 23264 000106E9 483D[02000000]          	cmp rax, sob_boolean_false
 23265 000106EF 7429                    	je .L_if_else_0284
 23266                                  	; preparing a non tail-call
 23267 000106F1 488B4528                	mov rax, PARAM(1)	; param chs
 23268 000106F5 50                      	push rax
 23269 000106F6 6A01                    	push 1	; arg count
 23270 000106F8 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 23271 00010700 803805                  	cmp byte [rax], T_undefined
 23272 00010703 0F84D9580000            	je L_error_fvar_undefined
 23273 00010709 803804                  	cmp byte [rax], T_closure
 23274 0001070C 0F8554590000            	jne L_error_non_closure
 23275 00010712 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23276 00010715 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23277 00010718 EB38                    	jmp .L_if_end_0284
 23278                                  .L_if_else_0284:
 23279                                  	; preparing a non tail-call
 23280 0001071A 48B8-                   	mov rax, L_constants + 3000
 23280 0001071C [B80B000000000000] 
 23281 00010724 50                      	push rax
 23282 00010725 48B8-                   	mov rax, L_constants + 2991
 23282 00010727 [AF0B000000000000] 
 23283 0001072F 50                      	push rax
 23284 00010730 6A02                    	push 2	; arg count
 23285 00010732 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
 23286 0001073A 803805                  	cmp byte [rax], T_undefined
 23287 0001073D 0F849F580000            	je L_error_fvar_undefined
 23288 00010743 803804                  	cmp byte [rax], T_closure
 23289 00010746 0F851A590000            	jne L_error_non_closure
 23290 0001074C FF7001                  	push SOB_CLOSURE_ENV(rax)
 23291 0001074F FF5009                  	call SOB_CLOSURE_CODE(rax)
 23292                                  .L_if_end_0284:
 23293                                  .L_if_end_0283:
 23294 00010752 50                      	push rax
 23295 00010753 6A01                    	push 1	; arg count
 23296 00010755 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23297 0001075A E8B0590000              	call malloc
 23298 0001075F 50                      	push rax
 23299 00010760 BF10000000              	mov rdi, 8 * 2	; new rib
 23300 00010765 E8A5590000              	call malloc
 23301 0001076A 50                      	push rax
 23302 0001076B BF18000000              	mov rdi, 8 * 3	; extended env
 23303 00010770 E89A590000              	call malloc
 23304 00010775 488B7D10                	mov rdi, ENV
 23305 00010779 BE00000000              	mov rsi, 0
 23306 0001077E BA01000000              	mov rdx, 1
 23307                                  .L_lambda_simple_env_loop_0378:	; ext_env[i + 1] <-- env[i]
 23308 00010783 4883FE02                	cmp rsi, 2
 23309 00010787 7410                    	je .L_lambda_simple_env_end_0378
 23310 00010789 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23311 0001078D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23312 00010791 48FFC6                  	inc rsi
 23313 00010794 48FFC2                  	inc rdx
 23314 00010797 EBEA                    	jmp .L_lambda_simple_env_loop_0378
 23315                                  .L_lambda_simple_env_end_0378:
 23316 00010799 5B                      	pop rbx
 23317 0001079A BE00000000              	mov rsi, 0
 23318                                  .L_lambda_simple_params_loop_0378:	; copy params
 23319 0001079F 4883FE02                	cmp rsi, 2
 23320 000107A3 740E                    	je .L_lambda_simple_params_end_0378
 23321 000107A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23322 000107AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23323 000107AE 48FFC6                  	inc rsi
 23324 000107B1 EBEC                    	jmp .L_lambda_simple_params_loop_0378
 23325                                  .L_lambda_simple_params_end_0378:
 23326 000107B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23327 000107B6 4889C3                  	mov rbx, rax
 23328 000107B9 58                      	pop rax
 23329 000107BA C60004                  	mov byte [rax], T_closure
 23330 000107BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23331 000107C1 48C74009[CE070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0378
 23332 000107C9 E97D000000              	jmp .L_lambda_simple_end_0378
 23333                                  .L_lambda_simple_code_0378:	; lambda-simple body
 23334 000107CE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23335 000107D4 740B                    	je .L_lambda_simple_arity_check_ok_0378
 23336 000107D6 FF742410                	push qword [rsp + 8 * 2]
 23337 000107DA 6A01                    	push 1
 23338 000107DC E9E7580000              	jmp L_error_incorrect_arity_simple
 23339                                  .L_lambda_simple_arity_check_ok_0378:
 23340 000107E1 C8000000                	enter 0, 0
 23341                                  	; preparing a tail-call
 23342 000107E5 488B4520                	mov rax, PARAM(0)	; param ch
 23343 000107E9 50                      	push rax
 23344 000107EA 488B4510                	mov rax, ENV
 23345 000107EE 488B00                  	mov rax, qword [rax + 8 * 0]
 23346 000107F1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 23347 000107F4 50                      	push rax
 23348 000107F5 6A02                    	push 2	; arg count
 23349 000107F7 488B4510                	mov rax, ENV
 23350 000107FB 488B4008                	mov rax, qword [rax + 8 * 1]
 23351 000107FF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
 23352 00010802 803804                  	cmp byte [rax], T_closure
 23353 00010805 0F855B580000            	jne L_error_non_closure
 23354 0001080B FF7001                  	push SOB_CLOSURE_ENV(rax)
 23355                                  
 23356                                  	; recycling the current frame
 23357 0001080E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23358 00010811 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23359 00010814 B906000000              	mov rcx, 2 + 4
 23360 00010819 488B5D18                	mov rbx, COUNT
 23361 0001081D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23362 00010822 488D55F8                	lea rdx, [rbp - 8 * 1]
 23363                                  .L_tc_recycle_frame_loop_0494:
 23364 00010826 4883F900                	cmp rcx, 0
 23365 0001082A 7413                    	je .L_tc_recycle_frame_done_0494
 23366 0001082C 488B32                  	mov rsi, qword [rdx]
 23367 0001082F 488933                  	mov qword [rbx], rsi
 23368 00010832 48FFC9                  	dec rcx
 23369 00010835 4883EB08                	sub rbx, 8 * 1
 23370 00010839 4883EA08                	sub rdx, 8 * 1
 23371 0001083D EBE7                    	jmp .L_tc_recycle_frame_loop_0494
 23372                                  .L_tc_recycle_frame_done_0494:
 23373 0001083F 488D6308                	lea rsp, [rbx + 8 * 1]
 23374 00010843 5D                      	pop rbp	; the proc will restore it!
 23375 00010844 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23376 00010847 C9                      	leave
 23377 00010848 C21800                  	ret AND_KILL_FRAME(1)
 23378                                  .L_lambda_simple_end_0378:	; new closure is in rax
 23379 0001084B 803804                  	cmp byte [rax], T_closure
 23380 0001084E 0F8512580000            	jne L_error_non_closure
 23381 00010854 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23382                                  
 23383                                  	; recycling the current frame
 23384 00010857 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23385 0001085A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23386 0001085D B905000000              	mov rcx, 1 + 4
 23387 00010862 488B5D18                	mov rbx, COUNT
 23388 00010866 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23389 0001086B 488D55F8                	lea rdx, [rbp - 8 * 1]
 23390                                  .L_tc_recycle_frame_loop_0495:
 23391 0001086F 4883F900                	cmp rcx, 0
 23392 00010873 7413                    	je .L_tc_recycle_frame_done_0495
 23393 00010875 488B32                  	mov rsi, qword [rdx]
 23394 00010878 488933                  	mov qword [rbx], rsi
 23395 0001087B 48FFC9                  	dec rcx
 23396 0001087E 4883EB08                	sub rbx, 8 * 1
 23397 00010882 4883EA08                	sub rdx, 8 * 1
 23398 00010886 EBE7                    	jmp .L_tc_recycle_frame_loop_0495
 23399                                  .L_tc_recycle_frame_done_0495:
 23400 00010888 488D6308                	lea rsp, [rbx + 8 * 1]
 23401 0001088C 5D                      	pop rbp	; the proc will restore it!
 23402 0001088D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23403 00010890 C9                      	leave
 23404 00010891 C22000                  	ret AND_KILL_FRAME(2)
 23405                                  .L_lambda_opt_end_007a:	; new closure is in rax
 23406 00010894 C9                      	leave
 23407 00010895 C21800                  	ret AND_KILL_FRAME(1)
 23408                                  .L_lambda_simple_end_0377:	; new closure is in rax
 23409 00010898 803804                  	cmp byte [rax], T_closure
 23410 0001089B 0F85C5570000            	jne L_error_non_closure
 23411 000108A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23412 000108A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23413 000108A7 48890425[82110000]      	mov qword [free_var_58], rax
 23414 000108AF 48B8-                   	mov rax, sob_void
 23414 000108B1 [0000000000000000] 
 23415                                  
 23416 000108B9 4889C7                  	mov rdi, rax
 23417 000108BC E860590000              	call print_sexpr_if_not_void
 23418                                  
 23419                                  	; preparing a non tail-call
 23420 000108C1 48B8-                   	mov rax, L_constants + 1881
 23420 000108C3 [5907000000000000] 
 23421 000108CB 50                      	push rax
 23422 000108CC 6A01                    	push 1	; arg count
 23423 000108CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23424 000108D3 E837580000              	call malloc
 23425 000108D8 50                      	push rax
 23426 000108D9 BF00000000              	mov rdi, 8 * 0	; new rib
 23427 000108DE E82C580000              	call malloc
 23428 000108E3 50                      	push rax
 23429 000108E4 BF08000000              	mov rdi, 8 * 1	; extended env
 23430 000108E9 E821580000              	call malloc
 23431 000108EE 488B7D10                	mov rdi, ENV
 23432 000108F2 BE00000000              	mov rsi, 0
 23433 000108F7 BA01000000              	mov rdx, 1
 23434                                  .L_lambda_simple_env_loop_0379:	; ext_env[i + 1] <-- env[i]
 23435 000108FC 4883FE00                	cmp rsi, 0
 23436 00010900 7410                    	je .L_lambda_simple_env_end_0379
 23437 00010902 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23438 00010906 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23439 0001090A 48FFC6                  	inc rsi
 23440 0001090D 48FFC2                  	inc rdx
 23441 00010910 EBEA                    	jmp .L_lambda_simple_env_loop_0379
 23442                                  .L_lambda_simple_env_end_0379:
 23443 00010912 5B                      	pop rbx
 23444 00010913 BE00000000              	mov rsi, 0
 23445                                  .L_lambda_simple_params_loop_0379:	; copy params
 23446 00010918 4883FE00                	cmp rsi, 0
 23447 0001091C 740E                    	je .L_lambda_simple_params_end_0379
 23448 0001091E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23449 00010923 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23450 00010927 48FFC6                  	inc rsi
 23451 0001092A EBEC                    	jmp .L_lambda_simple_params_loop_0379
 23452                                  .L_lambda_simple_params_end_0379:
 23453 0001092C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23454 0001092F 4889C3                  	mov rbx, rax
 23455 00010932 58                      	pop rax
 23456 00010933 C60004                  	mov byte [rax], T_closure
 23457 00010936 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23458 0001093A 48C74009[47090100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0379
 23459 00010942 E92D040000              	jmp .L_lambda_simple_end_0379
 23460                                  .L_lambda_simple_code_0379:	; lambda-simple body
 23461 00010947 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23462 0001094D 740B                    	je .L_lambda_simple_arity_check_ok_0379
 23463 0001094F FF742410                	push qword [rsp + 8 * 2]
 23464 00010953 6A01                    	push 1
 23465 00010955 E96E570000              	jmp L_error_incorrect_arity_simple
 23466                                  .L_lambda_simple_arity_check_ok_0379:
 23467 0001095A C8000000                	enter 0, 0
 23468 0001095E BF08000000              	mov rdi, 8	; sob_box
 23469 00010963 E8A7570000              	call malloc
 23470 00010968 488B5D20                	mov rbx, PARAM(0)
 23471 0001096C 488918                  	mov [rax], rbx
 23472 0001096F 48894520                	mov PARAM(0), rax
 23473 00010973 48B8-                   	mov rax, sob_void
 23473 00010975 [0000000000000000] 
 23474                                  
 23475 0001097D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23476 00010982 E888570000              	call malloc
 23477 00010987 50                      	push rax
 23478 00010988 BF08000000              	mov rdi, 8 * 1	; new rib
 23479 0001098D E87D570000              	call malloc
 23480 00010992 50                      	push rax
 23481 00010993 BF10000000              	mov rdi, 8 * 2	; extended env
 23482 00010998 E872570000              	call malloc
 23483 0001099D 488B7D10                	mov rdi, ENV
 23484 000109A1 BE00000000              	mov rsi, 0
 23485 000109A6 BA01000000              	mov rdx, 1
 23486                                  .L_lambda_simple_env_loop_037a:	; ext_env[i + 1] <-- env[i]
 23487 000109AB 4883FE01                	cmp rsi, 1
 23488 000109AF 7410                    	je .L_lambda_simple_env_end_037a
 23489 000109B1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23490 000109B5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23491 000109B9 48FFC6                  	inc rsi
 23492 000109BC 48FFC2                  	inc rdx
 23493 000109BF EBEA                    	jmp .L_lambda_simple_env_loop_037a
 23494                                  .L_lambda_simple_env_end_037a:
 23495 000109C1 5B                      	pop rbx
 23496 000109C2 BE00000000              	mov rsi, 0
 23497                                  .L_lambda_simple_params_loop_037a:	; copy params
 23498 000109C7 4883FE01                	cmp rsi, 1
 23499 000109CB 740E                    	je .L_lambda_simple_params_end_037a
 23500 000109CD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23501 000109D2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23502 000109D6 48FFC6                  	inc rsi
 23503 000109D9 EBEC                    	jmp .L_lambda_simple_params_loop_037a
 23504                                  .L_lambda_simple_params_end_037a:
 23505 000109DB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23506 000109DE 4889C3                  	mov rbx, rax
 23507 000109E1 58                      	pop rax
 23508 000109E2 C60004                  	mov byte [rax], T_closure
 23509 000109E5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23510 000109E9 48C74009[F6090100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_037a
 23511 000109F1 E971020000              	jmp .L_lambda_simple_end_037a
 23512                                  .L_lambda_simple_code_037a:	; lambda-simple body
 23513 000109F6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 23514 000109FC 740B                    	je .L_lambda_simple_arity_check_ok_037a
 23515 000109FE FF742410                	push qword [rsp + 8 * 2]
 23516 00010A02 6A02                    	push 2
 23517 00010A04 E9BF560000              	jmp L_error_incorrect_arity_simple
 23518                                  .L_lambda_simple_arity_check_ok_037a:
 23519 00010A09 C8000000                	enter 0, 0
 23520                                  	; preparing a non tail-call
 23521 00010A0D 488B4520                	mov rax, PARAM(0)	; param s
 23522 00010A11 50                      	push rax
 23523 00010A12 6A01                    	push 1	; arg count
 23524 00010A14 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 23525 00010A1C 803805                  	cmp byte [rax], T_undefined
 23526 00010A1F 0F84BD550000            	je L_error_fvar_undefined
 23527 00010A25 803804                  	cmp byte [rax], T_closure
 23528 00010A28 0F8538560000            	jne L_error_non_closure
 23529 00010A2E FF7001                  	push SOB_CLOSURE_ENV(rax)
 23530 00010A31 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23531 00010A34 483D[02000000]          	cmp rax, sob_boolean_false
 23532 00010A3A 746D                    	je .L_if_else_0286
 23533                                  	; preparing a tail-call
 23534 00010A3C 48B8-                   	mov rax, L_constants + 0
 23534 00010A3E [0000000000000000] 
 23535 00010A46 50                      	push rax
 23536 00010A47 488B4528                	mov rax, PARAM(1)	; param i
 23537 00010A4B 50                      	push rax
 23538 00010A4C 6A02                    	push 2	; arg count
 23539 00010A4E 488B0425[71110000]      	mov rax, qword [free_var_57]	; free var make-vector
 23540 00010A56 803805                  	cmp byte [rax], T_undefined
 23541 00010A59 0F8483550000            	je L_error_fvar_undefined
 23542 00010A5F 803804                  	cmp byte [rax], T_closure
 23543 00010A62 0F85FE550000            	jne L_error_non_closure
 23544 00010A68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23545                                  
 23546                                  	; recycling the current frame
 23547 00010A6B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23548 00010A6E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23549 00010A71 B906000000              	mov rcx, 2 + 4
 23550 00010A76 488B5D18                	mov rbx, COUNT
 23551 00010A7A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23552 00010A7F 488D55F8                	lea rdx, [rbp - 8 * 1]
 23553                                  .L_tc_recycle_frame_loop_0496:
 23554 00010A83 4883F900                	cmp rcx, 0
 23555 00010A87 7413                    	je .L_tc_recycle_frame_done_0496
 23556 00010A89 488B32                  	mov rsi, qword [rdx]
 23557 00010A8C 488933                  	mov qword [rbx], rsi
 23558 00010A8F 48FFC9                  	dec rcx
 23559 00010A92 4883EB08                	sub rbx, 8 * 1
 23560 00010A96 4883EA08                	sub rdx, 8 * 1
 23561 00010A9A EBE7                    	jmp .L_tc_recycle_frame_loop_0496
 23562                                  .L_tc_recycle_frame_done_0496:
 23563 00010A9C 488D6308                	lea rsp, [rbx + 8 * 1]
 23564 00010AA0 5D                      	pop rbp	; the proc will restore it!
 23565 00010AA1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23566 00010AA4 E9BA010000              	jmp .L_if_end_0286
 23567                                  .L_if_else_0286:
 23568                                  	; preparing a tail-call
 23569                                  	; preparing a non tail-call
 23570                                  	; preparing a non tail-call
 23571 00010AA9 48B8-                   	mov rax, L_constants + 2158
 23571 00010AAB [6E08000000000000] 
 23572 00010AB3 50                      	push rax
 23573 00010AB4 488B4528                	mov rax, PARAM(1)	; param i
 23574 00010AB8 50                      	push rax
 23575 00010AB9 6A02                    	push 2	; arg count
 23576 00010ABB 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 23577 00010AC3 803805                  	cmp byte [rax], T_undefined
 23578 00010AC6 0F8416550000            	je L_error_fvar_undefined
 23579 00010ACC 803804                  	cmp byte [rax], T_closure
 23580 00010ACF 0F8591550000            	jne L_error_non_closure
 23581 00010AD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23582 00010AD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23583 00010ADB 50                      	push rax
 23584                                  	; preparing a non tail-call
 23585 00010ADC 488B4520                	mov rax, PARAM(0)	; param s
 23586 00010AE0 50                      	push rax
 23587 00010AE1 6A01                    	push 1	; arg count
 23588 00010AE3 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 23589 00010AEB 803805                  	cmp byte [rax], T_undefined
 23590 00010AEE 0F84EE540000            	je L_error_fvar_undefined
 23591 00010AF4 803804                  	cmp byte [rax], T_closure
 23592 00010AF7 0F8569550000            	jne L_error_non_closure
 23593 00010AFD FF7001                  	push SOB_CLOSURE_ENV(rax)
 23594 00010B00 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23595 00010B03 50                      	push rax
 23596 00010B04 6A02                    	push 2	; arg count
 23597 00010B06 488B4510                	mov rax, ENV
 23598 00010B0A 488B00                  	mov rax, qword [rax + 8 * 0]
 23599 00010B0D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23600 00010B10 488B00                  	mov rax, qword [rax]
 23601 00010B13 803804                  	cmp byte [rax], T_closure
 23602 00010B16 0F854A550000            	jne L_error_non_closure
 23603 00010B1C FF7001                  	push SOB_CLOSURE_ENV(rax)
 23604 00010B1F FF5009                  	call SOB_CLOSURE_CODE(rax)
 23605 00010B22 50                      	push rax
 23606 00010B23 6A01                    	push 1	; arg count
 23607 00010B25 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23608 00010B2A E8E0550000              	call malloc
 23609 00010B2F 50                      	push rax
 23610 00010B30 BF10000000              	mov rdi, 8 * 2	; new rib
 23611 00010B35 E8D5550000              	call malloc
 23612 00010B3A 50                      	push rax
 23613 00010B3B BF18000000              	mov rdi, 8 * 3	; extended env
 23614 00010B40 E8CA550000              	call malloc
 23615 00010B45 488B7D10                	mov rdi, ENV
 23616 00010B49 BE00000000              	mov rsi, 0
 23617 00010B4E BA01000000              	mov rdx, 1
 23618                                  .L_lambda_simple_env_loop_037b:	; ext_env[i + 1] <-- env[i]
 23619 00010B53 4883FE02                	cmp rsi, 2
 23620 00010B57 7410                    	je .L_lambda_simple_env_end_037b
 23621 00010B59 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23622 00010B5D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23623 00010B61 48FFC6                  	inc rsi
 23624 00010B64 48FFC2                  	inc rdx
 23625 00010B67 EBEA                    	jmp .L_lambda_simple_env_loop_037b
 23626                                  .L_lambda_simple_env_end_037b:
 23627 00010B69 5B                      	pop rbx
 23628 00010B6A BE00000000              	mov rsi, 0
 23629                                  .L_lambda_simple_params_loop_037b:	; copy params
 23630 00010B6F 4883FE02                	cmp rsi, 2
 23631 00010B73 740E                    	je .L_lambda_simple_params_end_037b
 23632 00010B75 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23633 00010B7A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23634 00010B7E 48FFC6                  	inc rsi
 23635 00010B81 EBEC                    	jmp .L_lambda_simple_params_loop_037b
 23636                                  .L_lambda_simple_params_end_037b:
 23637 00010B83 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23638 00010B86 4889C3                  	mov rbx, rax
 23639 00010B89 58                      	pop rax
 23640 00010B8A C60004                  	mov byte [rax], T_closure
 23641 00010B8D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23642 00010B91 48C74009[9E0B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_037b
 23643 00010B99 E980000000              	jmp .L_lambda_simple_end_037b
 23644                                  .L_lambda_simple_code_037b:	; lambda-simple body
 23645 00010B9E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23646 00010BA4 740B                    	je .L_lambda_simple_arity_check_ok_037b
 23647 00010BA6 FF742410                	push qword [rsp + 8 * 2]
 23648 00010BAA 6A01                    	push 1
 23649 00010BAC E917550000              	jmp L_error_incorrect_arity_simple
 23650                                  .L_lambda_simple_arity_check_ok_037b:
 23651 00010BB1 C8000000                	enter 0, 0
 23652                                  	; preparing a non tail-call
 23653                                  	; preparing a non tail-call
 23654 00010BB5 488B4510                	mov rax, ENV
 23655 00010BB9 488B00                  	mov rax, qword [rax + 8 * 0]
 23656 00010BBC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 23657 00010BBF 50                      	push rax
 23658 00010BC0 6A01                    	push 1	; arg count
 23659 00010BC2 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 23660 00010BCA 803805                  	cmp byte [rax], T_undefined
 23661 00010BCD 0F840F540000            	je L_error_fvar_undefined
 23662 00010BD3 803804                  	cmp byte [rax], T_closure
 23663 00010BD6 0F858A540000            	jne L_error_non_closure
 23664 00010BDC FF7001                  	push SOB_CLOSURE_ENV(rax)
 23665 00010BDF FF5009                  	call SOB_CLOSURE_CODE(rax)
 23666 00010BE2 50                      	push rax
 23667 00010BE3 488B4510                	mov rax, ENV
 23668 00010BE7 488B00                  	mov rax, qword [rax + 8 * 0]
 23669 00010BEA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 23670 00010BEE 50                      	push rax
 23671 00010BEF 488B4520                	mov rax, PARAM(0)	; param v
 23672 00010BF3 50                      	push rax
 23673 00010BF4 6A03                    	push 3	; arg count
 23674 00010BF6 488B0425[4F110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 23675 00010BFE 803805                  	cmp byte [rax], T_undefined
 23676 00010C01 0F84DB530000            	je L_error_fvar_undefined
 23677 00010C07 803804                  	cmp byte [rax], T_closure
 23678 00010C0A 0F8556540000            	jne L_error_non_closure
 23679 00010C10 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23680 00010C13 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23681                                  
 23682 00010C16 488B4520                	mov rax, PARAM(0)	; param v
 23683 00010C1A C9                      	leave
 23684 00010C1B C21800                  	ret AND_KILL_FRAME(1)
 23685                                  .L_lambda_simple_end_037b:	; new closure is in rax
 23686 00010C1E 803804                  	cmp byte [rax], T_closure
 23687 00010C21 0F853F540000            	jne L_error_non_closure
 23688 00010C27 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23689                                  
 23690                                  	; recycling the current frame
 23691 00010C2A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23692 00010C2D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23693 00010C30 B905000000              	mov rcx, 1 + 4
 23694 00010C35 488B5D18                	mov rbx, COUNT
 23695 00010C39 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23696 00010C3E 488D55F8                	lea rdx, [rbp - 8 * 1]
 23697                                  .L_tc_recycle_frame_loop_0497:
 23698 00010C42 4883F900                	cmp rcx, 0
 23699 00010C46 7413                    	je .L_tc_recycle_frame_done_0497
 23700 00010C48 488B32                  	mov rsi, qword [rdx]
 23701 00010C4B 488933                  	mov qword [rbx], rsi
 23702 00010C4E 48FFC9                  	dec rcx
 23703 00010C51 4883EB08                	sub rbx, 8 * 1
 23704 00010C55 4883EA08                	sub rdx, 8 * 1
 23705 00010C59 EBE7                    	jmp .L_tc_recycle_frame_loop_0497
 23706                                  .L_tc_recycle_frame_done_0497:
 23707 00010C5B 488D6308                	lea rsp, [rbx + 8 * 1]
 23708 00010C5F 5D                      	pop rbp	; the proc will restore it!
 23709 00010C60 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23710                                  .L_if_end_0286:
 23711 00010C63 C9                      	leave
 23712 00010C64 C22000                  	ret AND_KILL_FRAME(2)
 23713                                  .L_lambda_simple_end_037a:	; new closure is in rax
 23714 00010C67 50                      	push rax
 23715 00010C68 488B4520                	mov rax, PARAM(0)	; param run
 23716 00010C6C 8F00                    	pop qword [rax]
 23717 00010C6E 48B8-                   	mov rax, sob_void
 23717 00010C70 [0000000000000000] 
 23718                                  
 23719 00010C78 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23720 00010C7D E88D540000              	call malloc
 23721 00010C82 50                      	push rax
 23722 00010C83 BF08000000              	mov rdi, 8 * 1	; new rib
 23723 00010C88 E882540000              	call malloc
 23724 00010C8D 50                      	push rax
 23725 00010C8E BF10000000              	mov rdi, 8 * 2	; extended env
 23726 00010C93 E877540000              	call malloc
 23727 00010C98 488B7D10                	mov rdi, ENV
 23728 00010C9C BE00000000              	mov rsi, 0
 23729 00010CA1 BA01000000              	mov rdx, 1
 23730                                  .L_lambda_simple_env_loop_037c:	; ext_env[i + 1] <-- env[i]
 23731 00010CA6 4883FE01                	cmp rsi, 1
 23732 00010CAA 7410                    	je .L_lambda_simple_env_end_037c
 23733 00010CAC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23734 00010CB0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23735 00010CB4 48FFC6                  	inc rsi
 23736 00010CB7 48FFC2                  	inc rdx
 23737 00010CBA EBEA                    	jmp .L_lambda_simple_env_loop_037c
 23738                                  .L_lambda_simple_env_end_037c:
 23739 00010CBC 5B                      	pop rbx
 23740 00010CBD BE00000000              	mov rsi, 0
 23741                                  .L_lambda_simple_params_loop_037c:	; copy params
 23742 00010CC2 4883FE01                	cmp rsi, 1
 23743 00010CC6 740E                    	je .L_lambda_simple_params_end_037c
 23744 00010CC8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23745 00010CCD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23746 00010CD1 48FFC6                  	inc rsi
 23747 00010CD4 EBEC                    	jmp .L_lambda_simple_params_loop_037c
 23748                                  .L_lambda_simple_params_end_037c:
 23749 00010CD6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23750 00010CD9 4889C3                  	mov rbx, rax
 23751 00010CDC 58                      	pop rax
 23752 00010CDD C60004                  	mov byte [rax], T_closure
 23753 00010CE0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23754 00010CE4 48C74009[F10C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_037c
 23755 00010CEC E97F000000              	jmp .L_lambda_simple_end_037c
 23756                                  .L_lambda_simple_code_037c:	; lambda-simple body
 23757 00010CF1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23758 00010CF7 740B                    	je .L_lambda_simple_arity_check_ok_037c
 23759 00010CF9 FF742410                	push qword [rsp + 8 * 2]
 23760 00010CFD 6A01                    	push 1
 23761 00010CFF E9C4530000              	jmp L_error_incorrect_arity_simple
 23762                                  .L_lambda_simple_arity_check_ok_037c:
 23763 00010D04 C8000000                	enter 0, 0
 23764                                  	; preparing a tail-call
 23765 00010D08 48B8-                   	mov rax, L_constants + 2023
 23765 00010D0A [E707000000000000] 
 23766 00010D12 50                      	push rax
 23767 00010D13 488B4520                	mov rax, PARAM(0)	; param s
 23768 00010D17 50                      	push rax
 23769 00010D18 6A02                    	push 2	; arg count
 23770 00010D1A 488B4510                	mov rax, ENV
 23771 00010D1E 488B00                  	mov rax, qword [rax + 8 * 0]
 23772 00010D21 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23773 00010D24 488B00                  	mov rax, qword [rax]
 23774 00010D27 803804                  	cmp byte [rax], T_closure
 23775 00010D2A 0F8536530000            	jne L_error_non_closure
 23776 00010D30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23777                                  
 23778                                  	; recycling the current frame
 23779 00010D33 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23780 00010D36 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23781 00010D39 B906000000              	mov rcx, 2 + 4
 23782 00010D3E 488B5D18                	mov rbx, COUNT
 23783 00010D42 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23784 00010D47 488D55F8                	lea rdx, [rbp - 8 * 1]
 23785                                  .L_tc_recycle_frame_loop_0498:
 23786 00010D4B 4883F900                	cmp rcx, 0
 23787 00010D4F 7413                    	je .L_tc_recycle_frame_done_0498
 23788 00010D51 488B32                  	mov rsi, qword [rdx]
 23789 00010D54 488933                  	mov qword [rbx], rsi
 23790 00010D57 48FFC9                  	dec rcx
 23791 00010D5A 4883EB08                	sub rbx, 8 * 1
 23792 00010D5E 4883EA08                	sub rdx, 8 * 1
 23793 00010D62 EBE7                    	jmp .L_tc_recycle_frame_loop_0498
 23794                                  .L_tc_recycle_frame_done_0498:
 23795 00010D64 488D6308                	lea rsp, [rbx + 8 * 1]
 23796 00010D68 5D                      	pop rbp	; the proc will restore it!
 23797 00010D69 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23798 00010D6C C9                      	leave
 23799 00010D6D C21800                  	ret AND_KILL_FRAME(1)
 23800                                  .L_lambda_simple_end_037c:	; new closure is in rax
 23801 00010D70 C9                      	leave
 23802 00010D71 C21800                  	ret AND_KILL_FRAME(1)
 23803                                  .L_lambda_simple_end_0379:	; new closure is in rax
 23804 00010D74 803804                  	cmp byte [rax], T_closure
 23805 00010D77 0F85E9520000            	jne L_error_non_closure
 23806 00010D7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 23807 00010D80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23808 00010D83 48890425[F3170000]      	mov qword [free_var_155], rax
 23809 00010D8B 48B8-                   	mov rax, sob_void
 23809 00010D8D [0000000000000000] 
 23810                                  
 23811 00010D95 4889C7                  	mov rdi, rax
 23812 00010D98 E884540000              	call print_sexpr_if_not_void
 23813                                  
 23814                                  	; preparing a non tail-call
 23815 00010D9D 48B8-                   	mov rax, L_constants + 1881
 23815 00010D9F [5907000000000000] 
 23816 00010DA7 50                      	push rax
 23817 00010DA8 6A01                    	push 1	; arg count
 23818 00010DAA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23819 00010DAF E85B530000              	call malloc
 23820 00010DB4 50                      	push rax
 23821 00010DB5 BF00000000              	mov rdi, 8 * 0	; new rib
 23822 00010DBA E850530000              	call malloc
 23823 00010DBF 50                      	push rax
 23824 00010DC0 BF08000000              	mov rdi, 8 * 1	; extended env
 23825 00010DC5 E845530000              	call malloc
 23826 00010DCA 488B7D10                	mov rdi, ENV
 23827 00010DCE BE00000000              	mov rsi, 0
 23828 00010DD3 BA01000000              	mov rdx, 1
 23829                                  .L_lambda_simple_env_loop_037d:	; ext_env[i + 1] <-- env[i]
 23830 00010DD8 4883FE00                	cmp rsi, 0
 23831 00010DDC 7410                    	je .L_lambda_simple_env_end_037d
 23832 00010DDE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23833 00010DE2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23834 00010DE6 48FFC6                  	inc rsi
 23835 00010DE9 48FFC2                  	inc rdx
 23836 00010DEC EBEA                    	jmp .L_lambda_simple_env_loop_037d
 23837                                  .L_lambda_simple_env_end_037d:
 23838 00010DEE 5B                      	pop rbx
 23839 00010DEF BE00000000              	mov rsi, 0
 23840                                  .L_lambda_simple_params_loop_037d:	; copy params
 23841 00010DF4 4883FE00                	cmp rsi, 0
 23842 00010DF8 740E                    	je .L_lambda_simple_params_end_037d
 23843 00010DFA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23844 00010DFF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23845 00010E03 48FFC6                  	inc rsi
 23846 00010E06 EBEC                    	jmp .L_lambda_simple_params_loop_037d
 23847                                  .L_lambda_simple_params_end_037d:
 23848 00010E08 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23849 00010E0B 4889C3                  	mov rbx, rax
 23850 00010E0E 58                      	pop rax
 23851 00010E0F C60004                  	mov byte [rax], T_closure
 23852 00010E12 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23853 00010E16 48C74009[230E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_037d
 23854 00010E1E E92D040000              	jmp .L_lambda_simple_end_037d
 23855                                  .L_lambda_simple_code_037d:	; lambda-simple body
 23856 00010E23 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23857 00010E29 740B                    	je .L_lambda_simple_arity_check_ok_037d
 23858 00010E2B FF742410                	push qword [rsp + 8 * 2]
 23859 00010E2F 6A01                    	push 1
 23860 00010E31 E992520000              	jmp L_error_incorrect_arity_simple
 23861                                  .L_lambda_simple_arity_check_ok_037d:
 23862 00010E36 C8000000                	enter 0, 0
 23863 00010E3A BF08000000              	mov rdi, 8	; sob_box
 23864 00010E3F E8CB520000              	call malloc
 23865 00010E44 488B5D20                	mov rbx, PARAM(0)
 23866 00010E48 488918                  	mov [rax], rbx
 23867 00010E4B 48894520                	mov PARAM(0), rax
 23868 00010E4F 48B8-                   	mov rax, sob_void
 23868 00010E51 [0000000000000000] 
 23869                                  
 23870 00010E59 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23871 00010E5E E8AC520000              	call malloc
 23872 00010E63 50                      	push rax
 23873 00010E64 BF08000000              	mov rdi, 8 * 1	; new rib
 23874 00010E69 E8A1520000              	call malloc
 23875 00010E6E 50                      	push rax
 23876 00010E6F BF10000000              	mov rdi, 8 * 2	; extended env
 23877 00010E74 E896520000              	call malloc
 23878 00010E79 488B7D10                	mov rdi, ENV
 23879 00010E7D BE00000000              	mov rsi, 0
 23880 00010E82 BA01000000              	mov rdx, 1
 23881                                  .L_lambda_simple_env_loop_037e:	; ext_env[i + 1] <-- env[i]
 23882 00010E87 4883FE01                	cmp rsi, 1
 23883 00010E8B 7410                    	je .L_lambda_simple_env_end_037e
 23884 00010E8D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23885 00010E91 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23886 00010E95 48FFC6                  	inc rsi
 23887 00010E98 48FFC2                  	inc rdx
 23888 00010E9B EBEA                    	jmp .L_lambda_simple_env_loop_037e
 23889                                  .L_lambda_simple_env_end_037e:
 23890 00010E9D 5B                      	pop rbx
 23891 00010E9E BE00000000              	mov rsi, 0
 23892                                  .L_lambda_simple_params_loop_037e:	; copy params
 23893 00010EA3 4883FE01                	cmp rsi, 1
 23894 00010EA7 740E                    	je .L_lambda_simple_params_end_037e
 23895 00010EA9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23896 00010EAE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23897 00010EB2 48FFC6                  	inc rsi
 23898 00010EB5 EBEC                    	jmp .L_lambda_simple_params_loop_037e
 23899                                  .L_lambda_simple_params_end_037e:
 23900 00010EB7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23901 00010EBA 4889C3                  	mov rbx, rax
 23902 00010EBD 58                      	pop rax
 23903 00010EBE C60004                  	mov byte [rax], T_closure
 23904 00010EC1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23905 00010EC5 48C74009[D20E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_037e
 23906 00010ECD E971020000              	jmp .L_lambda_simple_end_037e
 23907                                  .L_lambda_simple_code_037e:	; lambda-simple body
 23908 00010ED2 48837C241002            	cmp qword [rsp + 8 * 2], 2
 23909 00010ED8 740B                    	je .L_lambda_simple_arity_check_ok_037e
 23910 00010EDA FF742410                	push qword [rsp + 8 * 2]
 23911 00010EDE 6A02                    	push 2
 23912 00010EE0 E9E3510000              	jmp L_error_incorrect_arity_simple
 23913                                  .L_lambda_simple_arity_check_ok_037e:
 23914 00010EE5 C8000000                	enter 0, 0
 23915                                  	; preparing a non tail-call
 23916 00010EE9 488B4520                	mov rax, PARAM(0)	; param s
 23917 00010EED 50                      	push rax
 23918 00010EEE 6A01                    	push 1	; arg count
 23919 00010EF0 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 23920 00010EF8 803805                  	cmp byte [rax], T_undefined
 23921 00010EFB 0F84E1500000            	je L_error_fvar_undefined
 23922 00010F01 803804                  	cmp byte [rax], T_closure
 23923 00010F04 0F855C510000            	jne L_error_non_closure
 23924 00010F0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 23925 00010F0D FF5009                  	call SOB_CLOSURE_CODE(rax)
 23926 00010F10 483D[02000000]          	cmp rax, sob_boolean_false
 23927 00010F16 746D                    	je .L_if_else_0287
 23928                                  	; preparing a tail-call
 23929 00010F18 48B8-                   	mov rax, L_constants + 4
 23929 00010F1A [0400000000000000] 
 23930 00010F22 50                      	push rax
 23931 00010F23 488B4528                	mov rax, PARAM(1)	; param i
 23932 00010F27 50                      	push rax
 23933 00010F28 6A02                    	push 2	; arg count
 23934 00010F2A 488B0425[82110000]      	mov rax, qword [free_var_58]	; free var make-string
 23935 00010F32 803805                  	cmp byte [rax], T_undefined
 23936 00010F35 0F84A7500000            	je L_error_fvar_undefined
 23937 00010F3B 803804                  	cmp byte [rax], T_closure
 23938 00010F3E 0F8522510000            	jne L_error_non_closure
 23939 00010F44 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23940                                  
 23941                                  	; recycling the current frame
 23942 00010F47 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23943 00010F4A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23944 00010F4D B906000000              	mov rcx, 2 + 4
 23945 00010F52 488B5D18                	mov rbx, COUNT
 23946 00010F56 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23947 00010F5B 488D55F8                	lea rdx, [rbp - 8 * 1]
 23948                                  .L_tc_recycle_frame_loop_0499:
 23949 00010F5F 4883F900                	cmp rcx, 0
 23950 00010F63 7413                    	je .L_tc_recycle_frame_done_0499
 23951 00010F65 488B32                  	mov rsi, qword [rdx]
 23952 00010F68 488933                  	mov qword [rbx], rsi
 23953 00010F6B 48FFC9                  	dec rcx
 23954 00010F6E 4883EB08                	sub rbx, 8 * 1
 23955 00010F72 4883EA08                	sub rdx, 8 * 1
 23956 00010F76 EBE7                    	jmp .L_tc_recycle_frame_loop_0499
 23957                                  .L_tc_recycle_frame_done_0499:
 23958 00010F78 488D6308                	lea rsp, [rbx + 8 * 1]
 23959 00010F7C 5D                      	pop rbp	; the proc will restore it!
 23960 00010F7D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23961 00010F80 E9BA010000              	jmp .L_if_end_0287
 23962                                  .L_if_else_0287:
 23963                                  	; preparing a tail-call
 23964                                  	; preparing a non tail-call
 23965                                  	; preparing a non tail-call
 23966 00010F85 48B8-                   	mov rax, L_constants + 2158
 23966 00010F87 [6E08000000000000] 
 23967 00010F8F 50                      	push rax
 23968 00010F90 488B4528                	mov rax, PARAM(1)	; param i
 23969 00010F94 50                      	push rax
 23970 00010F95 6A02                    	push 2	; arg count
 23971 00010F97 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 23972 00010F9F 803805                  	cmp byte [rax], T_undefined
 23973 00010FA2 0F843A500000            	je L_error_fvar_undefined
 23974 00010FA8 803804                  	cmp byte [rax], T_closure
 23975 00010FAB 0F85B5500000            	jne L_error_non_closure
 23976 00010FB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23977 00010FB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23978 00010FB7 50                      	push rax
 23979                                  	; preparing a non tail-call
 23980 00010FB8 488B4520                	mov rax, PARAM(0)	; param s
 23981 00010FBC 50                      	push rax
 23982 00010FBD 6A01                    	push 1	; arg count
 23983 00010FBF 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 23984 00010FC7 803805                  	cmp byte [rax], T_undefined
 23985 00010FCA 0F8412500000            	je L_error_fvar_undefined
 23986 00010FD0 803804                  	cmp byte [rax], T_closure
 23987 00010FD3 0F858D500000            	jne L_error_non_closure
 23988 00010FD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23989 00010FDC FF5009                  	call SOB_CLOSURE_CODE(rax)
 23990 00010FDF 50                      	push rax
 23991 00010FE0 6A02                    	push 2	; arg count
 23992 00010FE2 488B4510                	mov rax, ENV
 23993 00010FE6 488B00                  	mov rax, qword [rax + 8 * 0]
 23994 00010FE9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23995 00010FEC 488B00                  	mov rax, qword [rax]
 23996 00010FEF 803804                  	cmp byte [rax], T_closure
 23997 00010FF2 0F856E500000            	jne L_error_non_closure
 23998 00010FF8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23999 00010FFB FF5009                  	call SOB_CLOSURE_CODE(rax)
 24000 00010FFE 50                      	push rax
 24001 00010FFF 6A01                    	push 1	; arg count
 24002 00011001 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24003 00011006 E804510000              	call malloc
 24004 0001100B 50                      	push rax
 24005 0001100C BF10000000              	mov rdi, 8 * 2	; new rib
 24006 00011011 E8F9500000              	call malloc
 24007 00011016 50                      	push rax
 24008 00011017 BF18000000              	mov rdi, 8 * 3	; extended env
 24009 0001101C E8EE500000              	call malloc
 24010 00011021 488B7D10                	mov rdi, ENV
 24011 00011025 BE00000000              	mov rsi, 0
 24012 0001102A BA01000000              	mov rdx, 1
 24013                                  .L_lambda_simple_env_loop_037f:	; ext_env[i + 1] <-- env[i]
 24014 0001102F 4883FE02                	cmp rsi, 2
 24015 00011033 7410                    	je .L_lambda_simple_env_end_037f
 24016 00011035 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24017 00011039 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24018 0001103D 48FFC6                  	inc rsi
 24019 00011040 48FFC2                  	inc rdx
 24020 00011043 EBEA                    	jmp .L_lambda_simple_env_loop_037f
 24021                                  .L_lambda_simple_env_end_037f:
 24022 00011045 5B                      	pop rbx
 24023 00011046 BE00000000              	mov rsi, 0
 24024                                  .L_lambda_simple_params_loop_037f:	; copy params
 24025 0001104B 4883FE02                	cmp rsi, 2
 24026 0001104F 740E                    	je .L_lambda_simple_params_end_037f
 24027 00011051 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24028 00011056 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24029 0001105A 48FFC6                  	inc rsi
 24030 0001105D EBEC                    	jmp .L_lambda_simple_params_loop_037f
 24031                                  .L_lambda_simple_params_end_037f:
 24032 0001105F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24033 00011062 4889C3                  	mov rbx, rax
 24034 00011065 58                      	pop rax
 24035 00011066 C60004                  	mov byte [rax], T_closure
 24036 00011069 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24037 0001106D 48C74009[7A100100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_037f
 24038 00011075 E980000000              	jmp .L_lambda_simple_end_037f
 24039                                  .L_lambda_simple_code_037f:	; lambda-simple body
 24040 0001107A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24041 00011080 740B                    	je .L_lambda_simple_arity_check_ok_037f
 24042 00011082 FF742410                	push qword [rsp + 8 * 2]
 24043 00011086 6A01                    	push 1
 24044 00011088 E93B500000              	jmp L_error_incorrect_arity_simple
 24045                                  .L_lambda_simple_arity_check_ok_037f:
 24046 0001108D C8000000                	enter 0, 0
 24047                                  	; preparing a non tail-call
 24048                                  	; preparing a non tail-call
 24049 00011091 488B4510                	mov rax, ENV
 24050 00011095 488B00                  	mov rax, qword [rax + 8 * 0]
 24051 00011098 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 24052 0001109B 50                      	push rax
 24053 0001109C 6A01                    	push 1	; arg count
 24054 0001109E 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 24055 000110A6 803805                  	cmp byte [rax], T_undefined
 24056 000110A9 0F84334F0000            	je L_error_fvar_undefined
 24057 000110AF 803804                  	cmp byte [rax], T_closure
 24058 000110B2 0F85AE4F0000            	jne L_error_non_closure
 24059 000110B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24060 000110BB FF5009                  	call SOB_CLOSURE_CODE(rax)
 24061 000110BE 50                      	push rax
 24062 000110BF 488B4510                	mov rax, ENV
 24063 000110C3 488B00                  	mov rax, qword [rax + 8 * 0]
 24064 000110C6 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 24065 000110CA 50                      	push rax
 24066 000110CB 488B4520                	mov rax, PARAM(0)	; param str
 24067 000110CF 50                      	push rax
 24068 000110D0 6A03                    	push 3	; arg count
 24069 000110D2 488B0425[60110000]      	mov rax, qword [free_var_56]	; free var string-set!
 24070 000110DA 803805                  	cmp byte [rax], T_undefined
 24071 000110DD 0F84FF4E0000            	je L_error_fvar_undefined
 24072 000110E3 803804                  	cmp byte [rax], T_closure
 24073 000110E6 0F857A4F0000            	jne L_error_non_closure
 24074 000110EC FF7001                  	push SOB_CLOSURE_ENV(rax)
 24075 000110EF FF5009                  	call SOB_CLOSURE_CODE(rax)
 24076                                  
 24077 000110F2 488B4520                	mov rax, PARAM(0)	; param str
 24078 000110F6 C9                      	leave
 24079 000110F7 C21800                  	ret AND_KILL_FRAME(1)
 24080                                  .L_lambda_simple_end_037f:	; new closure is in rax
 24081 000110FA 803804                  	cmp byte [rax], T_closure
 24082 000110FD 0F85634F0000            	jne L_error_non_closure
 24083 00011103 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24084                                  
 24085                                  	; recycling the current frame
 24086 00011106 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24087 00011109 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24088 0001110C B905000000              	mov rcx, 1 + 4
 24089 00011111 488B5D18                	mov rbx, COUNT
 24090 00011115 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24091 0001111A 488D55F8                	lea rdx, [rbp - 8 * 1]
 24092                                  .L_tc_recycle_frame_loop_049a:
 24093 0001111E 4883F900                	cmp rcx, 0
 24094 00011122 7413                    	je .L_tc_recycle_frame_done_049a
 24095 00011124 488B32                  	mov rsi, qword [rdx]
 24096 00011127 488933                  	mov qword [rbx], rsi
 24097 0001112A 48FFC9                  	dec rcx
 24098 0001112D 4883EB08                	sub rbx, 8 * 1
 24099 00011131 4883EA08                	sub rdx, 8 * 1
 24100 00011135 EBE7                    	jmp .L_tc_recycle_frame_loop_049a
 24101                                  .L_tc_recycle_frame_done_049a:
 24102 00011137 488D6308                	lea rsp, [rbx + 8 * 1]
 24103 0001113B 5D                      	pop rbp	; the proc will restore it!
 24104 0001113C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24105                                  .L_if_end_0287:
 24106 0001113F C9                      	leave
 24107 00011140 C22000                  	ret AND_KILL_FRAME(2)
 24108                                  .L_lambda_simple_end_037e:	; new closure is in rax
 24109 00011143 50                      	push rax
 24110 00011144 488B4520                	mov rax, PARAM(0)	; param run
 24111 00011148 8F00                    	pop qword [rax]
 24112 0001114A 48B8-                   	mov rax, sob_void
 24112 0001114C [0000000000000000] 
 24113                                  
 24114 00011154 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24115 00011159 E8B14F0000              	call malloc
 24116 0001115E 50                      	push rax
 24117 0001115F BF08000000              	mov rdi, 8 * 1	; new rib
 24118 00011164 E8A64F0000              	call malloc
 24119 00011169 50                      	push rax
 24120 0001116A BF10000000              	mov rdi, 8 * 2	; extended env
 24121 0001116F E89B4F0000              	call malloc
 24122 00011174 488B7D10                	mov rdi, ENV
 24123 00011178 BE00000000              	mov rsi, 0
 24124 0001117D BA01000000              	mov rdx, 1
 24125                                  .L_lambda_simple_env_loop_0380:	; ext_env[i + 1] <-- env[i]
 24126 00011182 4883FE01                	cmp rsi, 1
 24127 00011186 7410                    	je .L_lambda_simple_env_end_0380
 24128 00011188 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24129 0001118C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24130 00011190 48FFC6                  	inc rsi
 24131 00011193 48FFC2                  	inc rdx
 24132 00011196 EBEA                    	jmp .L_lambda_simple_env_loop_0380
 24133                                  .L_lambda_simple_env_end_0380:
 24134 00011198 5B                      	pop rbx
 24135 00011199 BE00000000              	mov rsi, 0
 24136                                  .L_lambda_simple_params_loop_0380:	; copy params
 24137 0001119E 4883FE01                	cmp rsi, 1
 24138 000111A2 740E                    	je .L_lambda_simple_params_end_0380
 24139 000111A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24140 000111A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24141 000111AD 48FFC6                  	inc rsi
 24142 000111B0 EBEC                    	jmp .L_lambda_simple_params_loop_0380
 24143                                  .L_lambda_simple_params_end_0380:
 24144 000111B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24145 000111B5 4889C3                  	mov rbx, rax
 24146 000111B8 58                      	pop rax
 24147 000111B9 C60004                  	mov byte [rax], T_closure
 24148 000111BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24149 000111C0 48C74009[CD110100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0380
 24150 000111C8 E97F000000              	jmp .L_lambda_simple_end_0380
 24151                                  .L_lambda_simple_code_0380:	; lambda-simple body
 24152 000111CD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24153 000111D3 740B                    	je .L_lambda_simple_arity_check_ok_0380
 24154 000111D5 FF742410                	push qword [rsp + 8 * 2]
 24155 000111D9 6A01                    	push 1
 24156 000111DB E9E84E0000              	jmp L_error_incorrect_arity_simple
 24157                                  .L_lambda_simple_arity_check_ok_0380:
 24158 000111E0 C8000000                	enter 0, 0
 24159                                  	; preparing a tail-call
 24160 000111E4 48B8-                   	mov rax, L_constants + 2023
 24160 000111E6 [E707000000000000] 
 24161 000111EE 50                      	push rax
 24162 000111EF 488B4520                	mov rax, PARAM(0)	; param s
 24163 000111F3 50                      	push rax
 24164 000111F4 6A02                    	push 2	; arg count
 24165 000111F6 488B4510                	mov rax, ENV
 24166 000111FA 488B00                  	mov rax, qword [rax + 8 * 0]
 24167 000111FD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24168 00011200 488B00                  	mov rax, qword [rax]
 24169 00011203 803804                  	cmp byte [rax], T_closure
 24170 00011206 0F855A4E0000            	jne L_error_non_closure
 24171 0001120C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24172                                  
 24173                                  	; recycling the current frame
 24174 0001120F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24175 00011212 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24176 00011215 B906000000              	mov rcx, 2 + 4
 24177 0001121A 488B5D18                	mov rbx, COUNT
 24178 0001121E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24179 00011223 488D55F8                	lea rdx, [rbp - 8 * 1]
 24180                                  .L_tc_recycle_frame_loop_049b:
 24181 00011227 4883F900                	cmp rcx, 0
 24182 0001122B 7413                    	je .L_tc_recycle_frame_done_049b
 24183 0001122D 488B32                  	mov rsi, qword [rdx]
 24184 00011230 488933                  	mov qword [rbx], rsi
 24185 00011233 48FFC9                  	dec rcx
 24186 00011236 4883EB08                	sub rbx, 8 * 1
 24187 0001123A 4883EA08                	sub rdx, 8 * 1
 24188 0001123E EBE7                    	jmp .L_tc_recycle_frame_loop_049b
 24189                                  .L_tc_recycle_frame_done_049b:
 24190 00011240 488D6308                	lea rsp, [rbx + 8 * 1]
 24191 00011244 5D                      	pop rbp	; the proc will restore it!
 24192 00011245 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24193 00011248 C9                      	leave
 24194 00011249 C21800                  	ret AND_KILL_FRAME(1)
 24195                                  .L_lambda_simple_end_0380:	; new closure is in rax
 24196 0001124C C9                      	leave
 24197 0001124D C21800                  	ret AND_KILL_FRAME(1)
 24198                                  .L_lambda_simple_end_037d:	; new closure is in rax
 24199 00011250 803804                  	cmp byte [rax], T_closure
 24200 00011253 0F850D4E0000            	jne L_error_non_closure
 24201 00011259 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24202 0001125C FF5009                  	call SOB_CLOSURE_CODE(rax)
 24203 0001125F 48890425[16170000]      	mov qword [free_var_142], rax
 24204 00011267 48B8-                   	mov rax, sob_void
 24204 00011269 [0000000000000000] 
 24205                                  
 24206 00011271 4889C7                  	mov rdi, rax
 24207 00011274 E8A84F0000              	call print_sexpr_if_not_void
 24208                                  
 24209 00011279 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24210 0001127E E88C4E0000              	call malloc
 24211 00011283 50                      	push rax
 24212 00011284 BF00000000              	mov rdi, 8 * 0	; new rib
 24213 00011289 E8814E0000              	call malloc
 24214 0001128E 50                      	push rax
 24215 0001128F BF08000000              	mov rdi, 8 * 1	; extended env
 24216 00011294 E8764E0000              	call malloc
 24217 00011299 488B7D10                	mov rdi, ENV
 24218 0001129D BE00000000              	mov rsi, 0
 24219 000112A2 BA01000000              	mov rdx, 1
 24220                                  .L_lambda_opt_env_loop_007b:	; ext_env[i + 1] <-- env[i]
 24221 000112A7 4883FE00                	cmp rsi, 0
 24222 000112AB 7410                    	je .L_lambda_opt_env_end_007b
 24223 000112AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24224 000112B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24225 000112B5 48FFC6                  	inc rsi
 24226 000112B8 48FFC2                  	inc rdx
 24227 000112BB EBEA                    	jmp .L_lambda_opt_env_loop_007b
 24228                                  .L_lambda_opt_env_end_007b:
 24229 000112BD 5B                      	pop rbx
 24230 000112BE BE00000000              	mov rsi, 0
 24231                                  .L_lambda_opt_params_loop_007b:	; copy params
 24232 000112C3 4883FE00                	cmp rsi, 0
 24233 000112C7 740E                    	je .L_lambda_opt_params_end_007b
 24234 000112C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24235 000112CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24236 000112D2 48FFC6                  	inc rsi
 24237 000112D5 EBEC                    	jmp .L_lambda_opt_params_loop_007b
 24238                                  .L_lambda_opt_params_end_007b:
 24239 000112D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24240 000112DA 4889C3                  	mov rbx, rax
 24241 000112DD 58                      	pop rax
 24242 000112DE C60004                  	mov byte [rax], T_closure
 24243 000112E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24244 000112E5 48C74009[F2120100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_007b
 24245 000112ED E9AF010000              	jmp .L_lambda_opt_end_007b
 24246                                  .L_lambda_opt_code_007b:	; lambda-opt body
 24247 000112F2 48837C241000            	cmp qword [rsp + 8 * 2], 0
 24248 000112F8 0F8404010000            	je .L_lambda_opt_arity_check_exact_007b
 24249 000112FE 48837C241000            	cmp qword [rsp + 8 * 2], 0
 24250 00011304 7F0B                    	jg .L_lambda_opt_arity_check_more_007b
 24251 00011306 FF742410                	push qword [rsp + 8 * 2]
 24252 0001130A 6A00                    	push 0
 24253 0001130C E9CB4D0000              	jmp L_error_incorrect_arity_opt
 24254                                  .L_lambda_opt_arity_check_more_007b:
 24255 00011311 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 24256 00011316 41B900000000            	mov r9 , 0
 24257 0001131C 4989E7                  	mov r15, rsp
 24258 0001131F 4D29C8                  	sub r8, r9
 24259 00011322 41B900000000            	mov r9, 0
 24260 00011328 498D5F10                	lea rbx, [r15 + 8 * 2]
 24261 0001132C 498B4710                	mov rax, qword [r15 + 8 * 2]
 24262 00011330 486BC008                	imul rax, 8
 24263 00011334 4801C3                  	add rbx, rax
 24264 00011337 488B13                  	mov rdx , qword [rbx]
 24265 0001133A 4989DA                  	mov r10 , rbx
 24266 0001133D BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 24267 00011342 52                      	push rdx
 24268 00011343 53                      	push rbx
 24269 00011344 4150                    	push r8
 24270 00011346 4151                    	push r9
 24271 00011348 4152                    	push r10
 24272 0001134A 4157                    	push r15
 24273 0001134C E8BE4D0000              	call malloc
 24274 00011351 415F                    	pop r15
 24275 00011353 415A                    	pop r10
 24276 00011355 4159                    	pop r9
 24277 00011357 4158                    	pop r8
 24278 00011359 5B                      	pop rbx
 24279 0001135A 5A                      	pop rdx
 24280 0001135B C60021                  	mov byte qword [rax], T_pair
 24281 0001135E 48895001                	mov SOB_PAIR_CAR(rax), rdx
 24282 00011362 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 24283 0001136A 498902                  	mov qword [r10], rax
 24284 0001136D 49FFC1                  	inc r9
 24285 00011370 4883EB08                	sub rbx, 8
 24286 00011374 4D39C1                  	cmp r9, r8
 24287 00011377 743E                    	je .L_lambda_opt_stack_shrink_loop_0265
 24288                                  .L_lambda_opt_stack_shrink_loop_0264:
 24289 00011379 488B13                  	mov rdx, qword [rbx]
 24290 0001137C 53                      	push rbx
 24291 0001137D 4150                    	push r8
 24292 0001137F 4151                    	push r9
 24293 00011381 4152                    	push r10
 24294 00011383 4157                    	push r15
 24295 00011385 52                      	push rdx
 24296 00011386 BF11000000              	mov rdi, (1 + 8 + 8)
 24297 0001138B E87F4D0000              	call malloc
 24298 00011390 5A                      	pop rdx
 24299 00011391 415F                    	pop r15
 24300 00011393 415A                    	pop r10
 24301 00011395 4159                    	pop r9
 24302 00011397 4158                    	pop r8
 24303 00011399 5B                      	pop rbx
 24304 0001139A C60021                  	mov byte [rax], T_pair
 24305 0001139D 48895001                	mov SOB_PAIR_CAR(rax), rdx
 24306 000113A1 4D8B32                  	mov r14, qword [r10]
 24307 000113A4 4C897009                	mov SOB_PAIR_CDR(rax), r14
 24308 000113A8 498902                  	mov qword [r10], rax
 24309 000113AB 49FFC1                  	inc r9
 24310 000113AE 4883EB08                	sub rbx, 8
 24311 000113B2 4D39C1                  	cmp r9, r8
 24312 000113B5 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_0264
 24313                                  .L_lambda_opt_stack_shrink_loop_0265:
 24314 000113B7 498D5710                	lea rdx, [r15 + 8 * 2]
 24315 000113BB 48C70200000000          	mov qword [rdx], 0
 24316 000113C2 48830201                	add qword [rdx] , 1
 24317 000113C6 4D89C1                  	mov r9, r8
 24318 000113C9 49FFC9                  	dec r9
 24319 000113CC 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 24320                                  .L_lambda_opt_stack_shrink_loop_0266:
 24321 000113D0 488B03                  	mov rax, qword [rbx]
 24322 000113D3 498901                  	mov qword [r9], rax
 24323 000113D6 4983E908                	sub r9 , 8
 24324 000113DA 4883EB08                	sub rbx, 8
 24325 000113DE 4C39FB                  	cmp rbx, r15
 24326 000113E1 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0266
 24327 000113E3 488B03                  	mov rax, qword [rbx]
 24328 000113E6 498901                  	mov qword [r9], rax
 24329 000113E9 4D89C1                  	mov r9, r8
 24330 000113EC 4983E901                	sub r9 , 1
 24331 000113F0 4983F900                	cmp r9, 0
 24332 000113F4 7446                    je .L_lambda_opt_stack_adjusted_007b
 24333                                  .L_lambda_opt_stack_shrink_loop_0267:
 24334 000113F6 58                      	pop rax
 24335 000113F7 49FFC9                  	dec r9
 24336 000113FA 4983F900                	cmp r9, 0
 24337 000113FE 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0267
 24338 00011400 EB3A                    jmp .L_lambda_opt_stack_adjusted_007b
 24339                                  .L_lambda_opt_arity_check_exact_007b:
 24340 00011402 4989E7                  	mov r15, rsp
 24341 00011405 498D5F10                	lea rbx, [r15 + 8 * 2 + 8 * 0]
 24342 00011409 488B0B                  	mov rcx, qword [rbx]
 24343 0001140C 48C703[01000000]        	mov qword [rbx], sob_nil
 24344 00011413 4883EB08                	sub rbx, 8
 24345                                  .L_lambda_opt_stack_shrink_loop_0263:
 24346 00011417 488B13                  	mov rdx, qword [rbx]
 24347 0001141A 48890B                  	mov qword [rbx], rcx
 24348 0001141D 4C39FB                  	cmp rbx, r15
 24349 00011420 7409                    je .L_lambda_opt_stack_shrink_loop_exit_007b
 24350 00011422 4889D1                  	mov rcx, rdx
 24351 00011425 4883EB08                	sub rbx, 8
 24352 00011429 EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_0263
 24353                                  .L_lambda_opt_stack_shrink_loop_exit_007b:
 24354 0001142B 52                      	push rdx
 24355 0001142C 4989E7                  	mov r15, rsp
 24356 0001142F 4983C710                	add r15, 16
 24357 00011433 498B1F                  	mov rbx, qword [r15]
 24358 00011436 48FFC3                  	inc rbx
 24359 00011439 49891F                  	mov qword [r15], rbx
 24360                                  .L_lambda_opt_stack_adjusted_007b:
 24361 0001143C C8000000                	enter 0, 0
 24362                                  	; preparing a tail-call
 24363 00011440 488B4520                	mov rax, PARAM(0)	; param s
 24364 00011444 50                      	push rax
 24365 00011445 6A01                    	push 1	; arg count
 24366 00011447 488B0425[F3170000]      	mov rax, qword [free_var_155]	; free var list->vector
 24367 0001144F 803805                  	cmp byte [rax], T_undefined
 24368 00011452 0F848A4B0000            	je L_error_fvar_undefined
 24369 00011458 803804                  	cmp byte [rax], T_closure
 24370 0001145B 0F85054C0000            	jne L_error_non_closure
 24371 00011461 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24372                                  
 24373                                  	; recycling the current frame
 24374 00011464 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24375 00011467 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24376 0001146A B905000000              	mov rcx, 1 + 4
 24377 0001146F 488B5D18                	mov rbx, COUNT
 24378 00011473 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24379 00011478 488D55F8                	lea rdx, [rbp - 8 * 1]
 24380                                  .L_tc_recycle_frame_loop_049c:
 24381 0001147C 4883F900                	cmp rcx, 0
 24382 00011480 7413                    	je .L_tc_recycle_frame_done_049c
 24383 00011482 488B32                  	mov rsi, qword [rdx]
 24384 00011485 488933                  	mov qword [rbx], rsi
 24385 00011488 48FFC9                  	dec rcx
 24386 0001148B 4883EB08                	sub rbx, 8 * 1
 24387 0001148F 4883EA08                	sub rdx, 8 * 1
 24388 00011493 EBE7                    	jmp .L_tc_recycle_frame_loop_049c
 24389                                  .L_tc_recycle_frame_done_049c:
 24390 00011495 488D6308                	lea rsp, [rbx + 8 * 1]
 24391 00011499 5D                      	pop rbp	; the proc will restore it!
 24392 0001149A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24393 0001149D C9                      	leave
 24394 0001149E C21800                  	ret AND_KILL_FRAME(1)
 24395                                  .L_lambda_opt_end_007b:	; new closure is in rax
 24396 000114A1 48890425[04180000]      	mov qword [free_var_156], rax
 24397 000114A9 48B8-                   	mov rax, sob_void
 24397 000114AB [0000000000000000] 
 24398                                  
 24399 000114B3 4889C7                  	mov rdi, rax
 24400 000114B6 E8664D0000              	call print_sexpr_if_not_void
 24401                                  
 24402                                  	; preparing a non tail-call
 24403 000114BB 48B8-                   	mov rax, L_constants + 1881
 24403 000114BD [5907000000000000] 
 24404 000114C5 50                      	push rax
 24405 000114C6 6A01                    	push 1	; arg count
 24406 000114C8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24407 000114CD E83D4C0000              	call malloc
 24408 000114D2 50                      	push rax
 24409 000114D3 BF00000000              	mov rdi, 8 * 0	; new rib
 24410 000114D8 E8324C0000              	call malloc
 24411 000114DD 50                      	push rax
 24412 000114DE BF08000000              	mov rdi, 8 * 1	; extended env
 24413 000114E3 E8274C0000              	call malloc
 24414 000114E8 488B7D10                	mov rdi, ENV
 24415 000114EC BE00000000              	mov rsi, 0
 24416 000114F1 BA01000000              	mov rdx, 1
 24417                                  .L_lambda_simple_env_loop_0381:	; ext_env[i + 1] <-- env[i]
 24418 000114F6 4883FE00                	cmp rsi, 0
 24419 000114FA 7410                    	je .L_lambda_simple_env_end_0381
 24420 000114FC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24421 00011500 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24422 00011504 48FFC6                  	inc rsi
 24423 00011507 48FFC2                  	inc rdx
 24424 0001150A EBEA                    	jmp .L_lambda_simple_env_loop_0381
 24425                                  .L_lambda_simple_env_end_0381:
 24426 0001150C 5B                      	pop rbx
 24427 0001150D BE00000000              	mov rsi, 0
 24428                                  .L_lambda_simple_params_loop_0381:	; copy params
 24429 00011512 4883FE00                	cmp rsi, 0
 24430 00011516 740E                    	je .L_lambda_simple_params_end_0381
 24431 00011518 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24432 0001151D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24433 00011521 48FFC6                  	inc rsi
 24434 00011524 EBEC                    	jmp .L_lambda_simple_params_loop_0381
 24435                                  .L_lambda_simple_params_end_0381:
 24436 00011526 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24437 00011529 4889C3                  	mov rbx, rax
 24438 0001152C 58                      	pop rax
 24439 0001152D C60004                  	mov byte [rax], T_closure
 24440 00011530 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24441 00011534 48C74009[41150100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0381
 24442 0001153C E924030000              	jmp .L_lambda_simple_end_0381
 24443                                  .L_lambda_simple_code_0381:	; lambda-simple body
 24444 00011541 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24445 00011547 740B                    	je .L_lambda_simple_arity_check_ok_0381
 24446 00011549 FF742410                	push qword [rsp + 8 * 2]
 24447 0001154D 6A01                    	push 1
 24448 0001154F E9744B0000              	jmp L_error_incorrect_arity_simple
 24449                                  .L_lambda_simple_arity_check_ok_0381:
 24450 00011554 C8000000                	enter 0, 0
 24451 00011558 BF08000000              	mov rdi, 8	; sob_box
 24452 0001155D E8AD4B0000              	call malloc
 24453 00011562 488B5D20                	mov rbx, PARAM(0)
 24454 00011566 488918                  	mov [rax], rbx
 24455 00011569 48894520                	mov PARAM(0), rax
 24456 0001156D 48B8-                   	mov rax, sob_void
 24456 0001156F [0000000000000000] 
 24457                                  
 24458 00011577 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24459 0001157C E88E4B0000              	call malloc
 24460 00011581 50                      	push rax
 24461 00011582 BF08000000              	mov rdi, 8 * 1	; new rib
 24462 00011587 E8834B0000              	call malloc
 24463 0001158C 50                      	push rax
 24464 0001158D BF10000000              	mov rdi, 8 * 2	; extended env
 24465 00011592 E8784B0000              	call malloc
 24466 00011597 488B7D10                	mov rdi, ENV
 24467 0001159B BE00000000              	mov rsi, 0
 24468 000115A0 BA01000000              	mov rdx, 1
 24469                                  .L_lambda_simple_env_loop_0382:	; ext_env[i + 1] <-- env[i]
 24470 000115A5 4883FE01                	cmp rsi, 1
 24471 000115A9 7410                    	je .L_lambda_simple_env_end_0382
 24472 000115AB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24473 000115AF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24474 000115B3 48FFC6                  	inc rsi
 24475 000115B6 48FFC2                  	inc rdx
 24476 000115B9 EBEA                    	jmp .L_lambda_simple_env_loop_0382
 24477                                  .L_lambda_simple_env_end_0382:
 24478 000115BB 5B                      	pop rbx
 24479 000115BC BE00000000              	mov rsi, 0
 24480                                  .L_lambda_simple_params_loop_0382:	; copy params
 24481 000115C1 4883FE01                	cmp rsi, 1
 24482 000115C5 740E                    	je .L_lambda_simple_params_end_0382
 24483 000115C7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24484 000115CC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24485 000115D0 48FFC6                  	inc rsi
 24486 000115D3 EBEC                    	jmp .L_lambda_simple_params_loop_0382
 24487                                  .L_lambda_simple_params_end_0382:
 24488 000115D5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24489 000115D8 4889C3                  	mov rbx, rax
 24490 000115DB 58                      	pop rax
 24491 000115DC C60004                  	mov byte [rax], T_closure
 24492 000115DF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24493 000115E3 48C74009[F0150100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0382
 24494 000115EB E940010000              	jmp .L_lambda_simple_end_0382
 24495                                  .L_lambda_simple_code_0382:	; lambda-simple body
 24496 000115F0 48837C241003            	cmp qword [rsp + 8 * 2], 3
 24497 000115F6 740B                    	je .L_lambda_simple_arity_check_ok_0382
 24498 000115F8 FF742410                	push qword [rsp + 8 * 2]
 24499 000115FC 6A03                    	push 3
 24500 000115FE E9C54A0000              	jmp L_error_incorrect_arity_simple
 24501                                  .L_lambda_simple_arity_check_ok_0382:
 24502 00011603 C8000000                	enter 0, 0
 24503                                  	; preparing a non tail-call
 24504 00011607 488B4530                	mov rax, PARAM(2)	; param n
 24505 0001160B 50                      	push rax
 24506 0001160C 488B4528                	mov rax, PARAM(1)	; param i
 24507 00011610 50                      	push rax
 24508 00011611 6A02                    	push 2	; arg count
 24509 00011613 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 24510 0001161B 803805                  	cmp byte [rax], T_undefined
 24511 0001161E 0F84BE490000            	je L_error_fvar_undefined
 24512 00011624 803804                  	cmp byte [rax], T_closure
 24513 00011627 0F85394A0000            	jne L_error_non_closure
 24514 0001162D FF7001                  	push SOB_CLOSURE_ENV(rax)
 24515 00011630 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24516 00011633 483D[02000000]          	cmp rax, sob_boolean_false
 24517 00011639 0F84E3000000            	je .L_if_else_0288
 24518                                  	; preparing a tail-call
 24519                                  	; preparing a non tail-call
 24520 0001163F 488B4530                	mov rax, PARAM(2)	; param n
 24521 00011643 50                      	push rax
 24522                                  	; preparing a non tail-call
 24523 00011644 48B8-                   	mov rax, L_constants + 2158
 24523 00011646 [6E08000000000000] 
 24524 0001164E 50                      	push rax
 24525 0001164F 488B4528                	mov rax, PARAM(1)	; param i
 24526 00011653 50                      	push rax
 24527 00011654 6A02                    	push 2	; arg count
 24528 00011656 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 24529 0001165E 803805                  	cmp byte [rax], T_undefined
 24530 00011661 0F847B490000            	je L_error_fvar_undefined
 24531 00011667 803804                  	cmp byte [rax], T_closure
 24532 0001166A 0F85F6490000            	jne L_error_non_closure
 24533 00011670 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24534 00011673 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24535 00011676 50                      	push rax
 24536 00011677 488B4520                	mov rax, PARAM(0)	; param str
 24537 0001167B 50                      	push rax
 24538 0001167C 6A03                    	push 3	; arg count
 24539 0001167E 488B4510                	mov rax, ENV
 24540 00011682 488B00                  	mov rax, qword [rax + 8 * 0]
 24541 00011685 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24542 00011688 488B00                  	mov rax, qword [rax]
 24543 0001168B 803804                  	cmp byte [rax], T_closure
 24544 0001168E 0F85D2490000            	jne L_error_non_closure
 24545 00011694 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24546 00011697 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24547 0001169A 50                      	push rax
 24548                                  	; preparing a non tail-call
 24549 0001169B 488B4528                	mov rax, PARAM(1)	; param i
 24550 0001169F 50                      	push rax
 24551 000116A0 488B4520                	mov rax, PARAM(0)	; param str
 24552 000116A4 50                      	push rax
 24553 000116A5 6A02                    	push 2	; arg count
 24554 000116A7 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 24555 000116AF 803805                  	cmp byte [rax], T_undefined
 24556 000116B2 0F842A490000            	je L_error_fvar_undefined
 24557 000116B8 803804                  	cmp byte [rax], T_closure
 24558 000116BB 0F85A5490000            	jne L_error_non_closure
 24559 000116C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24560 000116C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24561 000116C7 50                      	push rax
 24562 000116C8 6A02                    	push 2	; arg count
 24563 000116CA 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
 24564 000116D2 803805                  	cmp byte [rax], T_undefined
 24565 000116D5 0F8407490000            	je L_error_fvar_undefined
 24566 000116DB 803804                  	cmp byte [rax], T_closure
 24567 000116DE 0F8582490000            	jne L_error_non_closure
 24568 000116E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24569                                  
 24570                                  	; recycling the current frame
 24571 000116E7 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24572 000116EA FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24573 000116ED B906000000              	mov rcx, 2 + 4
 24574 000116F2 488B5D18                	mov rbx, COUNT
 24575 000116F6 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24576 000116FB 488D55F8                	lea rdx, [rbp - 8 * 1]
 24577                                  .L_tc_recycle_frame_loop_049d:
 24578 000116FF 4883F900                	cmp rcx, 0
 24579 00011703 7413                    	je .L_tc_recycle_frame_done_049d
 24580 00011705 488B32                  	mov rsi, qword [rdx]
 24581 00011708 488933                  	mov qword [rbx], rsi
 24582 0001170B 48FFC9                  	dec rcx
 24583 0001170E 4883EB08                	sub rbx, 8 * 1
 24584 00011712 4883EA08                	sub rdx, 8 * 1
 24585 00011716 EBE7                    	jmp .L_tc_recycle_frame_loop_049d
 24586                                  .L_tc_recycle_frame_done_049d:
 24587 00011718 488D6308                	lea rsp, [rbx + 8 * 1]
 24588 0001171C 5D                      	pop rbp	; the proc will restore it!
 24589 0001171D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24590 00011720 EB0A                    	jmp .L_if_end_0288
 24591                                  .L_if_else_0288:
 24592 00011722 48B8-                   	mov rax, L_constants + 1
 24592 00011724 [0100000000000000] 
 24593                                  .L_if_end_0288:
 24594 0001172C C9                      	leave
 24595 0001172D C22800                  	ret AND_KILL_FRAME(3)
 24596                                  .L_lambda_simple_end_0382:	; new closure is in rax
 24597 00011730 50                      	push rax
 24598 00011731 488B4520                	mov rax, PARAM(0)	; param run
 24599 00011735 8F00                    	pop qword [rax]
 24600 00011737 48B8-                   	mov rax, sob_void
 24600 00011739 [0000000000000000] 
 24601                                  
 24602 00011741 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24603 00011746 E8C4490000              	call malloc
 24604 0001174B 50                      	push rax
 24605 0001174C BF08000000              	mov rdi, 8 * 1	; new rib
 24606 00011751 E8B9490000              	call malloc
 24607 00011756 50                      	push rax
 24608 00011757 BF10000000              	mov rdi, 8 * 2	; extended env
 24609 0001175C E8AE490000              	call malloc
 24610 00011761 488B7D10                	mov rdi, ENV
 24611 00011765 BE00000000              	mov rsi, 0
 24612 0001176A BA01000000              	mov rdx, 1
 24613                                  .L_lambda_simple_env_loop_0383:	; ext_env[i + 1] <-- env[i]
 24614 0001176F 4883FE01                	cmp rsi, 1
 24615 00011773 7410                    	je .L_lambda_simple_env_end_0383
 24616 00011775 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24617 00011779 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24618 0001177D 48FFC6                  	inc rsi
 24619 00011780 48FFC2                  	inc rdx
 24620 00011783 EBEA                    	jmp .L_lambda_simple_env_loop_0383
 24621                                  .L_lambda_simple_env_end_0383:
 24622 00011785 5B                      	pop rbx
 24623 00011786 BE00000000              	mov rsi, 0
 24624                                  .L_lambda_simple_params_loop_0383:	; copy params
 24625 0001178B 4883FE01                	cmp rsi, 1
 24626 0001178F 740E                    	je .L_lambda_simple_params_end_0383
 24627 00011791 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24628 00011796 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24629 0001179A 48FFC6                  	inc rsi
 24630 0001179D EBEC                    	jmp .L_lambda_simple_params_loop_0383
 24631                                  .L_lambda_simple_params_end_0383:
 24632 0001179F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24633 000117A2 4889C3                  	mov rbx, rax
 24634 000117A5 58                      	pop rax
 24635 000117A6 C60004                  	mov byte [rax], T_closure
 24636 000117A9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24637 000117AD 48C74009[BA170100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0383
 24638 000117B5 E9A7000000              	jmp .L_lambda_simple_end_0383
 24639                                  .L_lambda_simple_code_0383:	; lambda-simple body
 24640 000117BA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24641 000117C0 740B                    	je .L_lambda_simple_arity_check_ok_0383
 24642 000117C2 FF742410                	push qword [rsp + 8 * 2]
 24643 000117C6 6A01                    	push 1
 24644 000117C8 E9FB480000              	jmp L_error_incorrect_arity_simple
 24645                                  .L_lambda_simple_arity_check_ok_0383:
 24646 000117CD C8000000                	enter 0, 0
 24647                                  	; preparing a tail-call
 24648                                  	; preparing a non tail-call
 24649 000117D1 488B4520                	mov rax, PARAM(0)	; param str
 24650 000117D5 50                      	push rax
 24651 000117D6 6A01                    	push 1	; arg count
 24652 000117D8 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 24653 000117E0 803805                  	cmp byte [rax], T_undefined
 24654 000117E3 0F84F9470000            	je L_error_fvar_undefined
 24655 000117E9 803804                  	cmp byte [rax], T_closure
 24656 000117EC 0F8574480000            	jne L_error_non_closure
 24657 000117F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24658 000117F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24659 000117F8 50                      	push rax
 24660 000117F9 48B8-                   	mov rax, L_constants + 2023
 24660 000117FB [E707000000000000] 
 24661 00011803 50                      	push rax
 24662 00011804 488B4520                	mov rax, PARAM(0)	; param str
 24663 00011808 50                      	push rax
 24664 00011809 6A03                    	push 3	; arg count
 24665 0001180B 488B4510                	mov rax, ENV
 24666 0001180F 488B00                  	mov rax, qword [rax + 8 * 0]
 24667 00011812 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24668 00011815 488B00                  	mov rax, qword [rax]
 24669 00011818 803804                  	cmp byte [rax], T_closure
 24670 0001181B 0F8545480000            	jne L_error_non_closure
 24671 00011821 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24672                                  
 24673                                  	; recycling the current frame
 24674 00011824 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24675 00011827 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24676 0001182A B907000000              	mov rcx, 3 + 4
 24677 0001182F 488B5D18                	mov rbx, COUNT
 24678 00011833 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24679 00011838 488D55F8                	lea rdx, [rbp - 8 * 1]
 24680                                  .L_tc_recycle_frame_loop_049e:
 24681 0001183C 4883F900                	cmp rcx, 0
 24682 00011840 7413                    	je .L_tc_recycle_frame_done_049e
 24683 00011842 488B32                  	mov rsi, qword [rdx]
 24684 00011845 488933                  	mov qword [rbx], rsi
 24685 00011848 48FFC9                  	dec rcx
 24686 0001184B 4883EB08                	sub rbx, 8 * 1
 24687 0001184F 4883EA08                	sub rdx, 8 * 1
 24688 00011853 EBE7                    	jmp .L_tc_recycle_frame_loop_049e
 24689                                  .L_tc_recycle_frame_done_049e:
 24690 00011855 488D6308                	lea rsp, [rbx + 8 * 1]
 24691 00011859 5D                      	pop rbp	; the proc will restore it!
 24692 0001185A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24693 0001185D C9                      	leave
 24694 0001185E C21800                  	ret AND_KILL_FRAME(1)
 24695                                  .L_lambda_simple_end_0383:	; new closure is in rax
 24696 00011861 C9                      	leave
 24697 00011862 C21800                  	ret AND_KILL_FRAME(1)
 24698                                  .L_lambda_simple_end_0381:	; new closure is in rax
 24699 00011865 803804                  	cmp byte [rax], T_closure
 24700 00011868 0F85F8470000            	jne L_error_non_closure
 24701 0001186E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24702 00011871 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24703 00011874 48890425[27170000]      	mov qword [free_var_143], rax
 24704 0001187C 48B8-                   	mov rax, sob_void
 24704 0001187E [0000000000000000] 
 24705                                  
 24706 00011886 4889C7                  	mov rdi, rax
 24707 00011889 E893490000              	call print_sexpr_if_not_void
 24708                                  
 24709                                  	; preparing a non tail-call
 24710 0001188E 48B8-                   	mov rax, L_constants + 1881
 24710 00011890 [5907000000000000] 
 24711 00011898 50                      	push rax
 24712 00011899 6A01                    	push 1	; arg count
 24713 0001189B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24714 000118A0 E86A480000              	call malloc
 24715 000118A5 50                      	push rax
 24716 000118A6 BF00000000              	mov rdi, 8 * 0	; new rib
 24717 000118AB E85F480000              	call malloc
 24718 000118B0 50                      	push rax
 24719 000118B1 BF08000000              	mov rdi, 8 * 1	; extended env
 24720 000118B6 E854480000              	call malloc
 24721 000118BB 488B7D10                	mov rdi, ENV
 24722 000118BF BE00000000              	mov rsi, 0
 24723 000118C4 BA01000000              	mov rdx, 1
 24724                                  .L_lambda_simple_env_loop_0384:	; ext_env[i + 1] <-- env[i]
 24725 000118C9 4883FE00                	cmp rsi, 0
 24726 000118CD 7410                    	je .L_lambda_simple_env_end_0384
 24727 000118CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24728 000118D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24729 000118D7 48FFC6                  	inc rsi
 24730 000118DA 48FFC2                  	inc rdx
 24731 000118DD EBEA                    	jmp .L_lambda_simple_env_loop_0384
 24732                                  .L_lambda_simple_env_end_0384:
 24733 000118DF 5B                      	pop rbx
 24734 000118E0 BE00000000              	mov rsi, 0
 24735                                  .L_lambda_simple_params_loop_0384:	; copy params
 24736 000118E5 4883FE00                	cmp rsi, 0
 24737 000118E9 740E                    	je .L_lambda_simple_params_end_0384
 24738 000118EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24739 000118F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24740 000118F4 48FFC6                  	inc rsi
 24741 000118F7 EBEC                    	jmp .L_lambda_simple_params_loop_0384
 24742                                  .L_lambda_simple_params_end_0384:
 24743 000118F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24744 000118FC 4889C3                  	mov rbx, rax
 24745 000118FF 58                      	pop rax
 24746 00011900 C60004                  	mov byte [rax], T_closure
 24747 00011903 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24748 00011907 48C74009[14190100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0384
 24749 0001190F E924030000              	jmp .L_lambda_simple_end_0384
 24750                                  .L_lambda_simple_code_0384:	; lambda-simple body
 24751 00011914 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24752 0001191A 740B                    	je .L_lambda_simple_arity_check_ok_0384
 24753 0001191C FF742410                	push qword [rsp + 8 * 2]
 24754 00011920 6A01                    	push 1
 24755 00011922 E9A1470000              	jmp L_error_incorrect_arity_simple
 24756                                  .L_lambda_simple_arity_check_ok_0384:
 24757 00011927 C8000000                	enter 0, 0
 24758 0001192B BF08000000              	mov rdi, 8	; sob_box
 24759 00011930 E8DA470000              	call malloc
 24760 00011935 488B5D20                	mov rbx, PARAM(0)
 24761 00011939 488918                  	mov [rax], rbx
 24762 0001193C 48894520                	mov PARAM(0), rax
 24763 00011940 48B8-                   	mov rax, sob_void
 24763 00011942 [0000000000000000] 
 24764                                  
 24765 0001194A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24766 0001194F E8BB470000              	call malloc
 24767 00011954 50                      	push rax
 24768 00011955 BF08000000              	mov rdi, 8 * 1	; new rib
 24769 0001195A E8B0470000              	call malloc
 24770 0001195F 50                      	push rax
 24771 00011960 BF10000000              	mov rdi, 8 * 2	; extended env
 24772 00011965 E8A5470000              	call malloc
 24773 0001196A 488B7D10                	mov rdi, ENV
 24774 0001196E BE00000000              	mov rsi, 0
 24775 00011973 BA01000000              	mov rdx, 1
 24776                                  .L_lambda_simple_env_loop_0385:	; ext_env[i + 1] <-- env[i]
 24777 00011978 4883FE01                	cmp rsi, 1
 24778 0001197C 7410                    	je .L_lambda_simple_env_end_0385
 24779 0001197E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24780 00011982 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24781 00011986 48FFC6                  	inc rsi
 24782 00011989 48FFC2                  	inc rdx
 24783 0001198C EBEA                    	jmp .L_lambda_simple_env_loop_0385
 24784                                  .L_lambda_simple_env_end_0385:
 24785 0001198E 5B                      	pop rbx
 24786 0001198F BE00000000              	mov rsi, 0
 24787                                  .L_lambda_simple_params_loop_0385:	; copy params
 24788 00011994 4883FE01                	cmp rsi, 1
 24789 00011998 740E                    	je .L_lambda_simple_params_end_0385
 24790 0001199A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24791 0001199F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24792 000119A3 48FFC6                  	inc rsi
 24793 000119A6 EBEC                    	jmp .L_lambda_simple_params_loop_0385
 24794                                  .L_lambda_simple_params_end_0385:
 24795 000119A8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24796 000119AB 4889C3                  	mov rbx, rax
 24797 000119AE 58                      	pop rax
 24798 000119AF C60004                  	mov byte [rax], T_closure
 24799 000119B2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24800 000119B6 48C74009[C3190100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0385
 24801 000119BE E940010000              	jmp .L_lambda_simple_end_0385
 24802                                  .L_lambda_simple_code_0385:	; lambda-simple body
 24803 000119C3 48837C241003            	cmp qword [rsp + 8 * 2], 3
 24804 000119C9 740B                    	je .L_lambda_simple_arity_check_ok_0385
 24805 000119CB FF742410                	push qword [rsp + 8 * 2]
 24806 000119CF 6A03                    	push 3
 24807 000119D1 E9F2460000              	jmp L_error_incorrect_arity_simple
 24808                                  .L_lambda_simple_arity_check_ok_0385:
 24809 000119D6 C8000000                	enter 0, 0
 24810                                  	; preparing a non tail-call
 24811 000119DA 488B4530                	mov rax, PARAM(2)	; param n
 24812 000119DE 50                      	push rax
 24813 000119DF 488B4528                	mov rax, PARAM(1)	; param i
 24814 000119E3 50                      	push rax
 24815 000119E4 6A02                    	push 2	; arg count
 24816 000119E6 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 24817 000119EE 803805                  	cmp byte [rax], T_undefined
 24818 000119F1 0F84EB450000            	je L_error_fvar_undefined
 24819 000119F7 803804                  	cmp byte [rax], T_closure
 24820 000119FA 0F8566460000            	jne L_error_non_closure
 24821 00011A00 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24822 00011A03 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24823 00011A06 483D[02000000]          	cmp rax, sob_boolean_false
 24824 00011A0C 0F84E3000000            	je .L_if_else_0289
 24825                                  	; preparing a tail-call
 24826                                  	; preparing a non tail-call
 24827 00011A12 488B4530                	mov rax, PARAM(2)	; param n
 24828 00011A16 50                      	push rax
 24829                                  	; preparing a non tail-call
 24830 00011A17 48B8-                   	mov rax, L_constants + 2158
 24830 00011A19 [6E08000000000000] 
 24831 00011A21 50                      	push rax
 24832 00011A22 488B4528                	mov rax, PARAM(1)	; param i
 24833 00011A26 50                      	push rax
 24834 00011A27 6A02                    	push 2	; arg count
 24835 00011A29 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 24836 00011A31 803805                  	cmp byte [rax], T_undefined
 24837 00011A34 0F84A8450000            	je L_error_fvar_undefined
 24838 00011A3A 803804                  	cmp byte [rax], T_closure
 24839 00011A3D 0F8523460000            	jne L_error_non_closure
 24840 00011A43 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24841 00011A46 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24842 00011A49 50                      	push rax
 24843 00011A4A 488B4520                	mov rax, PARAM(0)	; param v
 24844 00011A4E 50                      	push rax
 24845 00011A4F 6A03                    	push 3	; arg count
 24846 00011A51 488B4510                	mov rax, ENV
 24847 00011A55 488B00                  	mov rax, qword [rax + 8 * 0]
 24848 00011A58 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24849 00011A5B 488B00                  	mov rax, qword [rax]
 24850 00011A5E 803804                  	cmp byte [rax], T_closure
 24851 00011A61 0F85FF450000            	jne L_error_non_closure
 24852 00011A67 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24853 00011A6A FF5009                  	call SOB_CLOSURE_CODE(rax)
 24854 00011A6D 50                      	push rax
 24855                                  	; preparing a non tail-call
 24856 00011A6E 488B4528                	mov rax, PARAM(1)	; param i
 24857 00011A72 50                      	push rax
 24858 00011A73 488B4520                	mov rax, PARAM(0)	; param v
 24859 00011A77 50                      	push rax
 24860 00011A78 6A02                    	push 2	; arg count
 24861 00011A7A 488B0425[3E110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 24862 00011A82 803805                  	cmp byte [rax], T_undefined
 24863 00011A85 0F8457450000            	je L_error_fvar_undefined
 24864 00011A8B 803804                  	cmp byte [rax], T_closure
 24865 00011A8E 0F85D2450000            	jne L_error_non_closure
 24866 00011A94 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24867 00011A97 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24868 00011A9A 50                      	push rax
 24869 00011A9B 6A02                    	push 2	; arg count
 24870 00011A9D 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
 24871 00011AA5 803805                  	cmp byte [rax], T_undefined
 24872 00011AA8 0F8434450000            	je L_error_fvar_undefined
 24873 00011AAE 803804                  	cmp byte [rax], T_closure
 24874 00011AB1 0F85AF450000            	jne L_error_non_closure
 24875 00011AB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24876                                  
 24877                                  	; recycling the current frame
 24878 00011ABA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24879 00011ABD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24880 00011AC0 B906000000              	mov rcx, 2 + 4
 24881 00011AC5 488B5D18                	mov rbx, COUNT
 24882 00011AC9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24883 00011ACE 488D55F8                	lea rdx, [rbp - 8 * 1]
 24884                                  .L_tc_recycle_frame_loop_049f:
 24885 00011AD2 4883F900                	cmp rcx, 0
 24886 00011AD6 7413                    	je .L_tc_recycle_frame_done_049f
 24887 00011AD8 488B32                  	mov rsi, qword [rdx]
 24888 00011ADB 488933                  	mov qword [rbx], rsi
 24889 00011ADE 48FFC9                  	dec rcx
 24890 00011AE1 4883EB08                	sub rbx, 8 * 1
 24891 00011AE5 4883EA08                	sub rdx, 8 * 1
 24892 00011AE9 EBE7                    	jmp .L_tc_recycle_frame_loop_049f
 24893                                  .L_tc_recycle_frame_done_049f:
 24894 00011AEB 488D6308                	lea rsp, [rbx + 8 * 1]
 24895 00011AEF 5D                      	pop rbp	; the proc will restore it!
 24896 00011AF0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24897 00011AF3 EB0A                    	jmp .L_if_end_0289
 24898                                  .L_if_else_0289:
 24899 00011AF5 48B8-                   	mov rax, L_constants + 1
 24899 00011AF7 [0100000000000000] 
 24900                                  .L_if_end_0289:
 24901 00011AFF C9                      	leave
 24902 00011B00 C22800                  	ret AND_KILL_FRAME(3)
 24903                                  .L_lambda_simple_end_0385:	; new closure is in rax
 24904 00011B03 50                      	push rax
 24905 00011B04 488B4520                	mov rax, PARAM(0)	; param run
 24906 00011B08 8F00                    	pop qword [rax]
 24907 00011B0A 48B8-                   	mov rax, sob_void
 24907 00011B0C [0000000000000000] 
 24908                                  
 24909 00011B14 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24910 00011B19 E8F1450000              	call malloc
 24911 00011B1E 50                      	push rax
 24912 00011B1F BF08000000              	mov rdi, 8 * 1	; new rib
 24913 00011B24 E8E6450000              	call malloc
 24914 00011B29 50                      	push rax
 24915 00011B2A BF10000000              	mov rdi, 8 * 2	; extended env
 24916 00011B2F E8DB450000              	call malloc
 24917 00011B34 488B7D10                	mov rdi, ENV
 24918 00011B38 BE00000000              	mov rsi, 0
 24919 00011B3D BA01000000              	mov rdx, 1
 24920                                  .L_lambda_simple_env_loop_0386:	; ext_env[i + 1] <-- env[i]
 24921 00011B42 4883FE01                	cmp rsi, 1
 24922 00011B46 7410                    	je .L_lambda_simple_env_end_0386
 24923 00011B48 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24924 00011B4C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24925 00011B50 48FFC6                  	inc rsi
 24926 00011B53 48FFC2                  	inc rdx
 24927 00011B56 EBEA                    	jmp .L_lambda_simple_env_loop_0386
 24928                                  .L_lambda_simple_env_end_0386:
 24929 00011B58 5B                      	pop rbx
 24930 00011B59 BE00000000              	mov rsi, 0
 24931                                  .L_lambda_simple_params_loop_0386:	; copy params
 24932 00011B5E 4883FE01                	cmp rsi, 1
 24933 00011B62 740E                    	je .L_lambda_simple_params_end_0386
 24934 00011B64 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24935 00011B69 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24936 00011B6D 48FFC6                  	inc rsi
 24937 00011B70 EBEC                    	jmp .L_lambda_simple_params_loop_0386
 24938                                  .L_lambda_simple_params_end_0386:
 24939 00011B72 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24940 00011B75 4889C3                  	mov rbx, rax
 24941 00011B78 58                      	pop rax
 24942 00011B79 C60004                  	mov byte [rax], T_closure
 24943 00011B7C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24944 00011B80 48C74009[8D1B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0386
 24945 00011B88 E9A7000000              	jmp .L_lambda_simple_end_0386
 24946                                  .L_lambda_simple_code_0386:	; lambda-simple body
 24947 00011B8D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24948 00011B93 740B                    	je .L_lambda_simple_arity_check_ok_0386
 24949 00011B95 FF742410                	push qword [rsp + 8 * 2]
 24950 00011B99 6A01                    	push 1
 24951 00011B9B E928450000              	jmp L_error_incorrect_arity_simple
 24952                                  .L_lambda_simple_arity_check_ok_0386:
 24953 00011BA0 C8000000                	enter 0, 0
 24954                                  	; preparing a tail-call
 24955                                  	; preparing a non tail-call
 24956 00011BA4 488B4520                	mov rax, PARAM(0)	; param v
 24957 00011BA8 50                      	push rax
 24958 00011BA9 6A01                    	push 1	; arg count
 24959 00011BAB 488B0425[EB0E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 24960 00011BB3 803805                  	cmp byte [rax], T_undefined
 24961 00011BB6 0F8426440000            	je L_error_fvar_undefined
 24962 00011BBC 803804                  	cmp byte [rax], T_closure
 24963 00011BBF 0F85A1440000            	jne L_error_non_closure
 24964 00011BC5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24965 00011BC8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24966 00011BCB 50                      	push rax
 24967 00011BCC 48B8-                   	mov rax, L_constants + 2023
 24967 00011BCE [E707000000000000] 
 24968 00011BD6 50                      	push rax
 24969 00011BD7 488B4520                	mov rax, PARAM(0)	; param v
 24970 00011BDB 50                      	push rax
 24971 00011BDC 6A03                    	push 3	; arg count
 24972 00011BDE 488B4510                	mov rax, ENV
 24973 00011BE2 488B00                  	mov rax, qword [rax + 8 * 0]
 24974 00011BE5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24975 00011BE8 488B00                  	mov rax, qword [rax]
 24976 00011BEB 803804                  	cmp byte [rax], T_closure
 24977 00011BEE 0F8572440000            	jne L_error_non_closure
 24978 00011BF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24979                                  
 24980                                  	; recycling the current frame
 24981 00011BF7 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24982 00011BFA FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24983 00011BFD B907000000              	mov rcx, 3 + 4
 24984 00011C02 488B5D18                	mov rbx, COUNT
 24985 00011C06 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24986 00011C0B 488D55F8                	lea rdx, [rbp - 8 * 1]
 24987                                  .L_tc_recycle_frame_loop_04a0:
 24988 00011C0F 4883F900                	cmp rcx, 0
 24989 00011C13 7413                    	je .L_tc_recycle_frame_done_04a0
 24990 00011C15 488B32                  	mov rsi, qword [rdx]
 24991 00011C18 488933                  	mov qword [rbx], rsi
 24992 00011C1B 48FFC9                  	dec rcx
 24993 00011C1E 4883EB08                	sub rbx, 8 * 1
 24994 00011C22 4883EA08                	sub rdx, 8 * 1
 24995 00011C26 EBE7                    	jmp .L_tc_recycle_frame_loop_04a0
 24996                                  .L_tc_recycle_frame_done_04a0:
 24997 00011C28 488D6308                	lea rsp, [rbx + 8 * 1]
 24998 00011C2C 5D                      	pop rbp	; the proc will restore it!
 24999 00011C2D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25000 00011C30 C9                      	leave
 25001 00011C31 C21800                  	ret AND_KILL_FRAME(1)
 25002                                  .L_lambda_simple_end_0386:	; new closure is in rax
 25003 00011C34 C9                      	leave
 25004 00011C35 C21800                  	ret AND_KILL_FRAME(1)
 25005                                  .L_lambda_simple_end_0384:	; new closure is in rax
 25006 00011C38 803804                  	cmp byte [rax], T_closure
 25007 00011C3B 0F8525440000            	jne L_error_non_closure
 25008 00011C41 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25009 00011C44 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25010 00011C47 48890425[15180000]      	mov qword [free_var_157], rax
 25011 00011C4F 48B8-                   	mov rax, sob_void
 25011 00011C51 [0000000000000000] 
 25012                                  
 25013 00011C59 4889C7                  	mov rdi, rax
 25014 00011C5C E8C0450000              	call print_sexpr_if_not_void
 25015                                  
 25016 00011C61 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25017 00011C66 E8A4440000              	call malloc
 25018 00011C6B 50                      	push rax
 25019 00011C6C BF00000000              	mov rdi, 8 * 0	; new rib
 25020 00011C71 E899440000              	call malloc
 25021 00011C76 50                      	push rax
 25022 00011C77 BF08000000              	mov rdi, 8 * 1	; extended env
 25023 00011C7C E88E440000              	call malloc
 25024 00011C81 488B7D10                	mov rdi, ENV
 25025 00011C85 BE00000000              	mov rsi, 0
 25026 00011C8A BA01000000              	mov rdx, 1
 25027                                  .L_lambda_simple_env_loop_0387:	; ext_env[i + 1] <-- env[i]
 25028 00011C8F 4883FE00                	cmp rsi, 0
 25029 00011C93 7410                    	je .L_lambda_simple_env_end_0387
 25030 00011C95 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25031 00011C99 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25032 00011C9D 48FFC6                  	inc rsi
 25033 00011CA0 48FFC2                  	inc rdx
 25034 00011CA3 EBEA                    	jmp .L_lambda_simple_env_loop_0387
 25035                                  .L_lambda_simple_env_end_0387:
 25036 00011CA5 5B                      	pop rbx
 25037 00011CA6 BE00000000              	mov rsi, 0
 25038                                  .L_lambda_simple_params_loop_0387:	; copy params
 25039 00011CAB 4883FE00                	cmp rsi, 0
 25040 00011CAF 740E                    	je .L_lambda_simple_params_end_0387
 25041 00011CB1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25042 00011CB6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25043 00011CBA 48FFC6                  	inc rsi
 25044 00011CBD EBEC                    	jmp .L_lambda_simple_params_loop_0387
 25045                                  .L_lambda_simple_params_end_0387:
 25046 00011CBF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25047 00011CC2 4889C3                  	mov rbx, rax
 25048 00011CC5 58                      	pop rax
 25049 00011CC6 C60004                  	mov byte [rax], T_closure
 25050 00011CC9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25051 00011CCD 48C74009[DA1C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0387
 25052 00011CD5 E99B000000              	jmp .L_lambda_simple_end_0387
 25053                                  .L_lambda_simple_code_0387:	; lambda-simple body
 25054 00011CDA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25055 00011CE0 740B                    	je .L_lambda_simple_arity_check_ok_0387
 25056 00011CE2 FF742410                	push qword [rsp + 8 * 2]
 25057 00011CE6 6A01                    	push 1
 25058 00011CE8 E9DB430000              	jmp L_error_incorrect_arity_simple
 25059                                  .L_lambda_simple_arity_check_ok_0387:
 25060 00011CED C8000000                	enter 0, 0
 25061                                  	; preparing a tail-call
 25062 00011CF1 488B4520                	mov rax, PARAM(0)	; param n
 25063 00011CF5 50                      	push rax
 25064                                  	; preparing a non tail-call
 25065 00011CF6 6A00                    	push 0	; arg count
 25066 00011CF8 488B0425[620F0000]      	mov rax, qword [free_var_26]	; free var trng
 25067 00011D00 803805                  	cmp byte [rax], T_undefined
 25068 00011D03 0F84D9420000            	je L_error_fvar_undefined
 25069 00011D09 803804                  	cmp byte [rax], T_closure
 25070 00011D0C 0F8554430000            	jne L_error_non_closure
 25071 00011D12 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25072 00011D15 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25073 00011D18 50                      	push rax
 25074 00011D19 6A02                    	push 2	; arg count
 25075 00011D1B 488B0425[FA100000]      	mov rax, qword [free_var_50]	; free var remainder
 25076 00011D23 803805                  	cmp byte [rax], T_undefined
 25077 00011D26 0F84B6420000            	je L_error_fvar_undefined
 25078 00011D2C 803804                  	cmp byte [rax], T_closure
 25079 00011D2F 0F8531430000            	jne L_error_non_closure
 25080 00011D35 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25081                                  
 25082                                  	; recycling the current frame
 25083 00011D38 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25084 00011D3B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25085 00011D3E B906000000              	mov rcx, 2 + 4
 25086 00011D43 488B5D18                	mov rbx, COUNT
 25087 00011D47 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25088 00011D4C 488D55F8                	lea rdx, [rbp - 8 * 1]
 25089                                  .L_tc_recycle_frame_loop_04a1:
 25090 00011D50 4883F900                	cmp rcx, 0
 25091 00011D54 7413                    	je .L_tc_recycle_frame_done_04a1
 25092 00011D56 488B32                  	mov rsi, qword [rdx]
 25093 00011D59 488933                  	mov qword [rbx], rsi
 25094 00011D5C 48FFC9                  	dec rcx
 25095 00011D5F 4883EB08                	sub rbx, 8 * 1
 25096 00011D63 4883EA08                	sub rdx, 8 * 1
 25097 00011D67 EBE7                    	jmp .L_tc_recycle_frame_loop_04a1
 25098                                  .L_tc_recycle_frame_done_04a1:
 25099 00011D69 488D6308                	lea rsp, [rbx + 8 * 1]
 25100 00011D6D 5D                      	pop rbp	; the proc will restore it!
 25101 00011D6E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25102 00011D71 C9                      	leave
 25103 00011D72 C21800                  	ret AND_KILL_FRAME(1)
 25104                                  .L_lambda_simple_end_0387:	; new closure is in rax
 25105 00011D75 48890425[26180000]      	mov qword [free_var_158], rax
 25106 00011D7D 48B8-                   	mov rax, sob_void
 25106 00011D7F [0000000000000000] 
 25107                                  
 25108 00011D87 4889C7                  	mov rdi, rax
 25109 00011D8A E892440000              	call print_sexpr_if_not_void
 25110                                  
 25111 00011D8F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25112 00011D94 E876430000              	call malloc
 25113 00011D99 50                      	push rax
 25114 00011D9A BF00000000              	mov rdi, 8 * 0	; new rib
 25115 00011D9F E86B430000              	call malloc
 25116 00011DA4 50                      	push rax
 25117 00011DA5 BF08000000              	mov rdi, 8 * 1	; extended env
 25118 00011DAA E860430000              	call malloc
 25119 00011DAF 488B7D10                	mov rdi, ENV
 25120 00011DB3 BE00000000              	mov rsi, 0
 25121 00011DB8 BA01000000              	mov rdx, 1
 25122                                  .L_lambda_simple_env_loop_0388:	; ext_env[i + 1] <-- env[i]
 25123 00011DBD 4883FE00                	cmp rsi, 0
 25124 00011DC1 7410                    	je .L_lambda_simple_env_end_0388
 25125 00011DC3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25126 00011DC7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25127 00011DCB 48FFC6                  	inc rsi
 25128 00011DCE 48FFC2                  	inc rdx
 25129 00011DD1 EBEA                    	jmp .L_lambda_simple_env_loop_0388
 25130                                  .L_lambda_simple_env_end_0388:
 25131 00011DD3 5B                      	pop rbx
 25132 00011DD4 BE00000000              	mov rsi, 0
 25133                                  .L_lambda_simple_params_loop_0388:	; copy params
 25134 00011DD9 4883FE00                	cmp rsi, 0
 25135 00011DDD 740E                    	je .L_lambda_simple_params_end_0388
 25136 00011DDF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25137 00011DE4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25138 00011DE8 48FFC6                  	inc rsi
 25139 00011DEB EBEC                    	jmp .L_lambda_simple_params_loop_0388
 25140                                  .L_lambda_simple_params_end_0388:
 25141 00011DED 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25142 00011DF0 4889C3                  	mov rbx, rax
 25143 00011DF3 58                      	pop rax
 25144 00011DF4 C60004                  	mov byte [rax], T_closure
 25145 00011DF7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25146 00011DFB 48C74009[081E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0388
 25147 00011E03 E983000000              	jmp .L_lambda_simple_end_0388
 25148                                  .L_lambda_simple_code_0388:	; lambda-simple body
 25149 00011E08 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25150 00011E0E 740B                    	je .L_lambda_simple_arity_check_ok_0388
 25151 00011E10 FF742410                	push qword [rsp + 8 * 2]
 25152 00011E14 6A01                    	push 1
 25153 00011E16 E9AD420000              	jmp L_error_incorrect_arity_simple
 25154                                  .L_lambda_simple_arity_check_ok_0388:
 25155 00011E1B C8000000                	enter 0, 0
 25156                                  	; preparing a tail-call
 25157 00011E1F 488B4520                	mov rax, PARAM(0)	; param x
 25158 00011E23 50                      	push rax
 25159 00011E24 48B8-                   	mov rax, L_constants + 2023
 25159 00011E26 [E707000000000000] 
 25160 00011E2E 50                      	push rax
 25161 00011E2F 6A02                    	push 2	; arg count
 25162 00011E31 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 25163 00011E39 803805                  	cmp byte [rax], T_undefined
 25164 00011E3C 0F84A0410000            	je L_error_fvar_undefined
 25165 00011E42 803804                  	cmp byte [rax], T_closure
 25166 00011E45 0F851B420000            	jne L_error_non_closure
 25167 00011E4B FF7001                  	push SOB_CLOSURE_ENV(rax)
 25168                                  
 25169                                  	; recycling the current frame
 25170 00011E4E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25171 00011E51 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25172 00011E54 B906000000              	mov rcx, 2 + 4
 25173 00011E59 488B5D18                	mov rbx, COUNT
 25174 00011E5D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25175 00011E62 488D55F8                	lea rdx, [rbp - 8 * 1]
 25176                                  .L_tc_recycle_frame_loop_04a2:
 25177 00011E66 4883F900                	cmp rcx, 0
 25178 00011E6A 7413                    	je .L_tc_recycle_frame_done_04a2
 25179 00011E6C 488B32                  	mov rsi, qword [rdx]
 25180 00011E6F 488933                  	mov qword [rbx], rsi
 25181 00011E72 48FFC9                  	dec rcx
 25182 00011E75 4883EB08                	sub rbx, 8 * 1
 25183 00011E79 4883EA08                	sub rdx, 8 * 1
 25184 00011E7D EBE7                    	jmp .L_tc_recycle_frame_loop_04a2
 25185                                  .L_tc_recycle_frame_done_04a2:
 25186 00011E7F 488D6308                	lea rsp, [rbx + 8 * 1]
 25187 00011E83 5D                      	pop rbp	; the proc will restore it!
 25188 00011E84 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25189 00011E87 C9                      	leave
 25190 00011E88 C21800                  	ret AND_KILL_FRAME(1)
 25191                                  .L_lambda_simple_end_0388:	; new closure is in rax
 25192 00011E8B 48890425[37180000]      	mov qword [free_var_159], rax
 25193 00011E93 48B8-                   	mov rax, sob_void
 25193 00011E95 [0000000000000000] 
 25194                                  
 25195 00011E9D 4889C7                  	mov rdi, rax
 25196 00011EA0 E87C430000              	call print_sexpr_if_not_void
 25197                                  
 25198 00011EA5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25199 00011EAA E860420000              	call malloc
 25200 00011EAF 50                      	push rax
 25201 00011EB0 BF00000000              	mov rdi, 8 * 0	; new rib
 25202 00011EB5 E855420000              	call malloc
 25203 00011EBA 50                      	push rax
 25204 00011EBB BF08000000              	mov rdi, 8 * 1	; extended env
 25205 00011EC0 E84A420000              	call malloc
 25206 00011EC5 488B7D10                	mov rdi, ENV
 25207 00011EC9 BE00000000              	mov rsi, 0
 25208 00011ECE BA01000000              	mov rdx, 1
 25209                                  .L_lambda_simple_env_loop_0389:	; ext_env[i + 1] <-- env[i]
 25210 00011ED3 4883FE00                	cmp rsi, 0
 25211 00011ED7 7410                    	je .L_lambda_simple_env_end_0389
 25212 00011ED9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25213 00011EDD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25214 00011EE1 48FFC6                  	inc rsi
 25215 00011EE4 48FFC2                  	inc rdx
 25216 00011EE7 EBEA                    	jmp .L_lambda_simple_env_loop_0389
 25217                                  .L_lambda_simple_env_end_0389:
 25218 00011EE9 5B                      	pop rbx
 25219 00011EEA BE00000000              	mov rsi, 0
 25220                                  .L_lambda_simple_params_loop_0389:	; copy params
 25221 00011EEF 4883FE00                	cmp rsi, 0
 25222 00011EF3 740E                    	je .L_lambda_simple_params_end_0389
 25223 00011EF5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25224 00011EFA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25225 00011EFE 48FFC6                  	inc rsi
 25226 00011F01 EBEC                    	jmp .L_lambda_simple_params_loop_0389
 25227                                  .L_lambda_simple_params_end_0389:
 25228 00011F03 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25229 00011F06 4889C3                  	mov rbx, rax
 25230 00011F09 58                      	pop rax
 25231 00011F0A C60004                  	mov byte [rax], T_closure
 25232 00011F0D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25233 00011F11 48C74009[1E1F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0389
 25234 00011F19 E983000000              	jmp .L_lambda_simple_end_0389
 25235                                  .L_lambda_simple_code_0389:	; lambda-simple body
 25236 00011F1E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25237 00011F24 740B                    	je .L_lambda_simple_arity_check_ok_0389
 25238 00011F26 FF742410                	push qword [rsp + 8 * 2]
 25239 00011F2A 6A01                    	push 1
 25240 00011F2C E997410000              	jmp L_error_incorrect_arity_simple
 25241                                  .L_lambda_simple_arity_check_ok_0389:
 25242 00011F31 C8000000                	enter 0, 0
 25243                                  	; preparing a tail-call
 25244 00011F35 48B8-                   	mov rax, L_constants + 2023
 25244 00011F37 [E707000000000000] 
 25245 00011F3F 50                      	push rax
 25246 00011F40 488B4520                	mov rax, PARAM(0)	; param x
 25247 00011F44 50                      	push rax
 25248 00011F45 6A02                    	push 2	; arg count
 25249 00011F47 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 25250 00011F4F 803805                  	cmp byte [rax], T_undefined
 25251 00011F52 0F848A400000            	je L_error_fvar_undefined
 25252 00011F58 803804                  	cmp byte [rax], T_closure
 25253 00011F5B 0F8505410000            	jne L_error_non_closure
 25254 00011F61 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25255                                  
 25256                                  	; recycling the current frame
 25257 00011F64 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25258 00011F67 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25259 00011F6A B906000000              	mov rcx, 2 + 4
 25260 00011F6F 488B5D18                	mov rbx, COUNT
 25261 00011F73 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25262 00011F78 488D55F8                	lea rdx, [rbp - 8 * 1]
 25263                                  .L_tc_recycle_frame_loop_04a3:
 25264 00011F7C 4883F900                	cmp rcx, 0
 25265 00011F80 7413                    	je .L_tc_recycle_frame_done_04a3
 25266 00011F82 488B32                  	mov rsi, qword [rdx]
 25267 00011F85 488933                  	mov qword [rbx], rsi
 25268 00011F88 48FFC9                  	dec rcx
 25269 00011F8B 4883EB08                	sub rbx, 8 * 1
 25270 00011F8F 4883EA08                	sub rdx, 8 * 1
 25271 00011F93 EBE7                    	jmp .L_tc_recycle_frame_loop_04a3
 25272                                  .L_tc_recycle_frame_done_04a3:
 25273 00011F95 488D6308                	lea rsp, [rbx + 8 * 1]
 25274 00011F99 5D                      	pop rbp	; the proc will restore it!
 25275 00011F9A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25276 00011F9D C9                      	leave
 25277 00011F9E C21800                  	ret AND_KILL_FRAME(1)
 25278                                  .L_lambda_simple_end_0389:	; new closure is in rax
 25279 00011FA1 48890425[48180000]      	mov qword [free_var_160], rax
 25280 00011FA9 48B8-                   	mov rax, sob_void
 25280 00011FAB [0000000000000000] 
 25281                                  
 25282 00011FB3 4889C7                  	mov rdi, rax
 25283 00011FB6 E866420000              	call print_sexpr_if_not_void
 25284                                  
 25285 00011FBB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25286 00011FC0 E84A410000              	call malloc
 25287 00011FC5 50                      	push rax
 25288 00011FC6 BF00000000              	mov rdi, 8 * 0	; new rib
 25289 00011FCB E83F410000              	call malloc
 25290 00011FD0 50                      	push rax
 25291 00011FD1 BF08000000              	mov rdi, 8 * 1	; extended env
 25292 00011FD6 E834410000              	call malloc
 25293 00011FDB 488B7D10                	mov rdi, ENV
 25294 00011FDF BE00000000              	mov rsi, 0
 25295 00011FE4 BA01000000              	mov rdx, 1
 25296                                  .L_lambda_simple_env_loop_038a:	; ext_env[i + 1] <-- env[i]
 25297 00011FE9 4883FE00                	cmp rsi, 0
 25298 00011FED 7410                    	je .L_lambda_simple_env_end_038a
 25299 00011FEF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25300 00011FF3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25301 00011FF7 48FFC6                  	inc rsi
 25302 00011FFA 48FFC2                  	inc rdx
 25303 00011FFD EBEA                    	jmp .L_lambda_simple_env_loop_038a
 25304                                  .L_lambda_simple_env_end_038a:
 25305 00011FFF 5B                      	pop rbx
 25306 00012000 BE00000000              	mov rsi, 0
 25307                                  .L_lambda_simple_params_loop_038a:	; copy params
 25308 00012005 4883FE00                	cmp rsi, 0
 25309 00012009 740E                    	je .L_lambda_simple_params_end_038a
 25310 0001200B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25311 00012010 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25312 00012014 48FFC6                  	inc rsi
 25313 00012017 EBEC                    	jmp .L_lambda_simple_params_loop_038a
 25314                                  .L_lambda_simple_params_end_038a:
 25315 00012019 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25316 0001201C 4889C3                  	mov rbx, rax
 25317 0001201F 58                      	pop rax
 25318 00012020 C60004                  	mov byte [rax], T_closure
 25319 00012023 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25320 00012027 48C74009[34200100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_038a
 25321 0001202F E9A6000000              	jmp .L_lambda_simple_end_038a
 25322                                  .L_lambda_simple_code_038a:	; lambda-simple body
 25323 00012034 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25324 0001203A 740B                    	je .L_lambda_simple_arity_check_ok_038a
 25325 0001203C FF742410                	push qword [rsp + 8 * 2]
 25326 00012040 6A01                    	push 1
 25327 00012042 E981400000              	jmp L_error_incorrect_arity_simple
 25328                                  .L_lambda_simple_arity_check_ok_038a:
 25329 00012047 C8000000                	enter 0, 0
 25330                                  	; preparing a tail-call
 25331                                  	; preparing a non tail-call
 25332 0001204B 48B8-                   	mov rax, L_constants + 3174
 25332 0001204D [660C000000000000] 
 25333 00012055 50                      	push rax
 25334 00012056 488B4520                	mov rax, PARAM(0)	; param n
 25335 0001205A 50                      	push rax
 25336 0001205B 6A02                    	push 2	; arg count
 25337 0001205D 488B0425[FA100000]      	mov rax, qword [free_var_50]	; free var remainder
 25338 00012065 803805                  	cmp byte [rax], T_undefined
 25339 00012068 0F84743F0000            	je L_error_fvar_undefined
 25340 0001206E 803804                  	cmp byte [rax], T_closure
 25341 00012071 0F85EF3F0000            	jne L_error_non_closure
 25342 00012077 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25343 0001207A FF5009                  	call SOB_CLOSURE_CODE(rax)
 25344 0001207D 50                      	push rax
 25345 0001207E 6A01                    	push 1	; arg count
 25346 00012080 488B0425[730F0000]      	mov rax, qword [free_var_27]	; free var zero?
 25347 00012088 803805                  	cmp byte [rax], T_undefined
 25348 0001208B 0F84513F0000            	je L_error_fvar_undefined
 25349 00012091 803804                  	cmp byte [rax], T_closure
 25350 00012094 0F85CC3F0000            	jne L_error_non_closure
 25351 0001209A FF7001                  	push SOB_CLOSURE_ENV(rax)
 25352                                  
 25353                                  	; recycling the current frame
 25354 0001209D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25355 000120A0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25356 000120A3 B905000000              	mov rcx, 1 + 4
 25357 000120A8 488B5D18                	mov rbx, COUNT
 25358 000120AC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25359 000120B1 488D55F8                	lea rdx, [rbp - 8 * 1]
 25360                                  .L_tc_recycle_frame_loop_04a4:
 25361 000120B5 4883F900                	cmp rcx, 0
 25362 000120B9 7413                    	je .L_tc_recycle_frame_done_04a4
 25363 000120BB 488B32                  	mov rsi, qword [rdx]
 25364 000120BE 488933                  	mov qword [rbx], rsi
 25365 000120C1 48FFC9                  	dec rcx
 25366 000120C4 4883EB08                	sub rbx, 8 * 1
 25367 000120C8 4883EA08                	sub rdx, 8 * 1
 25368 000120CC EBE7                    	jmp .L_tc_recycle_frame_loop_04a4
 25369                                  .L_tc_recycle_frame_done_04a4:
 25370 000120CE 488D6308                	lea rsp, [rbx + 8 * 1]
 25371 000120D2 5D                      	pop rbp	; the proc will restore it!
 25372 000120D3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25373 000120D6 C9                      	leave
 25374 000120D7 C21800                  	ret AND_KILL_FRAME(1)
 25375                                  .L_lambda_simple_end_038a:	; new closure is in rax
 25376 000120DA 48890425[59180000]      	mov qword [free_var_161], rax
 25377 000120E2 48B8-                   	mov rax, sob_void
 25377 000120E4 [0000000000000000] 
 25378                                  
 25379 000120EC 4889C7                  	mov rdi, rax
 25380 000120EF E82D410000              	call print_sexpr_if_not_void
 25381                                  
 25382 000120F4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25383 000120F9 E811400000              	call malloc
 25384 000120FE 50                      	push rax
 25385 000120FF BF00000000              	mov rdi, 8 * 0	; new rib
 25386 00012104 E806400000              	call malloc
 25387 00012109 50                      	push rax
 25388 0001210A BF08000000              	mov rdi, 8 * 1	; extended env
 25389 0001210F E8FB3F0000              	call malloc
 25390 00012114 488B7D10                	mov rdi, ENV
 25391 00012118 BE00000000              	mov rsi, 0
 25392 0001211D BA01000000              	mov rdx, 1
 25393                                  .L_lambda_simple_env_loop_038b:	; ext_env[i + 1] <-- env[i]
 25394 00012122 4883FE00                	cmp rsi, 0
 25395 00012126 7410                    	je .L_lambda_simple_env_end_038b
 25396 00012128 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25397 0001212C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25398 00012130 48FFC6                  	inc rsi
 25399 00012133 48FFC2                  	inc rdx
 25400 00012136 EBEA                    	jmp .L_lambda_simple_env_loop_038b
 25401                                  .L_lambda_simple_env_end_038b:
 25402 00012138 5B                      	pop rbx
 25403 00012139 BE00000000              	mov rsi, 0
 25404                                  .L_lambda_simple_params_loop_038b:	; copy params
 25405 0001213E 4883FE00                	cmp rsi, 0
 25406 00012142 740E                    	je .L_lambda_simple_params_end_038b
 25407 00012144 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25408 00012149 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25409 0001214D 48FFC6                  	inc rsi
 25410 00012150 EBEC                    	jmp .L_lambda_simple_params_loop_038b
 25411                                  .L_lambda_simple_params_end_038b:
 25412 00012152 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25413 00012155 4889C3                  	mov rbx, rax
 25414 00012158 58                      	pop rax
 25415 00012159 C60004                  	mov byte [rax], T_closure
 25416 0001215C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25417 00012160 48C74009[6D210100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_038b
 25418 00012168 E99B000000              	jmp .L_lambda_simple_end_038b
 25419                                  .L_lambda_simple_code_038b:	; lambda-simple body
 25420 0001216D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25421 00012173 740B                    	je .L_lambda_simple_arity_check_ok_038b
 25422 00012175 FF742410                	push qword [rsp + 8 * 2]
 25423 00012179 6A01                    	push 1
 25424 0001217B E9483F0000              	jmp L_error_incorrect_arity_simple
 25425                                  .L_lambda_simple_arity_check_ok_038b:
 25426 00012180 C8000000                	enter 0, 0
 25427                                  	; preparing a tail-call
 25428                                  	; preparing a non tail-call
 25429 00012184 488B4520                	mov rax, PARAM(0)	; param n
 25430 00012188 50                      	push rax
 25431 00012189 6A01                    	push 1	; arg count
 25432 0001218B 488B0425[59180000]      	mov rax, qword [free_var_161]	; free var even?
 25433 00012193 803805                  	cmp byte [rax], T_undefined
 25434 00012196 0F84463E0000            	je L_error_fvar_undefined
 25435 0001219C 803804                  	cmp byte [rax], T_closure
 25436 0001219F 0F85C13E0000            	jne L_error_non_closure
 25437 000121A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25438 000121A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25439 000121AB 50                      	push rax
 25440 000121AC 6A01                    	push 1	; arg count
 25441 000121AE 488B0425[90140000]      	mov rax, qword [free_var_104]	; free var not
 25442 000121B6 803805                  	cmp byte [rax], T_undefined
 25443 000121B9 0F84233E0000            	je L_error_fvar_undefined
 25444 000121BF 803804                  	cmp byte [rax], T_closure
 25445 000121C2 0F859E3E0000            	jne L_error_non_closure
 25446 000121C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25447                                  
 25448                                  	; recycling the current frame
 25449 000121CB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25450 000121CE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25451 000121D1 B905000000              	mov rcx, 1 + 4
 25452 000121D6 488B5D18                	mov rbx, COUNT
 25453 000121DA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25454 000121DF 488D55F8                	lea rdx, [rbp - 8 * 1]
 25455                                  .L_tc_recycle_frame_loop_04a5:
 25456 000121E3 4883F900                	cmp rcx, 0
 25457 000121E7 7413                    	je .L_tc_recycle_frame_done_04a5
 25458 000121E9 488B32                  	mov rsi, qword [rdx]
 25459 000121EC 488933                  	mov qword [rbx], rsi
 25460 000121EF 48FFC9                  	dec rcx
 25461 000121F2 4883EB08                	sub rbx, 8 * 1
 25462 000121F6 4883EA08                	sub rdx, 8 * 1
 25463 000121FA EBE7                    	jmp .L_tc_recycle_frame_loop_04a5
 25464                                  .L_tc_recycle_frame_done_04a5:
 25465 000121FC 488D6308                	lea rsp, [rbx + 8 * 1]
 25466 00012200 5D                      	pop rbp	; the proc will restore it!
 25467 00012201 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25468 00012204 C9                      	leave
 25469 00012205 C21800                  	ret AND_KILL_FRAME(1)
 25470                                  .L_lambda_simple_end_038b:	; new closure is in rax
 25471 00012208 48890425[6A180000]      	mov qword [free_var_162], rax
 25472 00012210 48B8-                   	mov rax, sob_void
 25472 00012212 [0000000000000000] 
 25473                                  
 25474 0001221A 4889C7                  	mov rdi, rax
 25475 0001221D E8FF3F0000              	call print_sexpr_if_not_void
 25476                                  
 25477 00012222 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25478 00012227 E8E33E0000              	call malloc
 25479 0001222C 50                      	push rax
 25480 0001222D BF00000000              	mov rdi, 8 * 0	; new rib
 25481 00012232 E8D83E0000              	call malloc
 25482 00012237 50                      	push rax
 25483 00012238 BF08000000              	mov rdi, 8 * 1	; extended env
 25484 0001223D E8CD3E0000              	call malloc
 25485 00012242 488B7D10                	mov rdi, ENV
 25486 00012246 BE00000000              	mov rsi, 0
 25487 0001224B BA01000000              	mov rdx, 1
 25488                                  .L_lambda_simple_env_loop_038c:	; ext_env[i + 1] <-- env[i]
 25489 00012250 4883FE00                	cmp rsi, 0
 25490 00012254 7410                    	je .L_lambda_simple_env_end_038c
 25491 00012256 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25492 0001225A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25493 0001225E 48FFC6                  	inc rsi
 25494 00012261 48FFC2                  	inc rdx
 25495 00012264 EBEA                    	jmp .L_lambda_simple_env_loop_038c
 25496                                  .L_lambda_simple_env_end_038c:
 25497 00012266 5B                      	pop rbx
 25498 00012267 BE00000000              	mov rsi, 0
 25499                                  .L_lambda_simple_params_loop_038c:	; copy params
 25500 0001226C 4883FE00                	cmp rsi, 0
 25501 00012270 740E                    	je .L_lambda_simple_params_end_038c
 25502 00012272 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25503 00012277 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25504 0001227B 48FFC6                  	inc rsi
 25505 0001227E EBEC                    	jmp .L_lambda_simple_params_loop_038c
 25506                                  .L_lambda_simple_params_end_038c:
 25507 00012280 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25508 00012283 4889C3                  	mov rbx, rax
 25509 00012286 58                      	pop rax
 25510 00012287 C60004                  	mov byte [rax], T_closure
 25511 0001228A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25512 0001228E 48C74009[9B220100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_038c
 25513 00012296 E9AD000000              	jmp .L_lambda_simple_end_038c
 25514                                  .L_lambda_simple_code_038c:	; lambda-simple body
 25515 0001229B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25516 000122A1 740B                    	je .L_lambda_simple_arity_check_ok_038c
 25517 000122A3 FF742410                	push qword [rsp + 8 * 2]
 25518 000122A7 6A01                    	push 1
 25519 000122A9 E91A3E0000              	jmp L_error_incorrect_arity_simple
 25520                                  .L_lambda_simple_arity_check_ok_038c:
 25521 000122AE C8000000                	enter 0, 0
 25522                                  	; preparing a non tail-call
 25523 000122B2 488B4520                	mov rax, PARAM(0)	; param x
 25524 000122B6 50                      	push rax
 25525 000122B7 6A01                    	push 1	; arg count
 25526 000122B9 488B0425[48180000]      	mov rax, qword [free_var_160]	; free var negative?
 25527 000122C1 803805                  	cmp byte [rax], T_undefined
 25528 000122C4 0F84183D0000            	je L_error_fvar_undefined
 25529 000122CA 803804                  	cmp byte [rax], T_closure
 25530 000122CD 0F85933D0000            	jne L_error_non_closure
 25531 000122D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25532 000122D6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25533 000122D9 483D[02000000]          	cmp rax, sob_boolean_false
 25534 000122DF 745F                    	je .L_if_else_028a
 25535                                  	; preparing a tail-call
 25536 000122E1 488B4520                	mov rax, PARAM(0)	; param x
 25537 000122E5 50                      	push rax
 25538 000122E6 6A01                    	push 1	; arg count
 25539 000122E8 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 25540 000122F0 803805                  	cmp byte [rax], T_undefined
 25541 000122F3 0F84E93C0000            	je L_error_fvar_undefined
 25542 000122F9 803804                  	cmp byte [rax], T_closure
 25543 000122FC 0F85643D0000            	jne L_error_non_closure
 25544 00012302 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25545                                  
 25546                                  	; recycling the current frame
 25547 00012305 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25548 00012308 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25549 0001230B B905000000              	mov rcx, 1 + 4
 25550 00012310 488B5D18                	mov rbx, COUNT
 25551 00012314 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25552 00012319 488D55F8                	lea rdx, [rbp - 8 * 1]
 25553                                  .L_tc_recycle_frame_loop_04a6:
 25554 0001231D 4883F900                	cmp rcx, 0
 25555 00012321 7413                    	je .L_tc_recycle_frame_done_04a6
 25556 00012323 488B32                  	mov rsi, qword [rdx]
 25557 00012326 488933                  	mov qword [rbx], rsi
 25558 00012329 48FFC9                  	dec rcx
 25559 0001232C 4883EB08                	sub rbx, 8 * 1
 25560 00012330 4883EA08                	sub rdx, 8 * 1
 25561 00012334 EBE7                    	jmp .L_tc_recycle_frame_loop_04a6
 25562                                  .L_tc_recycle_frame_done_04a6:
 25563 00012336 488D6308                	lea rsp, [rbx + 8 * 1]
 25564 0001233A 5D                      	pop rbp	; the proc will restore it!
 25565 0001233B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25566 0001233E EB04                    	jmp .L_if_end_028a
 25567                                  .L_if_else_028a:
 25568 00012340 488B4520                	mov rax, PARAM(0)	; param x
 25569                                  .L_if_end_028a:
 25570 00012344 C9                      	leave
 25571 00012345 C21800                  	ret AND_KILL_FRAME(1)
 25572                                  .L_lambda_simple_end_038c:	; new closure is in rax
 25573 00012348 48890425[7B180000]      	mov qword [free_var_163], rax
 25574 00012350 48B8-                   	mov rax, sob_void
 25574 00012352 [0000000000000000] 
 25575                                  
 25576 0001235A 4889C7                  	mov rdi, rax
 25577 0001235D E8BF3E0000              	call print_sexpr_if_not_void
 25578                                  
 25579 00012362 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25580 00012367 E8A33D0000              	call malloc
 25581 0001236C 50                      	push rax
 25582 0001236D BF00000000              	mov rdi, 8 * 0	; new rib
 25583 00012372 E8983D0000              	call malloc
 25584 00012377 50                      	push rax
 25585 00012378 BF08000000              	mov rdi, 8 * 1	; extended env
 25586 0001237D E88D3D0000              	call malloc
 25587 00012382 488B7D10                	mov rdi, ENV
 25588 00012386 BE00000000              	mov rsi, 0
 25589 0001238B BA01000000              	mov rdx, 1
 25590                                  .L_lambda_simple_env_loop_038d:	; ext_env[i + 1] <-- env[i]
 25591 00012390 4883FE00                	cmp rsi, 0
 25592 00012394 7410                    	je .L_lambda_simple_env_end_038d
 25593 00012396 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25594 0001239A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25595 0001239E 48FFC6                  	inc rsi
 25596 000123A1 48FFC2                  	inc rdx
 25597 000123A4 EBEA                    	jmp .L_lambda_simple_env_loop_038d
 25598                                  .L_lambda_simple_env_end_038d:
 25599 000123A6 5B                      	pop rbx
 25600 000123A7 BE00000000              	mov rsi, 0
 25601                                  .L_lambda_simple_params_loop_038d:	; copy params
 25602 000123AC 4883FE00                	cmp rsi, 0
 25603 000123B0 740E                    	je .L_lambda_simple_params_end_038d
 25604 000123B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25605 000123B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25606 000123BB 48FFC6                  	inc rsi
 25607 000123BE EBEC                    	jmp .L_lambda_simple_params_loop_038d
 25608                                  .L_lambda_simple_params_end_038d:
 25609 000123C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25610 000123C3 4889C3                  	mov rbx, rax
 25611 000123C6 58                      	pop rax
 25612 000123C7 C60004                  	mov byte [rax], T_closure
 25613 000123CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25614 000123CE 48C74009[DB230100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_038d
 25615 000123D6 E91F050000              	jmp .L_lambda_simple_end_038d
 25616                                  .L_lambda_simple_code_038d:	; lambda-simple body
 25617 000123DB 48837C241002            	cmp qword [rsp + 8 * 2], 2
 25618 000123E1 740B                    	je .L_lambda_simple_arity_check_ok_038d
 25619 000123E3 FF742410                	push qword [rsp + 8 * 2]
 25620 000123E7 6A02                    	push 2
 25621 000123E9 E9DA3C0000              	jmp L_error_incorrect_arity_simple
 25622                                  .L_lambda_simple_arity_check_ok_038d:
 25623 000123EE C8000000                	enter 0, 0
 25624                                  	; preparing a non tail-call
 25625 000123F2 488B4520                	mov rax, PARAM(0)	; param e1
 25626 000123F6 50                      	push rax
 25627 000123F7 6A01                    	push 1	; arg count
 25628 000123F9 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
 25629 00012401 803805                  	cmp byte [rax], T_undefined
 25630 00012404 0F84D83B0000            	je L_error_fvar_undefined
 25631 0001240A 803804                  	cmp byte [rax], T_closure
 25632 0001240D 0F85533C0000            	jne L_error_non_closure
 25633 00012413 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25634 00012416 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25635 00012419 483D[02000000]          	cmp rax, sob_boolean_false
 25636 0001241F 7429                    	je .L_if_else_028c
 25637                                  	; preparing a non tail-call
 25638 00012421 488B4528                	mov rax, PARAM(1)	; param e2
 25639 00012425 50                      	push rax
 25640 00012426 6A01                    	push 1	; arg count
 25641 00012428 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
 25642 00012430 803805                  	cmp byte [rax], T_undefined
 25643 00012433 0F84A93B0000            	je L_error_fvar_undefined
 25644 00012439 803804                  	cmp byte [rax], T_closure
 25645 0001243C 0F85243C0000            	jne L_error_non_closure
 25646 00012442 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25647 00012445 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25648 00012448 EB0A                    	jmp .L_if_end_028c
 25649                                  .L_if_else_028c:
 25650 0001244A 48B8-                   	mov rax, L_constants + 2
 25650 0001244C [0200000000000000] 
 25651                                  .L_if_end_028c:
 25652 00012454 483D[02000000]          	cmp rax, sob_boolean_false
 25653 0001245A 0F8437010000            	je .L_if_else_028b
 25654                                  	; preparing a non tail-call
 25655                                  	; preparing a non tail-call
 25656 00012460 488B4528                	mov rax, PARAM(1)	; param e2
 25657 00012464 50                      	push rax
 25658 00012465 6A01                    	push 1	; arg count
 25659 00012467 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 25660 0001246F 803805                  	cmp byte [rax], T_undefined
 25661 00012472 0F846A3B0000            	je L_error_fvar_undefined
 25662 00012478 803804                  	cmp byte [rax], T_closure
 25663 0001247B 0F85E53B0000            	jne L_error_non_closure
 25664 00012481 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25665 00012484 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25666 00012487 50                      	push rax
 25667                                  	; preparing a non tail-call
 25668 00012488 488B4520                	mov rax, PARAM(0)	; param e1
 25669 0001248C 50                      	push rax
 25670 0001248D 6A01                    	push 1	; arg count
 25671 0001248F 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 25672 00012497 803805                  	cmp byte [rax], T_undefined
 25673 0001249A 0F84423B0000            	je L_error_fvar_undefined
 25674 000124A0 803804                  	cmp byte [rax], T_closure
 25675 000124A3 0F85BD3B0000            	jne L_error_non_closure
 25676 000124A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25677 000124AC FF5009                  	call SOB_CLOSURE_CODE(rax)
 25678 000124AF 50                      	push rax
 25679 000124B0 6A02                    	push 2	; arg count
 25680 000124B2 488B0425[8C180000]      	mov rax, qword [free_var_164]	; free var equal?
 25681 000124BA 803805                  	cmp byte [rax], T_undefined
 25682 000124BD 0F841F3B0000            	je L_error_fvar_undefined
 25683 000124C3 803804                  	cmp byte [rax], T_closure
 25684 000124C6 0F859A3B0000            	jne L_error_non_closure
 25685 000124CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 25686 000124CF FF5009                  	call SOB_CLOSURE_CODE(rax)
 25687 000124D2 483D[02000000]          	cmp rax, sob_boolean_false
 25688 000124D8 0F84AA000000            	je .L_if_else_028d
 25689                                  	; preparing a tail-call
 25690                                  	; preparing a non tail-call
 25691 000124DE 488B4528                	mov rax, PARAM(1)	; param e2
 25692 000124E2 50                      	push rax
 25693 000124E3 6A01                    	push 1	; arg count
 25694 000124E5 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 25695 000124ED 803805                  	cmp byte [rax], T_undefined
 25696 000124F0 0F84EC3A0000            	je L_error_fvar_undefined
 25697 000124F6 803804                  	cmp byte [rax], T_closure
 25698 000124F9 0F85673B0000            	jne L_error_non_closure
 25699 000124FF FF7001                  	push SOB_CLOSURE_ENV(rax)
 25700 00012502 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25701 00012505 50                      	push rax
 25702                                  	; preparing a non tail-call
 25703 00012506 488B4520                	mov rax, PARAM(0)	; param e1
 25704 0001250A 50                      	push rax
 25705 0001250B 6A01                    	push 1	; arg count
 25706 0001250D 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 25707 00012515 803805                  	cmp byte [rax], T_undefined
 25708 00012518 0F84C43A0000            	je L_error_fvar_undefined
 25709 0001251E 803804                  	cmp byte [rax], T_closure
 25710 00012521 0F853F3B0000            	jne L_error_non_closure
 25711 00012527 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25712 0001252A FF5009                  	call SOB_CLOSURE_CODE(rax)
 25713 0001252D 50                      	push rax
 25714 0001252E 6A02                    	push 2	; arg count
 25715 00012530 488B0425[8C180000]      	mov rax, qword [free_var_164]	; free var equal?
 25716 00012538 803805                  	cmp byte [rax], T_undefined
 25717 0001253B 0F84A13A0000            	je L_error_fvar_undefined
 25718 00012541 803804                  	cmp byte [rax], T_closure
 25719 00012544 0F851C3B0000            	jne L_error_non_closure
 25720 0001254A FF7001                  	push SOB_CLOSURE_ENV(rax)
 25721                                  
 25722                                  	; recycling the current frame
 25723 0001254D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25724 00012550 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25725 00012553 B906000000              	mov rcx, 2 + 4
 25726 00012558 488B5D18                	mov rbx, COUNT
 25727 0001255C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25728 00012561 488D55F8                	lea rdx, [rbp - 8 * 1]
 25729                                  .L_tc_recycle_frame_loop_04a7:
 25730 00012565 4883F900                	cmp rcx, 0
 25731 00012569 7413                    	je .L_tc_recycle_frame_done_04a7
 25732 0001256B 488B32                  	mov rsi, qword [rdx]
 25733 0001256E 488933                  	mov qword [rbx], rsi
 25734 00012571 48FFC9                  	dec rcx
 25735 00012574 4883EB08                	sub rbx, 8 * 1
 25736 00012578 4883EA08                	sub rdx, 8 * 1
 25737 0001257C EBE7                    	jmp .L_tc_recycle_frame_loop_04a7
 25738                                  .L_tc_recycle_frame_done_04a7:
 25739 0001257E 488D6308                	lea rsp, [rbx + 8 * 1]
 25740 00012582 5D                      	pop rbp	; the proc will restore it!
 25741 00012583 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25742 00012586 EB0A                    	jmp .L_if_end_028d
 25743                                  .L_if_else_028d:
 25744 00012588 48B8-                   	mov rax, L_constants + 2
 25744 0001258A [0200000000000000] 
 25745                                  .L_if_end_028d:
 25746 00012592 E95F030000              	jmp .L_if_end_028b
 25747                                  .L_if_else_028b:
 25748                                  	; preparing a non tail-call
 25749 00012597 488B4520                	mov rax, PARAM(0)	; param e1
 25750 0001259B 50                      	push rax
 25751 0001259C 6A01                    	push 1	; arg count
 25752 0001259E 488B0425[0E0E0000]      	mov rax, qword [free_var_6]	; free var vector?
 25753 000125A6 803805                  	cmp byte [rax], T_undefined
 25754 000125A9 0F84333A0000            	je L_error_fvar_undefined
 25755 000125AF 803804                  	cmp byte [rax], T_closure
 25756 000125B2 0F85AE3A0000            	jne L_error_non_closure
 25757 000125B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25758 000125BB FF5009                  	call SOB_CLOSURE_CODE(rax)
 25759 000125BE 483D[02000000]          	cmp rax, sob_boolean_false
 25760 000125C4 0F84AF000000            	je .L_if_else_028f
 25761                                  	; preparing a non tail-call
 25762 000125CA 488B4528                	mov rax, PARAM(1)	; param e2
 25763 000125CE 50                      	push rax
 25764 000125CF 6A01                    	push 1	; arg count
 25765 000125D1 488B0425[0E0E0000]      	mov rax, qword [free_var_6]	; free var vector?
 25766 000125D9 803805                  	cmp byte [rax], T_undefined
 25767 000125DC 0F84003A0000            	je L_error_fvar_undefined
 25768 000125E2 803804                  	cmp byte [rax], T_closure
 25769 000125E5 0F857B3A0000            	jne L_error_non_closure
 25770 000125EB FF7001                  	push SOB_CLOSURE_ENV(rax)
 25771 000125EE FF5009                  	call SOB_CLOSURE_CODE(rax)
 25772 000125F1 483D[02000000]          	cmp rax, sob_boolean_false
 25773 000125F7 7474                    	je .L_if_else_0290
 25774                                  	; preparing a non tail-call
 25775                                  	; preparing a non tail-call
 25776 000125F9 488B4528                	mov rax, PARAM(1)	; param e2
 25777 000125FD 50                      	push rax
 25778 000125FE 6A01                    	push 1	; arg count
 25779 00012600 488B0425[EB0E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 25780 00012608 803805                  	cmp byte [rax], T_undefined
 25781 0001260B 0F84D1390000            	je L_error_fvar_undefined
 25782 00012611 803804                  	cmp byte [rax], T_closure
 25783 00012614 0F854C3A0000            	jne L_error_non_closure
 25784 0001261A FF7001                  	push SOB_CLOSURE_ENV(rax)
 25785 0001261D FF5009                  	call SOB_CLOSURE_CODE(rax)
 25786 00012620 50                      	push rax
 25787                                  	; preparing a non tail-call
 25788 00012621 488B4520                	mov rax, PARAM(0)	; param e1
 25789 00012625 50                      	push rax
 25790 00012626 6A01                    	push 1	; arg count
 25791 00012628 488B0425[EB0E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 25792 00012630 803805                  	cmp byte [rax], T_undefined
 25793 00012633 0F84A9390000            	je L_error_fvar_undefined
 25794 00012639 803804                  	cmp byte [rax], T_closure
 25795 0001263C 0F85243A0000            	jne L_error_non_closure
 25796 00012642 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25797 00012645 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25798 00012648 50                      	push rax
 25799 00012649 6A02                    	push 2	; arg count
 25800 0001264B 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 25801 00012653 803805                  	cmp byte [rax], T_undefined
 25802 00012656 0F8486390000            	je L_error_fvar_undefined
 25803 0001265C 803804                  	cmp byte [rax], T_closure
 25804 0001265F 0F85013A0000            	jne L_error_non_closure
 25805 00012665 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25806 00012668 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25807 0001266B EB0A                    	jmp .L_if_end_0290
 25808                                  .L_if_else_0290:
 25809 0001266D 48B8-                   	mov rax, L_constants + 2
 25809 0001266F [0200000000000000] 
 25810                                  .L_if_end_0290:
 25811 00012677 EB0A                    	jmp .L_if_end_028f
 25812                                  .L_if_else_028f:
 25813 00012679 48B8-                   	mov rax, L_constants + 2
 25813 0001267B [0200000000000000] 
 25814                                  .L_if_end_028f:
 25815 00012683 483D[02000000]          	cmp rax, sob_boolean_false
 25816 00012689 0F84AD000000            	je .L_if_else_028e
 25817                                  	; preparing a tail-call
 25818                                  	; preparing a non tail-call
 25819 0001268F 488B4528                	mov rax, PARAM(1)	; param e2
 25820 00012693 50                      	push rax
 25821 00012694 6A01                    	push 1	; arg count
 25822 00012696 488B0425[15180000]      	mov rax, qword [free_var_157]	; free var vector->list
 25823 0001269E 803805                  	cmp byte [rax], T_undefined
 25824 000126A1 0F843B390000            	je L_error_fvar_undefined
 25825 000126A7 803804                  	cmp byte [rax], T_closure
 25826 000126AA 0F85B6390000            	jne L_error_non_closure
 25827 000126B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25828 000126B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25829 000126B6 50                      	push rax
 25830                                  	; preparing a non tail-call
 25831 000126B7 488B4520                	mov rax, PARAM(0)	; param e1
 25832 000126BB 50                      	push rax
 25833 000126BC 6A01                    	push 1	; arg count
 25834 000126BE 488B0425[15180000]      	mov rax, qword [free_var_157]	; free var vector->list
 25835 000126C6 803805                  	cmp byte [rax], T_undefined
 25836 000126C9 0F8413390000            	je L_error_fvar_undefined
 25837 000126CF 803804                  	cmp byte [rax], T_closure
 25838 000126D2 0F858E390000            	jne L_error_non_closure
 25839 000126D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25840 000126DB FF5009                  	call SOB_CLOSURE_CODE(rax)
 25841 000126DE 50                      	push rax
 25842 000126DF 6A02                    	push 2	; arg count
 25843 000126E1 488B0425[8C180000]      	mov rax, qword [free_var_164]	; free var equal?
 25844 000126E9 803805                  	cmp byte [rax], T_undefined
 25845 000126EC 0F84F0380000            	je L_error_fvar_undefined
 25846 000126F2 803804                  	cmp byte [rax], T_closure
 25847 000126F5 0F856B390000            	jne L_error_non_closure
 25848 000126FB FF7001                  	push SOB_CLOSURE_ENV(rax)
 25849                                  
 25850                                  	; recycling the current frame
 25851 000126FE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25852 00012701 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25853 00012704 B906000000              	mov rcx, 2 + 4
 25854 00012709 488B5D18                	mov rbx, COUNT
 25855 0001270D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25856 00012712 488D55F8                	lea rdx, [rbp - 8 * 1]
 25857                                  .L_tc_recycle_frame_loop_04a8:
 25858 00012716 4883F900                	cmp rcx, 0
 25859 0001271A 7413                    	je .L_tc_recycle_frame_done_04a8
 25860 0001271C 488B32                  	mov rsi, qword [rdx]
 25861 0001271F 488933                  	mov qword [rbx], rsi
 25862 00012722 48FFC9                  	dec rcx
 25863 00012725 4883EB08                	sub rbx, 8 * 1
 25864 00012729 4883EA08                	sub rdx, 8 * 1
 25865 0001272D EBE7                    	jmp .L_tc_recycle_frame_loop_04a8
 25866                                  .L_tc_recycle_frame_done_04a8:
 25867 0001272F 488D6308                	lea rsp, [rbx + 8 * 1]
 25868 00012733 5D                      	pop rbp	; the proc will restore it!
 25869 00012734 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25870 00012737 E9BA010000              	jmp .L_if_end_028e
 25871                                  .L_if_else_028e:
 25872                                  	; preparing a non tail-call
 25873 0001273C 488B4520                	mov rax, PARAM(0)	; param e1
 25874 00012740 50                      	push rax
 25875 00012741 6A01                    	push 1	; arg count
 25876 00012743 488B0425[EC0D0000]      	mov rax, qword [free_var_4]	; free var string?
 25877 0001274B 803805                  	cmp byte [rax], T_undefined
 25878 0001274E 0F848E380000            	je L_error_fvar_undefined
 25879 00012754 803804                  	cmp byte [rax], T_closure
 25880 00012757 0F8509390000            	jne L_error_non_closure
 25881 0001275D FF7001                  	push SOB_CLOSURE_ENV(rax)
 25882 00012760 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25883 00012763 483D[02000000]          	cmp rax, sob_boolean_false
 25884 00012769 0F84AF000000            	je .L_if_else_0292
 25885                                  	; preparing a non tail-call
 25886 0001276F 488B4528                	mov rax, PARAM(1)	; param e2
 25887 00012773 50                      	push rax
 25888 00012774 6A01                    	push 1	; arg count
 25889 00012776 488B0425[EC0D0000]      	mov rax, qword [free_var_4]	; free var string?
 25890 0001277E 803805                  	cmp byte [rax], T_undefined
 25891 00012781 0F845B380000            	je L_error_fvar_undefined
 25892 00012787 803804                  	cmp byte [rax], T_closure
 25893 0001278A 0F85D6380000            	jne L_error_non_closure
 25894 00012790 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25895 00012793 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25896 00012796 483D[02000000]          	cmp rax, sob_boolean_false
 25897 0001279C 7474                    	je .L_if_else_0293
 25898                                  	; preparing a non tail-call
 25899                                  	; preparing a non tail-call
 25900 0001279E 488B4528                	mov rax, PARAM(1)	; param e2
 25901 000127A2 50                      	push rax
 25902 000127A3 6A01                    	push 1	; arg count
 25903 000127A5 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 25904 000127AD 803805                  	cmp byte [rax], T_undefined
 25905 000127B0 0F842C380000            	je L_error_fvar_undefined
 25906 000127B6 803804                  	cmp byte [rax], T_closure
 25907 000127B9 0F85A7380000            	jne L_error_non_closure
 25908 000127BF FF7001                  	push SOB_CLOSURE_ENV(rax)
 25909 000127C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25910 000127C5 50                      	push rax
 25911                                  	; preparing a non tail-call
 25912 000127C6 488B4520                	mov rax, PARAM(0)	; param e1
 25913 000127CA 50                      	push rax
 25914 000127CB 6A01                    	push 1	; arg count
 25915 000127CD 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 25916 000127D5 803805                  	cmp byte [rax], T_undefined
 25917 000127D8 0F8404380000            	je L_error_fvar_undefined
 25918 000127DE 803804                  	cmp byte [rax], T_closure
 25919 000127E1 0F857F380000            	jne L_error_non_closure
 25920 000127E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25921 000127EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 25922 000127ED 50                      	push rax
 25923 000127EE 6A02                    	push 2	; arg count
 25924 000127F0 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 25925 000127F8 803805                  	cmp byte [rax], T_undefined
 25926 000127FB 0F84E1370000            	je L_error_fvar_undefined
 25927 00012801 803804                  	cmp byte [rax], T_closure
 25928 00012804 0F855C380000            	jne L_error_non_closure
 25929 0001280A FF7001                  	push SOB_CLOSURE_ENV(rax)
 25930 0001280D FF5009                  	call SOB_CLOSURE_CODE(rax)
 25931 00012810 EB0A                    	jmp .L_if_end_0293
 25932                                  .L_if_else_0293:
 25933 00012812 48B8-                   	mov rax, L_constants + 2
 25933 00012814 [0200000000000000] 
 25934                                  .L_if_end_0293:
 25935 0001281C EB0A                    	jmp .L_if_end_0292
 25936                                  .L_if_else_0292:
 25937 0001281E 48B8-                   	mov rax, L_constants + 2
 25937 00012820 [0200000000000000] 
 25938                                  .L_if_end_0292:
 25939 00012828 483D[02000000]          	cmp rax, sob_boolean_false
 25940 0001282E 7464                    	je .L_if_else_0291
 25941                                  	; preparing a tail-call
 25942 00012830 488B4528                	mov rax, PARAM(1)	; param e2
 25943 00012834 50                      	push rax
 25944 00012835 488B4520                	mov rax, PARAM(0)	; param e1
 25945 00012839 50                      	push rax
 25946 0001283A 6A02                    	push 2	; arg count
 25947 0001283C 488B0425[5A170000]      	mov rax, qword [free_var_146]	; free var string=?
 25948 00012844 803805                  	cmp byte [rax], T_undefined
 25949 00012847 0F8495370000            	je L_error_fvar_undefined
 25950 0001284D 803804                  	cmp byte [rax], T_closure
 25951 00012850 0F8510380000            	jne L_error_non_closure
 25952 00012856 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25953                                  
 25954                                  	; recycling the current frame
 25955 00012859 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25956 0001285C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25957 0001285F B906000000              	mov rcx, 2 + 4
 25958 00012864 488B5D18                	mov rbx, COUNT
 25959 00012868 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25960 0001286D 488D55F8                	lea rdx, [rbp - 8 * 1]
 25961                                  .L_tc_recycle_frame_loop_04a9:
 25962 00012871 4883F900                	cmp rcx, 0
 25963 00012875 7413                    	je .L_tc_recycle_frame_done_04a9
 25964 00012877 488B32                  	mov rsi, qword [rdx]
 25965 0001287A 488933                  	mov qword [rbx], rsi
 25966 0001287D 48FFC9                  	dec rcx
 25967 00012880 4883EB08                	sub rbx, 8 * 1
 25968 00012884 4883EA08                	sub rdx, 8 * 1
 25969 00012888 EBE7                    	jmp .L_tc_recycle_frame_loop_04a9
 25970                                  .L_tc_recycle_frame_done_04a9:
 25971 0001288A 488D6308                	lea rsp, [rbx + 8 * 1]
 25972 0001288E 5D                      	pop rbp	; the proc will restore it!
 25973 0001288F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25974 00012892 EB62                    	jmp .L_if_end_0291
 25975                                  .L_if_else_0291:
 25976                                  	; preparing a tail-call
 25977 00012894 488B4528                	mov rax, PARAM(1)	; param e2
 25978 00012898 50                      	push rax
 25979 00012899 488B4520                	mov rax, PARAM(0)	; param e1
 25980 0001289D 50                      	push rax
 25981 0001289E 6A02                    	push 2	; arg count
 25982 000128A0 488B0425[B5110000]      	mov rax, qword [free_var_61]	; free var eq?
 25983 000128A8 803805                  	cmp byte [rax], T_undefined
 25984 000128AB 0F8431370000            	je L_error_fvar_undefined
 25985 000128B1 803804                  	cmp byte [rax], T_closure
 25986 000128B4 0F85AC370000            	jne L_error_non_closure
 25987 000128BA FF7001                  	push SOB_CLOSURE_ENV(rax)
 25988                                  
 25989                                  	; recycling the current frame
 25990 000128BD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25991 000128C0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25992 000128C3 B906000000              	mov rcx, 2 + 4
 25993 000128C8 488B5D18                	mov rbx, COUNT
 25994 000128CC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25995 000128D1 488D55F8                	lea rdx, [rbp - 8 * 1]
 25996                                  .L_tc_recycle_frame_loop_04aa:
 25997 000128D5 4883F900                	cmp rcx, 0
 25998 000128D9 7413                    	je .L_tc_recycle_frame_done_04aa
 25999 000128DB 488B32                  	mov rsi, qword [rdx]
 26000 000128DE 488933                  	mov qword [rbx], rsi
 26001 000128E1 48FFC9                  	dec rcx
 26002 000128E4 4883EB08                	sub rbx, 8 * 1
 26003 000128E8 4883EA08                	sub rdx, 8 * 1
 26004 000128EC EBE7                    	jmp .L_tc_recycle_frame_loop_04aa
 26005                                  .L_tc_recycle_frame_done_04aa:
 26006 000128EE 488D6308                	lea rsp, [rbx + 8 * 1]
 26007 000128F2 5D                      	pop rbp	; the proc will restore it!
 26008 000128F3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26009                                  .L_if_end_0291:
 26010                                  .L_if_end_028e:
 26011                                  .L_if_end_028b:
 26012 000128F6 C9                      	leave
 26013 000128F7 C22000                  	ret AND_KILL_FRAME(2)
 26014                                  .L_lambda_simple_end_038d:	; new closure is in rax
 26015 000128FA 48890425[8C180000]      	mov qword [free_var_164], rax
 26016 00012902 48B8-                   	mov rax, sob_void
 26016 00012904 [0000000000000000] 
 26017                                  
 26018 0001290C 4889C7                  	mov rdi, rax
 26019 0001290F E80D390000              	call print_sexpr_if_not_void
 26020                                  
 26021 00012914 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26022 00012919 E8F1370000              	call malloc
 26023 0001291E 50                      	push rax
 26024 0001291F BF00000000              	mov rdi, 8 * 0	; new rib
 26025 00012924 E8E6370000              	call malloc
 26026 00012929 50                      	push rax
 26027 0001292A BF08000000              	mov rdi, 8 * 1	; extended env
 26028 0001292F E8DB370000              	call malloc
 26029 00012934 488B7D10                	mov rdi, ENV
 26030 00012938 BE00000000              	mov rsi, 0
 26031 0001293D BA01000000              	mov rdx, 1
 26032                                  .L_lambda_simple_env_loop_038e:	; ext_env[i + 1] <-- env[i]
 26033 00012942 4883FE00                	cmp rsi, 0
 26034 00012946 7410                    	je .L_lambda_simple_env_end_038e
 26035 00012948 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26036 0001294C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26037 00012950 48FFC6                  	inc rsi
 26038 00012953 48FFC2                  	inc rdx
 26039 00012956 EBEA                    	jmp .L_lambda_simple_env_loop_038e
 26040                                  .L_lambda_simple_env_end_038e:
 26041 00012958 5B                      	pop rbx
 26042 00012959 BE00000000              	mov rsi, 0
 26043                                  .L_lambda_simple_params_loop_038e:	; copy params
 26044 0001295E 4883FE00                	cmp rsi, 0
 26045 00012962 740E                    	je .L_lambda_simple_params_end_038e
 26046 00012964 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26047 00012969 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26048 0001296D 48FFC6                  	inc rsi
 26049 00012970 EBEC                    	jmp .L_lambda_simple_params_loop_038e
 26050                                  .L_lambda_simple_params_end_038e:
 26051 00012972 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26052 00012975 4889C3                  	mov rbx, rax
 26053 00012978 58                      	pop rax
 26054 00012979 C60004                  	mov byte [rax], T_closure
 26055 0001297C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26056 00012980 48C74009[8D290100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_038e
 26057 00012988 E997010000              	jmp .L_lambda_simple_end_038e
 26058                                  .L_lambda_simple_code_038e:	; lambda-simple body
 26059 0001298D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 26060 00012993 740B                    	je .L_lambda_simple_arity_check_ok_038e
 26061 00012995 FF742410                	push qword [rsp + 8 * 2]
 26062 00012999 6A02                    	push 2
 26063 0001299B E928370000              	jmp L_error_incorrect_arity_simple
 26064                                  .L_lambda_simple_arity_check_ok_038e:
 26065 000129A0 C8000000                	enter 0, 0
 26066                                  	; preparing a non tail-call
 26067 000129A4 488B4528                	mov rax, PARAM(1)	; param s
 26068 000129A8 50                      	push rax
 26069 000129A9 6A01                    	push 1	; arg count
 26070 000129AB 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 26071 000129B3 803805                  	cmp byte [rax], T_undefined
 26072 000129B6 0F8426360000            	je L_error_fvar_undefined
 26073 000129BC 803804                  	cmp byte [rax], T_closure
 26074 000129BF 0F85A1360000            	jne L_error_non_closure
 26075 000129C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26076 000129C8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26077 000129CB 483D[02000000]          	cmp rax, sob_boolean_false
 26078 000129D1 740F                    	je .L_if_else_0294
 26079 000129D3 48B8-                   	mov rax, L_constants + 2
 26079 000129D5 [0200000000000000] 
 26080 000129DD E93E010000              	jmp .L_if_end_0294
 26081                                  .L_if_else_0294:
 26082                                  	; preparing a non tail-call
 26083 000129E2 488B4520                	mov rax, PARAM(0)	; param a
 26084 000129E6 50                      	push rax
 26085                                  	; preparing a non tail-call
 26086 000129E7 488B4528                	mov rax, PARAM(1)	; param s
 26087 000129EB 50                      	push rax
 26088 000129EC 6A01                    	push 1	; arg count
 26089 000129EE 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
 26090 000129F6 803805                  	cmp byte [rax], T_undefined
 26091 000129F9 0F84E3350000            	je L_error_fvar_undefined
 26092 000129FF 803804                  	cmp byte [rax], T_closure
 26093 00012A02 0F855E360000            	jne L_error_non_closure
 26094 00012A08 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26095 00012A0B FF5009                  	call SOB_CLOSURE_CODE(rax)
 26096 00012A0E 50                      	push rax
 26097 00012A0F 6A02                    	push 2	; arg count
 26098 00012A11 488B0425[B5110000]      	mov rax, qword [free_var_61]	; free var eq?
 26099 00012A19 803805                  	cmp byte [rax], T_undefined
 26100 00012A1C 0F84C0350000            	je L_error_fvar_undefined
 26101 00012A22 803804                  	cmp byte [rax], T_closure
 26102 00012A25 0F853B360000            	jne L_error_non_closure
 26103 00012A2B FF7001                  	push SOB_CLOSURE_ENV(rax)
 26104 00012A2E FF5009                  	call SOB_CLOSURE_CODE(rax)
 26105 00012A31 483D[02000000]          	cmp rax, sob_boolean_false
 26106 00012A37 7462                    	je .L_if_else_0295
 26107                                  	; preparing a tail-call
 26108 00012A39 488B4528                	mov rax, PARAM(1)	; param s
 26109 00012A3D 50                      	push rax
 26110 00012A3E 6A01                    	push 1	; arg count
 26111 00012A40 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 26112 00012A48 803805                  	cmp byte [rax], T_undefined
 26113 00012A4B 0F8491350000            	je L_error_fvar_undefined
 26114 00012A51 803804                  	cmp byte [rax], T_closure
 26115 00012A54 0F850C360000            	jne L_error_non_closure
 26116 00012A5A FF7001                  	push SOB_CLOSURE_ENV(rax)
 26117                                  
 26118                                  	; recycling the current frame
 26119 00012A5D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26120 00012A60 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26121 00012A63 B905000000              	mov rcx, 1 + 4
 26122 00012A68 488B5D18                	mov rbx, COUNT
 26123 00012A6C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26124 00012A71 488D55F8                	lea rdx, [rbp - 8 * 1]
 26125                                  .L_tc_recycle_frame_loop_04ab:
 26126 00012A75 4883F900                	cmp rcx, 0
 26127 00012A79 7413                    	je .L_tc_recycle_frame_done_04ab
 26128 00012A7B 488B32                  	mov rsi, qword [rdx]
 26129 00012A7E 488933                  	mov qword [rbx], rsi
 26130 00012A81 48FFC9                  	dec rcx
 26131 00012A84 4883EB08                	sub rbx, 8 * 1
 26132 00012A88 4883EA08                	sub rdx, 8 * 1
 26133 00012A8C EBE7                    	jmp .L_tc_recycle_frame_loop_04ab
 26134                                  .L_tc_recycle_frame_done_04ab:
 26135 00012A8E 488D6308                	lea rsp, [rbx + 8 * 1]
 26136 00012A92 5D                      	pop rbp	; the proc will restore it!
 26137 00012A93 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26138 00012A96 E985000000              	jmp .L_if_end_0295
 26139                                  .L_if_else_0295:
 26140                                  	; preparing a tail-call
 26141                                  	; preparing a non tail-call
 26142 00012A9B 488B4528                	mov rax, PARAM(1)	; param s
 26143 00012A9F 50                      	push rax
 26144 00012AA0 6A01                    	push 1	; arg count
 26145 00012AA2 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 26146 00012AAA 803805                  	cmp byte [rax], T_undefined
 26147 00012AAD 0F842F350000            	je L_error_fvar_undefined
 26148 00012AB3 803804                  	cmp byte [rax], T_closure
 26149 00012AB6 0F85AA350000            	jne L_error_non_closure
 26150 00012ABC FF7001                  	push SOB_CLOSURE_ENV(rax)
 26151 00012ABF FF5009                  	call SOB_CLOSURE_CODE(rax)
 26152 00012AC2 50                      	push rax
 26153 00012AC3 488B4520                	mov rax, PARAM(0)	; param a
 26154 00012AC7 50                      	push rax
 26155 00012AC8 6A02                    	push 2	; arg count
 26156 00012ACA 488B0425[9D180000]      	mov rax, qword [free_var_165]	; free var assoc
 26157 00012AD2 803805                  	cmp byte [rax], T_undefined
 26158 00012AD5 0F8407350000            	je L_error_fvar_undefined
 26159 00012ADB 803804                  	cmp byte [rax], T_closure
 26160 00012ADE 0F8582350000            	jne L_error_non_closure
 26161 00012AE4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26162                                  
 26163                                  	; recycling the current frame
 26164 00012AE7 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26165 00012AEA FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26166 00012AED B906000000              	mov rcx, 2 + 4
 26167 00012AF2 488B5D18                	mov rbx, COUNT
 26168 00012AF6 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26169 00012AFB 488D55F8                	lea rdx, [rbp - 8 * 1]
 26170                                  .L_tc_recycle_frame_loop_04ac:
 26171 00012AFF 4883F900                	cmp rcx, 0
 26172 00012B03 7413                    	je .L_tc_recycle_frame_done_04ac
 26173 00012B05 488B32                  	mov rsi, qword [rdx]
 26174 00012B08 488933                  	mov qword [rbx], rsi
 26175 00012B0B 48FFC9                  	dec rcx
 26176 00012B0E 4883EB08                	sub rbx, 8 * 1
 26177 00012B12 4883EA08                	sub rdx, 8 * 1
 26178 00012B16 EBE7                    	jmp .L_tc_recycle_frame_loop_04ac
 26179                                  .L_tc_recycle_frame_done_04ac:
 26180 00012B18 488D6308                	lea rsp, [rbx + 8 * 1]
 26181 00012B1C 5D                      	pop rbp	; the proc will restore it!
 26182 00012B1D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26183                                  .L_if_end_0295:
 26184                                  .L_if_end_0294:
 26185 00012B20 C9                      	leave
 26186 00012B21 C22000                  	ret AND_KILL_FRAME(2)
 26187                                  .L_lambda_simple_end_038e:	; new closure is in rax
 26188 00012B24 48890425[9D180000]      	mov qword [free_var_165], rax
 26189 00012B2C 48B8-                   	mov rax, sob_void
 26189 00012B2E [0000000000000000] 
 26190                                  
 26191 00012B36 4889C7                  	mov rdi, rax
 26192 00012B39 E8E3360000              	call print_sexpr_if_not_void
 26193                                  
 26194                                  	; preparing a non tail-call
 26195 00012B3E 48B8-                   	mov rax, L_constants + 1881
 26195 00012B40 [5907000000000000] 
 26196 00012B48 50                      	push rax
 26197 00012B49 48B8-                   	mov rax, L_constants + 1881
 26197 00012B4B [5907000000000000] 
 26198 00012B53 50                      	push rax
 26199 00012B54 6A02                    	push 2	; arg count
 26200 00012B56 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26201 00012B5B E8AF350000              	call malloc
 26202 00012B60 50                      	push rax
 26203 00012B61 BF00000000              	mov rdi, 8 * 0	; new rib
 26204 00012B66 E8A4350000              	call malloc
 26205 00012B6B 50                      	push rax
 26206 00012B6C BF08000000              	mov rdi, 8 * 1	; extended env
 26207 00012B71 E899350000              	call malloc
 26208 00012B76 488B7D10                	mov rdi, ENV
 26209 00012B7A BE00000000              	mov rsi, 0
 26210 00012B7F BA01000000              	mov rdx, 1
 26211                                  .L_lambda_simple_env_loop_038f:	; ext_env[i + 1] <-- env[i]
 26212 00012B84 4883FE00                	cmp rsi, 0
 26213 00012B88 7410                    	je .L_lambda_simple_env_end_038f
 26214 00012B8A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26215 00012B8E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26216 00012B92 48FFC6                  	inc rsi
 26217 00012B95 48FFC2                  	inc rdx
 26218 00012B98 EBEA                    	jmp .L_lambda_simple_env_loop_038f
 26219                                  .L_lambda_simple_env_end_038f:
 26220 00012B9A 5B                      	pop rbx
 26221 00012B9B BE00000000              	mov rsi, 0
 26222                                  .L_lambda_simple_params_loop_038f:	; copy params
 26223 00012BA0 4883FE00                	cmp rsi, 0
 26224 00012BA4 740E                    	je .L_lambda_simple_params_end_038f
 26225 00012BA6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26226 00012BAB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26227 00012BAF 48FFC6                  	inc rsi
 26228 00012BB2 EBEC                    	jmp .L_lambda_simple_params_loop_038f
 26229                                  .L_lambda_simple_params_end_038f:
 26230 00012BB4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26231 00012BB7 4889C3                  	mov rbx, rax
 26232 00012BBA 58                      	pop rax
 26233 00012BBB C60004                  	mov byte [rax], T_closure
 26234 00012BBE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26235 00012BC2 48C74009[CF2B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_038f
 26236 00012BCA E914080000              	jmp .L_lambda_simple_end_038f
 26237                                  .L_lambda_simple_code_038f:	; lambda-simple body
 26238 00012BCF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 26239 00012BD5 740B                    	je .L_lambda_simple_arity_check_ok_038f
 26240 00012BD7 FF742410                	push qword [rsp + 8 * 2]
 26241 00012BDB 6A02                    	push 2
 26242 00012BDD E9E6340000              	jmp L_error_incorrect_arity_simple
 26243                                  .L_lambda_simple_arity_check_ok_038f:
 26244 00012BE2 C8000000                	enter 0, 0
 26245 00012BE6 BF08000000              	mov rdi, 8	; sob_box
 26246 00012BEB E81F350000              	call malloc
 26247 00012BF0 488B5D20                	mov rbx, PARAM(0)
 26248 00012BF4 488918                  	mov [rax], rbx
 26249 00012BF7 48894520                	mov PARAM(0), rax
 26250 00012BFB 48B8-                   	mov rax, sob_void
 26250 00012BFD [0000000000000000] 
 26251                                  
 26252 00012C05 BF08000000              	mov rdi, 8	; sob_box
 26253 00012C0A E800350000              	call malloc
 26254 00012C0F 488B5D28                	mov rbx, PARAM(1)
 26255 00012C13 488918                  	mov [rax], rbx
 26256 00012C16 48894528                	mov PARAM(1), rax
 26257 00012C1A 48B8-                   	mov rax, sob_void
 26257 00012C1C [0000000000000000] 
 26258                                  
 26259 00012C24 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26260 00012C29 E8E1340000              	call malloc
 26261 00012C2E 50                      	push rax
 26262 00012C2F BF10000000              	mov rdi, 8 * 2	; new rib
 26263 00012C34 E8D6340000              	call malloc
 26264 00012C39 50                      	push rax
 26265 00012C3A BF10000000              	mov rdi, 8 * 2	; extended env
 26266 00012C3F E8CB340000              	call malloc
 26267 00012C44 488B7D10                	mov rdi, ENV
 26268 00012C48 BE00000000              	mov rsi, 0
 26269 00012C4D BA01000000              	mov rdx, 1
 26270                                  .L_lambda_simple_env_loop_0390:	; ext_env[i + 1] <-- env[i]
 26271 00012C52 4883FE01                	cmp rsi, 1
 26272 00012C56 7410                    	je .L_lambda_simple_env_end_0390
 26273 00012C58 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26274 00012C5C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26275 00012C60 48FFC6                  	inc rsi
 26276 00012C63 48FFC2                  	inc rdx
 26277 00012C66 EBEA                    	jmp .L_lambda_simple_env_loop_0390
 26278                                  .L_lambda_simple_env_end_0390:
 26279 00012C68 5B                      	pop rbx
 26280 00012C69 BE00000000              	mov rsi, 0
 26281                                  .L_lambda_simple_params_loop_0390:	; copy params
 26282 00012C6E 4883FE02                	cmp rsi, 2
 26283 00012C72 740E                    	je .L_lambda_simple_params_end_0390
 26284 00012C74 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26285 00012C79 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26286 00012C7D 48FFC6                  	inc rsi
 26287 00012C80 EBEC                    	jmp .L_lambda_simple_params_loop_0390
 26288                                  .L_lambda_simple_params_end_0390:
 26289 00012C82 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26290 00012C85 4889C3                  	mov rbx, rax
 26291 00012C88 58                      	pop rax
 26292 00012C89 C60004                  	mov byte [rax], T_closure
 26293 00012C8C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26294 00012C90 48C74009[9D2C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0390
 26295 00012C98 E96A020000              	jmp .L_lambda_simple_end_0390
 26296                                  .L_lambda_simple_code_0390:	; lambda-simple body
 26297 00012C9D 48837C241003            	cmp qword [rsp + 8 * 2], 3
 26298 00012CA3 740B                    	je .L_lambda_simple_arity_check_ok_0390
 26299 00012CA5 FF742410                	push qword [rsp + 8 * 2]
 26300 00012CA9 6A03                    	push 3
 26301 00012CAB E918340000              	jmp L_error_incorrect_arity_simple
 26302                                  .L_lambda_simple_arity_check_ok_0390:
 26303 00012CB0 C8000000                	enter 0, 0
 26304                                  	; preparing a non tail-call
 26305 00012CB4 488B4530                	mov rax, PARAM(2)	; param s
 26306 00012CB8 50                      	push rax
 26307 00012CB9 6A01                    	push 1	; arg count
 26308 00012CBB 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 26309 00012CC3 803805                  	cmp byte [rax], T_undefined
 26310 00012CC6 0F8416330000            	je L_error_fvar_undefined
 26311 00012CCC 803804                  	cmp byte [rax], T_closure
 26312 00012CCF 0F8591330000            	jne L_error_non_closure
 26313 00012CD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26314 00012CD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26315 00012CDB 483D[02000000]          	cmp rax, sob_boolean_false
 26316 00012CE1 7409                    	je .L_if_else_0296
 26317 00012CE3 488B4520                	mov rax, PARAM(0)	; param target
 26318 00012CE7 E917020000              	jmp .L_if_end_0296
 26319                                  .L_if_else_0296:
 26320                                  	; preparing a tail-call
 26321                                  	; preparing a non tail-call
 26322                                  	; preparing a non tail-call
 26323                                  	; preparing a non tail-call
 26324 00012CEC 488B4530                	mov rax, PARAM(2)	; param s
 26325 00012CF0 50                      	push rax
 26326 00012CF1 6A01                    	push 1	; arg count
 26327 00012CF3 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 26328 00012CFB 803805                  	cmp byte [rax], T_undefined
 26329 00012CFE 0F84DE320000            	je L_error_fvar_undefined
 26330 00012D04 803804                  	cmp byte [rax], T_closure
 26331 00012D07 0F8559330000            	jne L_error_non_closure
 26332 00012D0D FF7001                  	push SOB_CLOSURE_ENV(rax)
 26333 00012D10 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26334 00012D13 50                      	push rax
 26335 00012D14 6A01                    	push 1	; arg count
 26336 00012D16 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 26337 00012D1E 803805                  	cmp byte [rax], T_undefined
 26338 00012D21 0F84BB320000            	je L_error_fvar_undefined
 26339 00012D27 803804                  	cmp byte [rax], T_closure
 26340 00012D2A 0F8536330000            	jne L_error_non_closure
 26341 00012D30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26342 00012D33 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26343 00012D36 50                      	push rax
 26344 00012D37 48B8-                   	mov rax, L_constants + 2023
 26344 00012D39 [E707000000000000] 
 26345 00012D41 50                      	push rax
 26346                                  	; preparing a non tail-call
 26347 00012D42 488B4530                	mov rax, PARAM(2)	; param s
 26348 00012D46 50                      	push rax
 26349 00012D47 6A01                    	push 1	; arg count
 26350 00012D49 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 26351 00012D51 803805                  	cmp byte [rax], T_undefined
 26352 00012D54 0F8488320000            	je L_error_fvar_undefined
 26353 00012D5A 803804                  	cmp byte [rax], T_closure
 26354 00012D5D 0F8503330000            	jne L_error_non_closure
 26355 00012D63 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26356 00012D66 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26357 00012D69 50                      	push rax
 26358 00012D6A 488B4528                	mov rax, PARAM(1)	; param i
 26359 00012D6E 50                      	push rax
 26360 00012D6F 488B4520                	mov rax, PARAM(0)	; param target
 26361 00012D73 50                      	push rax
 26362 00012D74 6A05                    	push 5	; arg count
 26363 00012D76 488B4510                	mov rax, ENV
 26364 00012D7A 488B00                  	mov rax, qword [rax + 8 * 0]
 26365 00012D7D 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 26366 00012D81 488B00                  	mov rax, qword [rax]
 26367 00012D84 803804                  	cmp byte [rax], T_closure
 26368 00012D87 0F85D9320000            	jne L_error_non_closure
 26369 00012D8D FF7001                  	push SOB_CLOSURE_ENV(rax)
 26370 00012D90 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26371 00012D93 50                      	push rax
 26372 00012D94 6A01                    	push 1	; arg count
 26373 00012D96 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26374 00012D9B E86F330000              	call malloc
 26375 00012DA0 50                      	push rax
 26376 00012DA1 BF18000000              	mov rdi, 8 * 3	; new rib
 26377 00012DA6 E864330000              	call malloc
 26378 00012DAB 50                      	push rax
 26379 00012DAC BF18000000              	mov rdi, 8 * 3	; extended env
 26380 00012DB1 E859330000              	call malloc
 26381 00012DB6 488B7D10                	mov rdi, ENV
 26382 00012DBA BE00000000              	mov rsi, 0
 26383 00012DBF BA01000000              	mov rdx, 1
 26384                                  .L_lambda_simple_env_loop_0391:	; ext_env[i + 1] <-- env[i]
 26385 00012DC4 4883FE02                	cmp rsi, 2
 26386 00012DC8 7410                    	je .L_lambda_simple_env_end_0391
 26387 00012DCA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26388 00012DCE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26389 00012DD2 48FFC6                  	inc rsi
 26390 00012DD5 48FFC2                  	inc rdx
 26391 00012DD8 EBEA                    	jmp .L_lambda_simple_env_loop_0391
 26392                                  .L_lambda_simple_env_end_0391:
 26393 00012DDA 5B                      	pop rbx
 26394 00012DDB BE00000000              	mov rsi, 0
 26395                                  .L_lambda_simple_params_loop_0391:	; copy params
 26396 00012DE0 4883FE03                	cmp rsi, 3
 26397 00012DE4 740E                    	je .L_lambda_simple_params_end_0391
 26398 00012DE6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26399 00012DEB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26400 00012DEF 48FFC6                  	inc rsi
 26401 00012DF2 EBEC                    	jmp .L_lambda_simple_params_loop_0391
 26402                                  .L_lambda_simple_params_end_0391:
 26403 00012DF4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26404 00012DF7 4889C3                  	mov rbx, rax
 26405 00012DFA 58                      	pop rax
 26406 00012DFB C60004                  	mov byte [rax], T_closure
 26407 00012DFE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26408 00012E02 48C74009[0F2E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0391
 26409 00012E0A E9AF000000              	jmp .L_lambda_simple_end_0391
 26410                                  .L_lambda_simple_code_0391:	; lambda-simple body
 26411 00012E0F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26412 00012E15 740B                    	je .L_lambda_simple_arity_check_ok_0391
 26413 00012E17 FF742410                	push qword [rsp + 8 * 2]
 26414 00012E1B 6A01                    	push 1
 26415 00012E1D E9A6320000              	jmp L_error_incorrect_arity_simple
 26416                                  .L_lambda_simple_arity_check_ok_0391:
 26417 00012E22 C8000000                	enter 0, 0
 26418                                  	; preparing a tail-call
 26419                                  	; preparing a non tail-call
 26420 00012E26 488B4510                	mov rax, ENV
 26421 00012E2A 488B00                  	mov rax, qword [rax + 8 * 0]
 26422 00012E2D 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 26423 00012E31 50                      	push rax
 26424 00012E32 6A01                    	push 1	; arg count
 26425 00012E34 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 26426 00012E3C 803805                  	cmp byte [rax], T_undefined
 26427 00012E3F 0F849D310000            	je L_error_fvar_undefined
 26428 00012E45 803804                  	cmp byte [rax], T_closure
 26429 00012E48 0F8518320000            	jne L_error_non_closure
 26430 00012E4E FF7001                  	push SOB_CLOSURE_ENV(rax)
 26431 00012E51 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26432 00012E54 50                      	push rax
 26433 00012E55 488B4520                	mov rax, PARAM(0)	; param i
 26434 00012E59 50                      	push rax
 26435 00012E5A 488B4510                	mov rax, ENV
 26436 00012E5E 488B00                  	mov rax, qword [rax + 8 * 0]
 26437 00012E61 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 26438 00012E64 50                      	push rax
 26439 00012E65 6A03                    	push 3	; arg count
 26440 00012E67 488B4510                	mov rax, ENV
 26441 00012E6B 488B4008                	mov rax, qword [rax + 8 * 1]
 26442 00012E6F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 26443 00012E72 488B00                  	mov rax, qword [rax]
 26444 00012E75 803804                  	cmp byte [rax], T_closure
 26445 00012E78 0F85E8310000            	jne L_error_non_closure
 26446 00012E7E FF7001                  	push SOB_CLOSURE_ENV(rax)
 26447                                  
 26448                                  	; recycling the current frame
 26449 00012E81 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26450 00012E84 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26451 00012E87 B907000000              	mov rcx, 3 + 4
 26452 00012E8C 488B5D18                	mov rbx, COUNT
 26453 00012E90 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26454 00012E95 488D55F8                	lea rdx, [rbp - 8 * 1]
 26455                                  .L_tc_recycle_frame_loop_04ad:
 26456 00012E99 4883F900                	cmp rcx, 0
 26457 00012E9D 7413                    	je .L_tc_recycle_frame_done_04ad
 26458 00012E9F 488B32                  	mov rsi, qword [rdx]
 26459 00012EA2 488933                  	mov qword [rbx], rsi
 26460 00012EA5 48FFC9                  	dec rcx
 26461 00012EA8 4883EB08                	sub rbx, 8 * 1
 26462 00012EAC 4883EA08                	sub rdx, 8 * 1
 26463 00012EB0 EBE7                    	jmp .L_tc_recycle_frame_loop_04ad
 26464                                  .L_tc_recycle_frame_done_04ad:
 26465 00012EB2 488D6308                	lea rsp, [rbx + 8 * 1]
 26466 00012EB6 5D                      	pop rbp	; the proc will restore it!
 26467 00012EB7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26468 00012EBA C9                      	leave
 26469 00012EBB C21800                  	ret AND_KILL_FRAME(1)
 26470                                  .L_lambda_simple_end_0391:	; new closure is in rax
 26471 00012EBE 803804                  	cmp byte [rax], T_closure
 26472 00012EC1 0F859F310000            	jne L_error_non_closure
 26473 00012EC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26474                                  
 26475                                  	; recycling the current frame
 26476 00012ECA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26477 00012ECD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26478 00012ED0 B905000000              	mov rcx, 1 + 4
 26479 00012ED5 488B5D18                	mov rbx, COUNT
 26480 00012ED9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26481 00012EDE 488D55F8                	lea rdx, [rbp - 8 * 1]
 26482                                  .L_tc_recycle_frame_loop_04ae:
 26483 00012EE2 4883F900                	cmp rcx, 0
 26484 00012EE6 7413                    	je .L_tc_recycle_frame_done_04ae
 26485 00012EE8 488B32                  	mov rsi, qword [rdx]
 26486 00012EEB 488933                  	mov qword [rbx], rsi
 26487 00012EEE 48FFC9                  	dec rcx
 26488 00012EF1 4883EB08                	sub rbx, 8 * 1
 26489 00012EF5 4883EA08                	sub rdx, 8 * 1
 26490 00012EF9 EBE7                    	jmp .L_tc_recycle_frame_loop_04ae
 26491                                  .L_tc_recycle_frame_done_04ae:
 26492 00012EFB 488D6308                	lea rsp, [rbx + 8 * 1]
 26493 00012EFF 5D                      	pop rbp	; the proc will restore it!
 26494 00012F00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26495                                  .L_if_end_0296:
 26496 00012F03 C9                      	leave
 26497 00012F04 C22800                  	ret AND_KILL_FRAME(3)
 26498                                  .L_lambda_simple_end_0390:	; new closure is in rax
 26499 00012F07 50                      	push rax
 26500 00012F08 488B4520                	mov rax, PARAM(0)	; param run
 26501 00012F0C 8F00                    	pop qword [rax]
 26502 00012F0E 48B8-                   	mov rax, sob_void
 26502 00012F10 [0000000000000000] 
 26503                                  
 26504 00012F18 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26505 00012F1D E8ED310000              	call malloc
 26506 00012F22 50                      	push rax
 26507 00012F23 BF10000000              	mov rdi, 8 * 2	; new rib
 26508 00012F28 E8E2310000              	call malloc
 26509 00012F2D 50                      	push rax
 26510 00012F2E BF10000000              	mov rdi, 8 * 2	; extended env
 26511 00012F33 E8D7310000              	call malloc
 26512 00012F38 488B7D10                	mov rdi, ENV
 26513 00012F3C BE00000000              	mov rsi, 0
 26514 00012F41 BA01000000              	mov rdx, 1
 26515                                  .L_lambda_simple_env_loop_0392:	; ext_env[i + 1] <-- env[i]
 26516 00012F46 4883FE01                	cmp rsi, 1
 26517 00012F4A 7410                    	je .L_lambda_simple_env_end_0392
 26518 00012F4C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26519 00012F50 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26520 00012F54 48FFC6                  	inc rsi
 26521 00012F57 48FFC2                  	inc rdx
 26522 00012F5A EBEA                    	jmp .L_lambda_simple_env_loop_0392
 26523                                  .L_lambda_simple_env_end_0392:
 26524 00012F5C 5B                      	pop rbx
 26525 00012F5D BE00000000              	mov rsi, 0
 26526                                  .L_lambda_simple_params_loop_0392:	; copy params
 26527 00012F62 4883FE02                	cmp rsi, 2
 26528 00012F66 740E                    	je .L_lambda_simple_params_end_0392
 26529 00012F68 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26530 00012F6D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26531 00012F71 48FFC6                  	inc rsi
 26532 00012F74 EBEC                    	jmp .L_lambda_simple_params_loop_0392
 26533                                  .L_lambda_simple_params_end_0392:
 26534 00012F76 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26535 00012F79 4889C3                  	mov rbx, rax
 26536 00012F7C 58                      	pop rax
 26537 00012F7D C60004                  	mov byte [rax], T_closure
 26538 00012F80 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26539 00012F84 48C74009[912F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0392
 26540 00012F8C E97C010000              	jmp .L_lambda_simple_end_0392
 26541                                  .L_lambda_simple_code_0392:	; lambda-simple body
 26542 00012F91 48837C241005            	cmp qword [rsp + 8 * 2], 5
 26543 00012F97 740B                    	je .L_lambda_simple_arity_check_ok_0392
 26544 00012F99 FF742410                	push qword [rsp + 8 * 2]
 26545 00012F9D 6A05                    	push 5
 26546 00012F9F E924310000              	jmp L_error_incorrect_arity_simple
 26547                                  .L_lambda_simple_arity_check_ok_0392:
 26548 00012FA4 C8000000                	enter 0, 0
 26549                                  	; preparing a non tail-call
 26550 00012FA8 488B4540                	mov rax, PARAM(4)	; param limit
 26551 00012FAC 50                      	push rax
 26552 00012FAD 488B4538                	mov rax, PARAM(3)	; param j
 26553 00012FB1 50                      	push rax
 26554 00012FB2 6A02                    	push 2	; arg count
 26555 00012FB4 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 26556 00012FBC 803805                  	cmp byte [rax], T_undefined
 26557 00012FBF 0F841D300000            	je L_error_fvar_undefined
 26558 00012FC5 803804                  	cmp byte [rax], T_closure
 26559 00012FC8 0F8598300000            	jne L_error_non_closure
 26560 00012FCE FF7001                  	push SOB_CLOSURE_ENV(rax)
 26561 00012FD1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26562 00012FD4 483D[02000000]          	cmp rax, sob_boolean_false
 26563 00012FDA 0F8425010000            	je .L_if_else_0297
 26564                                  	; preparing a non tail-call
 26565                                  	; preparing a non tail-call
 26566 00012FE0 488B4538                	mov rax, PARAM(3)	; param j
 26567 00012FE4 50                      	push rax
 26568 00012FE5 488B4530                	mov rax, PARAM(2)	; param str
 26569 00012FE9 50                      	push rax
 26570 00012FEA 6A02                    	push 2	; arg count
 26571 00012FEC 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 26572 00012FF4 803805                  	cmp byte [rax], T_undefined
 26573 00012FF7 0F84E52F0000            	je L_error_fvar_undefined
 26574 00012FFD 803804                  	cmp byte [rax], T_closure
 26575 00013000 0F8560300000            	jne L_error_non_closure
 26576 00013006 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26577 00013009 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26578 0001300C 50                      	push rax
 26579 0001300D 488B4528                	mov rax, PARAM(1)	; param i
 26580 00013011 50                      	push rax
 26581 00013012 488B4520                	mov rax, PARAM(0)	; param target
 26582 00013016 50                      	push rax
 26583 00013017 6A03                    	push 3	; arg count
 26584 00013019 488B0425[60110000]      	mov rax, qword [free_var_56]	; free var string-set!
 26585 00013021 803805                  	cmp byte [rax], T_undefined
 26586 00013024 0F84B82F0000            	je L_error_fvar_undefined
 26587 0001302A 803804                  	cmp byte [rax], T_closure
 26588 0001302D 0F8533300000            	jne L_error_non_closure
 26589 00013033 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26590 00013036 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26591                                  
 26592                                  	; preparing a tail-call
 26593 00013039 488B4540                	mov rax, PARAM(4)	; param limit
 26594 0001303D 50                      	push rax
 26595                                  	; preparing a non tail-call
 26596 0001303E 48B8-                   	mov rax, L_constants + 2158
 26596 00013040 [6E08000000000000] 
 26597 00013048 50                      	push rax
 26598 00013049 488B4538                	mov rax, PARAM(3)	; param j
 26599 0001304D 50                      	push rax
 26600 0001304E 6A02                    	push 2	; arg count
 26601 00013050 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 26602 00013058 803805                  	cmp byte [rax], T_undefined
 26603 0001305B 0F84812F0000            	je L_error_fvar_undefined
 26604 00013061 803804                  	cmp byte [rax], T_closure
 26605 00013064 0F85FC2F0000            	jne L_error_non_closure
 26606 0001306A FF7001                  	push SOB_CLOSURE_ENV(rax)
 26607 0001306D FF5009                  	call SOB_CLOSURE_CODE(rax)
 26608 00013070 50                      	push rax
 26609 00013071 488B4530                	mov rax, PARAM(2)	; param str
 26610 00013075 50                      	push rax
 26611                                  	; preparing a non tail-call
 26612 00013076 48B8-                   	mov rax, L_constants + 2158
 26612 00013078 [6E08000000000000] 
 26613 00013080 50                      	push rax
 26614 00013081 488B4528                	mov rax, PARAM(1)	; param i
 26615 00013085 50                      	push rax
 26616 00013086 6A02                    	push 2	; arg count
 26617 00013088 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 26618 00013090 803805                  	cmp byte [rax], T_undefined
 26619 00013093 0F84492F0000            	je L_error_fvar_undefined
 26620 00013099 803804                  	cmp byte [rax], T_closure
 26621 0001309C 0F85C42F0000            	jne L_error_non_closure
 26622 000130A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26623 000130A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26624 000130A8 50                      	push rax
 26625 000130A9 488B4520                	mov rax, PARAM(0)	; param target
 26626 000130AD 50                      	push rax
 26627 000130AE 6A05                    	push 5	; arg count
 26628 000130B0 488B4510                	mov rax, ENV
 26629 000130B4 488B00                  	mov rax, qword [rax + 8 * 0]
 26630 000130B7 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 26631 000130BB 488B00                  	mov rax, qword [rax]
 26632 000130BE 803804                  	cmp byte [rax], T_closure
 26633 000130C1 0F859F2F0000            	jne L_error_non_closure
 26634 000130C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26635                                  
 26636                                  	; recycling the current frame
 26637 000130CA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26638 000130CD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26639 000130D0 B909000000              	mov rcx, 5 + 4
 26640 000130D5 488B5D18                	mov rbx, COUNT
 26641 000130D9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26642 000130DE 488D55F8                	lea rdx, [rbp - 8 * 1]
 26643                                  .L_tc_recycle_frame_loop_04af:
 26644 000130E2 4883F900                	cmp rcx, 0
 26645 000130E6 7413                    	je .L_tc_recycle_frame_done_04af
 26646 000130E8 488B32                  	mov rsi, qword [rdx]
 26647 000130EB 488933                  	mov qword [rbx], rsi
 26648 000130EE 48FFC9                  	dec rcx
 26649 000130F1 4883EB08                	sub rbx, 8 * 1
 26650 000130F5 4883EA08                	sub rdx, 8 * 1
 26651 000130F9 EBE7                    	jmp .L_tc_recycle_frame_loop_04af
 26652                                  .L_tc_recycle_frame_done_04af:
 26653 000130FB 488D6308                	lea rsp, [rbx + 8 * 1]
 26654 000130FF 5D                      	pop rbp	; the proc will restore it!
 26655 00013100 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26656 00013103 EB04                    	jmp .L_if_end_0297
 26657                                  .L_if_else_0297:
 26658 00013105 488B4528                	mov rax, PARAM(1)	; param i
 26659                                  .L_if_end_0297:
 26660 00013109 C9                      	leave
 26661 0001310A C23800                  	ret AND_KILL_FRAME(5)
 26662                                  .L_lambda_simple_end_0392:	; new closure is in rax
 26663 0001310D 50                      	push rax
 26664 0001310E 488B4528                	mov rax, PARAM(1)	; param add
 26665 00013112 8F00                    	pop qword [rax]
 26666 00013114 48B8-                   	mov rax, sob_void
 26666 00013116 [0000000000000000] 
 26667                                  
 26668 0001311E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26669 00013123 E8E72F0000              	call malloc
 26670 00013128 50                      	push rax
 26671 00013129 BF10000000              	mov rdi, 8 * 2	; new rib
 26672 0001312E E8DC2F0000              	call malloc
 26673 00013133 50                      	push rax
 26674 00013134 BF10000000              	mov rdi, 8 * 2	; extended env
 26675 00013139 E8D12F0000              	call malloc
 26676 0001313E 488B7D10                	mov rdi, ENV
 26677 00013142 BE00000000              	mov rsi, 0
 26678 00013147 BA01000000              	mov rdx, 1
 26679                                  .L_lambda_opt_env_loop_007c:	; ext_env[i + 1] <-- env[i]
 26680 0001314C 4883FE01                	cmp rsi, 1
 26681 00013150 7410                    	je .L_lambda_opt_env_end_007c
 26682 00013152 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26683 00013156 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26684 0001315A 48FFC6                  	inc rsi
 26685 0001315D 48FFC2                  	inc rdx
 26686 00013160 EBEA                    	jmp .L_lambda_opt_env_loop_007c
 26687                                  .L_lambda_opt_env_end_007c:
 26688 00013162 5B                      	pop rbx
 26689 00013163 BE00000000              	mov rsi, 0
 26690                                  .L_lambda_opt_params_loop_007c:	; copy params
 26691 00013168 4883FE02                	cmp rsi, 2
 26692 0001316C 740E                    	je .L_lambda_opt_params_end_007c
 26693 0001316E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26694 00013173 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26695 00013177 48FFC6                  	inc rsi
 26696 0001317A EBEC                    	jmp .L_lambda_opt_params_loop_007c
 26697                                  .L_lambda_opt_params_end_007c:
 26698 0001317C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26699 0001317F 4889C3                  	mov rbx, rax
 26700 00013182 58                      	pop rax
 26701 00013183 C60004                  	mov byte [rax], T_closure
 26702 00013186 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26703 0001318A 48C74009[97310100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_007c
 26704 00013192 E948020000              	jmp .L_lambda_opt_end_007c
 26705                                  .L_lambda_opt_code_007c:	; lambda-opt body
 26706 00013197 48837C241000            	cmp qword [rsp + 8 * 2], 0
 26707 0001319D 0F8404010000            	je .L_lambda_opt_arity_check_exact_007c
 26708 000131A3 48837C241000            	cmp qword [rsp + 8 * 2], 0
 26709 000131A9 7F0B                    	jg .L_lambda_opt_arity_check_more_007c
 26710 000131AB FF742410                	push qword [rsp + 8 * 2]
 26711 000131AF 6A00                    	push 0
 26712 000131B1 E9262F0000              	jmp L_error_incorrect_arity_opt
 26713                                  .L_lambda_opt_arity_check_more_007c:
 26714 000131B6 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 26715 000131BB 41B900000000            	mov r9 , 0
 26716 000131C1 4989E7                  	mov r15, rsp
 26717 000131C4 4D29C8                  	sub r8, r9
 26718 000131C7 41B900000000            	mov r9, 0
 26719 000131CD 498D5F10                	lea rbx, [r15 + 8 * 2]
 26720 000131D1 498B4710                	mov rax, qword [r15 + 8 * 2]
 26721 000131D5 486BC008                	imul rax, 8
 26722 000131D9 4801C3                  	add rbx, rax
 26723 000131DC 488B13                  	mov rdx , qword [rbx]
 26724 000131DF 4989DA                  	mov r10 , rbx
 26725 000131E2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 26726 000131E7 52                      	push rdx
 26727 000131E8 53                      	push rbx
 26728 000131E9 4150                    	push r8
 26729 000131EB 4151                    	push r9
 26730 000131ED 4152                    	push r10
 26731 000131EF 4157                    	push r15
 26732 000131F1 E8192F0000              	call malloc
 26733 000131F6 415F                    	pop r15
 26734 000131F8 415A                    	pop r10
 26735 000131FA 4159                    	pop r9
 26736 000131FC 4158                    	pop r8
 26737 000131FE 5B                      	pop rbx
 26738 000131FF 5A                      	pop rdx
 26739 00013200 C60021                  	mov byte qword [rax], T_pair
 26740 00013203 48895001                	mov SOB_PAIR_CAR(rax), rdx
 26741 00013207 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 26742 0001320F 498902                  	mov qword [r10], rax
 26743 00013212 49FFC1                  	inc r9
 26744 00013215 4883EB08                	sub rbx, 8
 26745 00013219 4D39C1                  	cmp r9, r8
 26746 0001321C 743E                    	je .L_lambda_opt_stack_shrink_loop_026a
 26747                                  .L_lambda_opt_stack_shrink_loop_0269:
 26748 0001321E 488B13                  	mov rdx, qword [rbx]
 26749 00013221 53                      	push rbx
 26750 00013222 4150                    	push r8
 26751 00013224 4151                    	push r9
 26752 00013226 4152                    	push r10
 26753 00013228 4157                    	push r15
 26754 0001322A 52                      	push rdx
 26755 0001322B BF11000000              	mov rdi, (1 + 8 + 8)
 26756 00013230 E8DA2E0000              	call malloc
 26757 00013235 5A                      	pop rdx
 26758 00013236 415F                    	pop r15
 26759 00013238 415A                    	pop r10
 26760 0001323A 4159                    	pop r9
 26761 0001323C 4158                    	pop r8
 26762 0001323E 5B                      	pop rbx
 26763 0001323F C60021                  	mov byte [rax], T_pair
 26764 00013242 48895001                	mov SOB_PAIR_CAR(rax), rdx
 26765 00013246 4D8B32                  	mov r14, qword [r10]
 26766 00013249 4C897009                	mov SOB_PAIR_CDR(rax), r14
 26767 0001324D 498902                  	mov qword [r10], rax
 26768 00013250 49FFC1                  	inc r9
 26769 00013253 4883EB08                	sub rbx, 8
 26770 00013257 4D39C1                  	cmp r9, r8
 26771 0001325A 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_0269
 26772                                  .L_lambda_opt_stack_shrink_loop_026a:
 26773 0001325C 498D5710                	lea rdx, [r15 + 8 * 2]
 26774 00013260 48C70200000000          	mov qword [rdx], 0
 26775 00013267 48830201                	add qword [rdx] , 1
 26776 0001326B 4D89C1                  	mov r9, r8
 26777 0001326E 49FFC9                  	dec r9
 26778 00013271 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 26779                                  .L_lambda_opt_stack_shrink_loop_026b:
 26780 00013275 488B03                  	mov rax, qword [rbx]
 26781 00013278 498901                  	mov qword [r9], rax
 26782 0001327B 4983E908                	sub r9 , 8
 26783 0001327F 4883EB08                	sub rbx, 8
 26784 00013283 4C39FB                  	cmp rbx, r15
 26785 00013286 75ED                    	jne .L_lambda_opt_stack_shrink_loop_026b
 26786 00013288 488B03                  	mov rax, qword [rbx]
 26787 0001328B 498901                  	mov qword [r9], rax
 26788 0001328E 4D89C1                  	mov r9, r8
 26789 00013291 4983E901                	sub r9 , 1
 26790 00013295 4983F900                	cmp r9, 0
 26791 00013299 7446                    je .L_lambda_opt_stack_adjusted_007c
 26792                                  .L_lambda_opt_stack_shrink_loop_026c:
 26793 0001329B 58                      	pop rax
 26794 0001329C 49FFC9                  	dec r9
 26795 0001329F 4983F900                	cmp r9, 0
 26796 000132A3 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_026c
 26797 000132A5 EB3A                    jmp .L_lambda_opt_stack_adjusted_007c
 26798                                  .L_lambda_opt_arity_check_exact_007c:
 26799 000132A7 4989E7                  	mov r15, rsp
 26800 000132AA 498D5F10                	lea rbx, [r15 + 8 * 2 + 8 * 0]
 26801 000132AE 488B0B                  	mov rcx, qword [rbx]
 26802 000132B1 48C703[01000000]        	mov qword [rbx], sob_nil
 26803 000132B8 4883EB08                	sub rbx, 8
 26804                                  .L_lambda_opt_stack_shrink_loop_0268:
 26805 000132BC 488B13                  	mov rdx, qword [rbx]
 26806 000132BF 48890B                  	mov qword [rbx], rcx
 26807 000132C2 4C39FB                  	cmp rbx, r15
 26808 000132C5 7409                    je .L_lambda_opt_stack_shrink_loop_exit_007c
 26809 000132C7 4889D1                  	mov rcx, rdx
 26810 000132CA 4883EB08                	sub rbx, 8
 26811 000132CE EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_0268
 26812                                  .L_lambda_opt_stack_shrink_loop_exit_007c:
 26813 000132D0 52                      	push rdx
 26814 000132D1 4989E7                  	mov r15, rsp
 26815 000132D4 4983C710                	add r15, 16
 26816 000132D8 498B1F                  	mov rbx, qword [r15]
 26817 000132DB 48FFC3                  	inc rbx
 26818 000132DE 49891F                  	mov qword [r15], rbx
 26819                                  .L_lambda_opt_stack_adjusted_007c:
 26820 000132E1 C8000000                	enter 0, 0
 26821                                  	; preparing a tail-call
 26822 000132E5 488B4520                	mov rax, PARAM(0)	; param strings
 26823 000132E9 50                      	push rax
 26824 000132EA 48B8-                   	mov rax, L_constants + 2023
 26824 000132EC [E707000000000000] 
 26825 000132F4 50                      	push rax
 26826                                  	; preparing a non tail-call
 26827                                  	; preparing a non tail-call
 26828                                  	; preparing a non tail-call
 26829 000132F5 488B4520                	mov rax, PARAM(0)	; param strings
 26830 000132F9 50                      	push rax
 26831 000132FA 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 26832 00013302 803805                  	cmp byte [rax], T_undefined
 26833 00013305 0F84D72C0000            	je L_error_fvar_undefined
 26834 0001330B 50                      	push rax
 26835 0001330C 6A02                    	push 2	; arg count
 26836 0001330E 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
 26837 00013316 803805                  	cmp byte [rax], T_undefined
 26838 00013319 0F84C32C0000            	je L_error_fvar_undefined
 26839 0001331F 803804                  	cmp byte [rax], T_closure
 26840 00013322 0F853E2D0000            	jne L_error_non_closure
 26841 00013328 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26842 0001332B FF5009                  	call SOB_CLOSURE_CODE(rax)
 26843 0001332E 50                      	push rax
 26844 0001332F 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 26845 00013337 803805                  	cmp byte [rax], T_undefined
 26846 0001333A 0F84A22C0000            	je L_error_fvar_undefined
 26847 00013340 50                      	push rax
 26848 00013341 6A02                    	push 2	; arg count
 26849 00013343 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
 26850 0001334B 803805                  	cmp byte [rax], T_undefined
 26851 0001334E 0F848E2C0000            	je L_error_fvar_undefined
 26852 00013354 803804                  	cmp byte [rax], T_closure
 26853 00013357 0F85092D0000            	jne L_error_non_closure
 26854 0001335D FF7001                  	push SOB_CLOSURE_ENV(rax)
 26855 00013360 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26856 00013363 50                      	push rax
 26857 00013364 6A01                    	push 1	; arg count
 26858 00013366 488B0425[82110000]      	mov rax, qword [free_var_58]	; free var make-string
 26859 0001336E 803805                  	cmp byte [rax], T_undefined
 26860 00013371 0F846B2C0000            	je L_error_fvar_undefined
 26861 00013377 803804                  	cmp byte [rax], T_closure
 26862 0001337A 0F85E62C0000            	jne L_error_non_closure
 26863 00013380 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26864 00013383 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26865 00013386 50                      	push rax
 26866 00013387 6A03                    	push 3	; arg count
 26867 00013389 488B4510                	mov rax, ENV
 26868 0001338D 488B00                  	mov rax, qword [rax + 8 * 0]
 26869 00013390 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 26870 00013393 488B00                  	mov rax, qword [rax]
 26871 00013396 803804                  	cmp byte [rax], T_closure
 26872 00013399 0F85C72C0000            	jne L_error_non_closure
 26873 0001339F FF7001                  	push SOB_CLOSURE_ENV(rax)
 26874                                  
 26875                                  	; recycling the current frame
 26876 000133A2 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26877 000133A5 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26878 000133A8 B907000000              	mov rcx, 3 + 4
 26879 000133AD 488B5D18                	mov rbx, COUNT
 26880 000133B1 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26881 000133B6 488D55F8                	lea rdx, [rbp - 8 * 1]
 26882                                  .L_tc_recycle_frame_loop_04b0:
 26883 000133BA 4883F900                	cmp rcx, 0
 26884 000133BE 7413                    	je .L_tc_recycle_frame_done_04b0
 26885 000133C0 488B32                  	mov rsi, qword [rdx]
 26886 000133C3 488933                  	mov qword [rbx], rsi
 26887 000133C6 48FFC9                  	dec rcx
 26888 000133C9 4883EB08                	sub rbx, 8 * 1
 26889 000133CD 4883EA08                	sub rdx, 8 * 1
 26890 000133D1 EBE7                    	jmp .L_tc_recycle_frame_loop_04b0
 26891                                  .L_tc_recycle_frame_done_04b0:
 26892 000133D3 488D6308                	lea rsp, [rbx + 8 * 1]
 26893 000133D7 5D                      	pop rbp	; the proc will restore it!
 26894 000133D8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26895 000133DB C9                      	leave
 26896 000133DC C21800                  	ret AND_KILL_FRAME(1)
 26897                                  .L_lambda_opt_end_007c:	; new closure is in rax
 26898 000133DF C9                      	leave
 26899 000133E0 C22000                  	ret AND_KILL_FRAME(2)
 26900                                  .L_lambda_simple_end_038f:	; new closure is in rax
 26901 000133E3 803804                  	cmp byte [rax], T_closure
 26902 000133E6 0F857A2C0000            	jne L_error_non_closure
 26903 000133EC FF7001                  	push SOB_CLOSURE_ENV(rax)
 26904 000133EF FF5009                  	call SOB_CLOSURE_CODE(rax)
 26905 000133F2 48890425[AE180000]      	mov qword [free_var_166], rax
 26906 000133FA 48B8-                   	mov rax, sob_void
 26906 000133FC [0000000000000000] 
 26907                                  
 26908 00013404 4889C7                  	mov rdi, rax
 26909 00013407 E8152E0000              	call print_sexpr_if_not_void
 26910                                  
 26911                                  	; preparing a non tail-call
 26912 0001340C 48B8-                   	mov rax, L_constants + 1881
 26912 0001340E [5907000000000000] 
 26913 00013416 50                      	push rax
 26914 00013417 48B8-                   	mov rax, L_constants + 1881
 26914 00013419 [5907000000000000] 
 26915 00013421 50                      	push rax
 26916 00013422 6A02                    	push 2	; arg count
 26917 00013424 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26918 00013429 E8E12C0000              	call malloc
 26919 0001342E 50                      	push rax
 26920 0001342F BF00000000              	mov rdi, 8 * 0	; new rib
 26921 00013434 E8D62C0000              	call malloc
 26922 00013439 50                      	push rax
 26923 0001343A BF08000000              	mov rdi, 8 * 1	; extended env
 26924 0001343F E8CB2C0000              	call malloc
 26925 00013444 488B7D10                	mov rdi, ENV
 26926 00013448 BE00000000              	mov rsi, 0
 26927 0001344D BA01000000              	mov rdx, 1
 26928                                  .L_lambda_simple_env_loop_0393:	; ext_env[i + 1] <-- env[i]
 26929 00013452 4883FE00                	cmp rsi, 0
 26930 00013456 7410                    	je .L_lambda_simple_env_end_0393
 26931 00013458 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26932 0001345C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26933 00013460 48FFC6                  	inc rsi
 26934 00013463 48FFC2                  	inc rdx
 26935 00013466 EBEA                    	jmp .L_lambda_simple_env_loop_0393
 26936                                  .L_lambda_simple_env_end_0393:
 26937 00013468 5B                      	pop rbx
 26938 00013469 BE00000000              	mov rsi, 0
 26939                                  .L_lambda_simple_params_loop_0393:	; copy params
 26940 0001346E 4883FE00                	cmp rsi, 0
 26941 00013472 740E                    	je .L_lambda_simple_params_end_0393
 26942 00013474 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26943 00013479 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26944 0001347D 48FFC6                  	inc rsi
 26945 00013480 EBEC                    	jmp .L_lambda_simple_params_loop_0393
 26946                                  .L_lambda_simple_params_end_0393:
 26947 00013482 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26948 00013485 4889C3                  	mov rbx, rax
 26949 00013488 58                      	pop rax
 26950 00013489 C60004                  	mov byte [rax], T_closure
 26951 0001348C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26952 00013490 48C74009[9D340100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0393
 26953 00013498 E914080000              	jmp .L_lambda_simple_end_0393
 26954                                  .L_lambda_simple_code_0393:	; lambda-simple body
 26955 0001349D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 26956 000134A3 740B                    	je .L_lambda_simple_arity_check_ok_0393
 26957 000134A5 FF742410                	push qword [rsp + 8 * 2]
 26958 000134A9 6A02                    	push 2
 26959 000134AB E9182C0000              	jmp L_error_incorrect_arity_simple
 26960                                  .L_lambda_simple_arity_check_ok_0393:
 26961 000134B0 C8000000                	enter 0, 0
 26962 000134B4 BF08000000              	mov rdi, 8	; sob_box
 26963 000134B9 E8512C0000              	call malloc
 26964 000134BE 488B5D20                	mov rbx, PARAM(0)
 26965 000134C2 488918                  	mov [rax], rbx
 26966 000134C5 48894520                	mov PARAM(0), rax
 26967 000134C9 48B8-                   	mov rax, sob_void
 26967 000134CB [0000000000000000] 
 26968                                  
 26969 000134D3 BF08000000              	mov rdi, 8	; sob_box
 26970 000134D8 E8322C0000              	call malloc
 26971 000134DD 488B5D28                	mov rbx, PARAM(1)
 26972 000134E1 488918                  	mov [rax], rbx
 26973 000134E4 48894528                	mov PARAM(1), rax
 26974 000134E8 48B8-                   	mov rax, sob_void
 26974 000134EA [0000000000000000] 
 26975                                  
 26976 000134F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26977 000134F7 E8132C0000              	call malloc
 26978 000134FC 50                      	push rax
 26979 000134FD BF10000000              	mov rdi, 8 * 2	; new rib
 26980 00013502 E8082C0000              	call malloc
 26981 00013507 50                      	push rax
 26982 00013508 BF10000000              	mov rdi, 8 * 2	; extended env
 26983 0001350D E8FD2B0000              	call malloc
 26984 00013512 488B7D10                	mov rdi, ENV
 26985 00013516 BE00000000              	mov rsi, 0
 26986 0001351B BA01000000              	mov rdx, 1
 26987                                  .L_lambda_simple_env_loop_0394:	; ext_env[i + 1] <-- env[i]
 26988 00013520 4883FE01                	cmp rsi, 1
 26989 00013524 7410                    	je .L_lambda_simple_env_end_0394
 26990 00013526 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26991 0001352A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26992 0001352E 48FFC6                  	inc rsi
 26993 00013531 48FFC2                  	inc rdx
 26994 00013534 EBEA                    	jmp .L_lambda_simple_env_loop_0394
 26995                                  .L_lambda_simple_env_end_0394:
 26996 00013536 5B                      	pop rbx
 26997 00013537 BE00000000              	mov rsi, 0
 26998                                  .L_lambda_simple_params_loop_0394:	; copy params
 26999 0001353C 4883FE02                	cmp rsi, 2
 27000 00013540 740E                    	je .L_lambda_simple_params_end_0394
 27001 00013542 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27002 00013547 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27003 0001354B 48FFC6                  	inc rsi
 27004 0001354E EBEC                    	jmp .L_lambda_simple_params_loop_0394
 27005                                  .L_lambda_simple_params_end_0394:
 27006 00013550 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27007 00013553 4889C3                  	mov rbx, rax
 27008 00013556 58                      	pop rax
 27009 00013557 C60004                  	mov byte [rax], T_closure
 27010 0001355A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27011 0001355E 48C74009[6B350100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0394
 27012 00013566 E96A020000              	jmp .L_lambda_simple_end_0394
 27013                                  .L_lambda_simple_code_0394:	; lambda-simple body
 27014 0001356B 48837C241003            	cmp qword [rsp + 8 * 2], 3
 27015 00013571 740B                    	je .L_lambda_simple_arity_check_ok_0394
 27016 00013573 FF742410                	push qword [rsp + 8 * 2]
 27017 00013577 6A03                    	push 3
 27018 00013579 E94A2B0000              	jmp L_error_incorrect_arity_simple
 27019                                  .L_lambda_simple_arity_check_ok_0394:
 27020 0001357E C8000000                	enter 0, 0
 27021                                  	; preparing a non tail-call
 27022 00013582 488B4530                	mov rax, PARAM(2)	; param s
 27023 00013586 50                      	push rax
 27024 00013587 6A01                    	push 1	; arg count
 27025 00013589 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 27026 00013591 803805                  	cmp byte [rax], T_undefined
 27027 00013594 0F84482A0000            	je L_error_fvar_undefined
 27028 0001359A 803804                  	cmp byte [rax], T_closure
 27029 0001359D 0F85C32A0000            	jne L_error_non_closure
 27030 000135A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27031 000135A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27032 000135A9 483D[02000000]          	cmp rax, sob_boolean_false
 27033 000135AF 7409                    	je .L_if_else_0298
 27034 000135B1 488B4520                	mov rax, PARAM(0)	; param target
 27035 000135B5 E917020000              	jmp .L_if_end_0298
 27036                                  .L_if_else_0298:
 27037                                  	; preparing a tail-call
 27038                                  	; preparing a non tail-call
 27039                                  	; preparing a non tail-call
 27040                                  	; preparing a non tail-call
 27041 000135BA 488B4530                	mov rax, PARAM(2)	; param s
 27042 000135BE 50                      	push rax
 27043 000135BF 6A01                    	push 1	; arg count
 27044 000135C1 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 27045 000135C9 803805                  	cmp byte [rax], T_undefined
 27046 000135CC 0F84102A0000            	je L_error_fvar_undefined
 27047 000135D2 803804                  	cmp byte [rax], T_closure
 27048 000135D5 0F858B2A0000            	jne L_error_non_closure
 27049 000135DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 27050 000135DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 27051 000135E1 50                      	push rax
 27052 000135E2 6A01                    	push 1	; arg count
 27053 000135E4 488B0425[EB0E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 27054 000135EC 803805                  	cmp byte [rax], T_undefined
 27055 000135EF 0F84ED290000            	je L_error_fvar_undefined
 27056 000135F5 803804                  	cmp byte [rax], T_closure
 27057 000135F8 0F85682A0000            	jne L_error_non_closure
 27058 000135FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 27059 00013601 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27060 00013604 50                      	push rax
 27061 00013605 48B8-                   	mov rax, L_constants + 2023
 27061 00013607 [E707000000000000] 
 27062 0001360F 50                      	push rax
 27063                                  	; preparing a non tail-call
 27064 00013610 488B4530                	mov rax, PARAM(2)	; param s
 27065 00013614 50                      	push rax
 27066 00013615 6A01                    	push 1	; arg count
 27067 00013617 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 27068 0001361F 803805                  	cmp byte [rax], T_undefined
 27069 00013622 0F84BA290000            	je L_error_fvar_undefined
 27070 00013628 803804                  	cmp byte [rax], T_closure
 27071 0001362B 0F85352A0000            	jne L_error_non_closure
 27072 00013631 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27073 00013634 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27074 00013637 50                      	push rax
 27075 00013638 488B4528                	mov rax, PARAM(1)	; param i
 27076 0001363C 50                      	push rax
 27077 0001363D 488B4520                	mov rax, PARAM(0)	; param target
 27078 00013641 50                      	push rax
 27079 00013642 6A05                    	push 5	; arg count
 27080 00013644 488B4510                	mov rax, ENV
 27081 00013648 488B00                  	mov rax, qword [rax + 8 * 0]
 27082 0001364B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 27083 0001364F 488B00                  	mov rax, qword [rax]
 27084 00013652 803804                  	cmp byte [rax], T_closure
 27085 00013655 0F850B2A0000            	jne L_error_non_closure
 27086 0001365B FF7001                  	push SOB_CLOSURE_ENV(rax)
 27087 0001365E FF5009                  	call SOB_CLOSURE_CODE(rax)
 27088 00013661 50                      	push rax
 27089 00013662 6A01                    	push 1	; arg count
 27090 00013664 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27091 00013669 E8A12A0000              	call malloc
 27092 0001366E 50                      	push rax
 27093 0001366F BF18000000              	mov rdi, 8 * 3	; new rib
 27094 00013674 E8962A0000              	call malloc
 27095 00013679 50                      	push rax
 27096 0001367A BF18000000              	mov rdi, 8 * 3	; extended env
 27097 0001367F E88B2A0000              	call malloc
 27098 00013684 488B7D10                	mov rdi, ENV
 27099 00013688 BE00000000              	mov rsi, 0
 27100 0001368D BA01000000              	mov rdx, 1
 27101                                  .L_lambda_simple_env_loop_0395:	; ext_env[i + 1] <-- env[i]
 27102 00013692 4883FE02                	cmp rsi, 2
 27103 00013696 7410                    	je .L_lambda_simple_env_end_0395
 27104 00013698 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27105 0001369C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27106 000136A0 48FFC6                  	inc rsi
 27107 000136A3 48FFC2                  	inc rdx
 27108 000136A6 EBEA                    	jmp .L_lambda_simple_env_loop_0395
 27109                                  .L_lambda_simple_env_end_0395:
 27110 000136A8 5B                      	pop rbx
 27111 000136A9 BE00000000              	mov rsi, 0
 27112                                  .L_lambda_simple_params_loop_0395:	; copy params
 27113 000136AE 4883FE03                	cmp rsi, 3
 27114 000136B2 740E                    	je .L_lambda_simple_params_end_0395
 27115 000136B4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27116 000136B9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27117 000136BD 48FFC6                  	inc rsi
 27118 000136C0 EBEC                    	jmp .L_lambda_simple_params_loop_0395
 27119                                  .L_lambda_simple_params_end_0395:
 27120 000136C2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27121 000136C5 4889C3                  	mov rbx, rax
 27122 000136C8 58                      	pop rax
 27123 000136C9 C60004                  	mov byte [rax], T_closure
 27124 000136CC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27125 000136D0 48C74009[DD360100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0395
 27126 000136D8 E9AF000000              	jmp .L_lambda_simple_end_0395
 27127                                  .L_lambda_simple_code_0395:	; lambda-simple body
 27128 000136DD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27129 000136E3 740B                    	je .L_lambda_simple_arity_check_ok_0395
 27130 000136E5 FF742410                	push qword [rsp + 8 * 2]
 27131 000136E9 6A01                    	push 1
 27132 000136EB E9D8290000              	jmp L_error_incorrect_arity_simple
 27133                                  .L_lambda_simple_arity_check_ok_0395:
 27134 000136F0 C8000000                	enter 0, 0
 27135                                  	; preparing a tail-call
 27136                                  	; preparing a non tail-call
 27137 000136F4 488B4510                	mov rax, ENV
 27138 000136F8 488B00                  	mov rax, qword [rax + 8 * 0]
 27139 000136FB 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 27140 000136FF 50                      	push rax
 27141 00013700 6A01                    	push 1	; arg count
 27142 00013702 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 27143 0001370A 803805                  	cmp byte [rax], T_undefined
 27144 0001370D 0F84CF280000            	je L_error_fvar_undefined
 27145 00013713 803804                  	cmp byte [rax], T_closure
 27146 00013716 0F854A290000            	jne L_error_non_closure
 27147 0001371C FF7001                  	push SOB_CLOSURE_ENV(rax)
 27148 0001371F FF5009                  	call SOB_CLOSURE_CODE(rax)
 27149 00013722 50                      	push rax
 27150 00013723 488B4520                	mov rax, PARAM(0)	; param i
 27151 00013727 50                      	push rax
 27152 00013728 488B4510                	mov rax, ENV
 27153 0001372C 488B00                  	mov rax, qword [rax + 8 * 0]
 27154 0001372F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 27155 00013732 50                      	push rax
 27156 00013733 6A03                    	push 3	; arg count
 27157 00013735 488B4510                	mov rax, ENV
 27158 00013739 488B4008                	mov rax, qword [rax + 8 * 1]
 27159 0001373D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27160 00013740 488B00                  	mov rax, qword [rax]
 27161 00013743 803804                  	cmp byte [rax], T_closure
 27162 00013746 0F851A290000            	jne L_error_non_closure
 27163 0001374C FF7001                  	push SOB_CLOSURE_ENV(rax)
 27164                                  
 27165                                  	; recycling the current frame
 27166 0001374F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27167 00013752 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27168 00013755 B907000000              	mov rcx, 3 + 4
 27169 0001375A 488B5D18                	mov rbx, COUNT
 27170 0001375E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27171 00013763 488D55F8                	lea rdx, [rbp - 8 * 1]
 27172                                  .L_tc_recycle_frame_loop_04b1:
 27173 00013767 4883F900                	cmp rcx, 0
 27174 0001376B 7413                    	je .L_tc_recycle_frame_done_04b1
 27175 0001376D 488B32                  	mov rsi, qword [rdx]
 27176 00013770 488933                  	mov qword [rbx], rsi
 27177 00013773 48FFC9                  	dec rcx
 27178 00013776 4883EB08                	sub rbx, 8 * 1
 27179 0001377A 4883EA08                	sub rdx, 8 * 1
 27180 0001377E EBE7                    	jmp .L_tc_recycle_frame_loop_04b1
 27181                                  .L_tc_recycle_frame_done_04b1:
 27182 00013780 488D6308                	lea rsp, [rbx + 8 * 1]
 27183 00013784 5D                      	pop rbp	; the proc will restore it!
 27184 00013785 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27185 00013788 C9                      	leave
 27186 00013789 C21800                  	ret AND_KILL_FRAME(1)
 27187                                  .L_lambda_simple_end_0395:	; new closure is in rax
 27188 0001378C 803804                  	cmp byte [rax], T_closure
 27189 0001378F 0F85D1280000            	jne L_error_non_closure
 27190 00013795 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27191                                  
 27192                                  	; recycling the current frame
 27193 00013798 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27194 0001379B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27195 0001379E B905000000              	mov rcx, 1 + 4
 27196 000137A3 488B5D18                	mov rbx, COUNT
 27197 000137A7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27198 000137AC 488D55F8                	lea rdx, [rbp - 8 * 1]
 27199                                  .L_tc_recycle_frame_loop_04b2:
 27200 000137B0 4883F900                	cmp rcx, 0
 27201 000137B4 7413                    	je .L_tc_recycle_frame_done_04b2
 27202 000137B6 488B32                  	mov rsi, qword [rdx]
 27203 000137B9 488933                  	mov qword [rbx], rsi
 27204 000137BC 48FFC9                  	dec rcx
 27205 000137BF 4883EB08                	sub rbx, 8 * 1
 27206 000137C3 4883EA08                	sub rdx, 8 * 1
 27207 000137C7 EBE7                    	jmp .L_tc_recycle_frame_loop_04b2
 27208                                  .L_tc_recycle_frame_done_04b2:
 27209 000137C9 488D6308                	lea rsp, [rbx + 8 * 1]
 27210 000137CD 5D                      	pop rbp	; the proc will restore it!
 27211 000137CE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27212                                  .L_if_end_0298:
 27213 000137D1 C9                      	leave
 27214 000137D2 C22800                  	ret AND_KILL_FRAME(3)
 27215                                  .L_lambda_simple_end_0394:	; new closure is in rax
 27216 000137D5 50                      	push rax
 27217 000137D6 488B4520                	mov rax, PARAM(0)	; param run
 27218 000137DA 8F00                    	pop qword [rax]
 27219 000137DC 48B8-                   	mov rax, sob_void
 27219 000137DE [0000000000000000] 
 27220                                  
 27221 000137E6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27222 000137EB E81F290000              	call malloc
 27223 000137F0 50                      	push rax
 27224 000137F1 BF10000000              	mov rdi, 8 * 2	; new rib
 27225 000137F6 E814290000              	call malloc
 27226 000137FB 50                      	push rax
 27227 000137FC BF10000000              	mov rdi, 8 * 2	; extended env
 27228 00013801 E809290000              	call malloc
 27229 00013806 488B7D10                	mov rdi, ENV
 27230 0001380A BE00000000              	mov rsi, 0
 27231 0001380F BA01000000              	mov rdx, 1
 27232                                  .L_lambda_simple_env_loop_0396:	; ext_env[i + 1] <-- env[i]
 27233 00013814 4883FE01                	cmp rsi, 1
 27234 00013818 7410                    	je .L_lambda_simple_env_end_0396
 27235 0001381A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27236 0001381E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27237 00013822 48FFC6                  	inc rsi
 27238 00013825 48FFC2                  	inc rdx
 27239 00013828 EBEA                    	jmp .L_lambda_simple_env_loop_0396
 27240                                  .L_lambda_simple_env_end_0396:
 27241 0001382A 5B                      	pop rbx
 27242 0001382B BE00000000              	mov rsi, 0
 27243                                  .L_lambda_simple_params_loop_0396:	; copy params
 27244 00013830 4883FE02                	cmp rsi, 2
 27245 00013834 740E                    	je .L_lambda_simple_params_end_0396
 27246 00013836 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27247 0001383B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27248 0001383F 48FFC6                  	inc rsi
 27249 00013842 EBEC                    	jmp .L_lambda_simple_params_loop_0396
 27250                                  .L_lambda_simple_params_end_0396:
 27251 00013844 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27252 00013847 4889C3                  	mov rbx, rax
 27253 0001384A 58                      	pop rax
 27254 0001384B C60004                  	mov byte [rax], T_closure
 27255 0001384E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27256 00013852 48C74009[5F380100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0396
 27257 0001385A E97C010000              	jmp .L_lambda_simple_end_0396
 27258                                  .L_lambda_simple_code_0396:	; lambda-simple body
 27259 0001385F 48837C241005            	cmp qword [rsp + 8 * 2], 5
 27260 00013865 740B                    	je .L_lambda_simple_arity_check_ok_0396
 27261 00013867 FF742410                	push qword [rsp + 8 * 2]
 27262 0001386B 6A05                    	push 5
 27263 0001386D E956280000              	jmp L_error_incorrect_arity_simple
 27264                                  .L_lambda_simple_arity_check_ok_0396:
 27265 00013872 C8000000                	enter 0, 0
 27266                                  	; preparing a non tail-call
 27267 00013876 488B4540                	mov rax, PARAM(4)	; param limit
 27268 0001387A 50                      	push rax
 27269 0001387B 488B4538                	mov rax, PARAM(3)	; param j
 27270 0001387F 50                      	push rax
 27271 00013880 6A02                    	push 2	; arg count
 27272 00013882 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 27273 0001388A 803805                  	cmp byte [rax], T_undefined
 27274 0001388D 0F844F270000            	je L_error_fvar_undefined
 27275 00013893 803804                  	cmp byte [rax], T_closure
 27276 00013896 0F85CA270000            	jne L_error_non_closure
 27277 0001389C FF7001                  	push SOB_CLOSURE_ENV(rax)
 27278 0001389F FF5009                  	call SOB_CLOSURE_CODE(rax)
 27279 000138A2 483D[02000000]          	cmp rax, sob_boolean_false
 27280 000138A8 0F8425010000            	je .L_if_else_0299
 27281                                  	; preparing a non tail-call
 27282                                  	; preparing a non tail-call
 27283 000138AE 488B4538                	mov rax, PARAM(3)	; param j
 27284 000138B2 50                      	push rax
 27285 000138B3 488B4530                	mov rax, PARAM(2)	; param vec
 27286 000138B7 50                      	push rax
 27287 000138B8 6A02                    	push 2	; arg count
 27288 000138BA 488B0425[3E110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 27289 000138C2 803805                  	cmp byte [rax], T_undefined
 27290 000138C5 0F8417270000            	je L_error_fvar_undefined
 27291 000138CB 803804                  	cmp byte [rax], T_closure
 27292 000138CE 0F8592270000            	jne L_error_non_closure
 27293 000138D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27294 000138D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27295 000138DA 50                      	push rax
 27296 000138DB 488B4528                	mov rax, PARAM(1)	; param i
 27297 000138DF 50                      	push rax
 27298 000138E0 488B4520                	mov rax, PARAM(0)	; param target
 27299 000138E4 50                      	push rax
 27300 000138E5 6A03                    	push 3	; arg count
 27301 000138E7 488B0425[4F110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 27302 000138EF 803805                  	cmp byte [rax], T_undefined
 27303 000138F2 0F84EA260000            	je L_error_fvar_undefined
 27304 000138F8 803804                  	cmp byte [rax], T_closure
 27305 000138FB 0F8565270000            	jne L_error_non_closure
 27306 00013901 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27307 00013904 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27308                                  
 27309                                  	; preparing a tail-call
 27310 00013907 488B4540                	mov rax, PARAM(4)	; param limit
 27311 0001390B 50                      	push rax
 27312                                  	; preparing a non tail-call
 27313 0001390C 48B8-                   	mov rax, L_constants + 2158
 27313 0001390E [6E08000000000000] 
 27314 00013916 50                      	push rax
 27315 00013917 488B4538                	mov rax, PARAM(3)	; param j
 27316 0001391B 50                      	push rax
 27317 0001391C 6A02                    	push 2	; arg count
 27318 0001391E 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 27319 00013926 803805                  	cmp byte [rax], T_undefined
 27320 00013929 0F84B3260000            	je L_error_fvar_undefined
 27321 0001392F 803804                  	cmp byte [rax], T_closure
 27322 00013932 0F852E270000            	jne L_error_non_closure
 27323 00013938 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27324 0001393B FF5009                  	call SOB_CLOSURE_CODE(rax)
 27325 0001393E 50                      	push rax
 27326 0001393F 488B4530                	mov rax, PARAM(2)	; param vec
 27327 00013943 50                      	push rax
 27328                                  	; preparing a non tail-call
 27329 00013944 48B8-                   	mov rax, L_constants + 2158
 27329 00013946 [6E08000000000000] 
 27330 0001394E 50                      	push rax
 27331 0001394F 488B4528                	mov rax, PARAM(1)	; param i
 27332 00013953 50                      	push rax
 27333 00013954 6A02                    	push 2	; arg count
 27334 00013956 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 27335 0001395E 803805                  	cmp byte [rax], T_undefined
 27336 00013961 0F847B260000            	je L_error_fvar_undefined
 27337 00013967 803804                  	cmp byte [rax], T_closure
 27338 0001396A 0F85F6260000            	jne L_error_non_closure
 27339 00013970 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27340 00013973 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27341 00013976 50                      	push rax
 27342 00013977 488B4520                	mov rax, PARAM(0)	; param target
 27343 0001397B 50                      	push rax
 27344 0001397C 6A05                    	push 5	; arg count
 27345 0001397E 488B4510                	mov rax, ENV
 27346 00013982 488B00                  	mov rax, qword [rax + 8 * 0]
 27347 00013985 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 27348 00013989 488B00                  	mov rax, qword [rax]
 27349 0001398C 803804                  	cmp byte [rax], T_closure
 27350 0001398F 0F85D1260000            	jne L_error_non_closure
 27351 00013995 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27352                                  
 27353                                  	; recycling the current frame
 27354 00013998 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27355 0001399B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27356 0001399E B909000000              	mov rcx, 5 + 4
 27357 000139A3 488B5D18                	mov rbx, COUNT
 27358 000139A7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27359 000139AC 488D55F8                	lea rdx, [rbp - 8 * 1]
 27360                                  .L_tc_recycle_frame_loop_04b3:
 27361 000139B0 4883F900                	cmp rcx, 0
 27362 000139B4 7413                    	je .L_tc_recycle_frame_done_04b3
 27363 000139B6 488B32                  	mov rsi, qword [rdx]
 27364 000139B9 488933                  	mov qword [rbx], rsi
 27365 000139BC 48FFC9                  	dec rcx
 27366 000139BF 4883EB08                	sub rbx, 8 * 1
 27367 000139C3 4883EA08                	sub rdx, 8 * 1
 27368 000139C7 EBE7                    	jmp .L_tc_recycle_frame_loop_04b3
 27369                                  .L_tc_recycle_frame_done_04b3:
 27370 000139C9 488D6308                	lea rsp, [rbx + 8 * 1]
 27371 000139CD 5D                      	pop rbp	; the proc will restore it!
 27372 000139CE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27373 000139D1 EB04                    	jmp .L_if_end_0299
 27374                                  .L_if_else_0299:
 27375 000139D3 488B4528                	mov rax, PARAM(1)	; param i
 27376                                  .L_if_end_0299:
 27377 000139D7 C9                      	leave
 27378 000139D8 C23800                  	ret AND_KILL_FRAME(5)
 27379                                  .L_lambda_simple_end_0396:	; new closure is in rax
 27380 000139DB 50                      	push rax
 27381 000139DC 488B4528                	mov rax, PARAM(1)	; param add
 27382 000139E0 8F00                    	pop qword [rax]
 27383 000139E2 48B8-                   	mov rax, sob_void
 27383 000139E4 [0000000000000000] 
 27384                                  
 27385 000139EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27386 000139F1 E819270000              	call malloc
 27387 000139F6 50                      	push rax
 27388 000139F7 BF10000000              	mov rdi, 8 * 2	; new rib
 27389 000139FC E80E270000              	call malloc
 27390 00013A01 50                      	push rax
 27391 00013A02 BF10000000              	mov rdi, 8 * 2	; extended env
 27392 00013A07 E803270000              	call malloc
 27393 00013A0C 488B7D10                	mov rdi, ENV
 27394 00013A10 BE00000000              	mov rsi, 0
 27395 00013A15 BA01000000              	mov rdx, 1
 27396                                  .L_lambda_opt_env_loop_007d:	; ext_env[i + 1] <-- env[i]
 27397 00013A1A 4883FE01                	cmp rsi, 1
 27398 00013A1E 7410                    	je .L_lambda_opt_env_end_007d
 27399 00013A20 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27400 00013A24 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27401 00013A28 48FFC6                  	inc rsi
 27402 00013A2B 48FFC2                  	inc rdx
 27403 00013A2E EBEA                    	jmp .L_lambda_opt_env_loop_007d
 27404                                  .L_lambda_opt_env_end_007d:
 27405 00013A30 5B                      	pop rbx
 27406 00013A31 BE00000000              	mov rsi, 0
 27407                                  .L_lambda_opt_params_loop_007d:	; copy params
 27408 00013A36 4883FE02                	cmp rsi, 2
 27409 00013A3A 740E                    	je .L_lambda_opt_params_end_007d
 27410 00013A3C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27411 00013A41 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27412 00013A45 48FFC6                  	inc rsi
 27413 00013A48 EBEC                    	jmp .L_lambda_opt_params_loop_007d
 27414                                  .L_lambda_opt_params_end_007d:
 27415 00013A4A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27416 00013A4D 4889C3                  	mov rbx, rax
 27417 00013A50 58                      	pop rax
 27418 00013A51 C60004                  	mov byte [rax], T_closure
 27419 00013A54 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27420 00013A58 48C74009[653A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_007d
 27421 00013A60 E948020000              	jmp .L_lambda_opt_end_007d
 27422                                  .L_lambda_opt_code_007d:	; lambda-opt body
 27423 00013A65 48837C241000            	cmp qword [rsp + 8 * 2], 0
 27424 00013A6B 0F8404010000            	je .L_lambda_opt_arity_check_exact_007d
 27425 00013A71 48837C241000            	cmp qword [rsp + 8 * 2], 0
 27426 00013A77 7F0B                    	jg .L_lambda_opt_arity_check_more_007d
 27427 00013A79 FF742410                	push qword [rsp + 8 * 2]
 27428 00013A7D 6A00                    	push 0
 27429 00013A7F E958260000              	jmp L_error_incorrect_arity_opt
 27430                                  .L_lambda_opt_arity_check_more_007d:
 27431 00013A84 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 27432 00013A89 41B900000000            	mov r9 , 0
 27433 00013A8F 4989E7                  	mov r15, rsp
 27434 00013A92 4D29C8                  	sub r8, r9
 27435 00013A95 41B900000000            	mov r9, 0
 27436 00013A9B 498D5F10                	lea rbx, [r15 + 8 * 2]
 27437 00013A9F 498B4710                	mov rax, qword [r15 + 8 * 2]
 27438 00013AA3 486BC008                	imul rax, 8
 27439 00013AA7 4801C3                  	add rbx, rax
 27440 00013AAA 488B13                  	mov rdx , qword [rbx]
 27441 00013AAD 4989DA                  	mov r10 , rbx
 27442 00013AB0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob pair
 27443 00013AB5 52                      	push rdx
 27444 00013AB6 53                      	push rbx
 27445 00013AB7 4150                    	push r8
 27446 00013AB9 4151                    	push r9
 27447 00013ABB 4152                    	push r10
 27448 00013ABD 4157                    	push r15
 27449 00013ABF E84B260000              	call malloc
 27450 00013AC4 415F                    	pop r15
 27451 00013AC6 415A                    	pop r10
 27452 00013AC8 4159                    	pop r9
 27453 00013ACA 4158                    	pop r8
 27454 00013ACC 5B                      	pop rbx
 27455 00013ACD 5A                      	pop rdx
 27456 00013ACE C60021                  	mov byte qword [rax], T_pair
 27457 00013AD1 48895001                	mov SOB_PAIR_CAR(rax), rdx
 27458 00013AD5 48C74009[01000000]      	mov SOB_PAIR_CDR(rax), sob_nil
 27459 00013ADD 498902                  	mov qword [r10], rax
 27460 00013AE0 49FFC1                  	inc r9
 27461 00013AE3 4883EB08                	sub rbx, 8
 27462 00013AE7 4D39C1                  	cmp r9, r8
 27463 00013AEA 743E                    	je .L_lambda_opt_stack_shrink_loop_026f
 27464                                  .L_lambda_opt_stack_shrink_loop_026e:
 27465 00013AEC 488B13                  	mov rdx, qword [rbx]
 27466 00013AEF 53                      	push rbx
 27467 00013AF0 4150                    	push r8
 27468 00013AF2 4151                    	push r9
 27469 00013AF4 4152                    	push r10
 27470 00013AF6 4157                    	push r15
 27471 00013AF8 52                      	push rdx
 27472 00013AF9 BF11000000              	mov rdi, (1 + 8 + 8)
 27473 00013AFE E80C260000              	call malloc
 27474 00013B03 5A                      	pop rdx
 27475 00013B04 415F                    	pop r15
 27476 00013B06 415A                    	pop r10
 27477 00013B08 4159                    	pop r9
 27478 00013B0A 4158                    	pop r8
 27479 00013B0C 5B                      	pop rbx
 27480 00013B0D C60021                  	mov byte [rax], T_pair
 27481 00013B10 48895001                	mov SOB_PAIR_CAR(rax), rdx
 27482 00013B14 4D8B32                  	mov r14, qword [r10]
 27483 00013B17 4C897009                	mov SOB_PAIR_CDR(rax), r14
 27484 00013B1B 498902                  	mov qword [r10], rax
 27485 00013B1E 49FFC1                  	inc r9
 27486 00013B21 4883EB08                	sub rbx, 8
 27487 00013B25 4D39C1                  	cmp r9, r8
 27488 00013B28 7CC2                    	jl .L_lambda_opt_stack_shrink_loop_026e
 27489                                  .L_lambda_opt_stack_shrink_loop_026f:
 27490 00013B2A 498D5710                	lea rdx, [r15 + 8 * 2]
 27491 00013B2E 48C70200000000          	mov qword [rdx], 0
 27492 00013B35 48830201                	add qword [rdx] , 1
 27493 00013B39 4D89C1                  	mov r9, r8
 27494 00013B3C 49FFC9                  	dec r9
 27495 00013B3F 4E8D0CCB                	lea r9, [rbx + 8 * r9]
 27496                                  .L_lambda_opt_stack_shrink_loop_0270:
 27497 00013B43 488B03                  	mov rax, qword [rbx]
 27498 00013B46 498901                  	mov qword [r9], rax
 27499 00013B49 4983E908                	sub r9 , 8
 27500 00013B4D 4883EB08                	sub rbx, 8
 27501 00013B51 4C39FB                  	cmp rbx, r15
 27502 00013B54 75ED                    	jne .L_lambda_opt_stack_shrink_loop_0270
 27503 00013B56 488B03                  	mov rax, qword [rbx]
 27504 00013B59 498901                  	mov qword [r9], rax
 27505 00013B5C 4D89C1                  	mov r9, r8
 27506 00013B5F 4983E901                	sub r9 , 1
 27507 00013B63 4983F900                	cmp r9, 0
 27508 00013B67 7446                    je .L_lambda_opt_stack_adjusted_007d
 27509                                  .L_lambda_opt_stack_shrink_loop_0271:
 27510 00013B69 58                      	pop rax
 27511 00013B6A 49FFC9                  	dec r9
 27512 00013B6D 4983F900                	cmp r9, 0
 27513 00013B71 7FF6                    	jg .L_lambda_opt_stack_shrink_loop_0271
 27514 00013B73 EB3A                    jmp .L_lambda_opt_stack_adjusted_007d
 27515                                  .L_lambda_opt_arity_check_exact_007d:
 27516 00013B75 4989E7                  	mov r15, rsp
 27517 00013B78 498D5F10                	lea rbx, [r15 + 8 * 2 + 8 * 0]
 27518 00013B7C 488B0B                  	mov rcx, qword [rbx]
 27519 00013B7F 48C703[01000000]        	mov qword [rbx], sob_nil
 27520 00013B86 4883EB08                	sub rbx, 8
 27521                                  .L_lambda_opt_stack_shrink_loop_026d:
 27522 00013B8A 488B13                  	mov rdx, qword [rbx]
 27523 00013B8D 48890B                  	mov qword [rbx], rcx
 27524 00013B90 4C39FB                  	cmp rbx, r15
 27525 00013B93 7409                    je .L_lambda_opt_stack_shrink_loop_exit_007d
 27526 00013B95 4889D1                  	mov rcx, rdx
 27527 00013B98 4883EB08                	sub rbx, 8
 27528 00013B9C EBEC                    	jmp .L_lambda_opt_stack_shrink_loop_026d
 27529                                  .L_lambda_opt_stack_shrink_loop_exit_007d:
 27530 00013B9E 52                      	push rdx
 27531 00013B9F 4989E7                  	mov r15, rsp
 27532 00013BA2 4983C710                	add r15, 16
 27533 00013BA6 498B1F                  	mov rbx, qword [r15]
 27534 00013BA9 48FFC3                  	inc rbx
 27535 00013BAC 49891F                  	mov qword [r15], rbx
 27536                                  .L_lambda_opt_stack_adjusted_007d:
 27537 00013BAF C8000000                	enter 0, 0
 27538                                  	; preparing a tail-call
 27539 00013BB3 488B4520                	mov rax, PARAM(0)	; param vectors
 27540 00013BB7 50                      	push rax
 27541 00013BB8 48B8-                   	mov rax, L_constants + 2023
 27541 00013BBA [E707000000000000] 
 27542 00013BC2 50                      	push rax
 27543                                  	; preparing a non tail-call
 27544                                  	; preparing a non tail-call
 27545                                  	; preparing a non tail-call
 27546 00013BC3 488B4520                	mov rax, PARAM(0)	; param vectors
 27547 00013BC7 50                      	push rax
 27548 00013BC8 488B0425[EB0E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 27549 00013BD0 803805                  	cmp byte [rax], T_undefined
 27550 00013BD3 0F8409240000            	je L_error_fvar_undefined
 27551 00013BD9 50                      	push rax
 27552 00013BDA 6A02                    	push 2	; arg count
 27553 00013BDC 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
 27554 00013BE4 803805                  	cmp byte [rax], T_undefined
 27555 00013BE7 0F84F5230000            	je L_error_fvar_undefined
 27556 00013BED 803804                  	cmp byte [rax], T_closure
 27557 00013BF0 0F8570240000            	jne L_error_non_closure
 27558 00013BF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27559 00013BF9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27560 00013BFC 50                      	push rax
 27561 00013BFD 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 27562 00013C05 803805                  	cmp byte [rax], T_undefined
 27563 00013C08 0F84D4230000            	je L_error_fvar_undefined
 27564 00013C0E 50                      	push rax
 27565 00013C0F 6A02                    	push 2	; arg count
 27566 00013C11 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
 27567 00013C19 803805                  	cmp byte [rax], T_undefined
 27568 00013C1C 0F84C0230000            	je L_error_fvar_undefined
 27569 00013C22 803804                  	cmp byte [rax], T_closure
 27570 00013C25 0F853B240000            	jne L_error_non_closure
 27571 00013C2B FF7001                  	push SOB_CLOSURE_ENV(rax)
 27572 00013C2E FF5009                  	call SOB_CLOSURE_CODE(rax)
 27573 00013C31 50                      	push rax
 27574 00013C32 6A01                    	push 1	; arg count
 27575 00013C34 488B0425[71110000]      	mov rax, qword [free_var_57]	; free var make-vector
 27576 00013C3C 803805                  	cmp byte [rax], T_undefined
 27577 00013C3F 0F849D230000            	je L_error_fvar_undefined
 27578 00013C45 803804                  	cmp byte [rax], T_closure
 27579 00013C48 0F8518240000            	jne L_error_non_closure
 27580 00013C4E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27581 00013C51 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27582 00013C54 50                      	push rax
 27583 00013C55 6A03                    	push 3	; arg count
 27584 00013C57 488B4510                	mov rax, ENV
 27585 00013C5B 488B00                  	mov rax, qword [rax + 8 * 0]
 27586 00013C5E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27587 00013C61 488B00                  	mov rax, qword [rax]
 27588 00013C64 803804                  	cmp byte [rax], T_closure
 27589 00013C67 0F85F9230000            	jne L_error_non_closure
 27590 00013C6D FF7001                  	push SOB_CLOSURE_ENV(rax)
 27591                                  
 27592                                  	; recycling the current frame
 27593 00013C70 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27594 00013C73 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27595 00013C76 B907000000              	mov rcx, 3 + 4
 27596 00013C7B 488B5D18                	mov rbx, COUNT
 27597 00013C7F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27598 00013C84 488D55F8                	lea rdx, [rbp - 8 * 1]
 27599                                  .L_tc_recycle_frame_loop_04b4:
 27600 00013C88 4883F900                	cmp rcx, 0
 27601 00013C8C 7413                    	je .L_tc_recycle_frame_done_04b4
 27602 00013C8E 488B32                  	mov rsi, qword [rdx]
 27603 00013C91 488933                  	mov qword [rbx], rsi
 27604 00013C94 48FFC9                  	dec rcx
 27605 00013C97 4883EB08                	sub rbx, 8 * 1
 27606 00013C9B 4883EA08                	sub rdx, 8 * 1
 27607 00013C9F EBE7                    	jmp .L_tc_recycle_frame_loop_04b4
 27608                                  .L_tc_recycle_frame_done_04b4:
 27609 00013CA1 488D6308                	lea rsp, [rbx + 8 * 1]
 27610 00013CA5 5D                      	pop rbp	; the proc will restore it!
 27611 00013CA6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27612 00013CA9 C9                      	leave
 27613 00013CAA C21800                  	ret AND_KILL_FRAME(1)
 27614                                  .L_lambda_opt_end_007d:	; new closure is in rax
 27615 00013CAD C9                      	leave
 27616 00013CAE C22000                  	ret AND_KILL_FRAME(2)
 27617                                  .L_lambda_simple_end_0393:	; new closure is in rax
 27618 00013CB1 803804                  	cmp byte [rax], T_closure
 27619 00013CB4 0F85AC230000            	jne L_error_non_closure
 27620 00013CBA FF7001                  	push SOB_CLOSURE_ENV(rax)
 27621 00013CBD FF5009                  	call SOB_CLOSURE_CODE(rax)
 27622 00013CC0 48890425[BF180000]      	mov qword [free_var_167], rax
 27623 00013CC8 48B8-                   	mov rax, sob_void
 27623 00013CCA [0000000000000000] 
 27624                                  
 27625 00013CD2 4889C7                  	mov rdi, rax
 27626 00013CD5 E847250000              	call print_sexpr_if_not_void
 27627                                  
 27628 00013CDA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27629 00013CDF E82B240000              	call malloc
 27630 00013CE4 50                      	push rax
 27631 00013CE5 BF00000000              	mov rdi, 8 * 0	; new rib
 27632 00013CEA E820240000              	call malloc
 27633 00013CEF 50                      	push rax
 27634 00013CF0 BF08000000              	mov rdi, 8 * 1	; extended env
 27635 00013CF5 E815240000              	call malloc
 27636 00013CFA 488B7D10                	mov rdi, ENV
 27637 00013CFE BE00000000              	mov rsi, 0
 27638 00013D03 BA01000000              	mov rdx, 1
 27639                                  .L_lambda_simple_env_loop_0397:	; ext_env[i + 1] <-- env[i]
 27640 00013D08 4883FE00                	cmp rsi, 0
 27641 00013D0C 7410                    	je .L_lambda_simple_env_end_0397
 27642 00013D0E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27643 00013D12 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27644 00013D16 48FFC6                  	inc rsi
 27645 00013D19 48FFC2                  	inc rdx
 27646 00013D1C EBEA                    	jmp .L_lambda_simple_env_loop_0397
 27647                                  .L_lambda_simple_env_end_0397:
 27648 00013D1E 5B                      	pop rbx
 27649 00013D1F BE00000000              	mov rsi, 0
 27650                                  .L_lambda_simple_params_loop_0397:	; copy params
 27651 00013D24 4883FE00                	cmp rsi, 0
 27652 00013D28 740E                    	je .L_lambda_simple_params_end_0397
 27653 00013D2A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27654 00013D2F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27655 00013D33 48FFC6                  	inc rsi
 27656 00013D36 EBEC                    	jmp .L_lambda_simple_params_loop_0397
 27657                                  .L_lambda_simple_params_end_0397:
 27658 00013D38 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27659 00013D3B 4889C3                  	mov rbx, rax
 27660 00013D3E 58                      	pop rax
 27661 00013D3F C60004                  	mov byte [rax], T_closure
 27662 00013D42 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27663 00013D46 48C74009[533D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0397
 27664 00013D4E E9BE000000              	jmp .L_lambda_simple_end_0397
 27665                                  .L_lambda_simple_code_0397:	; lambda-simple body
 27666 00013D53 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27667 00013D59 740B                    	je .L_lambda_simple_arity_check_ok_0397
 27668 00013D5B FF742410                	push qword [rsp + 8 * 2]
 27669 00013D5F 6A01                    	push 1
 27670 00013D61 E962230000              	jmp L_error_incorrect_arity_simple
 27671                                  .L_lambda_simple_arity_check_ok_0397:
 27672 00013D66 C8000000                	enter 0, 0
 27673                                  	; preparing a tail-call
 27674                                  	; preparing a non tail-call
 27675                                  	; preparing a non tail-call
 27676 00013D6A 488B4520                	mov rax, PARAM(0)	; param str
 27677 00013D6E 50                      	push rax
 27678 00013D6F 6A01                    	push 1	; arg count
 27679 00013D71 488B0425[27170000]      	mov rax, qword [free_var_143]	; free var string->list
 27680 00013D79 803805                  	cmp byte [rax], T_undefined
 27681 00013D7C 0F8460220000            	je L_error_fvar_undefined
 27682 00013D82 803804                  	cmp byte [rax], T_closure
 27683 00013D85 0F85DB220000            	jne L_error_non_closure
 27684 00013D8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 27685 00013D8E FF5009                  	call SOB_CLOSURE_CODE(rax)
 27686 00013D91 50                      	push rax
 27687 00013D92 6A01                    	push 1	; arg count
 27688 00013D94 488B0425[07150000]      	mov rax, qword [free_var_111]	; free var reverse
 27689 00013D9C 803805                  	cmp byte [rax], T_undefined
 27690 00013D9F 0F843D220000            	je L_error_fvar_undefined
 27691 00013DA5 803804                  	cmp byte [rax], T_closure
 27692 00013DA8 0F85B8220000            	jne L_error_non_closure
 27693 00013DAE FF7001                  	push SOB_CLOSURE_ENV(rax)
 27694 00013DB1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27695 00013DB4 50                      	push rax
 27696 00013DB5 6A01                    	push 1	; arg count
 27697 00013DB7 488B0425[16170000]      	mov rax, qword [free_var_142]	; free var list->string
 27698 00013DBF 803805                  	cmp byte [rax], T_undefined
 27699 00013DC2 0F841A220000            	je L_error_fvar_undefined
 27700 00013DC8 803804                  	cmp byte [rax], T_closure
 27701 00013DCB 0F8595220000            	jne L_error_non_closure
 27702 00013DD1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27703                                  
 27704                                  	; recycling the current frame
 27705 00013DD4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27706 00013DD7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27707 00013DDA B905000000              	mov rcx, 1 + 4
 27708 00013DDF 488B5D18                	mov rbx, COUNT
 27709 00013DE3 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27710 00013DE8 488D55F8                	lea rdx, [rbp - 8 * 1]
 27711                                  .L_tc_recycle_frame_loop_04b5:
 27712 00013DEC 4883F900                	cmp rcx, 0
 27713 00013DF0 7413                    	je .L_tc_recycle_frame_done_04b5
 27714 00013DF2 488B32                  	mov rsi, qword [rdx]
 27715 00013DF5 488933                  	mov qword [rbx], rsi
 27716 00013DF8 48FFC9                  	dec rcx
 27717 00013DFB 4883EB08                	sub rbx, 8 * 1
 27718 00013DFF 4883EA08                	sub rdx, 8 * 1
 27719 00013E03 EBE7                    	jmp .L_tc_recycle_frame_loop_04b5
 27720                                  .L_tc_recycle_frame_done_04b5:
 27721 00013E05 488D6308                	lea rsp, [rbx + 8 * 1]
 27722 00013E09 5D                      	pop rbp	; the proc will restore it!
 27723 00013E0A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27724 00013E0D C9                      	leave
 27725 00013E0E C21800                  	ret AND_KILL_FRAME(1)
 27726                                  .L_lambda_simple_end_0397:	; new closure is in rax
 27727 00013E11 48890425[D0180000]      	mov qword [free_var_168], rax
 27728 00013E19 48B8-                   	mov rax, sob_void
 27728 00013E1B [0000000000000000] 
 27729                                  
 27730 00013E23 4889C7                  	mov rdi, rax
 27731 00013E26 E8F6230000              	call print_sexpr_if_not_void
 27732                                  
 27733 00013E2B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27734 00013E30 E8DA220000              	call malloc
 27735 00013E35 50                      	push rax
 27736 00013E36 BF00000000              	mov rdi, 8 * 0	; new rib
 27737 00013E3B E8CF220000              	call malloc
 27738 00013E40 50                      	push rax
 27739 00013E41 BF08000000              	mov rdi, 8 * 1	; extended env
 27740 00013E46 E8C4220000              	call malloc
 27741 00013E4B 488B7D10                	mov rdi, ENV
 27742 00013E4F BE00000000              	mov rsi, 0
 27743 00013E54 BA01000000              	mov rdx, 1
 27744                                  .L_lambda_simple_env_loop_0398:	; ext_env[i + 1] <-- env[i]
 27745 00013E59 4883FE00                	cmp rsi, 0
 27746 00013E5D 7410                    	je .L_lambda_simple_env_end_0398
 27747 00013E5F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27748 00013E63 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27749 00013E67 48FFC6                  	inc rsi
 27750 00013E6A 48FFC2                  	inc rdx
 27751 00013E6D EBEA                    	jmp .L_lambda_simple_env_loop_0398
 27752                                  .L_lambda_simple_env_end_0398:
 27753 00013E6F 5B                      	pop rbx
 27754 00013E70 BE00000000              	mov rsi, 0
 27755                                  .L_lambda_simple_params_loop_0398:	; copy params
 27756 00013E75 4883FE00                	cmp rsi, 0
 27757 00013E79 740E                    	je .L_lambda_simple_params_end_0398
 27758 00013E7B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27759 00013E80 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27760 00013E84 48FFC6                  	inc rsi
 27761 00013E87 EBEC                    	jmp .L_lambda_simple_params_loop_0398
 27762                                  .L_lambda_simple_params_end_0398:
 27763 00013E89 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27764 00013E8C 4889C3                  	mov rbx, rax
 27765 00013E8F 58                      	pop rax
 27766 00013E90 C60004                  	mov byte [rax], T_closure
 27767 00013E93 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27768 00013E97 48C74009[A43E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0398
 27769 00013E9F E9BE000000              	jmp .L_lambda_simple_end_0398
 27770                                  .L_lambda_simple_code_0398:	; lambda-simple body
 27771 00013EA4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27772 00013EAA 740B                    	je .L_lambda_simple_arity_check_ok_0398
 27773 00013EAC FF742410                	push qword [rsp + 8 * 2]
 27774 00013EB0 6A01                    	push 1
 27775 00013EB2 E911220000              	jmp L_error_incorrect_arity_simple
 27776                                  .L_lambda_simple_arity_check_ok_0398:
 27777 00013EB7 C8000000                	enter 0, 0
 27778                                  	; preparing a tail-call
 27779                                  	; preparing a non tail-call
 27780                                  	; preparing a non tail-call
 27781 00013EBB 488B4520                	mov rax, PARAM(0)	; param vec
 27782 00013EBF 50                      	push rax
 27783 00013EC0 6A01                    	push 1	; arg count
 27784 00013EC2 488B0425[15180000]      	mov rax, qword [free_var_157]	; free var vector->list
 27785 00013ECA 803805                  	cmp byte [rax], T_undefined
 27786 00013ECD 0F840F210000            	je L_error_fvar_undefined
 27787 00013ED3 803804                  	cmp byte [rax], T_closure
 27788 00013ED6 0F858A210000            	jne L_error_non_closure
 27789 00013EDC FF7001                  	push SOB_CLOSURE_ENV(rax)
 27790 00013EDF FF5009                  	call SOB_CLOSURE_CODE(rax)
 27791 00013EE2 50                      	push rax
 27792 00013EE3 6A01                    	push 1	; arg count
 27793 00013EE5 488B0425[07150000]      	mov rax, qword [free_var_111]	; free var reverse
 27794 00013EED 803805                  	cmp byte [rax], T_undefined
 27795 00013EF0 0F84EC200000            	je L_error_fvar_undefined
 27796 00013EF6 803804                  	cmp byte [rax], T_closure
 27797 00013EF9 0F8567210000            	jne L_error_non_closure
 27798 00013EFF FF7001                  	push SOB_CLOSURE_ENV(rax)
 27799 00013F02 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27800 00013F05 50                      	push rax
 27801 00013F06 6A01                    	push 1	; arg count
 27802 00013F08 488B0425[F3170000]      	mov rax, qword [free_var_155]	; free var list->vector
 27803 00013F10 803805                  	cmp byte [rax], T_undefined
 27804 00013F13 0F84C9200000            	je L_error_fvar_undefined
 27805 00013F19 803804                  	cmp byte [rax], T_closure
 27806 00013F1C 0F8544210000            	jne L_error_non_closure
 27807 00013F22 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27808                                  
 27809                                  	; recycling the current frame
 27810 00013F25 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27811 00013F28 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27812 00013F2B B905000000              	mov rcx, 1 + 4
 27813 00013F30 488B5D18                	mov rbx, COUNT
 27814 00013F34 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27815 00013F39 488D55F8                	lea rdx, [rbp - 8 * 1]
 27816                                  .L_tc_recycle_frame_loop_04b6:
 27817 00013F3D 4883F900                	cmp rcx, 0
 27818 00013F41 7413                    	je .L_tc_recycle_frame_done_04b6
 27819 00013F43 488B32                  	mov rsi, qword [rdx]
 27820 00013F46 488933                  	mov qword [rbx], rsi
 27821 00013F49 48FFC9                  	dec rcx
 27822 00013F4C 4883EB08                	sub rbx, 8 * 1
 27823 00013F50 4883EA08                	sub rdx, 8 * 1
 27824 00013F54 EBE7                    	jmp .L_tc_recycle_frame_loop_04b6
 27825                                  .L_tc_recycle_frame_done_04b6:
 27826 00013F56 488D6308                	lea rsp, [rbx + 8 * 1]
 27827 00013F5A 5D                      	pop rbp	; the proc will restore it!
 27828 00013F5B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27829 00013F5E C9                      	leave
 27830 00013F5F C21800                  	ret AND_KILL_FRAME(1)
 27831                                  .L_lambda_simple_end_0398:	; new closure is in rax
 27832 00013F62 48890425[E1180000]      	mov qword [free_var_169], rax
 27833 00013F6A 48B8-                   	mov rax, sob_void
 27833 00013F6C [0000000000000000] 
 27834                                  
 27835 00013F74 4889C7                  	mov rdi, rax
 27836 00013F77 E8A5220000              	call print_sexpr_if_not_void
 27837                                  
 27838                                  	; preparing a non tail-call
 27839 00013F7C 48B8-                   	mov rax, L_constants + 1881
 27839 00013F7E [5907000000000000] 
 27840 00013F86 50                      	push rax
 27841 00013F87 6A01                    	push 1	; arg count
 27842 00013F89 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27843 00013F8E E87C210000              	call malloc
 27844 00013F93 50                      	push rax
 27845 00013F94 BF00000000              	mov rdi, 8 * 0	; new rib
 27846 00013F99 E871210000              	call malloc
 27847 00013F9E 50                      	push rax
 27848 00013F9F BF08000000              	mov rdi, 8 * 1	; extended env
 27849 00013FA4 E866210000              	call malloc
 27850 00013FA9 488B7D10                	mov rdi, ENV
 27851 00013FAD BE00000000              	mov rsi, 0
 27852 00013FB2 BA01000000              	mov rdx, 1
 27853                                  .L_lambda_simple_env_loop_0399:	; ext_env[i + 1] <-- env[i]
 27854 00013FB7 4883FE00                	cmp rsi, 0
 27855 00013FBB 7410                    	je .L_lambda_simple_env_end_0399
 27856 00013FBD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27857 00013FC1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27858 00013FC5 48FFC6                  	inc rsi
 27859 00013FC8 48FFC2                  	inc rdx
 27860 00013FCB EBEA                    	jmp .L_lambda_simple_env_loop_0399
 27861                                  .L_lambda_simple_env_end_0399:
 27862 00013FCD 5B                      	pop rbx
 27863 00013FCE BE00000000              	mov rsi, 0
 27864                                  .L_lambda_simple_params_loop_0399:	; copy params
 27865 00013FD3 4883FE00                	cmp rsi, 0
 27866 00013FD7 740E                    	je .L_lambda_simple_params_end_0399
 27867 00013FD9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27868 00013FDE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27869 00013FE2 48FFC6                  	inc rsi
 27870 00013FE5 EBEC                    	jmp .L_lambda_simple_params_loop_0399
 27871                                  .L_lambda_simple_params_end_0399:
 27872 00013FE7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27873 00013FEA 4889C3                  	mov rbx, rax
 27874 00013FED 58                      	pop rax
 27875 00013FEE C60004                  	mov byte [rax], T_closure
 27876 00013FF1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27877 00013FF5 48C74009[02400100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0399
 27878 00013FFD E91D060000              	jmp .L_lambda_simple_end_0399
 27879                                  .L_lambda_simple_code_0399:	; lambda-simple body
 27880 00014002 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27881 00014008 740B                    	je .L_lambda_simple_arity_check_ok_0399
 27882 0001400A FF742410                	push qword [rsp + 8 * 2]
 27883 0001400E 6A01                    	push 1
 27884 00014010 E9B3200000              	jmp L_error_incorrect_arity_simple
 27885                                  .L_lambda_simple_arity_check_ok_0399:
 27886 00014015 C8000000                	enter 0, 0
 27887 00014019 BF08000000              	mov rdi, 8	; sob_box
 27888 0001401E E8EC200000              	call malloc
 27889 00014023 488B5D20                	mov rbx, PARAM(0)
 27890 00014027 488918                  	mov [rax], rbx
 27891 0001402A 48894520                	mov PARAM(0), rax
 27892 0001402E 48B8-                   	mov rax, sob_void
 27892 00014030 [0000000000000000] 
 27893                                  
 27894 00014038 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27895 0001403D E8CD200000              	call malloc
 27896 00014042 50                      	push rax
 27897 00014043 BF08000000              	mov rdi, 8 * 1	; new rib
 27898 00014048 E8C2200000              	call malloc
 27899 0001404D 50                      	push rax
 27900 0001404E BF10000000              	mov rdi, 8 * 2	; extended env
 27901 00014053 E8B7200000              	call malloc
 27902 00014058 488B7D10                	mov rdi, ENV
 27903 0001405C BE00000000              	mov rsi, 0
 27904 00014061 BA01000000              	mov rdx, 1
 27905                                  .L_lambda_simple_env_loop_039a:	; ext_env[i + 1] <-- env[i]
 27906 00014066 4883FE01                	cmp rsi, 1
 27907 0001406A 7410                    	je .L_lambda_simple_env_end_039a
 27908 0001406C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27909 00014070 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27910 00014074 48FFC6                  	inc rsi
 27911 00014077 48FFC2                  	inc rdx
 27912 0001407A EBEA                    	jmp .L_lambda_simple_env_loop_039a
 27913                                  .L_lambda_simple_env_end_039a:
 27914 0001407C 5B                      	pop rbx
 27915 0001407D BE00000000              	mov rsi, 0
 27916                                  .L_lambda_simple_params_loop_039a:	; copy params
 27917 00014082 4883FE01                	cmp rsi, 1
 27918 00014086 740E                    	je .L_lambda_simple_params_end_039a
 27919 00014088 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27920 0001408D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27921 00014091 48FFC6                  	inc rsi
 27922 00014094 EBEC                    	jmp .L_lambda_simple_params_loop_039a
 27923                                  .L_lambda_simple_params_end_039a:
 27924 00014096 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27925 00014099 4889C3                  	mov rbx, rax
 27926 0001409C 58                      	pop rax
 27927 0001409D C60004                  	mov byte [rax], T_closure
 27928 000140A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27929 000140A4 48C74009[B1400100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_039a
 27930 000140AC E9E6020000              	jmp .L_lambda_simple_end_039a
 27931                                  .L_lambda_simple_code_039a:	; lambda-simple body
 27932 000140B1 48837C241003            	cmp qword [rsp + 8 * 2], 3
 27933 000140B7 740B                    	je .L_lambda_simple_arity_check_ok_039a
 27934 000140B9 FF742410                	push qword [rsp + 8 * 2]
 27935 000140BD 6A03                    	push 3
 27936 000140BF E904200000              	jmp L_error_incorrect_arity_simple
 27937                                  .L_lambda_simple_arity_check_ok_039a:
 27938 000140C4 C8000000                	enter 0, 0
 27939                                  	; preparing a non tail-call
 27940 000140C8 488B4530                	mov rax, PARAM(2)	; param j
 27941 000140CC 50                      	push rax
 27942 000140CD 488B4528                	mov rax, PARAM(1)	; param i
 27943 000140D1 50                      	push rax
 27944 000140D2 6A02                    	push 2	; arg count
 27945 000140D4 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 27946 000140DC 803805                  	cmp byte [rax], T_undefined
 27947 000140DF 0F84FD1E0000            	je L_error_fvar_undefined
 27948 000140E5 803804                  	cmp byte [rax], T_closure
 27949 000140E8 0F85781F0000            	jne L_error_non_closure
 27950 000140EE FF7001                  	push SOB_CLOSURE_ENV(rax)
 27951 000140F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27952 000140F4 483D[02000000]          	cmp rax, sob_boolean_false
 27953 000140FA 0F848F020000            	je .L_if_else_029a
 27954                                  	; preparing a tail-call
 27955                                  	; preparing a non tail-call
 27956 00014100 488B4528                	mov rax, PARAM(1)	; param i
 27957 00014104 50                      	push rax
 27958 00014105 488B4520                	mov rax, PARAM(0)	; param str
 27959 00014109 50                      	push rax
 27960 0001410A 6A02                    	push 2	; arg count
 27961 0001410C 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 27962 00014114 803805                  	cmp byte [rax], T_undefined
 27963 00014117 0F84C51E0000            	je L_error_fvar_undefined
 27964 0001411D 803804                  	cmp byte [rax], T_closure
 27965 00014120 0F85401F0000            	jne L_error_non_closure
 27966 00014126 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27967 00014129 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27968 0001412C 50                      	push rax
 27969 0001412D 6A01                    	push 1	; arg count
 27970 0001412F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27971 00014134 E8D61F0000              	call malloc
 27972 00014139 50                      	push rax
 27973 0001413A BF18000000              	mov rdi, 8 * 3	; new rib
 27974 0001413F E8CB1F0000              	call malloc
 27975 00014144 50                      	push rax
 27976 00014145 BF18000000              	mov rdi, 8 * 3	; extended env
 27977 0001414A E8C01F0000              	call malloc
 27978 0001414F 488B7D10                	mov rdi, ENV
 27979 00014153 BE00000000              	mov rsi, 0
 27980 00014158 BA01000000              	mov rdx, 1
 27981                                  .L_lambda_simple_env_loop_039b:	; ext_env[i + 1] <-- env[i]
 27982 0001415D 4883FE02                	cmp rsi, 2
 27983 00014161 7410                    	je .L_lambda_simple_env_end_039b
 27984 00014163 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27985 00014167 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27986 0001416B 48FFC6                  	inc rsi
 27987 0001416E 48FFC2                  	inc rdx
 27988 00014171 EBEA                    	jmp .L_lambda_simple_env_loop_039b
 27989                                  .L_lambda_simple_env_end_039b:
 27990 00014173 5B                      	pop rbx
 27991 00014174 BE00000000              	mov rsi, 0
 27992                                  .L_lambda_simple_params_loop_039b:	; copy params
 27993 00014179 4883FE03                	cmp rsi, 3
 27994 0001417D 740E                    	je .L_lambda_simple_params_end_039b
 27995 0001417F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27996 00014184 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27997 00014188 48FFC6                  	inc rsi
 27998 0001418B EBEC                    	jmp .L_lambda_simple_params_loop_039b
 27999                                  .L_lambda_simple_params_end_039b:
 28000 0001418D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28001 00014190 4889C3                  	mov rbx, rax
 28002 00014193 58                      	pop rax
 28003 00014194 C60004                  	mov byte [rax], T_closure
 28004 00014197 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28005 0001419B 48C74009[A8410100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_039b
 28006 000141A3 E9A0010000              	jmp .L_lambda_simple_end_039b
 28007                                  .L_lambda_simple_code_039b:	; lambda-simple body
 28008 000141A8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28009 000141AE 740B                    	je .L_lambda_simple_arity_check_ok_039b
 28010 000141B0 FF742410                	push qword [rsp + 8 * 2]
 28011 000141B4 6A01                    	push 1
 28012 000141B6 E90D1F0000              	jmp L_error_incorrect_arity_simple
 28013                                  .L_lambda_simple_arity_check_ok_039b:
 28014 000141BB C8000000                	enter 0, 0
 28015                                  	; preparing a non tail-call
 28016                                  	; preparing a non tail-call
 28017 000141BF 488B4510                	mov rax, ENV
 28018 000141C3 488B00                  	mov rax, qword [rax + 8 * 0]
 28019 000141C6 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 28020 000141CA 50                      	push rax
 28021 000141CB 488B4510                	mov rax, ENV
 28022 000141CF 488B00                  	mov rax, qword [rax + 8 * 0]
 28023 000141D2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28024 000141D5 50                      	push rax
 28025 000141D6 6A02                    	push 2	; arg count
 28026 000141D8 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 28027 000141E0 803805                  	cmp byte [rax], T_undefined
 28028 000141E3 0F84F91D0000            	je L_error_fvar_undefined
 28029 000141E9 803804                  	cmp byte [rax], T_closure
 28030 000141EC 0F85741E0000            	jne L_error_non_closure
 28031 000141F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28032 000141F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28033 000141F8 50                      	push rax
 28034 000141F9 488B4510                	mov rax, ENV
 28035 000141FD 488B00                  	mov rax, qword [rax + 8 * 0]
 28036 00014200 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 28037 00014204 50                      	push rax
 28038 00014205 488B4510                	mov rax, ENV
 28039 00014209 488B00                  	mov rax, qword [rax + 8 * 0]
 28040 0001420C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28041 0001420F 50                      	push rax
 28042 00014210 6A03                    	push 3	; arg count
 28043 00014212 488B0425[60110000]      	mov rax, qword [free_var_56]	; free var string-set!
 28044 0001421A 803805                  	cmp byte [rax], T_undefined
 28045 0001421D 0F84BF1D0000            	je L_error_fvar_undefined
 28046 00014223 803804                  	cmp byte [rax], T_closure
 28047 00014226 0F853A1E0000            	jne L_error_non_closure
 28048 0001422C FF7001                  	push SOB_CLOSURE_ENV(rax)
 28049 0001422F FF5009                  	call SOB_CLOSURE_CODE(rax)
 28050                                  
 28051                                  	; preparing a non tail-call
 28052 00014232 488B4520                	mov rax, PARAM(0)	; param ch
 28053 00014236 50                      	push rax
 28054 00014237 488B4510                	mov rax, ENV
 28055 0001423B 488B00                  	mov rax, qword [rax + 8 * 0]
 28056 0001423E 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 28057 00014242 50                      	push rax
 28058 00014243 488B4510                	mov rax, ENV
 28059 00014247 488B00                  	mov rax, qword [rax + 8 * 0]
 28060 0001424A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28061 0001424D 50                      	push rax
 28062 0001424E 6A03                    	push 3	; arg count
 28063 00014250 488B0425[60110000]      	mov rax, qword [free_var_56]	; free var string-set!
 28064 00014258 803805                  	cmp byte [rax], T_undefined
 28065 0001425B 0F84811D0000            	je L_error_fvar_undefined
 28066 00014261 803804                  	cmp byte [rax], T_closure
 28067 00014264 0F85FC1D0000            	jne L_error_non_closure
 28068 0001426A FF7001                  	push SOB_CLOSURE_ENV(rax)
 28069 0001426D FF5009                  	call SOB_CLOSURE_CODE(rax)
 28070                                  
 28071                                  	; preparing a tail-call
 28072                                  	; preparing a non tail-call
 28073 00014270 48B8-                   	mov rax, L_constants + 2158
 28073 00014272 [6E08000000000000] 
 28074 0001427A 50                      	push rax
 28075 0001427B 488B4510                	mov rax, ENV
 28076 0001427F 488B00                  	mov rax, qword [rax + 8 * 0]
 28077 00014282 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 28078 00014286 50                      	push rax
 28079 00014287 6A02                    	push 2	; arg count
 28080 00014289 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 28081 00014291 803805                  	cmp byte [rax], T_undefined
 28082 00014294 0F84481D0000            	je L_error_fvar_undefined
 28083 0001429A 803804                  	cmp byte [rax], T_closure
 28084 0001429D 0F85C31D0000            	jne L_error_non_closure
 28085 000142A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28086 000142A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28087 000142A9 50                      	push rax
 28088                                  	; preparing a non tail-call
 28089 000142AA 48B8-                   	mov rax, L_constants + 2158
 28089 000142AC [6E08000000000000] 
 28090 000142B4 50                      	push rax
 28091 000142B5 488B4510                	mov rax, ENV
 28092 000142B9 488B00                  	mov rax, qword [rax + 8 * 0]
 28093 000142BC 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 28094 000142C0 50                      	push rax
 28095 000142C1 6A02                    	push 2	; arg count
 28096 000142C3 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 28097 000142CB 803805                  	cmp byte [rax], T_undefined
 28098 000142CE 0F840E1D0000            	je L_error_fvar_undefined
 28099 000142D4 803804                  	cmp byte [rax], T_closure
 28100 000142D7 0F85891D0000            	jne L_error_non_closure
 28101 000142DD FF7001                  	push SOB_CLOSURE_ENV(rax)
 28102 000142E0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28103 000142E3 50                      	push rax
 28104 000142E4 488B4510                	mov rax, ENV
 28105 000142E8 488B00                  	mov rax, qword [rax + 8 * 0]
 28106 000142EB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28107 000142EE 50                      	push rax
 28108 000142EF 6A03                    	push 3	; arg count
 28109 000142F1 488B4510                	mov rax, ENV
 28110 000142F5 488B4008                	mov rax, qword [rax + 8 * 1]
 28111 000142F9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28112 000142FC 488B00                  	mov rax, qword [rax]
 28113 000142FF 803804                  	cmp byte [rax], T_closure
 28114 00014302 0F855E1D0000            	jne L_error_non_closure
 28115 00014308 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28116                                  
 28117                                  	; recycling the current frame
 28118 0001430B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28119 0001430E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28120 00014311 B907000000              	mov rcx, 3 + 4
 28121 00014316 488B5D18                	mov rbx, COUNT
 28122 0001431A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28123 0001431F 488D55F8                	lea rdx, [rbp - 8 * 1]
 28124                                  .L_tc_recycle_frame_loop_04b7:
 28125 00014323 4883F900                	cmp rcx, 0
 28126 00014327 7413                    	je .L_tc_recycle_frame_done_04b7
 28127 00014329 488B32                  	mov rsi, qword [rdx]
 28128 0001432C 488933                  	mov qword [rbx], rsi
 28129 0001432F 48FFC9                  	dec rcx
 28130 00014332 4883EB08                	sub rbx, 8 * 1
 28131 00014336 4883EA08                	sub rdx, 8 * 1
 28132 0001433A EBE7                    	jmp .L_tc_recycle_frame_loop_04b7
 28133                                  .L_tc_recycle_frame_done_04b7:
 28134 0001433C 488D6308                	lea rsp, [rbx + 8 * 1]
 28135 00014340 5D                      	pop rbp	; the proc will restore it!
 28136 00014341 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28137 00014344 C9                      	leave
 28138 00014345 C21800                  	ret AND_KILL_FRAME(1)
 28139                                  .L_lambda_simple_end_039b:	; new closure is in rax
 28140 00014348 803804                  	cmp byte [rax], T_closure
 28141 0001434B 0F85151D0000            	jne L_error_non_closure
 28142 00014351 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28143                                  
 28144                                  	; recycling the current frame
 28145 00014354 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28146 00014357 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28147 0001435A B905000000              	mov rcx, 1 + 4
 28148 0001435F 488B5D18                	mov rbx, COUNT
 28149 00014363 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28150 00014368 488D55F8                	lea rdx, [rbp - 8 * 1]
 28151                                  .L_tc_recycle_frame_loop_04b8:
 28152 0001436C 4883F900                	cmp rcx, 0
 28153 00014370 7413                    	je .L_tc_recycle_frame_done_04b8
 28154 00014372 488B32                  	mov rsi, qword [rdx]
 28155 00014375 488933                  	mov qword [rbx], rsi
 28156 00014378 48FFC9                  	dec rcx
 28157 0001437B 4883EB08                	sub rbx, 8 * 1
 28158 0001437F 4883EA08                	sub rdx, 8 * 1
 28159 00014383 EBE7                    	jmp .L_tc_recycle_frame_loop_04b8
 28160                                  .L_tc_recycle_frame_done_04b8:
 28161 00014385 488D6308                	lea rsp, [rbx + 8 * 1]
 28162 00014389 5D                      	pop rbp	; the proc will restore it!
 28163 0001438A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28164 0001438D EB04                    	jmp .L_if_end_029a
 28165                                  .L_if_else_029a:
 28166 0001438F 488B4520                	mov rax, PARAM(0)	; param str
 28167                                  .L_if_end_029a:
 28168 00014393 C9                      	leave
 28169 00014394 C22800                  	ret AND_KILL_FRAME(3)
 28170                                  .L_lambda_simple_end_039a:	; new closure is in rax
 28171 00014397 50                      	push rax
 28172 00014398 488B4520                	mov rax, PARAM(0)	; param run
 28173 0001439C 8F00                    	pop qword [rax]
 28174 0001439E 48B8-                   	mov rax, sob_void
 28174 000143A0 [0000000000000000] 
 28175                                  
 28176 000143A8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28177 000143AD E85D1D0000              	call malloc
 28178 000143B2 50                      	push rax
 28179 000143B3 BF08000000              	mov rdi, 8 * 1	; new rib
 28180 000143B8 E8521D0000              	call malloc
 28181 000143BD 50                      	push rax
 28182 000143BE BF10000000              	mov rdi, 8 * 2	; extended env
 28183 000143C3 E8471D0000              	call malloc
 28184 000143C8 488B7D10                	mov rdi, ENV
 28185 000143CC BE00000000              	mov rsi, 0
 28186 000143D1 BA01000000              	mov rdx, 1
 28187                                  .L_lambda_simple_env_loop_039c:	; ext_env[i + 1] <-- env[i]
 28188 000143D6 4883FE01                	cmp rsi, 1
 28189 000143DA 7410                    	je .L_lambda_simple_env_end_039c
 28190 000143DC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28191 000143E0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28192 000143E4 48FFC6                  	inc rsi
 28193 000143E7 48FFC2                  	inc rdx
 28194 000143EA EBEA                    	jmp .L_lambda_simple_env_loop_039c
 28195                                  .L_lambda_simple_env_end_039c:
 28196 000143EC 5B                      	pop rbx
 28197 000143ED BE00000000              	mov rsi, 0
 28198                                  .L_lambda_simple_params_loop_039c:	; copy params
 28199 000143F2 4883FE01                	cmp rsi, 1
 28200 000143F6 740E                    	je .L_lambda_simple_params_end_039c
 28201 000143F8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28202 000143FD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28203 00014401 48FFC6                  	inc rsi
 28204 00014404 EBEC                    	jmp .L_lambda_simple_params_loop_039c
 28205                                  .L_lambda_simple_params_end_039c:
 28206 00014406 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28207 00014409 4889C3                  	mov rbx, rax
 28208 0001440C 58                      	pop rax
 28209 0001440D C60004                  	mov byte [rax], T_closure
 28210 00014410 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28211 00014414 48C74009[21440100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_039c
 28212 0001441C E9FA010000              	jmp .L_lambda_simple_end_039c
 28213                                  .L_lambda_simple_code_039c:	; lambda-simple body
 28214 00014421 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28215 00014427 740B                    	je .L_lambda_simple_arity_check_ok_039c
 28216 00014429 FF742410                	push qword [rsp + 8 * 2]
 28217 0001442D 6A01                    	push 1
 28218 0001442F E9941C0000              	jmp L_error_incorrect_arity_simple
 28219                                  .L_lambda_simple_arity_check_ok_039c:
 28220 00014434 C8000000                	enter 0, 0
 28221                                  	; preparing a tail-call
 28222                                  	; preparing a non tail-call
 28223 00014438 488B4520                	mov rax, PARAM(0)	; param str
 28224 0001443C 50                      	push rax
 28225 0001443D 6A01                    	push 1	; arg count
 28226 0001443F 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 28227 00014447 803805                  	cmp byte [rax], T_undefined
 28228 0001444A 0F84921B0000            	je L_error_fvar_undefined
 28229 00014450 803804                  	cmp byte [rax], T_closure
 28230 00014453 0F850D1C0000            	jne L_error_non_closure
 28231 00014459 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28232 0001445C FF5009                  	call SOB_CLOSURE_CODE(rax)
 28233 0001445F 50                      	push rax
 28234 00014460 6A01                    	push 1	; arg count
 28235 00014462 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28236 00014467 E8A31C0000              	call malloc
 28237 0001446C 50                      	push rax
 28238 0001446D BF08000000              	mov rdi, 8 * 1	; new rib
 28239 00014472 E8981C0000              	call malloc
 28240 00014477 50                      	push rax
 28241 00014478 BF18000000              	mov rdi, 8 * 3	; extended env
 28242 0001447D E88D1C0000              	call malloc
 28243 00014482 488B7D10                	mov rdi, ENV
 28244 00014486 BE00000000              	mov rsi, 0
 28245 0001448B BA01000000              	mov rdx, 1
 28246                                  .L_lambda_simple_env_loop_039d:	; ext_env[i + 1] <-- env[i]
 28247 00014490 4883FE02                	cmp rsi, 2
 28248 00014494 7410                    	je .L_lambda_simple_env_end_039d
 28249 00014496 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28250 0001449A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28251 0001449E 48FFC6                  	inc rsi
 28252 000144A1 48FFC2                  	inc rdx
 28253 000144A4 EBEA                    	jmp .L_lambda_simple_env_loop_039d
 28254                                  .L_lambda_simple_env_end_039d:
 28255 000144A6 5B                      	pop rbx
 28256 000144A7 BE00000000              	mov rsi, 0
 28257                                  .L_lambda_simple_params_loop_039d:	; copy params
 28258 000144AC 4883FE01                	cmp rsi, 1
 28259 000144B0 740E                    	je .L_lambda_simple_params_end_039d
 28260 000144B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28261 000144B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28262 000144BB 48FFC6                  	inc rsi
 28263 000144BE EBEC                    	jmp .L_lambda_simple_params_loop_039d
 28264                                  .L_lambda_simple_params_end_039d:
 28265 000144C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28266 000144C3 4889C3                  	mov rbx, rax
 28267 000144C6 58                      	pop rax
 28268 000144C7 C60004                  	mov byte [rax], T_closure
 28269 000144CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28270 000144CE 48C74009[DB440100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_039d
 28271 000144D6 E9F7000000              	jmp .L_lambda_simple_end_039d
 28272                                  .L_lambda_simple_code_039d:	; lambda-simple body
 28273 000144DB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28274 000144E1 740B                    	je .L_lambda_simple_arity_check_ok_039d
 28275 000144E3 FF742410                	push qword [rsp + 8 * 2]
 28276 000144E7 6A01                    	push 1
 28277 000144E9 E9DA1B0000              	jmp L_error_incorrect_arity_simple
 28278                                  .L_lambda_simple_arity_check_ok_039d:
 28279 000144EE C8000000                	enter 0, 0
 28280                                  	; preparing a non tail-call
 28281 000144F2 488B4520                	mov rax, PARAM(0)	; param n
 28282 000144F6 50                      	push rax
 28283 000144F7 6A01                    	push 1	; arg count
 28284 000144F9 488B0425[730F0000]      	mov rax, qword [free_var_27]	; free var zero?
 28285 00014501 803805                  	cmp byte [rax], T_undefined
 28286 00014504 0F84D81A0000            	je L_error_fvar_undefined
 28287 0001450A 803804                  	cmp byte [rax], T_closure
 28288 0001450D 0F85531B0000            	jne L_error_non_closure
 28289 00014513 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28290 00014516 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28291 00014519 483D[02000000]          	cmp rax, sob_boolean_false
 28292 0001451F 740F                    	je .L_if_else_029b
 28293 00014521 488B4510                	mov rax, ENV
 28294 00014525 488B00                  	mov rax, qword [rax + 8 * 0]
 28295 00014528 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28296 0001452B E99E000000              	jmp .L_if_end_029b
 28297                                  .L_if_else_029b:
 28298                                  	; preparing a tail-call
 28299                                  	; preparing a non tail-call
 28300 00014530 48B8-                   	mov rax, L_constants + 2158
 28300 00014532 [6E08000000000000] 
 28301 0001453A 50                      	push rax
 28302 0001453B 488B4520                	mov rax, PARAM(0)	; param n
 28303 0001453F 50                      	push rax
 28304 00014540 6A02                    	push 2	; arg count
 28305 00014542 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 28306 0001454A 803805                  	cmp byte [rax], T_undefined
 28307 0001454D 0F848F1A0000            	je L_error_fvar_undefined
 28308 00014553 803804                  	cmp byte [rax], T_closure
 28309 00014556 0F850A1B0000            	jne L_error_non_closure
 28310 0001455C FF7001                  	push SOB_CLOSURE_ENV(rax)
 28311 0001455F FF5009                  	call SOB_CLOSURE_CODE(rax)
 28312 00014562 50                      	push rax
 28313 00014563 48B8-                   	mov rax, L_constants + 2023
 28313 00014565 [E707000000000000] 
 28314 0001456D 50                      	push rax
 28315 0001456E 488B4510                	mov rax, ENV
 28316 00014572 488B00                  	mov rax, qword [rax + 8 * 0]
 28317 00014575 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28318 00014578 50                      	push rax
 28319 00014579 6A03                    	push 3	; arg count
 28320 0001457B 488B4510                	mov rax, ENV
 28321 0001457F 488B4008                	mov rax, qword [rax + 8 * 1]
 28322 00014583 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28323 00014586 488B00                  	mov rax, qword [rax]
 28324 00014589 803804                  	cmp byte [rax], T_closure
 28325 0001458C 0F85D41A0000            	jne L_error_non_closure
 28326 00014592 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28327                                  
 28328                                  	; recycling the current frame
 28329 00014595 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28330 00014598 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28331 0001459B B907000000              	mov rcx, 3 + 4
 28332 000145A0 488B5D18                	mov rbx, COUNT
 28333 000145A4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28334 000145A9 488D55F8                	lea rdx, [rbp - 8 * 1]
 28335                                  .L_tc_recycle_frame_loop_04b9:
 28336 000145AD 4883F900                	cmp rcx, 0
 28337 000145B1 7413                    	je .L_tc_recycle_frame_done_04b9
 28338 000145B3 488B32                  	mov rsi, qword [rdx]
 28339 000145B6 488933                  	mov qword [rbx], rsi
 28340 000145B9 48FFC9                  	dec rcx
 28341 000145BC 4883EB08                	sub rbx, 8 * 1
 28342 000145C0 4883EA08                	sub rdx, 8 * 1
 28343 000145C4 EBE7                    	jmp .L_tc_recycle_frame_loop_04b9
 28344                                  .L_tc_recycle_frame_done_04b9:
 28345 000145C6 488D6308                	lea rsp, [rbx + 8 * 1]
 28346 000145CA 5D                      	pop rbp	; the proc will restore it!
 28347 000145CB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28348                                  .L_if_end_029b:
 28349 000145CE C9                      	leave
 28350 000145CF C21800                  	ret AND_KILL_FRAME(1)
 28351                                  .L_lambda_simple_end_039d:	; new closure is in rax
 28352 000145D2 803804                  	cmp byte [rax], T_closure
 28353 000145D5 0F858B1A0000            	jne L_error_non_closure
 28354 000145DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 28355                                  
 28356                                  	; recycling the current frame
 28357 000145DE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28358 000145E1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28359 000145E4 B905000000              	mov rcx, 1 + 4
 28360 000145E9 488B5D18                	mov rbx, COUNT
 28361 000145ED 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28362 000145F2 488D55F8                	lea rdx, [rbp - 8 * 1]
 28363                                  .L_tc_recycle_frame_loop_04ba:
 28364 000145F6 4883F900                	cmp rcx, 0
 28365 000145FA 7413                    	je .L_tc_recycle_frame_done_04ba
 28366 000145FC 488B32                  	mov rsi, qword [rdx]
 28367 000145FF 488933                  	mov qword [rbx], rsi
 28368 00014602 48FFC9                  	dec rcx
 28369 00014605 4883EB08                	sub rbx, 8 * 1
 28370 00014609 4883EA08                	sub rdx, 8 * 1
 28371 0001460D EBE7                    	jmp .L_tc_recycle_frame_loop_04ba
 28372                                  .L_tc_recycle_frame_done_04ba:
 28373 0001460F 488D6308                	lea rsp, [rbx + 8 * 1]
 28374 00014613 5D                      	pop rbp	; the proc will restore it!
 28375 00014614 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28376 00014617 C9                      	leave
 28377 00014618 C21800                  	ret AND_KILL_FRAME(1)
 28378                                  .L_lambda_simple_end_039c:	; new closure is in rax
 28379 0001461B C9                      	leave
 28380 0001461C C21800                  	ret AND_KILL_FRAME(1)
 28381                                  .L_lambda_simple_end_0399:	; new closure is in rax
 28382 0001461F 803804                  	cmp byte [rax], T_closure
 28383 00014622 0F853E1A0000            	jne L_error_non_closure
 28384 00014628 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28385 0001462B FF5009                  	call SOB_CLOSURE_CODE(rax)
 28386 0001462E 48890425[F2180000]      	mov qword [free_var_170], rax
 28387 00014636 48B8-                   	mov rax, sob_void
 28387 00014638 [0000000000000000] 
 28388                                  
 28389 00014640 4889C7                  	mov rdi, rax
 28390 00014643 E8D91B0000              	call print_sexpr_if_not_void
 28391                                  
 28392                                  	; preparing a non tail-call
 28393 00014648 48B8-                   	mov rax, L_constants + 1881
 28393 0001464A [5907000000000000] 
 28394 00014652 50                      	push rax
 28395 00014653 6A01                    	push 1	; arg count
 28396 00014655 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28397 0001465A E8B01A0000              	call malloc
 28398 0001465F 50                      	push rax
 28399 00014660 BF00000000              	mov rdi, 8 * 0	; new rib
 28400 00014665 E8A51A0000              	call malloc
 28401 0001466A 50                      	push rax
 28402 0001466B BF08000000              	mov rdi, 8 * 1	; extended env
 28403 00014670 E89A1A0000              	call malloc
 28404 00014675 488B7D10                	mov rdi, ENV
 28405 00014679 BE00000000              	mov rsi, 0
 28406 0001467E BA01000000              	mov rdx, 1
 28407                                  .L_lambda_simple_env_loop_039e:	; ext_env[i + 1] <-- env[i]
 28408 00014683 4883FE00                	cmp rsi, 0
 28409 00014687 7410                    	je .L_lambda_simple_env_end_039e
 28410 00014689 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28411 0001468D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28412 00014691 48FFC6                  	inc rsi
 28413 00014694 48FFC2                  	inc rdx
 28414 00014697 EBEA                    	jmp .L_lambda_simple_env_loop_039e
 28415                                  .L_lambda_simple_env_end_039e:
 28416 00014699 5B                      	pop rbx
 28417 0001469A BE00000000              	mov rsi, 0
 28418                                  .L_lambda_simple_params_loop_039e:	; copy params
 28419 0001469F 4883FE00                	cmp rsi, 0
 28420 000146A3 740E                    	je .L_lambda_simple_params_end_039e
 28421 000146A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28422 000146AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28423 000146AE 48FFC6                  	inc rsi
 28424 000146B1 EBEC                    	jmp .L_lambda_simple_params_loop_039e
 28425                                  .L_lambda_simple_params_end_039e:
 28426 000146B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28427 000146B6 4889C3                  	mov rbx, rax
 28428 000146B9 58                      	pop rax
 28429 000146BA C60004                  	mov byte [rax], T_closure
 28430 000146BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28431 000146C1 48C74009[CE460100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_039e
 28432 000146C9 E91D060000              	jmp .L_lambda_simple_end_039e
 28433                                  .L_lambda_simple_code_039e:	; lambda-simple body
 28434 000146CE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28435 000146D4 740B                    	je .L_lambda_simple_arity_check_ok_039e
 28436 000146D6 FF742410                	push qword [rsp + 8 * 2]
 28437 000146DA 6A01                    	push 1
 28438 000146DC E9E7190000              	jmp L_error_incorrect_arity_simple
 28439                                  .L_lambda_simple_arity_check_ok_039e:
 28440 000146E1 C8000000                	enter 0, 0
 28441 000146E5 BF08000000              	mov rdi, 8	; sob_box
 28442 000146EA E8201A0000              	call malloc
 28443 000146EF 488B5D20                	mov rbx, PARAM(0)
 28444 000146F3 488918                  	mov [rax], rbx
 28445 000146F6 48894520                	mov PARAM(0), rax
 28446 000146FA 48B8-                   	mov rax, sob_void
 28446 000146FC [0000000000000000] 
 28447                                  
 28448 00014704 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28449 00014709 E8011A0000              	call malloc
 28450 0001470E 50                      	push rax
 28451 0001470F BF08000000              	mov rdi, 8 * 1	; new rib
 28452 00014714 E8F6190000              	call malloc
 28453 00014719 50                      	push rax
 28454 0001471A BF10000000              	mov rdi, 8 * 2	; extended env
 28455 0001471F E8EB190000              	call malloc
 28456 00014724 488B7D10                	mov rdi, ENV
 28457 00014728 BE00000000              	mov rsi, 0
 28458 0001472D BA01000000              	mov rdx, 1
 28459                                  .L_lambda_simple_env_loop_039f:	; ext_env[i + 1] <-- env[i]
 28460 00014732 4883FE01                	cmp rsi, 1
 28461 00014736 7410                    	je .L_lambda_simple_env_end_039f
 28462 00014738 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28463 0001473C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28464 00014740 48FFC6                  	inc rsi
 28465 00014743 48FFC2                  	inc rdx
 28466 00014746 EBEA                    	jmp .L_lambda_simple_env_loop_039f
 28467                                  .L_lambda_simple_env_end_039f:
 28468 00014748 5B                      	pop rbx
 28469 00014749 BE00000000              	mov rsi, 0
 28470                                  .L_lambda_simple_params_loop_039f:	; copy params
 28471 0001474E 4883FE01                	cmp rsi, 1
 28472 00014752 740E                    	je .L_lambda_simple_params_end_039f
 28473 00014754 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28474 00014759 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28475 0001475D 48FFC6                  	inc rsi
 28476 00014760 EBEC                    	jmp .L_lambda_simple_params_loop_039f
 28477                                  .L_lambda_simple_params_end_039f:
 28478 00014762 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28479 00014765 4889C3                  	mov rbx, rax
 28480 00014768 58                      	pop rax
 28481 00014769 C60004                  	mov byte [rax], T_closure
 28482 0001476C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28483 00014770 48C74009[7D470100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_039f
 28484 00014778 E9E6020000              	jmp .L_lambda_simple_end_039f
 28485                                  .L_lambda_simple_code_039f:	; lambda-simple body
 28486 0001477D 48837C241003            	cmp qword [rsp + 8 * 2], 3
 28487 00014783 740B                    	je .L_lambda_simple_arity_check_ok_039f
 28488 00014785 FF742410                	push qword [rsp + 8 * 2]
 28489 00014789 6A03                    	push 3
 28490 0001478B E938190000              	jmp L_error_incorrect_arity_simple
 28491                                  .L_lambda_simple_arity_check_ok_039f:
 28492 00014790 C8000000                	enter 0, 0
 28493                                  	; preparing a non tail-call
 28494 00014794 488B4530                	mov rax, PARAM(2)	; param j
 28495 00014798 50                      	push rax
 28496 00014799 488B4528                	mov rax, PARAM(1)	; param i
 28497 0001479D 50                      	push rax
 28498 0001479E 6A02                    	push 2	; arg count
 28499 000147A0 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 28500 000147A8 803805                  	cmp byte [rax], T_undefined
 28501 000147AB 0F8431180000            	je L_error_fvar_undefined
 28502 000147B1 803804                  	cmp byte [rax], T_closure
 28503 000147B4 0F85AC180000            	jne L_error_non_closure
 28504 000147BA FF7001                  	push SOB_CLOSURE_ENV(rax)
 28505 000147BD FF5009                  	call SOB_CLOSURE_CODE(rax)
 28506 000147C0 483D[02000000]          	cmp rax, sob_boolean_false
 28507 000147C6 0F848F020000            	je .L_if_else_029c
 28508                                  	; preparing a tail-call
 28509                                  	; preparing a non tail-call
 28510 000147CC 488B4528                	mov rax, PARAM(1)	; param i
 28511 000147D0 50                      	push rax
 28512 000147D1 488B4520                	mov rax, PARAM(0)	; param vec
 28513 000147D5 50                      	push rax
 28514 000147D6 6A02                    	push 2	; arg count
 28515 000147D8 488B0425[3E110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 28516 000147E0 803805                  	cmp byte [rax], T_undefined
 28517 000147E3 0F84F9170000            	je L_error_fvar_undefined
 28518 000147E9 803804                  	cmp byte [rax], T_closure
 28519 000147EC 0F8574180000            	jne L_error_non_closure
 28520 000147F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28521 000147F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28522 000147F8 50                      	push rax
 28523 000147F9 6A01                    	push 1	; arg count
 28524 000147FB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28525 00014800 E80A190000              	call malloc
 28526 00014805 50                      	push rax
 28527 00014806 BF18000000              	mov rdi, 8 * 3	; new rib
 28528 0001480B E8FF180000              	call malloc
 28529 00014810 50                      	push rax
 28530 00014811 BF18000000              	mov rdi, 8 * 3	; extended env
 28531 00014816 E8F4180000              	call malloc
 28532 0001481B 488B7D10                	mov rdi, ENV
 28533 0001481F BE00000000              	mov rsi, 0
 28534 00014824 BA01000000              	mov rdx, 1
 28535                                  .L_lambda_simple_env_loop_03a0:	; ext_env[i + 1] <-- env[i]
 28536 00014829 4883FE02                	cmp rsi, 2
 28537 0001482D 7410                    	je .L_lambda_simple_env_end_03a0
 28538 0001482F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28539 00014833 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28540 00014837 48FFC6                  	inc rsi
 28541 0001483A 48FFC2                  	inc rdx
 28542 0001483D EBEA                    	jmp .L_lambda_simple_env_loop_03a0
 28543                                  .L_lambda_simple_env_end_03a0:
 28544 0001483F 5B                      	pop rbx
 28545 00014840 BE00000000              	mov rsi, 0
 28546                                  .L_lambda_simple_params_loop_03a0:	; copy params
 28547 00014845 4883FE03                	cmp rsi, 3
 28548 00014849 740E                    	je .L_lambda_simple_params_end_03a0
 28549 0001484B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28550 00014850 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28551 00014854 48FFC6                  	inc rsi
 28552 00014857 EBEC                    	jmp .L_lambda_simple_params_loop_03a0
 28553                                  .L_lambda_simple_params_end_03a0:
 28554 00014859 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28555 0001485C 4889C3                  	mov rbx, rax
 28556 0001485F 58                      	pop rax
 28557 00014860 C60004                  	mov byte [rax], T_closure
 28558 00014863 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28559 00014867 48C74009[74480100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03a0
 28560 0001486F E9A0010000              	jmp .L_lambda_simple_end_03a0
 28561                                  .L_lambda_simple_code_03a0:	; lambda-simple body
 28562 00014874 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28563 0001487A 740B                    	je .L_lambda_simple_arity_check_ok_03a0
 28564 0001487C FF742410                	push qword [rsp + 8 * 2]
 28565 00014880 6A01                    	push 1
 28566 00014882 E941180000              	jmp L_error_incorrect_arity_simple
 28567                                  .L_lambda_simple_arity_check_ok_03a0:
 28568 00014887 C8000000                	enter 0, 0
 28569                                  	; preparing a non tail-call
 28570                                  	; preparing a non tail-call
 28571 0001488B 488B4510                	mov rax, ENV
 28572 0001488F 488B00                  	mov rax, qword [rax + 8 * 0]
 28573 00014892 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 28574 00014896 50                      	push rax
 28575 00014897 488B4510                	mov rax, ENV
 28576 0001489B 488B00                  	mov rax, qword [rax + 8 * 0]
 28577 0001489E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 28578 000148A1 50                      	push rax
 28579 000148A2 6A02                    	push 2	; arg count
 28580 000148A4 488B0425[3E110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 28581 000148AC 803805                  	cmp byte [rax], T_undefined
 28582 000148AF 0F842D170000            	je L_error_fvar_undefined
 28583 000148B5 803804                  	cmp byte [rax], T_closure
 28584 000148B8 0F85A8170000            	jne L_error_non_closure
 28585 000148BE FF7001                  	push SOB_CLOSURE_ENV(rax)
 28586 000148C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28587 000148C4 50                      	push rax
 28588 000148C5 488B4510                	mov rax, ENV
 28589 000148C9 488B00                  	mov rax, qword [rax + 8 * 0]
 28590 000148CC 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 28591 000148D0 50                      	push rax
 28592 000148D1 488B4510                	mov rax, ENV
 28593 000148D5 488B00                  	mov rax, qword [rax + 8 * 0]
 28594 000148D8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 28595 000148DB 50                      	push rax
 28596 000148DC 6A03                    	push 3	; arg count
 28597 000148DE 488B0425[4F110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 28598 000148E6 803805                  	cmp byte [rax], T_undefined
 28599 000148E9 0F84F3160000            	je L_error_fvar_undefined
 28600 000148EF 803804                  	cmp byte [rax], T_closure
 28601 000148F2 0F856E170000            	jne L_error_non_closure
 28602 000148F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28603 000148FB FF5009                  	call SOB_CLOSURE_CODE(rax)
 28604                                  
 28605                                  	; preparing a non tail-call
 28606 000148FE 488B4520                	mov rax, PARAM(0)	; param ch
 28607 00014902 50                      	push rax
 28608 00014903 488B4510                	mov rax, ENV
 28609 00014907 488B00                  	mov rax, qword [rax + 8 * 0]
 28610 0001490A 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 28611 0001490E 50                      	push rax
 28612 0001490F 488B4510                	mov rax, ENV
 28613 00014913 488B00                  	mov rax, qword [rax + 8 * 0]
 28614 00014916 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 28615 00014919 50                      	push rax
 28616 0001491A 6A03                    	push 3	; arg count
 28617 0001491C 488B0425[4F110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 28618 00014924 803805                  	cmp byte [rax], T_undefined
 28619 00014927 0F84B5160000            	je L_error_fvar_undefined
 28620 0001492D 803804                  	cmp byte [rax], T_closure
 28621 00014930 0F8530170000            	jne L_error_non_closure
 28622 00014936 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28623 00014939 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28624                                  
 28625                                  	; preparing a tail-call
 28626                                  	; preparing a non tail-call
 28627 0001493C 48B8-                   	mov rax, L_constants + 2158
 28627 0001493E [6E08000000000000] 
 28628 00014946 50                      	push rax
 28629 00014947 488B4510                	mov rax, ENV
 28630 0001494B 488B00                  	mov rax, qword [rax + 8 * 0]
 28631 0001494E 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 28632 00014952 50                      	push rax
 28633 00014953 6A02                    	push 2	; arg count
 28634 00014955 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 28635 0001495D 803805                  	cmp byte [rax], T_undefined
 28636 00014960 0F847C160000            	je L_error_fvar_undefined
 28637 00014966 803804                  	cmp byte [rax], T_closure
 28638 00014969 0F85F7160000            	jne L_error_non_closure
 28639 0001496F FF7001                  	push SOB_CLOSURE_ENV(rax)
 28640 00014972 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28641 00014975 50                      	push rax
 28642                                  	; preparing a non tail-call
 28643 00014976 48B8-                   	mov rax, L_constants + 2158
 28643 00014978 [6E08000000000000] 
 28644 00014980 50                      	push rax
 28645 00014981 488B4510                	mov rax, ENV
 28646 00014985 488B00                  	mov rax, qword [rax + 8 * 0]
 28647 00014988 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 28648 0001498C 50                      	push rax
 28649 0001498D 6A02                    	push 2	; arg count
 28650 0001498F 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 28651 00014997 803805                  	cmp byte [rax], T_undefined
 28652 0001499A 0F8442160000            	je L_error_fvar_undefined
 28653 000149A0 803804                  	cmp byte [rax], T_closure
 28654 000149A3 0F85BD160000            	jne L_error_non_closure
 28655 000149A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28656 000149AC FF5009                  	call SOB_CLOSURE_CODE(rax)
 28657 000149AF 50                      	push rax
 28658 000149B0 488B4510                	mov rax, ENV
 28659 000149B4 488B00                  	mov rax, qword [rax + 8 * 0]
 28660 000149B7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 28661 000149BA 50                      	push rax
 28662 000149BB 6A03                    	push 3	; arg count
 28663 000149BD 488B4510                	mov rax, ENV
 28664 000149C1 488B4008                	mov rax, qword [rax + 8 * 1]
 28665 000149C5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28666 000149C8 488B00                  	mov rax, qword [rax]
 28667 000149CB 803804                  	cmp byte [rax], T_closure
 28668 000149CE 0F8592160000            	jne L_error_non_closure
 28669 000149D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28670                                  
 28671                                  	; recycling the current frame
 28672 000149D7 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28673 000149DA FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28674 000149DD B907000000              	mov rcx, 3 + 4
 28675 000149E2 488B5D18                	mov rbx, COUNT
 28676 000149E6 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28677 000149EB 488D55F8                	lea rdx, [rbp - 8 * 1]
 28678                                  .L_tc_recycle_frame_loop_04bb:
 28679 000149EF 4883F900                	cmp rcx, 0
 28680 000149F3 7413                    	je .L_tc_recycle_frame_done_04bb
 28681 000149F5 488B32                  	mov rsi, qword [rdx]
 28682 000149F8 488933                  	mov qword [rbx], rsi
 28683 000149FB 48FFC9                  	dec rcx
 28684 000149FE 4883EB08                	sub rbx, 8 * 1
 28685 00014A02 4883EA08                	sub rdx, 8 * 1
 28686 00014A06 EBE7                    	jmp .L_tc_recycle_frame_loop_04bb
 28687                                  .L_tc_recycle_frame_done_04bb:
 28688 00014A08 488D6308                	lea rsp, [rbx + 8 * 1]
 28689 00014A0C 5D                      	pop rbp	; the proc will restore it!
 28690 00014A0D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28691 00014A10 C9                      	leave
 28692 00014A11 C21800                  	ret AND_KILL_FRAME(1)
 28693                                  .L_lambda_simple_end_03a0:	; new closure is in rax
 28694 00014A14 803804                  	cmp byte [rax], T_closure
 28695 00014A17 0F8549160000            	jne L_error_non_closure
 28696 00014A1D FF7001                  	push SOB_CLOSURE_ENV(rax)
 28697                                  
 28698                                  	; recycling the current frame
 28699 00014A20 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28700 00014A23 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28701 00014A26 B905000000              	mov rcx, 1 + 4
 28702 00014A2B 488B5D18                	mov rbx, COUNT
 28703 00014A2F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28704 00014A34 488D55F8                	lea rdx, [rbp - 8 * 1]
 28705                                  .L_tc_recycle_frame_loop_04bc:
 28706 00014A38 4883F900                	cmp rcx, 0
 28707 00014A3C 7413                    	je .L_tc_recycle_frame_done_04bc
 28708 00014A3E 488B32                  	mov rsi, qword [rdx]
 28709 00014A41 488933                  	mov qword [rbx], rsi
 28710 00014A44 48FFC9                  	dec rcx
 28711 00014A47 4883EB08                	sub rbx, 8 * 1
 28712 00014A4B 4883EA08                	sub rdx, 8 * 1
 28713 00014A4F EBE7                    	jmp .L_tc_recycle_frame_loop_04bc
 28714                                  .L_tc_recycle_frame_done_04bc:
 28715 00014A51 488D6308                	lea rsp, [rbx + 8 * 1]
 28716 00014A55 5D                      	pop rbp	; the proc will restore it!
 28717 00014A56 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28718 00014A59 EB04                    	jmp .L_if_end_029c
 28719                                  .L_if_else_029c:
 28720 00014A5B 488B4520                	mov rax, PARAM(0)	; param vec
 28721                                  .L_if_end_029c:
 28722 00014A5F C9                      	leave
 28723 00014A60 C22800                  	ret AND_KILL_FRAME(3)
 28724                                  .L_lambda_simple_end_039f:	; new closure is in rax
 28725 00014A63 50                      	push rax
 28726 00014A64 488B4520                	mov rax, PARAM(0)	; param run
 28727 00014A68 8F00                    	pop qword [rax]
 28728 00014A6A 48B8-                   	mov rax, sob_void
 28728 00014A6C [0000000000000000] 
 28729                                  
 28730 00014A74 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28731 00014A79 E891160000              	call malloc
 28732 00014A7E 50                      	push rax
 28733 00014A7F BF08000000              	mov rdi, 8 * 1	; new rib
 28734 00014A84 E886160000              	call malloc
 28735 00014A89 50                      	push rax
 28736 00014A8A BF10000000              	mov rdi, 8 * 2	; extended env
 28737 00014A8F E87B160000              	call malloc
 28738 00014A94 488B7D10                	mov rdi, ENV
 28739 00014A98 BE00000000              	mov rsi, 0
 28740 00014A9D BA01000000              	mov rdx, 1
 28741                                  .L_lambda_simple_env_loop_03a1:	; ext_env[i + 1] <-- env[i]
 28742 00014AA2 4883FE01                	cmp rsi, 1
 28743 00014AA6 7410                    	je .L_lambda_simple_env_end_03a1
 28744 00014AA8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28745 00014AAC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28746 00014AB0 48FFC6                  	inc rsi
 28747 00014AB3 48FFC2                  	inc rdx
 28748 00014AB6 EBEA                    	jmp .L_lambda_simple_env_loop_03a1
 28749                                  .L_lambda_simple_env_end_03a1:
 28750 00014AB8 5B                      	pop rbx
 28751 00014AB9 BE00000000              	mov rsi, 0
 28752                                  .L_lambda_simple_params_loop_03a1:	; copy params
 28753 00014ABE 4883FE01                	cmp rsi, 1
 28754 00014AC2 740E                    	je .L_lambda_simple_params_end_03a1
 28755 00014AC4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28756 00014AC9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28757 00014ACD 48FFC6                  	inc rsi
 28758 00014AD0 EBEC                    	jmp .L_lambda_simple_params_loop_03a1
 28759                                  .L_lambda_simple_params_end_03a1:
 28760 00014AD2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28761 00014AD5 4889C3                  	mov rbx, rax
 28762 00014AD8 58                      	pop rax
 28763 00014AD9 C60004                  	mov byte [rax], T_closure
 28764 00014ADC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28765 00014AE0 48C74009[ED4A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03a1
 28766 00014AE8 E9FA010000              	jmp .L_lambda_simple_end_03a1
 28767                                  .L_lambda_simple_code_03a1:	; lambda-simple body
 28768 00014AED 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28769 00014AF3 740B                    	je .L_lambda_simple_arity_check_ok_03a1
 28770 00014AF5 FF742410                	push qword [rsp + 8 * 2]
 28771 00014AF9 6A01                    	push 1
 28772 00014AFB E9C8150000              	jmp L_error_incorrect_arity_simple
 28773                                  .L_lambda_simple_arity_check_ok_03a1:
 28774 00014B00 C8000000                	enter 0, 0
 28775                                  	; preparing a tail-call
 28776                                  	; preparing a non tail-call
 28777 00014B04 488B4520                	mov rax, PARAM(0)	; param vec
 28778 00014B08 50                      	push rax
 28779 00014B09 6A01                    	push 1	; arg count
 28780 00014B0B 488B0425[EB0E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 28781 00014B13 803805                  	cmp byte [rax], T_undefined
 28782 00014B16 0F84C6140000            	je L_error_fvar_undefined
 28783 00014B1C 803804                  	cmp byte [rax], T_closure
 28784 00014B1F 0F8541150000            	jne L_error_non_closure
 28785 00014B25 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28786 00014B28 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28787 00014B2B 50                      	push rax
 28788 00014B2C 6A01                    	push 1	; arg count
 28789 00014B2E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28790 00014B33 E8D7150000              	call malloc
 28791 00014B38 50                      	push rax
 28792 00014B39 BF08000000              	mov rdi, 8 * 1	; new rib
 28793 00014B3E E8CC150000              	call malloc
 28794 00014B43 50                      	push rax
 28795 00014B44 BF18000000              	mov rdi, 8 * 3	; extended env
 28796 00014B49 E8C1150000              	call malloc
 28797 00014B4E 488B7D10                	mov rdi, ENV
 28798 00014B52 BE00000000              	mov rsi, 0
 28799 00014B57 BA01000000              	mov rdx, 1
 28800                                  .L_lambda_simple_env_loop_03a2:	; ext_env[i + 1] <-- env[i]
 28801 00014B5C 4883FE02                	cmp rsi, 2
 28802 00014B60 7410                    	je .L_lambda_simple_env_end_03a2
 28803 00014B62 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28804 00014B66 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28805 00014B6A 48FFC6                  	inc rsi
 28806 00014B6D 48FFC2                  	inc rdx
 28807 00014B70 EBEA                    	jmp .L_lambda_simple_env_loop_03a2
 28808                                  .L_lambda_simple_env_end_03a2:
 28809 00014B72 5B                      	pop rbx
 28810 00014B73 BE00000000              	mov rsi, 0
 28811                                  .L_lambda_simple_params_loop_03a2:	; copy params
 28812 00014B78 4883FE01                	cmp rsi, 1
 28813 00014B7C 740E                    	je .L_lambda_simple_params_end_03a2
 28814 00014B7E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28815 00014B83 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28816 00014B87 48FFC6                  	inc rsi
 28817 00014B8A EBEC                    	jmp .L_lambda_simple_params_loop_03a2
 28818                                  .L_lambda_simple_params_end_03a2:
 28819 00014B8C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28820 00014B8F 4889C3                  	mov rbx, rax
 28821 00014B92 58                      	pop rax
 28822 00014B93 C60004                  	mov byte [rax], T_closure
 28823 00014B96 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28824 00014B9A 48C74009[A74B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03a2
 28825 00014BA2 E9F7000000              	jmp .L_lambda_simple_end_03a2
 28826                                  .L_lambda_simple_code_03a2:	; lambda-simple body
 28827 00014BA7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28828 00014BAD 740B                    	je .L_lambda_simple_arity_check_ok_03a2
 28829 00014BAF FF742410                	push qword [rsp + 8 * 2]
 28830 00014BB3 6A01                    	push 1
 28831 00014BB5 E90E150000              	jmp L_error_incorrect_arity_simple
 28832                                  .L_lambda_simple_arity_check_ok_03a2:
 28833 00014BBA C8000000                	enter 0, 0
 28834                                  	; preparing a non tail-call
 28835 00014BBE 488B4520                	mov rax, PARAM(0)	; param n
 28836 00014BC2 50                      	push rax
 28837 00014BC3 6A01                    	push 1	; arg count
 28838 00014BC5 488B0425[730F0000]      	mov rax, qword [free_var_27]	; free var zero?
 28839 00014BCD 803805                  	cmp byte [rax], T_undefined
 28840 00014BD0 0F840C140000            	je L_error_fvar_undefined
 28841 00014BD6 803804                  	cmp byte [rax], T_closure
 28842 00014BD9 0F8587140000            	jne L_error_non_closure
 28843 00014BDF FF7001                  	push SOB_CLOSURE_ENV(rax)
 28844 00014BE2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28845 00014BE5 483D[02000000]          	cmp rax, sob_boolean_false
 28846 00014BEB 740F                    	je .L_if_else_029d
 28847 00014BED 488B4510                	mov rax, ENV
 28848 00014BF1 488B00                  	mov rax, qword [rax + 8 * 0]
 28849 00014BF4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 28850 00014BF7 E99E000000              	jmp .L_if_end_029d
 28851                                  .L_if_else_029d:
 28852                                  	; preparing a tail-call
 28853                                  	; preparing a non tail-call
 28854 00014BFC 48B8-                   	mov rax, L_constants + 2158
 28854 00014BFE [6E08000000000000] 
 28855 00014C06 50                      	push rax
 28856 00014C07 488B4520                	mov rax, PARAM(0)	; param n
 28857 00014C0B 50                      	push rax
 28858 00014C0C 6A02                    	push 2	; arg count
 28859 00014C0E 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 28860 00014C16 803805                  	cmp byte [rax], T_undefined
 28861 00014C19 0F84C3130000            	je L_error_fvar_undefined
 28862 00014C1F 803804                  	cmp byte [rax], T_closure
 28863 00014C22 0F853E140000            	jne L_error_non_closure
 28864 00014C28 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28865 00014C2B FF5009                  	call SOB_CLOSURE_CODE(rax)
 28866 00014C2E 50                      	push rax
 28867 00014C2F 48B8-                   	mov rax, L_constants + 2023
 28867 00014C31 [E707000000000000] 
 28868 00014C39 50                      	push rax
 28869 00014C3A 488B4510                	mov rax, ENV
 28870 00014C3E 488B00                  	mov rax, qword [rax + 8 * 0]
 28871 00014C41 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 28872 00014C44 50                      	push rax
 28873 00014C45 6A03                    	push 3	; arg count
 28874 00014C47 488B4510                	mov rax, ENV
 28875 00014C4B 488B4008                	mov rax, qword [rax + 8 * 1]
 28876 00014C4F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28877 00014C52 488B00                  	mov rax, qword [rax]
 28878 00014C55 803804                  	cmp byte [rax], T_closure
 28879 00014C58 0F8508140000            	jne L_error_non_closure
 28880 00014C5E FF7001                  	push SOB_CLOSURE_ENV(rax)
 28881                                  
 28882                                  	; recycling the current frame
 28883 00014C61 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28884 00014C64 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28885 00014C67 B907000000              	mov rcx, 3 + 4
 28886 00014C6C 488B5D18                	mov rbx, COUNT
 28887 00014C70 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28888 00014C75 488D55F8                	lea rdx, [rbp - 8 * 1]
 28889                                  .L_tc_recycle_frame_loop_04bd:
 28890 00014C79 4883F900                	cmp rcx, 0
 28891 00014C7D 7413                    	je .L_tc_recycle_frame_done_04bd
 28892 00014C7F 488B32                  	mov rsi, qword [rdx]
 28893 00014C82 488933                  	mov qword [rbx], rsi
 28894 00014C85 48FFC9                  	dec rcx
 28895 00014C88 4883EB08                	sub rbx, 8 * 1
 28896 00014C8C 4883EA08                	sub rdx, 8 * 1
 28897 00014C90 EBE7                    	jmp .L_tc_recycle_frame_loop_04bd
 28898                                  .L_tc_recycle_frame_done_04bd:
 28899 00014C92 488D6308                	lea rsp, [rbx + 8 * 1]
 28900 00014C96 5D                      	pop rbp	; the proc will restore it!
 28901 00014C97 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28902                                  .L_if_end_029d:
 28903 00014C9A C9                      	leave
 28904 00014C9B C21800                  	ret AND_KILL_FRAME(1)
 28905                                  .L_lambda_simple_end_03a2:	; new closure is in rax
 28906 00014C9E 803804                  	cmp byte [rax], T_closure
 28907 00014CA1 0F85BF130000            	jne L_error_non_closure
 28908 00014CA7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28909                                  
 28910                                  	; recycling the current frame
 28911 00014CAA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28912 00014CAD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28913 00014CB0 B905000000              	mov rcx, 1 + 4
 28914 00014CB5 488B5D18                	mov rbx, COUNT
 28915 00014CB9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28916 00014CBE 488D55F8                	lea rdx, [rbp - 8 * 1]
 28917                                  .L_tc_recycle_frame_loop_04be:
 28918 00014CC2 4883F900                	cmp rcx, 0
 28919 00014CC6 7413                    	je .L_tc_recycle_frame_done_04be
 28920 00014CC8 488B32                  	mov rsi, qword [rdx]
 28921 00014CCB 488933                  	mov qword [rbx], rsi
 28922 00014CCE 48FFC9                  	dec rcx
 28923 00014CD1 4883EB08                	sub rbx, 8 * 1
 28924 00014CD5 4883EA08                	sub rdx, 8 * 1
 28925 00014CD9 EBE7                    	jmp .L_tc_recycle_frame_loop_04be
 28926                                  .L_tc_recycle_frame_done_04be:
 28927 00014CDB 488D6308                	lea rsp, [rbx + 8 * 1]
 28928 00014CDF 5D                      	pop rbp	; the proc will restore it!
 28929 00014CE0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28930 00014CE3 C9                      	leave
 28931 00014CE4 C21800                  	ret AND_KILL_FRAME(1)
 28932                                  .L_lambda_simple_end_03a1:	; new closure is in rax
 28933 00014CE7 C9                      	leave
 28934 00014CE8 C21800                  	ret AND_KILL_FRAME(1)
 28935                                  .L_lambda_simple_end_039e:	; new closure is in rax
 28936 00014CEB 803804                  	cmp byte [rax], T_closure
 28937 00014CEE 0F8572130000            	jne L_error_non_closure
 28938 00014CF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28939 00014CF7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28940 00014CFA 48890425[03190000]      	mov qword [free_var_171], rax
 28941 00014D02 48B8-                   	mov rax, sob_void
 28941 00014D04 [0000000000000000] 
 28942                                  
 28943 00014D0C 4889C7                  	mov rdi, rax
 28944 00014D0F E80D150000              	call print_sexpr_if_not_void
 28945                                  
 28946 00014D14 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28947 00014D19 E8F1130000              	call malloc
 28948 00014D1E 50                      	push rax
 28949 00014D1F BF00000000              	mov rdi, 8 * 0	; new rib
 28950 00014D24 E8E6130000              	call malloc
 28951 00014D29 50                      	push rax
 28952 00014D2A BF08000000              	mov rdi, 8 * 1	; extended env
 28953 00014D2F E8DB130000              	call malloc
 28954 00014D34 488B7D10                	mov rdi, ENV
 28955 00014D38 BE00000000              	mov rsi, 0
 28956 00014D3D BA01000000              	mov rdx, 1
 28957                                  .L_lambda_simple_env_loop_03a3:	; ext_env[i + 1] <-- env[i]
 28958 00014D42 4883FE00                	cmp rsi, 0
 28959 00014D46 7410                    	je .L_lambda_simple_env_end_03a3
 28960 00014D48 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28961 00014D4C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28962 00014D50 48FFC6                  	inc rsi
 28963 00014D53 48FFC2                  	inc rdx
 28964 00014D56 EBEA                    	jmp .L_lambda_simple_env_loop_03a3
 28965                                  .L_lambda_simple_env_end_03a3:
 28966 00014D58 5B                      	pop rbx
 28967 00014D59 BE00000000              	mov rsi, 0
 28968                                  .L_lambda_simple_params_loop_03a3:	; copy params
 28969 00014D5E 4883FE00                	cmp rsi, 0
 28970 00014D62 740E                    	je .L_lambda_simple_params_end_03a3
 28971 00014D64 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28972 00014D69 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28973 00014D6D 48FFC6                  	inc rsi
 28974 00014D70 EBEC                    	jmp .L_lambda_simple_params_loop_03a3
 28975                                  .L_lambda_simple_params_end_03a3:
 28976 00014D72 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28977 00014D75 4889C3                  	mov rbx, rax
 28978 00014D78 58                      	pop rax
 28979 00014D79 C60004                  	mov byte [rax], T_closure
 28980 00014D7C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28981 00014D80 48C74009[8D4D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03a3
 28982 00014D88 E936030000              	jmp .L_lambda_simple_end_03a3
 28983                                  .L_lambda_simple_code_03a3:	; lambda-simple body
 28984 00014D8D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 28985 00014D93 740B                    	je .L_lambda_simple_arity_check_ok_03a3
 28986 00014D95 FF742410                	push qword [rsp + 8 * 2]
 28987 00014D99 6A02                    	push 2
 28988 00014D9B E928130000              	jmp L_error_incorrect_arity_simple
 28989                                  .L_lambda_simple_arity_check_ok_03a3:
 28990 00014DA0 C8000000                	enter 0, 0
 28991                                  	; preparing a tail-call
 28992 00014DA4 48B8-                   	mov rax, L_constants + 1881
 28992 00014DA6 [5907000000000000] 
 28993 00014DAE 50                      	push rax
 28994 00014DAF 6A01                    	push 1	; arg count
 28995 00014DB1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28996 00014DB6 E854130000              	call malloc
 28997 00014DBB 50                      	push rax
 28998 00014DBC BF10000000              	mov rdi, 8 * 2	; new rib
 28999 00014DC1 E849130000              	call malloc
 29000 00014DC6 50                      	push rax
 29001 00014DC7 BF10000000              	mov rdi, 8 * 2	; extended env
 29002 00014DCC E83E130000              	call malloc
 29003 00014DD1 488B7D10                	mov rdi, ENV
 29004 00014DD5 BE00000000              	mov rsi, 0
 29005 00014DDA BA01000000              	mov rdx, 1
 29006                                  .L_lambda_simple_env_loop_03a4:	; ext_env[i + 1] <-- env[i]
 29007 00014DDF 4883FE01                	cmp rsi, 1
 29008 00014DE3 7410                    	je .L_lambda_simple_env_end_03a4
 29009 00014DE5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29010 00014DE9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29011 00014DED 48FFC6                  	inc rsi
 29012 00014DF0 48FFC2                  	inc rdx
 29013 00014DF3 EBEA                    	jmp .L_lambda_simple_env_loop_03a4
 29014                                  .L_lambda_simple_env_end_03a4:
 29015 00014DF5 5B                      	pop rbx
 29016 00014DF6 BE00000000              	mov rsi, 0
 29017                                  .L_lambda_simple_params_loop_03a4:	; copy params
 29018 00014DFB 4883FE02                	cmp rsi, 2
 29019 00014DFF 740E                    	je .L_lambda_simple_params_end_03a4
 29020 00014E01 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29021 00014E06 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29022 00014E0A 48FFC6                  	inc rsi
 29023 00014E0D EBEC                    	jmp .L_lambda_simple_params_loop_03a4
 29024                                  .L_lambda_simple_params_end_03a4:
 29025 00014E0F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29026 00014E12 4889C3                  	mov rbx, rax
 29027 00014E15 58                      	pop rax
 29028 00014E16 C60004                  	mov byte [rax], T_closure
 29029 00014E19 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29030 00014E1D 48C74009[2A4E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03a4
 29031 00014E25 E950020000              	jmp .L_lambda_simple_end_03a4
 29032                                  .L_lambda_simple_code_03a4:	; lambda-simple body
 29033 00014E2A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29034 00014E30 740B                    	je .L_lambda_simple_arity_check_ok_03a4
 29035 00014E32 FF742410                	push qword [rsp + 8 * 2]
 29036 00014E36 6A01                    	push 1
 29037 00014E38 E98B120000              	jmp L_error_incorrect_arity_simple
 29038                                  .L_lambda_simple_arity_check_ok_03a4:
 29039 00014E3D C8000000                	enter 0, 0
 29040 00014E41 BF08000000              	mov rdi, 8	; sob_box
 29041 00014E46 E8C4120000              	call malloc
 29042 00014E4B 488B5D20                	mov rbx, PARAM(0)
 29043 00014E4F 488918                  	mov [rax], rbx
 29044 00014E52 48894520                	mov PARAM(0), rax
 29045 00014E56 48B8-                   	mov rax, sob_void
 29045 00014E58 [0000000000000000] 
 29046                                  
 29047 00014E60 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29048 00014E65 E8A5120000              	call malloc
 29049 00014E6A 50                      	push rax
 29050 00014E6B BF08000000              	mov rdi, 8 * 1	; new rib
 29051 00014E70 E89A120000              	call malloc
 29052 00014E75 50                      	push rax
 29053 00014E76 BF18000000              	mov rdi, 8 * 3	; extended env
 29054 00014E7B E88F120000              	call malloc
 29055 00014E80 488B7D10                	mov rdi, ENV
 29056 00014E84 BE00000000              	mov rsi, 0
 29057 00014E89 BA01000000              	mov rdx, 1
 29058                                  .L_lambda_simple_env_loop_03a5:	; ext_env[i + 1] <-- env[i]
 29059 00014E8E 4883FE02                	cmp rsi, 2
 29060 00014E92 7410                    	je .L_lambda_simple_env_end_03a5
 29061 00014E94 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29062 00014E98 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29063 00014E9C 48FFC6                  	inc rsi
 29064 00014E9F 48FFC2                  	inc rdx
 29065 00014EA2 EBEA                    	jmp .L_lambda_simple_env_loop_03a5
 29066                                  .L_lambda_simple_env_end_03a5:
 29067 00014EA4 5B                      	pop rbx
 29068 00014EA5 BE00000000              	mov rsi, 0
 29069                                  .L_lambda_simple_params_loop_03a5:	; copy params
 29070 00014EAA 4883FE01                	cmp rsi, 1
 29071 00014EAE 740E                    	je .L_lambda_simple_params_end_03a5
 29072 00014EB0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29073 00014EB5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29074 00014EB9 48FFC6                  	inc rsi
 29075 00014EBC EBEC                    	jmp .L_lambda_simple_params_loop_03a5
 29076                                  .L_lambda_simple_params_end_03a5:
 29077 00014EBE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29078 00014EC1 4889C3                  	mov rbx, rax
 29079 00014EC4 58                      	pop rax
 29080 00014EC5 C60004                  	mov byte [rax], T_closure
 29081 00014EC8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29082 00014ECC 48C74009[D94E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03a5
 29083 00014ED4 E933010000              	jmp .L_lambda_simple_end_03a5
 29084                                  .L_lambda_simple_code_03a5:	; lambda-simple body
 29085 00014ED9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29086 00014EDF 740B                    	je .L_lambda_simple_arity_check_ok_03a5
 29087 00014EE1 FF742410                	push qword [rsp + 8 * 2]
 29088 00014EE5 6A01                    	push 1
 29089 00014EE7 E9DC110000              	jmp L_error_incorrect_arity_simple
 29090                                  .L_lambda_simple_arity_check_ok_03a5:
 29091 00014EEC C8000000                	enter 0, 0
 29092                                  	; preparing a non tail-call
 29093 00014EF0 488B4510                	mov rax, ENV
 29094 00014EF4 488B4008                	mov rax, qword [rax + 8 * 1]
 29095 00014EF8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 29096 00014EFB 50                      	push rax
 29097 00014EFC 488B4520                	mov rax, PARAM(0)	; param i
 29098 00014F00 50                      	push rax
 29099 00014F01 6A02                    	push 2	; arg count
 29100 00014F03 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 29101 00014F0B 803805                  	cmp byte [rax], T_undefined
 29102 00014F0E 0F84CE100000            	je L_error_fvar_undefined
 29103 00014F14 803804                  	cmp byte [rax], T_closure
 29104 00014F17 0F8549110000            	jne L_error_non_closure
 29105 00014F1D FF7001                  	push SOB_CLOSURE_ENV(rax)
 29106 00014F20 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29107 00014F23 483D[02000000]          	cmp rax, sob_boolean_false
 29108 00014F29 0F84CF000000            	je .L_if_else_029e
 29109                                  	; preparing a tail-call
 29110                                  	; preparing a non tail-call
 29111                                  	; preparing a non tail-call
 29112 00014F2F 48B8-                   	mov rax, L_constants + 2158
 29112 00014F31 [6E08000000000000] 
 29113 00014F39 50                      	push rax
 29114 00014F3A 488B4520                	mov rax, PARAM(0)	; param i
 29115 00014F3E 50                      	push rax
 29116 00014F3F 6A02                    	push 2	; arg count
 29117 00014F41 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 29118 00014F49 803805                  	cmp byte [rax], T_undefined
 29119 00014F4C 0F8490100000            	je L_error_fvar_undefined
 29120 00014F52 803804                  	cmp byte [rax], T_closure
 29121 00014F55 0F850B110000            	jne L_error_non_closure
 29122 00014F5B FF7001                  	push SOB_CLOSURE_ENV(rax)
 29123 00014F5E FF5009                  	call SOB_CLOSURE_CODE(rax)
 29124 00014F61 50                      	push rax
 29125 00014F62 6A01                    	push 1	; arg count
 29126 00014F64 488B4510                	mov rax, ENV
 29127 00014F68 488B00                  	mov rax, qword [rax + 8 * 0]
 29128 00014F6B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29129 00014F6E 488B00                  	mov rax, qword [rax]
 29130 00014F71 803804                  	cmp byte [rax], T_closure
 29131 00014F74 0F85EC100000            	jne L_error_non_closure
 29132 00014F7A FF7001                  	push SOB_CLOSURE_ENV(rax)
 29133 00014F7D FF5009                  	call SOB_CLOSURE_CODE(rax)
 29134 00014F80 50                      	push rax
 29135                                  	; preparing a non tail-call
 29136 00014F81 488B4520                	mov rax, PARAM(0)	; param i
 29137 00014F85 50                      	push rax
 29138 00014F86 6A01                    	push 1	; arg count
 29139 00014F88 488B4510                	mov rax, ENV
 29140 00014F8C 488B4008                	mov rax, qword [rax + 8 * 1]
 29141 00014F90 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 29142 00014F94 803804                  	cmp byte [rax], T_closure
 29143 00014F97 0F85C9100000            	jne L_error_non_closure
 29144 00014F9D FF7001                  	push SOB_CLOSURE_ENV(rax)
 29145 00014FA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29146 00014FA3 50                      	push rax
 29147 00014FA4 6A02                    	push 2	; arg count
 29148 00014FA6 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
 29149 00014FAE 803805                  	cmp byte [rax], T_undefined
 29150 00014FB1 0F842B100000            	je L_error_fvar_undefined
 29151 00014FB7 803804                  	cmp byte [rax], T_closure
 29152 00014FBA 0F85A6100000            	jne L_error_non_closure
 29153 00014FC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29154                                  
 29155                                  	; recycling the current frame
 29156 00014FC3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29157 00014FC6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29158 00014FC9 B906000000              	mov rcx, 2 + 4
 29159 00014FCE 488B5D18                	mov rbx, COUNT
 29160 00014FD2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29161 00014FD7 488D55F8                	lea rdx, [rbp - 8 * 1]
 29162                                  .L_tc_recycle_frame_loop_04bf:
 29163 00014FDB 4883F900                	cmp rcx, 0
 29164 00014FDF 7413                    	je .L_tc_recycle_frame_done_04bf
 29165 00014FE1 488B32                  	mov rsi, qword [rdx]
 29166 00014FE4 488933                  	mov qword [rbx], rsi
 29167 00014FE7 48FFC9                  	dec rcx
 29168 00014FEA 4883EB08                	sub rbx, 8 * 1
 29169 00014FEE 4883EA08                	sub rdx, 8 * 1
 29170 00014FF2 EBE7                    	jmp .L_tc_recycle_frame_loop_04bf
 29171                                  .L_tc_recycle_frame_done_04bf:
 29172 00014FF4 488D6308                	lea rsp, [rbx + 8 * 1]
 29173 00014FF8 5D                      	pop rbp	; the proc will restore it!
 29174 00014FF9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29175 00014FFC EB0A                    	jmp .L_if_end_029e
 29176                                  .L_if_else_029e:
 29177 00014FFE 48B8-                   	mov rax, L_constants + 1
 29177 00015000 [0100000000000000] 
 29178                                  .L_if_end_029e:
 29179 00015008 C9                      	leave
 29180 00015009 C21800                  	ret AND_KILL_FRAME(1)
 29181                                  .L_lambda_simple_end_03a5:	; new closure is in rax
 29182 0001500C 50                      	push rax
 29183 0001500D 488B4520                	mov rax, PARAM(0)	; param run
 29184 00015011 8F00                    	pop qword [rax]
 29185 00015013 48B8-                   	mov rax, sob_void
 29185 00015015 [0000000000000000] 
 29186                                  
 29187                                  	; preparing a tail-call
 29188 0001501D 48B8-                   	mov rax, L_constants + 2023
 29188 0001501F [E707000000000000] 
 29189 00015027 50                      	push rax
 29190 00015028 6A01                    	push 1	; arg count
 29191 0001502A 488B4520                	mov rax, PARAM(0)	; param run
 29192 0001502E 488B00                  	mov rax, qword [rax]
 29193 00015031 803804                  	cmp byte [rax], T_closure
 29194 00015034 0F852C100000            	jne L_error_non_closure
 29195 0001503A FF7001                  	push SOB_CLOSURE_ENV(rax)
 29196                                  
 29197                                  	; recycling the current frame
 29198 0001503D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29199 00015040 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29200 00015043 B905000000              	mov rcx, 1 + 4
 29201 00015048 488B5D18                	mov rbx, COUNT
 29202 0001504C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29203 00015051 488D55F8                	lea rdx, [rbp - 8 * 1]
 29204                                  .L_tc_recycle_frame_loop_04c0:
 29205 00015055 4883F900                	cmp rcx, 0
 29206 00015059 7413                    	je .L_tc_recycle_frame_done_04c0
 29207 0001505B 488B32                  	mov rsi, qword [rdx]
 29208 0001505E 488933                  	mov qword [rbx], rsi
 29209 00015061 48FFC9                  	dec rcx
 29210 00015064 4883EB08                	sub rbx, 8 * 1
 29211 00015068 4883EA08                	sub rdx, 8 * 1
 29212 0001506C EBE7                    	jmp .L_tc_recycle_frame_loop_04c0
 29213                                  .L_tc_recycle_frame_done_04c0:
 29214 0001506E 488D6308                	lea rsp, [rbx + 8 * 1]
 29215 00015072 5D                      	pop rbp	; the proc will restore it!
 29216 00015073 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29217 00015076 C9                      	leave
 29218 00015077 C21800                  	ret AND_KILL_FRAME(1)
 29219                                  .L_lambda_simple_end_03a4:	; new closure is in rax
 29220 0001507A 803804                  	cmp byte [rax], T_closure
 29221 0001507D 0F85E30F0000            	jne L_error_non_closure
 29222 00015083 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29223                                  
 29224                                  	; recycling the current frame
 29225 00015086 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29226 00015089 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29227 0001508C B905000000              	mov rcx, 1 + 4
 29228 00015091 488B5D18                	mov rbx, COUNT
 29229 00015095 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29230 0001509A 488D55F8                	lea rdx, [rbp - 8 * 1]
 29231                                  .L_tc_recycle_frame_loop_04c1:
 29232 0001509E 4883F900                	cmp rcx, 0
 29233 000150A2 7413                    	je .L_tc_recycle_frame_done_04c1
 29234 000150A4 488B32                  	mov rsi, qword [rdx]
 29235 000150A7 488933                  	mov qword [rbx], rsi
 29236 000150AA 48FFC9                  	dec rcx
 29237 000150AD 4883EB08                	sub rbx, 8 * 1
 29238 000150B1 4883EA08                	sub rdx, 8 * 1
 29239 000150B5 EBE7                    	jmp .L_tc_recycle_frame_loop_04c1
 29240                                  .L_tc_recycle_frame_done_04c1:
 29241 000150B7 488D6308                	lea rsp, [rbx + 8 * 1]
 29242 000150BB 5D                      	pop rbp	; the proc will restore it!
 29243 000150BC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29244 000150BF C9                      	leave
 29245 000150C0 C22000                  	ret AND_KILL_FRAME(2)
 29246                                  .L_lambda_simple_end_03a3:	; new closure is in rax
 29247 000150C3 48890425[14190000]      	mov qword [free_var_172], rax
 29248 000150CB 48B8-                   	mov rax, sob_void
 29248 000150CD [0000000000000000] 
 29249                                  
 29250 000150D5 4889C7                  	mov rdi, rax
 29251 000150D8 E844110000              	call print_sexpr_if_not_void
 29252                                  
 29253 000150DD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29254 000150E2 E828100000              	call malloc
 29255 000150E7 50                      	push rax
 29256 000150E8 BF00000000              	mov rdi, 8 * 0	; new rib
 29257 000150ED E81D100000              	call malloc
 29258 000150F2 50                      	push rax
 29259 000150F3 BF08000000              	mov rdi, 8 * 1	; extended env
 29260 000150F8 E812100000              	call malloc
 29261 000150FD 488B7D10                	mov rdi, ENV
 29262 00015101 BE00000000              	mov rsi, 0
 29263 00015106 BA01000000              	mov rdx, 1
 29264                                  .L_lambda_simple_env_loop_03a6:	; ext_env[i + 1] <-- env[i]
 29265 0001510B 4883FE00                	cmp rsi, 0
 29266 0001510F 7410                    	je .L_lambda_simple_env_end_03a6
 29267 00015111 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29268 00015115 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29269 00015119 48FFC6                  	inc rsi
 29270 0001511C 48FFC2                  	inc rdx
 29271 0001511F EBEA                    	jmp .L_lambda_simple_env_loop_03a6
 29272                                  .L_lambda_simple_env_end_03a6:
 29273 00015121 5B                      	pop rbx
 29274 00015122 BE00000000              	mov rsi, 0
 29275                                  .L_lambda_simple_params_loop_03a6:	; copy params
 29276 00015127 4883FE00                	cmp rsi, 0
 29277 0001512B 740E                    	je .L_lambda_simple_params_end_03a6
 29278 0001512D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29279 00015132 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29280 00015136 48FFC6                  	inc rsi
 29281 00015139 EBEC                    	jmp .L_lambda_simple_params_loop_03a6
 29282                                  .L_lambda_simple_params_end_03a6:
 29283 0001513B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29284 0001513E 4889C3                  	mov rbx, rax
 29285 00015141 58                      	pop rax
 29286 00015142 C60004                  	mov byte [rax], T_closure
 29287 00015145 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29288 00015149 48C74009[56510100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03a6
 29289 00015151 E94A040000              	jmp .L_lambda_simple_end_03a6
 29290                                  .L_lambda_simple_code_03a6:	; lambda-simple body
 29291 00015156 48837C241002            	cmp qword [rsp + 8 * 2], 2
 29292 0001515C 740B                    	je .L_lambda_simple_arity_check_ok_03a6
 29293 0001515E FF742410                	push qword [rsp + 8 * 2]
 29294 00015162 6A02                    	push 2
 29295 00015164 E95F0F0000              	jmp L_error_incorrect_arity_simple
 29296                                  .L_lambda_simple_arity_check_ok_03a6:
 29297 00015169 C8000000                	enter 0, 0
 29298                                  	; preparing a tail-call
 29299                                  	; preparing a non tail-call
 29300 0001516D 488B4520                	mov rax, PARAM(0)	; param n
 29301 00015171 50                      	push rax
 29302 00015172 6A01                    	push 1	; arg count
 29303 00015174 488B0425[82110000]      	mov rax, qword [free_var_58]	; free var make-string
 29304 0001517C 803805                  	cmp byte [rax], T_undefined
 29305 0001517F 0F845D0E0000            	je L_error_fvar_undefined
 29306 00015185 803804                  	cmp byte [rax], T_closure
 29307 00015188 0F85D80E0000            	jne L_error_non_closure
 29308 0001518E FF7001                  	push SOB_CLOSURE_ENV(rax)
 29309 00015191 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29310 00015194 50                      	push rax
 29311 00015195 6A01                    	push 1	; arg count
 29312 00015197 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29313 0001519C E86E0F0000              	call malloc
 29314 000151A1 50                      	push rax
 29315 000151A2 BF10000000              	mov rdi, 8 * 2	; new rib
 29316 000151A7 E8630F0000              	call malloc
 29317 000151AC 50                      	push rax
 29318 000151AD BF10000000              	mov rdi, 8 * 2	; extended env
 29319 000151B2 E8580F0000              	call malloc
 29320 000151B7 488B7D10                	mov rdi, ENV
 29321 000151BB BE00000000              	mov rsi, 0
 29322 000151C0 BA01000000              	mov rdx, 1
 29323                                  .L_lambda_simple_env_loop_03a7:	; ext_env[i + 1] <-- env[i]
 29324 000151C5 4883FE01                	cmp rsi, 1
 29325 000151C9 7410                    	je .L_lambda_simple_env_end_03a7
 29326 000151CB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29327 000151CF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29328 000151D3 48FFC6                  	inc rsi
 29329 000151D6 48FFC2                  	inc rdx
 29330 000151D9 EBEA                    	jmp .L_lambda_simple_env_loop_03a7
 29331                                  .L_lambda_simple_env_end_03a7:
 29332 000151DB 5B                      	pop rbx
 29333 000151DC BE00000000              	mov rsi, 0
 29334                                  .L_lambda_simple_params_loop_03a7:	; copy params
 29335 000151E1 4883FE02                	cmp rsi, 2
 29336 000151E5 740E                    	je .L_lambda_simple_params_end_03a7
 29337 000151E7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29338 000151EC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29339 000151F0 48FFC6                  	inc rsi
 29340 000151F3 EBEC                    	jmp .L_lambda_simple_params_loop_03a7
 29341                                  .L_lambda_simple_params_end_03a7:
 29342 000151F5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29343 000151F8 4889C3                  	mov rbx, rax
 29344 000151FB 58                      	pop rax
 29345 000151FC C60004                  	mov byte [rax], T_closure
 29346 000151FF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29347 00015203 48C74009[10520100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03a7
 29348 0001520B E947030000              	jmp .L_lambda_simple_end_03a7
 29349                                  .L_lambda_simple_code_03a7:	; lambda-simple body
 29350 00015210 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29351 00015216 740B                    	je .L_lambda_simple_arity_check_ok_03a7
 29352 00015218 FF742410                	push qword [rsp + 8 * 2]
 29353 0001521C 6A01                    	push 1
 29354 0001521E E9A50E0000              	jmp L_error_incorrect_arity_simple
 29355                                  .L_lambda_simple_arity_check_ok_03a7:
 29356 00015223 C8000000                	enter 0, 0
 29357                                  	; preparing a tail-call
 29358 00015227 48B8-                   	mov rax, L_constants + 1881
 29358 00015229 [5907000000000000] 
 29359 00015231 50                      	push rax
 29360 00015232 6A01                    	push 1	; arg count
 29361 00015234 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29362 00015239 E8D10E0000              	call malloc
 29363 0001523E 50                      	push rax
 29364 0001523F BF08000000              	mov rdi, 8 * 1	; new rib
 29365 00015244 E8C60E0000              	call malloc
 29366 00015249 50                      	push rax
 29367 0001524A BF18000000              	mov rdi, 8 * 3	; extended env
 29368 0001524F E8BB0E0000              	call malloc
 29369 00015254 488B7D10                	mov rdi, ENV
 29370 00015258 BE00000000              	mov rsi, 0
 29371 0001525D BA01000000              	mov rdx, 1
 29372                                  .L_lambda_simple_env_loop_03a8:	; ext_env[i + 1] <-- env[i]
 29373 00015262 4883FE02                	cmp rsi, 2
 29374 00015266 7410                    	je .L_lambda_simple_env_end_03a8
 29375 00015268 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29376 0001526C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29377 00015270 48FFC6                  	inc rsi
 29378 00015273 48FFC2                  	inc rdx
 29379 00015276 EBEA                    	jmp .L_lambda_simple_env_loop_03a8
 29380                                  .L_lambda_simple_env_end_03a8:
 29381 00015278 5B                      	pop rbx
 29382 00015279 BE00000000              	mov rsi, 0
 29383                                  .L_lambda_simple_params_loop_03a8:	; copy params
 29384 0001527E 4883FE01                	cmp rsi, 1
 29385 00015282 740E                    	je .L_lambda_simple_params_end_03a8
 29386 00015284 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29387 00015289 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29388 0001528D 48FFC6                  	inc rsi
 29389 00015290 EBEC                    	jmp .L_lambda_simple_params_loop_03a8
 29390                                  .L_lambda_simple_params_end_03a8:
 29391 00015292 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29392 00015295 4889C3                  	mov rbx, rax
 29393 00015298 58                      	pop rax
 29394 00015299 C60004                  	mov byte [rax], T_closure
 29395 0001529C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29396 000152A0 48C74009[AD520100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03a8
 29397 000152A8 E961020000              	jmp .L_lambda_simple_end_03a8
 29398                                  .L_lambda_simple_code_03a8:	; lambda-simple body
 29399 000152AD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29400 000152B3 740B                    	je .L_lambda_simple_arity_check_ok_03a8
 29401 000152B5 FF742410                	push qword [rsp + 8 * 2]
 29402 000152B9 6A01                    	push 1
 29403 000152BB E9080E0000              	jmp L_error_incorrect_arity_simple
 29404                                  .L_lambda_simple_arity_check_ok_03a8:
 29405 000152C0 C8000000                	enter 0, 0
 29406 000152C4 BF08000000              	mov rdi, 8	; sob_box
 29407 000152C9 E8410E0000              	call malloc
 29408 000152CE 488B5D20                	mov rbx, PARAM(0)
 29409 000152D2 488918                  	mov [rax], rbx
 29410 000152D5 48894520                	mov PARAM(0), rax
 29411 000152D9 48B8-                   	mov rax, sob_void
 29411 000152DB [0000000000000000] 
 29412                                  
 29413 000152E3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29414 000152E8 E8220E0000              	call malloc
 29415 000152ED 50                      	push rax
 29416 000152EE BF08000000              	mov rdi, 8 * 1	; new rib
 29417 000152F3 E8170E0000              	call malloc
 29418 000152F8 50                      	push rax
 29419 000152F9 BF20000000              	mov rdi, 8 * 4	; extended env
 29420 000152FE E80C0E0000              	call malloc
 29421 00015303 488B7D10                	mov rdi, ENV
 29422 00015307 BE00000000              	mov rsi, 0
 29423 0001530C BA01000000              	mov rdx, 1
 29424                                  .L_lambda_simple_env_loop_03a9:	; ext_env[i + 1] <-- env[i]
 29425 00015311 4883FE03                	cmp rsi, 3
 29426 00015315 7410                    	je .L_lambda_simple_env_end_03a9
 29427 00015317 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29428 0001531B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29429 0001531F 48FFC6                  	inc rsi
 29430 00015322 48FFC2                  	inc rdx
 29431 00015325 EBEA                    	jmp .L_lambda_simple_env_loop_03a9
 29432                                  .L_lambda_simple_env_end_03a9:
 29433 00015327 5B                      	pop rbx
 29434 00015328 BE00000000              	mov rsi, 0
 29435                                  .L_lambda_simple_params_loop_03a9:	; copy params
 29436 0001532D 4883FE01                	cmp rsi, 1
 29437 00015331 740E                    	je .L_lambda_simple_params_end_03a9
 29438 00015333 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29439 00015338 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29440 0001533C 48FFC6                  	inc rsi
 29441 0001533F EBEC                    	jmp .L_lambda_simple_params_loop_03a9
 29442                                  .L_lambda_simple_params_end_03a9:
 29443 00015341 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29444 00015344 4889C3                  	mov rbx, rax
 29445 00015347 58                      	pop rax
 29446 00015348 C60004                  	mov byte [rax], T_closure
 29447 0001534B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29448 0001534F 48C74009[5C530100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03a9
 29449 00015357 E944010000              	jmp .L_lambda_simple_end_03a9
 29450                                  .L_lambda_simple_code_03a9:	; lambda-simple body
 29451 0001535C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29452 00015362 740B                    	je .L_lambda_simple_arity_check_ok_03a9
 29453 00015364 FF742410                	push qword [rsp + 8 * 2]
 29454 00015368 6A01                    	push 1
 29455 0001536A E9590D0000              	jmp L_error_incorrect_arity_simple
 29456                                  .L_lambda_simple_arity_check_ok_03a9:
 29457 0001536F C8000000                	enter 0, 0
 29458                                  	; preparing a non tail-call
 29459 00015373 488B4510                	mov rax, ENV
 29460 00015377 488B4010                	mov rax, qword [rax + 8 * 2]
 29461 0001537B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 29462 0001537E 50                      	push rax
 29463 0001537F 488B4520                	mov rax, PARAM(0)	; param i
 29464 00015383 50                      	push rax
 29465 00015384 6A02                    	push 2	; arg count
 29466 00015386 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 29467 0001538E 803805                  	cmp byte [rax], T_undefined
 29468 00015391 0F844B0C0000            	je L_error_fvar_undefined
 29469 00015397 803804                  	cmp byte [rax], T_closure
 29470 0001539A 0F85C60C0000            	jne L_error_non_closure
 29471 000153A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29472 000153A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29473 000153A6 483D[02000000]          	cmp rax, sob_boolean_false
 29474 000153AC 0F84DF000000            	je .L_if_else_029f
 29475                                  	; preparing a non tail-call
 29476                                  	; preparing a non tail-call
 29477 000153B2 488B4520                	mov rax, PARAM(0)	; param i
 29478 000153B6 50                      	push rax
 29479 000153B7 6A01                    	push 1	; arg count
 29480 000153B9 488B4510                	mov rax, ENV
 29481 000153BD 488B4010                	mov rax, qword [rax + 8 * 2]
 29482 000153C1 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 29483 000153C5 803804                  	cmp byte [rax], T_closure
 29484 000153C8 0F85980C0000            	jne L_error_non_closure
 29485 000153CE FF7001                  	push SOB_CLOSURE_ENV(rax)
 29486 000153D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29487 000153D4 50                      	push rax
 29488 000153D5 488B4520                	mov rax, PARAM(0)	; param i
 29489 000153D9 50                      	push rax
 29490 000153DA 488B4510                	mov rax, ENV
 29491 000153DE 488B4008                	mov rax, qword [rax + 8 * 1]
 29492 000153E2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29493 000153E5 50                      	push rax
 29494 000153E6 6A03                    	push 3	; arg count
 29495 000153E8 488B0425[60110000]      	mov rax, qword [free_var_56]	; free var string-set!
 29496 000153F0 803805                  	cmp byte [rax], T_undefined
 29497 000153F3 0F84E90B0000            	je L_error_fvar_undefined
 29498 000153F9 803804                  	cmp byte [rax], T_closure
 29499 000153FC 0F85640C0000            	jne L_error_non_closure
 29500 00015402 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29501 00015405 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29502                                  
 29503                                  	; preparing a tail-call
 29504                                  	; preparing a non tail-call
 29505 00015408 48B8-                   	mov rax, L_constants + 2158
 29505 0001540A [6E08000000000000] 
 29506 00015412 50                      	push rax
 29507 00015413 488B4520                	mov rax, PARAM(0)	; param i
 29508 00015417 50                      	push rax
 29509 00015418 6A02                    	push 2	; arg count
 29510 0001541A 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 29511 00015422 803805                  	cmp byte [rax], T_undefined
 29512 00015425 0F84B70B0000            	je L_error_fvar_undefined
 29513 0001542B 803804                  	cmp byte [rax], T_closure
 29514 0001542E 0F85320C0000            	jne L_error_non_closure
 29515 00015434 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29516 00015437 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29517 0001543A 50                      	push rax
 29518 0001543B 6A01                    	push 1	; arg count
 29519 0001543D 488B4510                	mov rax, ENV
 29520 00015441 488B00                  	mov rax, qword [rax + 8 * 0]
 29521 00015444 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29522 00015447 488B00                  	mov rax, qword [rax]
 29523 0001544A 803804                  	cmp byte [rax], T_closure
 29524 0001544D 0F85130C0000            	jne L_error_non_closure
 29525 00015453 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29526                                  
 29527                                  	; recycling the current frame
 29528 00015456 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29529 00015459 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29530 0001545C B905000000              	mov rcx, 1 + 4
 29531 00015461 488B5D18                	mov rbx, COUNT
 29532 00015465 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29533 0001546A 488D55F8                	lea rdx, [rbp - 8 * 1]
 29534                                  .L_tc_recycle_frame_loop_04c2:
 29535 0001546E 4883F900                	cmp rcx, 0
 29536 00015472 7413                    	je .L_tc_recycle_frame_done_04c2
 29537 00015474 488B32                  	mov rsi, qword [rdx]
 29538 00015477 488933                  	mov qword [rbx], rsi
 29539 0001547A 48FFC9                  	dec rcx
 29540 0001547D 4883EB08                	sub rbx, 8 * 1
 29541 00015481 4883EA08                	sub rdx, 8 * 1
 29542 00015485 EBE7                    	jmp .L_tc_recycle_frame_loop_04c2
 29543                                  .L_tc_recycle_frame_done_04c2:
 29544 00015487 488D6308                	lea rsp, [rbx + 8 * 1]
 29545 0001548B 5D                      	pop rbp	; the proc will restore it!
 29546 0001548C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29547 0001548F EB0B                    	jmp .L_if_end_029f
 29548                                  .L_if_else_029f:
 29549 00015491 488B4510                	mov rax, ENV
 29550 00015495 488B4008                	mov rax, qword [rax + 8 * 1]
 29551 00015499 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29552                                  .L_if_end_029f:
 29553 0001549C C9                      	leave
 29554 0001549D C21800                  	ret AND_KILL_FRAME(1)
 29555                                  .L_lambda_simple_end_03a9:	; new closure is in rax
 29556 000154A0 50                      	push rax
 29557 000154A1 488B4520                	mov rax, PARAM(0)	; param run
 29558 000154A5 8F00                    	pop qword [rax]
 29559 000154A7 48B8-                   	mov rax, sob_void
 29559 000154A9 [0000000000000000] 
 29560                                  
 29561                                  	; preparing a tail-call
 29562 000154B1 48B8-                   	mov rax, L_constants + 2023
 29562 000154B3 [E707000000000000] 
 29563 000154BB 50                      	push rax
 29564 000154BC 6A01                    	push 1	; arg count
 29565 000154BE 488B4520                	mov rax, PARAM(0)	; param run
 29566 000154C2 488B00                  	mov rax, qword [rax]
 29567 000154C5 803804                  	cmp byte [rax], T_closure
 29568 000154C8 0F85980B0000            	jne L_error_non_closure
 29569 000154CE FF7001                  	push SOB_CLOSURE_ENV(rax)
 29570                                  
 29571                                  	; recycling the current frame
 29572 000154D1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29573 000154D4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29574 000154D7 B905000000              	mov rcx, 1 + 4
 29575 000154DC 488B5D18                	mov rbx, COUNT
 29576 000154E0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29577 000154E5 488D55F8                	lea rdx, [rbp - 8 * 1]
 29578                                  .L_tc_recycle_frame_loop_04c3:
 29579 000154E9 4883F900                	cmp rcx, 0
 29580 000154ED 7413                    	je .L_tc_recycle_frame_done_04c3
 29581 000154EF 488B32                  	mov rsi, qword [rdx]
 29582 000154F2 488933                  	mov qword [rbx], rsi
 29583 000154F5 48FFC9                  	dec rcx
 29584 000154F8 4883EB08                	sub rbx, 8 * 1
 29585 000154FC 4883EA08                	sub rdx, 8 * 1
 29586 00015500 EBE7                    	jmp .L_tc_recycle_frame_loop_04c3
 29587                                  .L_tc_recycle_frame_done_04c3:
 29588 00015502 488D6308                	lea rsp, [rbx + 8 * 1]
 29589 00015506 5D                      	pop rbp	; the proc will restore it!
 29590 00015507 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29591 0001550A C9                      	leave
 29592 0001550B C21800                  	ret AND_KILL_FRAME(1)
 29593                                  .L_lambda_simple_end_03a8:	; new closure is in rax
 29594 0001550E 803804                  	cmp byte [rax], T_closure
 29595 00015511 0F854F0B0000            	jne L_error_non_closure
 29596 00015517 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29597                                  
 29598                                  	; recycling the current frame
 29599 0001551A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29600 0001551D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29601 00015520 B905000000              	mov rcx, 1 + 4
 29602 00015525 488B5D18                	mov rbx, COUNT
 29603 00015529 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29604 0001552E 488D55F8                	lea rdx, [rbp - 8 * 1]
 29605                                  .L_tc_recycle_frame_loop_04c4:
 29606 00015532 4883F900                	cmp rcx, 0
 29607 00015536 7413                    	je .L_tc_recycle_frame_done_04c4
 29608 00015538 488B32                  	mov rsi, qword [rdx]
 29609 0001553B 488933                  	mov qword [rbx], rsi
 29610 0001553E 48FFC9                  	dec rcx
 29611 00015541 4883EB08                	sub rbx, 8 * 1
 29612 00015545 4883EA08                	sub rdx, 8 * 1
 29613 00015549 EBE7                    	jmp .L_tc_recycle_frame_loop_04c4
 29614                                  .L_tc_recycle_frame_done_04c4:
 29615 0001554B 488D6308                	lea rsp, [rbx + 8 * 1]
 29616 0001554F 5D                      	pop rbp	; the proc will restore it!
 29617 00015550 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29618 00015553 C9                      	leave
 29619 00015554 C21800                  	ret AND_KILL_FRAME(1)
 29620                                  .L_lambda_simple_end_03a7:	; new closure is in rax
 29621 00015557 803804                  	cmp byte [rax], T_closure
 29622 0001555A 0F85060B0000            	jne L_error_non_closure
 29623 00015560 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29624                                  
 29625                                  	; recycling the current frame
 29626 00015563 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29627 00015566 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29628 00015569 B905000000              	mov rcx, 1 + 4
 29629 0001556E 488B5D18                	mov rbx, COUNT
 29630 00015572 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29631 00015577 488D55F8                	lea rdx, [rbp - 8 * 1]
 29632                                  .L_tc_recycle_frame_loop_04c5:
 29633 0001557B 4883F900                	cmp rcx, 0
 29634 0001557F 7413                    	je .L_tc_recycle_frame_done_04c5
 29635 00015581 488B32                  	mov rsi, qword [rdx]
 29636 00015584 488933                  	mov qword [rbx], rsi
 29637 00015587 48FFC9                  	dec rcx
 29638 0001558A 4883EB08                	sub rbx, 8 * 1
 29639 0001558E 4883EA08                	sub rdx, 8 * 1
 29640 00015592 EBE7                    	jmp .L_tc_recycle_frame_loop_04c5
 29641                                  .L_tc_recycle_frame_done_04c5:
 29642 00015594 488D6308                	lea rsp, [rbx + 8 * 1]
 29643 00015598 5D                      	pop rbp	; the proc will restore it!
 29644 00015599 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29645 0001559C C9                      	leave
 29646 0001559D C22000                  	ret AND_KILL_FRAME(2)
 29647                                  .L_lambda_simple_end_03a6:	; new closure is in rax
 29648 000155A0 48890425[25190000]      	mov qword [free_var_173], rax
 29649 000155A8 48B8-                   	mov rax, sob_void
 29649 000155AA [0000000000000000] 
 29650                                  
 29651 000155B2 4889C7                  	mov rdi, rax
 29652 000155B5 E8670C0000              	call print_sexpr_if_not_void
 29653                                  
 29654 000155BA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29655 000155BF E84B0B0000              	call malloc
 29656 000155C4 50                      	push rax
 29657 000155C5 BF00000000              	mov rdi, 8 * 0	; new rib
 29658 000155CA E8400B0000              	call malloc
 29659 000155CF 50                      	push rax
 29660 000155D0 BF08000000              	mov rdi, 8 * 1	; extended env
 29661 000155D5 E8350B0000              	call malloc
 29662 000155DA 488B7D10                	mov rdi, ENV
 29663 000155DE BE00000000              	mov rsi, 0
 29664 000155E3 BA01000000              	mov rdx, 1
 29665                                  .L_lambda_simple_env_loop_03aa:	; ext_env[i + 1] <-- env[i]
 29666 000155E8 4883FE00                	cmp rsi, 0
 29667 000155EC 7410                    	je .L_lambda_simple_env_end_03aa
 29668 000155EE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29669 000155F2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29670 000155F6 48FFC6                  	inc rsi
 29671 000155F9 48FFC2                  	inc rdx
 29672 000155FC EBEA                    	jmp .L_lambda_simple_env_loop_03aa
 29673                                  .L_lambda_simple_env_end_03aa:
 29674 000155FE 5B                      	pop rbx
 29675 000155FF BE00000000              	mov rsi, 0
 29676                                  .L_lambda_simple_params_loop_03aa:	; copy params
 29677 00015604 4883FE00                	cmp rsi, 0
 29678 00015608 740E                    	je .L_lambda_simple_params_end_03aa
 29679 0001560A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29680 0001560F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29681 00015613 48FFC6                  	inc rsi
 29682 00015616 EBEC                    	jmp .L_lambda_simple_params_loop_03aa
 29683                                  .L_lambda_simple_params_end_03aa:
 29684 00015618 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29685 0001561B 4889C3                  	mov rbx, rax
 29686 0001561E 58                      	pop rax
 29687 0001561F C60004                  	mov byte [rax], T_closure
 29688 00015622 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29689 00015626 48C74009[33560100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03aa
 29690 0001562E E94A040000              	jmp .L_lambda_simple_end_03aa
 29691                                  .L_lambda_simple_code_03aa:	; lambda-simple body
 29692 00015633 48837C241002            	cmp qword [rsp + 8 * 2], 2
 29693 00015639 740B                    	je .L_lambda_simple_arity_check_ok_03aa
 29694 0001563B FF742410                	push qword [rsp + 8 * 2]
 29695 0001563F 6A02                    	push 2
 29696 00015641 E9820A0000              	jmp L_error_incorrect_arity_simple
 29697                                  .L_lambda_simple_arity_check_ok_03aa:
 29698 00015646 C8000000                	enter 0, 0
 29699                                  	; preparing a tail-call
 29700                                  	; preparing a non tail-call
 29701 0001564A 488B4520                	mov rax, PARAM(0)	; param n
 29702 0001564E 50                      	push rax
 29703 0001564F 6A01                    	push 1	; arg count
 29704 00015651 488B0425[71110000]      	mov rax, qword [free_var_57]	; free var make-vector
 29705 00015659 803805                  	cmp byte [rax], T_undefined
 29706 0001565C 0F8480090000            	je L_error_fvar_undefined
 29707 00015662 803804                  	cmp byte [rax], T_closure
 29708 00015665 0F85FB090000            	jne L_error_non_closure
 29709 0001566B FF7001                  	push SOB_CLOSURE_ENV(rax)
 29710 0001566E FF5009                  	call SOB_CLOSURE_CODE(rax)
 29711 00015671 50                      	push rax
 29712 00015672 6A01                    	push 1	; arg count
 29713 00015674 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29714 00015679 E8910A0000              	call malloc
 29715 0001567E 50                      	push rax
 29716 0001567F BF10000000              	mov rdi, 8 * 2	; new rib
 29717 00015684 E8860A0000              	call malloc
 29718 00015689 50                      	push rax
 29719 0001568A BF10000000              	mov rdi, 8 * 2	; extended env
 29720 0001568F E87B0A0000              	call malloc
 29721 00015694 488B7D10                	mov rdi, ENV
 29722 00015698 BE00000000              	mov rsi, 0
 29723 0001569D BA01000000              	mov rdx, 1
 29724                                  .L_lambda_simple_env_loop_03ab:	; ext_env[i + 1] <-- env[i]
 29725 000156A2 4883FE01                	cmp rsi, 1
 29726 000156A6 7410                    	je .L_lambda_simple_env_end_03ab
 29727 000156A8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29728 000156AC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29729 000156B0 48FFC6                  	inc rsi
 29730 000156B3 48FFC2                  	inc rdx
 29731 000156B6 EBEA                    	jmp .L_lambda_simple_env_loop_03ab
 29732                                  .L_lambda_simple_env_end_03ab:
 29733 000156B8 5B                      	pop rbx
 29734 000156B9 BE00000000              	mov rsi, 0
 29735                                  .L_lambda_simple_params_loop_03ab:	; copy params
 29736 000156BE 4883FE02                	cmp rsi, 2
 29737 000156C2 740E                    	je .L_lambda_simple_params_end_03ab
 29738 000156C4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29739 000156C9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29740 000156CD 48FFC6                  	inc rsi
 29741 000156D0 EBEC                    	jmp .L_lambda_simple_params_loop_03ab
 29742                                  .L_lambda_simple_params_end_03ab:
 29743 000156D2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29744 000156D5 4889C3                  	mov rbx, rax
 29745 000156D8 58                      	pop rax
 29746 000156D9 C60004                  	mov byte [rax], T_closure
 29747 000156DC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29748 000156E0 48C74009[ED560100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03ab
 29749 000156E8 E947030000              	jmp .L_lambda_simple_end_03ab
 29750                                  .L_lambda_simple_code_03ab:	; lambda-simple body
 29751 000156ED 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29752 000156F3 740B                    	je .L_lambda_simple_arity_check_ok_03ab
 29753 000156F5 FF742410                	push qword [rsp + 8 * 2]
 29754 000156F9 6A01                    	push 1
 29755 000156FB E9C8090000              	jmp L_error_incorrect_arity_simple
 29756                                  .L_lambda_simple_arity_check_ok_03ab:
 29757 00015700 C8000000                	enter 0, 0
 29758                                  	; preparing a tail-call
 29759 00015704 48B8-                   	mov rax, L_constants + 1881
 29759 00015706 [5907000000000000] 
 29760 0001570E 50                      	push rax
 29761 0001570F 6A01                    	push 1	; arg count
 29762 00015711 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29763 00015716 E8F4090000              	call malloc
 29764 0001571B 50                      	push rax
 29765 0001571C BF08000000              	mov rdi, 8 * 1	; new rib
 29766 00015721 E8E9090000              	call malloc
 29767 00015726 50                      	push rax
 29768 00015727 BF18000000              	mov rdi, 8 * 3	; extended env
 29769 0001572C E8DE090000              	call malloc
 29770 00015731 488B7D10                	mov rdi, ENV
 29771 00015735 BE00000000              	mov rsi, 0
 29772 0001573A BA01000000              	mov rdx, 1
 29773                                  .L_lambda_simple_env_loop_03ac:	; ext_env[i + 1] <-- env[i]
 29774 0001573F 4883FE02                	cmp rsi, 2
 29775 00015743 7410                    	je .L_lambda_simple_env_end_03ac
 29776 00015745 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29777 00015749 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29778 0001574D 48FFC6                  	inc rsi
 29779 00015750 48FFC2                  	inc rdx
 29780 00015753 EBEA                    	jmp .L_lambda_simple_env_loop_03ac
 29781                                  .L_lambda_simple_env_end_03ac:
 29782 00015755 5B                      	pop rbx
 29783 00015756 BE00000000              	mov rsi, 0
 29784                                  .L_lambda_simple_params_loop_03ac:	; copy params
 29785 0001575B 4883FE01                	cmp rsi, 1
 29786 0001575F 740E                    	je .L_lambda_simple_params_end_03ac
 29787 00015761 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29788 00015766 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29789 0001576A 48FFC6                  	inc rsi
 29790 0001576D EBEC                    	jmp .L_lambda_simple_params_loop_03ac
 29791                                  .L_lambda_simple_params_end_03ac:
 29792 0001576F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29793 00015772 4889C3                  	mov rbx, rax
 29794 00015775 58                      	pop rax
 29795 00015776 C60004                  	mov byte [rax], T_closure
 29796 00015779 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29797 0001577D 48C74009[8A570100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03ac
 29798 00015785 E961020000              	jmp .L_lambda_simple_end_03ac
 29799                                  .L_lambda_simple_code_03ac:	; lambda-simple body
 29800 0001578A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29801 00015790 740B                    	je .L_lambda_simple_arity_check_ok_03ac
 29802 00015792 FF742410                	push qword [rsp + 8 * 2]
 29803 00015796 6A01                    	push 1
 29804 00015798 E92B090000              	jmp L_error_incorrect_arity_simple
 29805                                  .L_lambda_simple_arity_check_ok_03ac:
 29806 0001579D C8000000                	enter 0, 0
 29807 000157A1 BF08000000              	mov rdi, 8	; sob_box
 29808 000157A6 E864090000              	call malloc
 29809 000157AB 488B5D20                	mov rbx, PARAM(0)
 29810 000157AF 488918                  	mov [rax], rbx
 29811 000157B2 48894520                	mov PARAM(0), rax
 29812 000157B6 48B8-                   	mov rax, sob_void
 29812 000157B8 [0000000000000000] 
 29813                                  
 29814 000157C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29815 000157C5 E845090000              	call malloc
 29816 000157CA 50                      	push rax
 29817 000157CB BF08000000              	mov rdi, 8 * 1	; new rib
 29818 000157D0 E83A090000              	call malloc
 29819 000157D5 50                      	push rax
 29820 000157D6 BF20000000              	mov rdi, 8 * 4	; extended env
 29821 000157DB E82F090000              	call malloc
 29822 000157E0 488B7D10                	mov rdi, ENV
 29823 000157E4 BE00000000              	mov rsi, 0
 29824 000157E9 BA01000000              	mov rdx, 1
 29825                                  .L_lambda_simple_env_loop_03ad:	; ext_env[i + 1] <-- env[i]
 29826 000157EE 4883FE03                	cmp rsi, 3
 29827 000157F2 7410                    	je .L_lambda_simple_env_end_03ad
 29828 000157F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29829 000157F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29830 000157FC 48FFC6                  	inc rsi
 29831 000157FF 48FFC2                  	inc rdx
 29832 00015802 EBEA                    	jmp .L_lambda_simple_env_loop_03ad
 29833                                  .L_lambda_simple_env_end_03ad:
 29834 00015804 5B                      	pop rbx
 29835 00015805 BE00000000              	mov rsi, 0
 29836                                  .L_lambda_simple_params_loop_03ad:	; copy params
 29837 0001580A 4883FE01                	cmp rsi, 1
 29838 0001580E 740E                    	je .L_lambda_simple_params_end_03ad
 29839 00015810 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29840 00015815 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29841 00015819 48FFC6                  	inc rsi
 29842 0001581C EBEC                    	jmp .L_lambda_simple_params_loop_03ad
 29843                                  .L_lambda_simple_params_end_03ad:
 29844 0001581E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29845 00015821 4889C3                  	mov rbx, rax
 29846 00015824 58                      	pop rax
 29847 00015825 C60004                  	mov byte [rax], T_closure
 29848 00015828 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29849 0001582C 48C74009[39580100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03ad
 29850 00015834 E944010000              	jmp .L_lambda_simple_end_03ad
 29851                                  .L_lambda_simple_code_03ad:	; lambda-simple body
 29852 00015839 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29853 0001583F 740B                    	je .L_lambda_simple_arity_check_ok_03ad
 29854 00015841 FF742410                	push qword [rsp + 8 * 2]
 29855 00015845 6A01                    	push 1
 29856 00015847 E97C080000              	jmp L_error_incorrect_arity_simple
 29857                                  .L_lambda_simple_arity_check_ok_03ad:
 29858 0001584C C8000000                	enter 0, 0
 29859                                  	; preparing a non tail-call
 29860 00015850 488B4510                	mov rax, ENV
 29861 00015854 488B4010                	mov rax, qword [rax + 8 * 2]
 29862 00015858 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 29863 0001585B 50                      	push rax
 29864 0001585C 488B4520                	mov rax, PARAM(0)	; param i
 29865 00015860 50                      	push rax
 29866 00015861 6A02                    	push 2	; arg count
 29867 00015863 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 29868 0001586B 803805                  	cmp byte [rax], T_undefined
 29869 0001586E 0F846E070000            	je L_error_fvar_undefined
 29870 00015874 803804                  	cmp byte [rax], T_closure
 29871 00015877 0F85E9070000            	jne L_error_non_closure
 29872 0001587D FF7001                  	push SOB_CLOSURE_ENV(rax)
 29873 00015880 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29874 00015883 483D[02000000]          	cmp rax, sob_boolean_false
 29875 00015889 0F84DF000000            	je .L_if_else_02a0
 29876                                  	; preparing a non tail-call
 29877                                  	; preparing a non tail-call
 29878 0001588F 488B4520                	mov rax, PARAM(0)	; param i
 29879 00015893 50                      	push rax
 29880 00015894 6A01                    	push 1	; arg count
 29881 00015896 488B4510                	mov rax, ENV
 29882 0001589A 488B4010                	mov rax, qword [rax + 8 * 2]
 29883 0001589E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 29884 000158A2 803804                  	cmp byte [rax], T_closure
 29885 000158A5 0F85BB070000            	jne L_error_non_closure
 29886 000158AB FF7001                  	push SOB_CLOSURE_ENV(rax)
 29887 000158AE FF5009                  	call SOB_CLOSURE_CODE(rax)
 29888 000158B1 50                      	push rax
 29889 000158B2 488B4520                	mov rax, PARAM(0)	; param i
 29890 000158B6 50                      	push rax
 29891 000158B7 488B4510                	mov rax, ENV
 29892 000158BB 488B4008                	mov rax, qword [rax + 8 * 1]
 29893 000158BF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29894 000158C2 50                      	push rax
 29895 000158C3 6A03                    	push 3	; arg count
 29896 000158C5 488B0425[4F110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 29897 000158CD 803805                  	cmp byte [rax], T_undefined
 29898 000158D0 0F840C070000            	je L_error_fvar_undefined
 29899 000158D6 803804                  	cmp byte [rax], T_closure
 29900 000158D9 0F8587070000            	jne L_error_non_closure
 29901 000158DF FF7001                  	push SOB_CLOSURE_ENV(rax)
 29902 000158E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29903                                  
 29904                                  	; preparing a tail-call
 29905                                  	; preparing a non tail-call
 29906 000158E5 48B8-                   	mov rax, L_constants + 2158
 29906 000158E7 [6E08000000000000] 
 29907 000158EF 50                      	push rax
 29908 000158F0 488B4520                	mov rax, PARAM(0)	; param i
 29909 000158F4 50                      	push rax
 29910 000158F5 6A02                    	push 2	; arg count
 29911 000158F7 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 29912 000158FF 803805                  	cmp byte [rax], T_undefined
 29913 00015902 0F84DA060000            	je L_error_fvar_undefined
 29914 00015908 803804                  	cmp byte [rax], T_closure
 29915 0001590B 0F8555070000            	jne L_error_non_closure
 29916 00015911 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29917 00015914 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29918 00015917 50                      	push rax
 29919 00015918 6A01                    	push 1	; arg count
 29920 0001591A 488B4510                	mov rax, ENV
 29921 0001591E 488B00                  	mov rax, qword [rax + 8 * 0]
 29922 00015921 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29923 00015924 488B00                  	mov rax, qword [rax]
 29924 00015927 803804                  	cmp byte [rax], T_closure
 29925 0001592A 0F8536070000            	jne L_error_non_closure
 29926 00015930 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29927                                  
 29928                                  	; recycling the current frame
 29929 00015933 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29930 00015936 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29931 00015939 B905000000              	mov rcx, 1 + 4
 29932 0001593E 488B5D18                	mov rbx, COUNT
 29933 00015942 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29934 00015947 488D55F8                	lea rdx, [rbp - 8 * 1]
 29935                                  .L_tc_recycle_frame_loop_04c6:
 29936 0001594B 4883F900                	cmp rcx, 0
 29937 0001594F 7413                    	je .L_tc_recycle_frame_done_04c6
 29938 00015951 488B32                  	mov rsi, qword [rdx]
 29939 00015954 488933                  	mov qword [rbx], rsi
 29940 00015957 48FFC9                  	dec rcx
 29941 0001595A 4883EB08                	sub rbx, 8 * 1
 29942 0001595E 4883EA08                	sub rdx, 8 * 1
 29943 00015962 EBE7                    	jmp .L_tc_recycle_frame_loop_04c6
 29944                                  .L_tc_recycle_frame_done_04c6:
 29945 00015964 488D6308                	lea rsp, [rbx + 8 * 1]
 29946 00015968 5D                      	pop rbp	; the proc will restore it!
 29947 00015969 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29948 0001596C EB0B                    	jmp .L_if_end_02a0
 29949                                  .L_if_else_02a0:
 29950 0001596E 488B4510                	mov rax, ENV
 29951 00015972 488B4008                	mov rax, qword [rax + 8 * 1]
 29952 00015976 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29953                                  .L_if_end_02a0:
 29954 00015979 C9                      	leave
 29955 0001597A C21800                  	ret AND_KILL_FRAME(1)
 29956                                  .L_lambda_simple_end_03ad:	; new closure is in rax
 29957 0001597D 50                      	push rax
 29958 0001597E 488B4520                	mov rax, PARAM(0)	; param run
 29959 00015982 8F00                    	pop qword [rax]
 29960 00015984 48B8-                   	mov rax, sob_void
 29960 00015986 [0000000000000000] 
 29961                                  
 29962                                  	; preparing a tail-call
 29963 0001598E 48B8-                   	mov rax, L_constants + 2023
 29963 00015990 [E707000000000000] 
 29964 00015998 50                      	push rax
 29965 00015999 6A01                    	push 1	; arg count
 29966 0001599B 488B4520                	mov rax, PARAM(0)	; param run
 29967 0001599F 488B00                  	mov rax, qword [rax]
 29968 000159A2 803804                  	cmp byte [rax], T_closure
 29969 000159A5 0F85BB060000            	jne L_error_non_closure
 29970 000159AB FF7001                  	push SOB_CLOSURE_ENV(rax)
 29971                                  
 29972                                  	; recycling the current frame
 29973 000159AE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29974 000159B1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29975 000159B4 B905000000              	mov rcx, 1 + 4
 29976 000159B9 488B5D18                	mov rbx, COUNT
 29977 000159BD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29978 000159C2 488D55F8                	lea rdx, [rbp - 8 * 1]
 29979                                  .L_tc_recycle_frame_loop_04c7:
 29980 000159C6 4883F900                	cmp rcx, 0
 29981 000159CA 7413                    	je .L_tc_recycle_frame_done_04c7
 29982 000159CC 488B32                  	mov rsi, qword [rdx]
 29983 000159CF 488933                  	mov qword [rbx], rsi
 29984 000159D2 48FFC9                  	dec rcx
 29985 000159D5 4883EB08                	sub rbx, 8 * 1
 29986 000159D9 4883EA08                	sub rdx, 8 * 1
 29987 000159DD EBE7                    	jmp .L_tc_recycle_frame_loop_04c7
 29988                                  .L_tc_recycle_frame_done_04c7:
 29989 000159DF 488D6308                	lea rsp, [rbx + 8 * 1]
 29990 000159E3 5D                      	pop rbp	; the proc will restore it!
 29991 000159E4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29992 000159E7 C9                      	leave
 29993 000159E8 C21800                  	ret AND_KILL_FRAME(1)
 29994                                  .L_lambda_simple_end_03ac:	; new closure is in rax
 29995 000159EB 803804                  	cmp byte [rax], T_closure
 29996 000159EE 0F8572060000            	jne L_error_non_closure
 29997 000159F4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29998                                  
 29999                                  	; recycling the current frame
 30000 000159F7 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 30001 000159FA FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 30002 000159FD B905000000              	mov rcx, 1 + 4
 30003 00015A02 488B5D18                	mov rbx, COUNT
 30004 00015A06 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 30005 00015A0B 488D55F8                	lea rdx, [rbp - 8 * 1]
 30006                                  .L_tc_recycle_frame_loop_04c8:
 30007 00015A0F 4883F900                	cmp rcx, 0
 30008 00015A13 7413                    	je .L_tc_recycle_frame_done_04c8
 30009 00015A15 488B32                  	mov rsi, qword [rdx]
 30010 00015A18 488933                  	mov qword [rbx], rsi
 30011 00015A1B 48FFC9                  	dec rcx
 30012 00015A1E 4883EB08                	sub rbx, 8 * 1
 30013 00015A22 4883EA08                	sub rdx, 8 * 1
 30014 00015A26 EBE7                    	jmp .L_tc_recycle_frame_loop_04c8
 30015                                  .L_tc_recycle_frame_done_04c8:
 30016 00015A28 488D6308                	lea rsp, [rbx + 8 * 1]
 30017 00015A2C 5D                      	pop rbp	; the proc will restore it!
 30018 00015A2D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30019 00015A30 C9                      	leave
 30020 00015A31 C21800                  	ret AND_KILL_FRAME(1)
 30021                                  .L_lambda_simple_end_03ab:	; new closure is in rax
 30022 00015A34 803804                  	cmp byte [rax], T_closure
 30023 00015A37 0F8529060000            	jne L_error_non_closure
 30024 00015A3D FF7001                  	push SOB_CLOSURE_ENV(rax)
 30025                                  
 30026                                  	; recycling the current frame
 30027 00015A40 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 30028 00015A43 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 30029 00015A46 B905000000              	mov rcx, 1 + 4
 30030 00015A4B 488B5D18                	mov rbx, COUNT
 30031 00015A4F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 30032 00015A54 488D55F8                	lea rdx, [rbp - 8 * 1]
 30033                                  .L_tc_recycle_frame_loop_04c9:
 30034 00015A58 4883F900                	cmp rcx, 0
 30035 00015A5C 7413                    	je .L_tc_recycle_frame_done_04c9
 30036 00015A5E 488B32                  	mov rsi, qword [rdx]
 30037 00015A61 488933                  	mov qword [rbx], rsi
 30038 00015A64 48FFC9                  	dec rcx
 30039 00015A67 4883EB08                	sub rbx, 8 * 1
 30040 00015A6B 4883EA08                	sub rdx, 8 * 1
 30041 00015A6F EBE7                    	jmp .L_tc_recycle_frame_loop_04c9
 30042                                  .L_tc_recycle_frame_done_04c9:
 30043 00015A71 488D6308                	lea rsp, [rbx + 8 * 1]
 30044 00015A75 5D                      	pop rbp	; the proc will restore it!
 30045 00015A76 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30046 00015A79 C9                      	leave
 30047 00015A7A C22000                  	ret AND_KILL_FRAME(2)
 30048                                  .L_lambda_simple_end_03aa:	; new closure is in rax
 30049 00015A7D 48890425[36190000]      	mov qword [free_var_174], rax
 30050 00015A85 48B8-                   	mov rax, sob_void
 30050 00015A87 [0000000000000000] 
 30051                                  
 30052 00015A8F 4889C7                  	mov rdi, rax
 30053 00015A92 E88A070000              	call print_sexpr_if_not_void
 30054                                  
 30055 00015A97 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30056 00015A9C E86E060000              	call malloc
 30057 00015AA1 50                      	push rax
 30058 00015AA2 BF00000000              	mov rdi, 8 * 0	; new rib
 30059 00015AA7 E863060000              	call malloc
 30060 00015AAC 50                      	push rax
 30061 00015AAD BF08000000              	mov rdi, 8 * 1	; extended env
 30062 00015AB2 E858060000              	call malloc
 30063 00015AB7 488B7D10                	mov rdi, ENV
 30064 00015ABB BE00000000              	mov rsi, 0
 30065 00015AC0 BA01000000              	mov rdx, 1
 30066                                  .L_lambda_simple_env_loop_03ae:	; ext_env[i + 1] <-- env[i]
 30067 00015AC5 4883FE00                	cmp rsi, 0
 30068 00015AC9 7410                    	je .L_lambda_simple_env_end_03ae
 30069 00015ACB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30070 00015ACF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30071 00015AD3 48FFC6                  	inc rsi
 30072 00015AD6 48FFC2                  	inc rdx
 30073 00015AD9 EBEA                    	jmp .L_lambda_simple_env_loop_03ae
 30074                                  .L_lambda_simple_env_end_03ae:
 30075 00015ADB 5B                      	pop rbx
 30076 00015ADC BE00000000              	mov rsi, 0
 30077                                  .L_lambda_simple_params_loop_03ae:	; copy params
 30078 00015AE1 4883FE00                	cmp rsi, 0
 30079 00015AE5 740E                    	je .L_lambda_simple_params_end_03ae
 30080 00015AE7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30081 00015AEC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30082 00015AF0 48FFC6                  	inc rsi
 30083 00015AF3 EBEC                    	jmp .L_lambda_simple_params_loop_03ae
 30084                                  .L_lambda_simple_params_end_03ae:
 30085 00015AF5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30086 00015AF8 4889C3                  	mov rbx, rax
 30087 00015AFB 58                      	pop rax
 30088 00015AFC C60004                  	mov byte [rax], T_closure
 30089 00015AFF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30090 00015B03 48C74009[105B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03ae
 30091 00015B0B E959020000              	jmp .L_lambda_simple_end_03ae
 30092                                  .L_lambda_simple_code_03ae:	; lambda-simple body
 30093 00015B10 48837C241003            	cmp qword [rsp + 8 * 2], 3
 30094 00015B16 740B                    	je .L_lambda_simple_arity_check_ok_03ae
 30095 00015B18 FF742410                	push qword [rsp + 8 * 2]
 30096 00015B1C 6A03                    	push 3
 30097 00015B1E E9A5050000              	jmp L_error_incorrect_arity_simple
 30098                                  .L_lambda_simple_arity_check_ok_03ae:
 30099 00015B23 C8000000                	enter 0, 0
 30100                                  	; preparing a non tail-call
 30101 00015B27 488B4530                	mov rax, PARAM(2)	; param n
 30102 00015B2B 50                      	push rax
 30103 00015B2C 6A01                    	push 1	; arg count
 30104 00015B2E 488B0425[730F0000]      	mov rax, qword [free_var_27]	; free var zero?
 30105 00015B36 803805                  	cmp byte [rax], T_undefined
 30106 00015B39 0F84A3040000            	je L_error_fvar_undefined
 30107 00015B3F 803804                  	cmp byte [rax], T_closure
 30108 00015B42 0F851E050000            	jne L_error_non_closure
 30109 00015B48 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30110 00015B4B FF5009                  	call SOB_CLOSURE_CODE(rax)
 30111 00015B4E 483D[02000000]          	cmp rax, sob_boolean_false
 30112 00015B54 740F                    	je .L_if_else_02a1
 30113 00015B56 48B8-                   	mov rax, L_constants + 3469
 30113 00015B58 [8D0D000000000000] 
 30114 00015B60 E900020000              	jmp .L_if_end_02a1
 30115                                  .L_if_else_02a1:
 30116                                  	; preparing a non tail-call
 30117 00015B65 488B4528                	mov rax, PARAM(1)	; param b
 30118 00015B69 50                      	push rax
 30119 00015B6A 488B4520                	mov rax, PARAM(0)	; param a
 30120 00015B6E 50                      	push rax
 30121 00015B6F 6A02                    	push 2	; arg count
 30122 00015B71 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 30123 00015B79 803805                  	cmp byte [rax], T_undefined
 30124 00015B7C 0F8460040000            	je L_error_fvar_undefined
 30125 00015B82 803804                  	cmp byte [rax], T_closure
 30126 00015B85 0F85DB040000            	jne L_error_non_closure
 30127 00015B8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 30128 00015B8E FF5009                  	call SOB_CLOSURE_CODE(rax)
 30129 00015B91 483D[02000000]          	cmp rax, sob_boolean_false
 30130 00015B97 0F84C2000000            	je .L_if_else_02a2
 30131                                  	; preparing a tail-call
 30132                                  	; preparing a non tail-call
 30133 00015B9D 488B4530                	mov rax, PARAM(2)	; param n
 30134 00015BA1 50                      	push rax
 30135                                  	; preparing a non tail-call
 30136 00015BA2 488B4520                	mov rax, PARAM(0)	; param a
 30137 00015BA6 50                      	push rax
 30138 00015BA7 488B4528                	mov rax, PARAM(1)	; param b
 30139 00015BAB 50                      	push rax
 30140 00015BAC 6A02                    	push 2	; arg count
 30141 00015BAE 488B0425[A0150000]      	mov rax, qword [free_var_120]	; free var /
 30142 00015BB6 803805                  	cmp byte [rax], T_undefined
 30143 00015BB9 0F8423040000            	je L_error_fvar_undefined
 30144 00015BBF 803804                  	cmp byte [rax], T_closure
 30145 00015BC2 0F859E040000            	jne L_error_non_closure
 30146 00015BC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30147 00015BCB FF5009                  	call SOB_CLOSURE_CODE(rax)
 30148 00015BCE 50                      	push rax
 30149 00015BCF 488B4520                	mov rax, PARAM(0)	; param a
 30150 00015BD3 50                      	push rax
 30151 00015BD4 6A03                    	push 3	; arg count
 30152 00015BD6 488B0425[47190000]      	mov rax, qword [free_var_175]	; free var logarithm
 30153 00015BDE 803805                  	cmp byte [rax], T_undefined
 30154 00015BE1 0F84FB030000            	je L_error_fvar_undefined
 30155 00015BE7 803804                  	cmp byte [rax], T_closure
 30156 00015BEA 0F8576040000            	jne L_error_non_closure
 30157 00015BF0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30158 00015BF3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30159 00015BF6 50                      	push rax
 30160 00015BF7 48B8-                   	mov rax, L_constants + 3469
 30160 00015BF9 [8D0D000000000000] 
 30161 00015C01 50                      	push rax
 30162 00015C02 6A02                    	push 2	; arg count
 30163 00015C04 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 30164 00015C0C 803805                  	cmp byte [rax], T_undefined
 30165 00015C0F 0F84CD030000            	je L_error_fvar_undefined
 30166 00015C15 803804                  	cmp byte [rax], T_closure
 30167 00015C18 0F8548040000            	jne L_error_non_closure
 30168 00015C1E FF7001                  	push SOB_CLOSURE_ENV(rax)
 30169                                  
 30170                                  	; recycling the current frame
 30171 00015C21 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 30172 00015C24 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 30173 00015C27 B906000000              	mov rcx, 2 + 4
 30174 00015C2C 488B5D18                	mov rbx, COUNT
 30175 00015C30 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 30176 00015C35 488D55F8                	lea rdx, [rbp - 8 * 1]
 30177                                  .L_tc_recycle_frame_loop_04ca:
 30178 00015C39 4883F900                	cmp rcx, 0
 30179 00015C3D 7413                    	je .L_tc_recycle_frame_done_04ca
 30180 00015C3F 488B32                  	mov rsi, qword [rdx]
 30181 00015C42 488933                  	mov qword [rbx], rsi
 30182 00015C45 48FFC9                  	dec rcx
 30183 00015C48 4883EB08                	sub rbx, 8 * 1
 30184 00015C4C 4883EA08                	sub rdx, 8 * 1
 30185 00015C50 EBE7                    	jmp .L_tc_recycle_frame_loop_04ca
 30186                                  .L_tc_recycle_frame_done_04ca:
 30187 00015C52 488D6308                	lea rsp, [rbx + 8 * 1]
 30188 00015C56 5D                      	pop rbp	; the proc will restore it!
 30189 00015C57 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30190 00015C5A E906010000              	jmp .L_if_end_02a2
 30191                                  .L_if_else_02a2:
 30192                                  	; preparing a non tail-call
 30193 00015C5F 488B4528                	mov rax, PARAM(1)	; param b
 30194 00015C63 50                      	push rax
 30195 00015C64 488B4520                	mov rax, PARAM(0)	; param a
 30196 00015C68 50                      	push rax
 30197 00015C69 6A02                    	push 2	; arg count
 30198 00015C6B 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 30199 00015C73 803805                  	cmp byte [rax], T_undefined
 30200 00015C76 0F8466030000            	je L_error_fvar_undefined
 30201 00015C7C 803804                  	cmp byte [rax], T_closure
 30202 00015C7F 0F85E1030000            	jne L_error_non_closure
 30203 00015C85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30204 00015C88 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30205 00015C8B 483D[02000000]          	cmp rax, sob_boolean_false
 30206 00015C91 740F                    	je .L_if_else_02a3
 30207 00015C93 48B8-                   	mov rax, L_constants + 3469
 30207 00015C95 [8D0D000000000000] 
 30208 00015C9D E9C3000000              	jmp .L_if_end_02a3
 30209                                  .L_if_else_02a3:
 30210                                  	; preparing a tail-call
 30211                                  	; preparing a non tail-call
 30212                                  	; preparing a non tail-call
 30213 00015CA2 48B8-                   	mov rax, L_constants + 2158
 30213 00015CA4 [6E08000000000000] 
 30214 00015CAC 50                      	push rax
 30215 00015CAD 488B4530                	mov rax, PARAM(2)	; param n
 30216 00015CB1 50                      	push rax
 30217 00015CB2 6A02                    	push 2	; arg count
 30218 00015CB4 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 30219 00015CBC 803805                  	cmp byte [rax], T_undefined
 30220 00015CBF 0F841D030000            	je L_error_fvar_undefined
 30221 00015CC5 803804                  	cmp byte [rax], T_closure
 30222 00015CC8 0F8598030000            	jne L_error_non_closure
 30223 00015CCE FF7001                  	push SOB_CLOSURE_ENV(rax)
 30224 00015CD1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30225 00015CD4 50                      	push rax
 30226 00015CD5 488B4520                	mov rax, PARAM(0)	; param a
 30227 00015CD9 50                      	push rax
 30228 00015CDA 488B4528                	mov rax, PARAM(1)	; param b
 30229 00015CDE 50                      	push rax
 30230 00015CDF 6A03                    	push 3	; arg count
 30231 00015CE1 488B0425[47190000]      	mov rax, qword [free_var_175]	; free var logarithm
 30232 00015CE9 803805                  	cmp byte [rax], T_undefined
 30233 00015CEC 0F84F0020000            	je L_error_fvar_undefined
 30234 00015CF2 803804                  	cmp byte [rax], T_closure
 30235 00015CF5 0F856B030000            	jne L_error_non_closure
 30236 00015CFB FF7001                  	push SOB_CLOSURE_ENV(rax)
 30237 00015CFE FF5009                  	call SOB_CLOSURE_CODE(rax)
 30238 00015D01 50                      	push rax
 30239 00015D02 48B8-                   	mov rax, L_constants + 3469
 30239 00015D04 [8D0D000000000000] 
 30240 00015D0C 50                      	push rax
 30241 00015D0D 6A02                    	push 2	; arg count
 30242 00015D0F 488B0425[A0150000]      	mov rax, qword [free_var_120]	; free var /
 30243 00015D17 803805                  	cmp byte [rax], T_undefined
 30244 00015D1A 0F84C2020000            	je L_error_fvar_undefined
 30245 00015D20 803804                  	cmp byte [rax], T_closure
 30246 00015D23 0F853D030000            	jne L_error_non_closure
 30247 00015D29 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30248                                  
 30249                                  	; recycling the current frame
 30250 00015D2C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 30251 00015D2F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 30252 00015D32 B906000000              	mov rcx, 2 + 4
 30253 00015D37 488B5D18                	mov rbx, COUNT
 30254 00015D3B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 30255 00015D40 488D55F8                	lea rdx, [rbp - 8 * 1]
 30256                                  .L_tc_recycle_frame_loop_04cb:
 30257 00015D44 4883F900                	cmp rcx, 0
 30258 00015D48 7413                    	je .L_tc_recycle_frame_done_04cb
 30259 00015D4A 488B32                  	mov rsi, qword [rdx]
 30260 00015D4D 488933                  	mov qword [rbx], rsi
 30261 00015D50 48FFC9                  	dec rcx
 30262 00015D53 4883EB08                	sub rbx, 8 * 1
 30263 00015D57 4883EA08                	sub rdx, 8 * 1
 30264 00015D5B EBE7                    	jmp .L_tc_recycle_frame_loop_04cb
 30265                                  .L_tc_recycle_frame_done_04cb:
 30266 00015D5D 488D6308                	lea rsp, [rbx + 8 * 1]
 30267 00015D61 5D                      	pop rbp	; the proc will restore it!
 30268 00015D62 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30269                                  .L_if_end_02a3:
 30270                                  .L_if_end_02a2:
 30271                                  .L_if_end_02a1:
 30272 00015D65 C9                      	leave
 30273 00015D66 C22800                  	ret AND_KILL_FRAME(3)
 30274                                  .L_lambda_simple_end_03ae:	; new closure is in rax
 30275 00015D69 48890425[47190000]      	mov qword [free_var_175], rax
 30276 00015D71 48B8-                   	mov rax, sob_void
 30276 00015D73 [0000000000000000] 
 30277                                  
 30278 00015D7B 4889C7                  	mov rdi, rax
 30279 00015D7E E89E040000              	call print_sexpr_if_not_void
 30280                                  
 30281 00015D83 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30282 00015D88 E882030000              	call malloc
 30283 00015D8D 50                      	push rax
 30284 00015D8E BF00000000              	mov rdi, 8 * 0	; new rib
 30285 00015D93 E877030000              	call malloc
 30286 00015D98 50                      	push rax
 30287 00015D99 BF08000000              	mov rdi, 8 * 1	; extended env
 30288 00015D9E E86C030000              	call malloc
 30289 00015DA3 488B7D10                	mov rdi, ENV
 30290 00015DA7 BE00000000              	mov rsi, 0
 30291 00015DAC BA01000000              	mov rdx, 1
 30292                                  .L_lambda_simple_env_loop_03af:	; ext_env[i + 1] <-- env[i]
 30293 00015DB1 4883FE00                	cmp rsi, 0
 30294 00015DB5 7410                    	je .L_lambda_simple_env_end_03af
 30295 00015DB7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30296 00015DBB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30297 00015DBF 48FFC6                  	inc rsi
 30298 00015DC2 48FFC2                  	inc rdx
 30299 00015DC5 EBEA                    	jmp .L_lambda_simple_env_loop_03af
 30300                                  .L_lambda_simple_env_end_03af:
 30301 00015DC7 5B                      	pop rbx
 30302 00015DC8 BE00000000              	mov rsi, 0
 30303                                  .L_lambda_simple_params_loop_03af:	; copy params
 30304 00015DCD 4883FE00                	cmp rsi, 0
 30305 00015DD1 740E                    	je .L_lambda_simple_params_end_03af
 30306 00015DD3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30307 00015DD8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30308 00015DDC 48FFC6                  	inc rsi
 30309 00015DDF EBEC                    	jmp .L_lambda_simple_params_loop_03af
 30310                                  .L_lambda_simple_params_end_03af:
 30311 00015DE1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30312 00015DE4 4889C3                  	mov rbx, rax
 30313 00015DE7 58                      	pop rax
 30314 00015DE8 C60004                  	mov byte [rax], T_closure
 30315 00015DEB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30316 00015DEF 48C74009[FC5D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03af
 30317 00015DF7 E97E000000              	jmp .L_lambda_simple_end_03af
 30318                                  .L_lambda_simple_code_03af:	; lambda-simple body
 30319 00015DFC 48837C241000            	cmp qword [rsp + 8 * 2], 0
 30320 00015E02 740B                    	je .L_lambda_simple_arity_check_ok_03af
 30321 00015E04 FF742410                	push qword [rsp + 8 * 2]
 30322 00015E08 6A00                    	push 0
 30323 00015E0A E9B9020000              	jmp L_error_incorrect_arity_simple
 30324                                  .L_lambda_simple_arity_check_ok_03af:
 30325 00015E0F C8000000                	enter 0, 0
 30326                                  	; preparing a tail-call
 30327 00015E13 48B8-                   	mov rax, L_constants + 3494
 30327 00015E15 [A60D000000000000] 
 30328 00015E1D 50                      	push rax
 30329 00015E1E 6A01                    	push 1	; arg count
 30330 00015E20 488B0425[A70E0000]      	mov rax, qword [free_var_15]	; free var write-char
 30331 00015E28 803805                  	cmp byte [rax], T_undefined
 30332 00015E2B 0F84B1010000            	je L_error_fvar_undefined
 30333 00015E31 803804                  	cmp byte [rax], T_closure
 30334 00015E34 0F852C020000            	jne L_error_non_closure
 30335 00015E3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 30336                                  
 30337                                  	; recycling the current frame
 30338 00015E3D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 30339 00015E40 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 30340 00015E43 B905000000              	mov rcx, 1 + 4
 30341 00015E48 488B5D18                	mov rbx, COUNT
 30342 00015E4C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 30343 00015E51 488D55F8                	lea rdx, [rbp - 8 * 1]
 30344                                  .L_tc_recycle_frame_loop_04cc:
 30345 00015E55 4883F900                	cmp rcx, 0
 30346 00015E59 7413                    	je .L_tc_recycle_frame_done_04cc
 30347 00015E5B 488B32                  	mov rsi, qword [rdx]
 30348 00015E5E 488933                  	mov qword [rbx], rsi
 30349 00015E61 48FFC9                  	dec rcx
 30350 00015E64 4883EB08                	sub rbx, 8 * 1
 30351 00015E68 4883EA08                	sub rdx, 8 * 1
 30352 00015E6C EBE7                    	jmp .L_tc_recycle_frame_loop_04cc
 30353                                  .L_tc_recycle_frame_done_04cc:
 30354 00015E6E 488D6308                	lea rsp, [rbx + 8 * 1]
 30355 00015E72 5D                      	pop rbp	; the proc will restore it!
 30356 00015E73 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30357 00015E76 C9                      	leave
 30358 00015E77 C21000                  	ret AND_KILL_FRAME(0)
 30359                                  .L_lambda_simple_end_03af:	; new closure is in rax
 30360 00015E7A 48890425[58190000]      	mov qword [free_var_176], rax
 30361 00015E82 48B8-                   	mov rax, sob_void
 30361 00015E84 [0000000000000000] 
 30362                                  
 30363 00015E8C 4889C7                  	mov rdi, rax
 30364 00015E8F E88D030000              	call print_sexpr_if_not_void
 30365                                  
 30366                                  	; preparing a non tail-call
 30367 00015E94 48B8-                   	mov rax, L_constants + 2158
 30367 00015E96 [6E08000000000000] 
 30368 00015E9E 50                      	push rax
 30369 00015E9F 6A01                    	push 1	; arg count
 30370 00015EA1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30371 00015EA6 E864020000              	call malloc
 30372 00015EAB 50                      	push rax
 30373 00015EAC BF00000000              	mov rdi, 8 * 0	; new rib
 30374 00015EB1 E859020000              	call malloc
 30375 00015EB6 50                      	push rax
 30376 00015EB7 BF08000000              	mov rdi, 8 * 1	; extended env
 30377 00015EBC E84E020000              	call malloc
 30378 00015EC1 488B7D10                	mov rdi, ENV
 30379 00015EC5 BE00000000              	mov rsi, 0
 30380 00015ECA BA01000000              	mov rdx, 1
 30381                                  .L_lambda_simple_env_loop_03b0:	; ext_env[i + 1] <-- env[i]
 30382 00015ECF 4883FE00                	cmp rsi, 0
 30383 00015ED3 7410                    	je .L_lambda_simple_env_end_03b0
 30384 00015ED5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30385 00015ED9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30386 00015EDD 48FFC6                  	inc rsi
 30387 00015EE0 48FFC2                  	inc rdx
 30388 00015EE3 EBEA                    	jmp .L_lambda_simple_env_loop_03b0
 30389                                  .L_lambda_simple_env_end_03b0:
 30390 00015EE5 5B                      	pop rbx
 30391 00015EE6 BE00000000              	mov rsi, 0
 30392                                  .L_lambda_simple_params_loop_03b0:	; copy params
 30393 00015EEB 4883FE00                	cmp rsi, 0
 30394 00015EEF 740E                    	je .L_lambda_simple_params_end_03b0
 30395 00015EF1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30396 00015EF6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30397 00015EFA 48FFC6                  	inc rsi
 30398 00015EFD EBEC                    	jmp .L_lambda_simple_params_loop_03b0
 30399                                  .L_lambda_simple_params_end_03b0:
 30400 00015EFF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30401 00015F02 4889C3                  	mov rbx, rax
 30402 00015F05 58                      	pop rax
 30403 00015F06 C60004                  	mov byte [rax], T_closure
 30404 00015F09 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30405 00015F0D 48C74009[1A5F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_03b0
 30406 00015F15 E983000000              	jmp .L_lambda_simple_end_03b0
 30407                                  .L_lambda_simple_code_03b0:	; lambda-simple body
 30408 00015F1A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30409 00015F20 740B                    	je .L_lambda_simple_arity_check_ok_03b0
 30410 00015F22 FF742410                	push qword [rsp + 8 * 2]
 30411 00015F26 6A01                    	push 1
 30412 00015F28 E99B010000              	jmp L_error_incorrect_arity_simple
 30413                                  .L_lambda_simple_arity_check_ok_03b0:
 30414 00015F2D C8000000                	enter 0, 0
 30415                                  	; preparing a tail-call
 30416 00015F31 48B8-                   	mov rax, L_constants + 2158
 30416 00015F33 [6E08000000000000] 
 30417 00015F3B 50                      	push rax
 30418 00015F3C 488B4520                	mov rax, PARAM(0)	; param x
 30419 00015F40 50                      	push rax
 30420 00015F41 6A02                    	push 2	; arg count
 30421 00015F43 488B0425[EA0F0000]      	mov rax, qword [free_var_34]	; free var __bin-add-qq
 30422 00015F4B 803805                  	cmp byte [rax], T_undefined
 30423 00015F4E 0F848E000000            	je L_error_fvar_undefined
 30424 00015F54 803804                  	cmp byte [rax], T_closure
 30425 00015F57 0F8509010000            	jne L_error_non_closure
 30426 00015F5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 30427                                  
 30428                                  	; recycling the current frame
 30429 00015F60 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 30430 00015F63 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 30431 00015F66 B906000000              	mov rcx, 2 + 4
 30432 00015F6B 488B5D18                	mov rbx, COUNT
 30433 00015F6F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 30434 00015F74 488D55F8                	lea rdx, [rbp - 8 * 1]
 30435                                  .L_tc_recycle_frame_loop_04cd:
 30436 00015F78 4883F900                	cmp rcx, 0
 30437 00015F7C 7413                    	je .L_tc_recycle_frame_done_04cd
 30438 00015F7E 488B32                  	mov rsi, qword [rdx]
 30439 00015F81 488933                  	mov qword [rbx], rsi
 30440 00015F84 48FFC9                  	dec rcx
 30441 00015F87 4883EB08                	sub rbx, 8 * 1
 30442 00015F8B 4883EA08                	sub rdx, 8 * 1
 30443 00015F8F EBE7                    	jmp .L_tc_recycle_frame_loop_04cd
 30444                                  .L_tc_recycle_frame_done_04cd:
 30445 00015F91 488D6308                	lea rsp, [rbx + 8 * 1]
 30446 00015F95 5D                      	pop rbp	; the proc will restore it!
 30447 00015F96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30448 00015F99 C9                      	leave
 30449 00015F9A C21800                  	ret AND_KILL_FRAME(1)
 30450                                  .L_lambda_simple_end_03b0:	; new closure is in rax
 30451 00015F9D 803804                  	cmp byte [rax], T_closure
 30452 00015FA0 0F85C0000000            	jne L_error_non_closure
 30453 00015FA6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30454 00015FA9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30455                                  
 30456 00015FAC 4889C7                  	mov rdi, rax
 30457 00015FAF E86D020000              	call print_sexpr_if_not_void
 30458                                  
 30459 00015FB4 48BF-                           mov rdi, fmt_memory_usage
 30459 00015FB6 [011A000000000000] 
 30460 00015FBE 488B3425[871A0000]              mov rsi, qword [top_of_memory]
 30461 00015FC6 4881EE[00000000]                sub rsi, memory
 30462 00015FCD B800000000                      mov rax, 0
 30463                                          ENTER
 30463 00015FD2 C8000000            <1>  enter 0, 0
 30463 00015FD6 4883E4F0            <1>  and rsp, ~15
 30464 00015FDA E8(00000000)                    call printf
 30465                                          LEAVE
 30465 00015FDF C9                  <1>  leave
 30466 00015FE0 C9                      	leave
 30467 00015FE1 C3                      	ret
 30468                                  
 30469                                  L_error_fvar_undefined:
 30470 00015FE2 50                              push rax
 30471 00015FE3 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
 30472 00015FEB 48BE-                           mov rsi, fmt_undefined_free_var_1
 30472 00015FED [6919000000000000] 
 30473 00015FF5 B800000000                      mov rax, 0
 30474                                          ENTER
 30474 00015FFA C8000000            <1>  enter 0, 0
 30474 00015FFE 4883E4F0            <1>  and rsp, ~15
 30475 00016002 E8(00000000)                    call fprintf
 30476                                          LEAVE
 30476 00016007 C9                  <1>  leave
 30477 00016008 58                              pop rax
 30478 00016009 488B4001                        mov rax, qword [rax + 1] ; string
 30479 0001600D 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 30480 00016011 BE01000000                      mov rsi, 1               ; sizeof(char)
 30481 00016016 488B5001                        mov rdx, qword [rax + 1] ; string-length
 30482 0001601A 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
 30483 00016022 B800000000                      mov rax, 0
 30484                                          ENTER
 30484 00016027 C8000000            <1>  enter 0, 0
 30484 0001602B 4883E4F0            <1>  and rsp, ~15
 30485 0001602F E8(00000000)                    call fwrite
 30486                                          LEAVE
 30486 00016034 C9                  <1>  leave
 30487 00016035 488B3C25[00000000]              mov rdi, [stderr]       ; destination
 30488 0001603D 48BE-                           mov rsi, fmt_undefined_free_var_2
 30488 0001603F [8019000000000000] 
 30489 00016047 B800000000                      mov rax, 0
 30490                                          ENTER
 30490 0001604C C8000000            <1>  enter 0, 0
 30490 00016050 4883E4F0            <1>  and rsp, ~15
 30491 00016054 E8(00000000)                    call fprintf
 30492                                          LEAVE
 30492 00016059 C9                  <1>  leave
 30493 0001605A 48C7C0F6FFFFFF                  mov rax, -10
 30494 00016061 E8(00000000)                    call exit
 30495                                  
 30496                                  L_error_non_closure:
 30497 00016066 488B3C25[00000000]              mov rdi, qword [stderr]
 30498 0001606E 48BE-                           mov rsi, fmt_non_closure
 30498 00016070 [371A000000000000] 
 30499 00016078 B800000000                      mov rax, 0
 30500                                          ENTER
 30500 0001607D C8000000            <1>  enter 0, 0
 30500 00016081 4883E4F0            <1>  and rsp, ~15
 30501 00016085 E8(00000000)                    call fprintf
 30502                                          LEAVE
 30502 0001608A C9                  <1>  leave
 30503 0001608B 48C7C0FEFFFFFF                  mov rax, -2
 30504 00016092 E8(00000000)                    call exit
 30505                                  
 30506                                  L_error_improper_list:
 30507 00016097 488B3C25[00000000]      	mov rdi, qword [stderr]
 30508 0001609F 48BE-                   	mov rsi, fmt_error_improper_list
 30508 000160A1 [5F1A000000000000] 
 30509 000160A9 B800000000              	mov rax, 0
 30510                                          ENTER
 30510 000160AE C8000000            <1>  enter 0, 0
 30510 000160B2 4883E4F0            <1>  and rsp, ~15
 30511 000160B6 E8(00000000)            	call fprintf
 30512                                          LEAVE
 30512 000160BB C9                  <1>  leave
 30513 000160BC 48C7C0F9FFFFFF          	mov rax, -7
 30514 000160C3 E8(00000000)            	call exit
 30515                                  
 30516                                  L_error_incorrect_arity_simple:
 30517 000160C8 488B3C25[00000000]              mov rdi, qword [stderr]
 30518 000160D0 48BE-                           mov rsi, fmt_incorrect_arity_simple
 30518 000160D2 [A219000000000000] 
 30519 000160DA EB12                            jmp L_error_incorrect_arity_common
 30520                                  L_error_incorrect_arity_opt:
 30521 000160DC 488B3C25[00000000]              mov rdi, qword [stderr]
 30522 000160E4 48BE-                           mov rsi, fmt_incorrect_arity_opt
 30522 000160E6 [CD19000000000000] 
 30523                                  L_error_incorrect_arity_common:
 30524 000160EE 5A                              pop rdx
 30525 000160EF 59                              pop rcx
 30526 000160F0 B800000000                      mov rax, 0
 30527                                          ENTER
 30527 000160F5 C8000000            <1>  enter 0, 0
 30527 000160F9 4883E4F0            <1>  and rsp, ~15
 30528 000160FD E8(00000000)                    call fprintf
 30529                                          LEAVE
 30529 00016102 C9                  <1>  leave
 30530 00016103 48C7C0FAFFFFFF                  mov rax, -6
 30531 0001610A E8(00000000)                    call exit
 30532                                  
 30533                                  section .data
 30534                                  fmt_undefined_free_var_1:
 30535 00001969 212121205468652066-             db `!!! The free variable \0`
 30535 00001972 726565207661726961-
 30535 0000197B 626C652000         
 30536                                  fmt_undefined_free_var_2:
 30537 00001980 207761732075736564-             db ` was used before it was defined.\n\0`
 30537 00001989 206265666F72652069-
 30537 00001992 742077617320646566-
 30537 0000199B 696E65642E0A00     
 30538                                  fmt_incorrect_arity_simple:
 30539 000019A2 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 30539 000019AB 74656420256C642061-
 30539 000019B4 7267756D656E74732C-
 30539 000019BD 206275742067697665-
 30539 000019C6 6E20256C640A00     
 30540                                  fmt_incorrect_arity_opt:
 30541 000019CD 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 30541 000019D6 746564206174206C65-
 30541 000019DF 61737420256C642061-
 30541 000019E8 7267756D656E74732C-
 30541 000019F1 206275742067697665-
 30541 000019FA 6E20256C640A00     
 30542                                  fmt_memory_usage:
 30543 00001A01 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 30543 00001A0A 20256C642062797465-
 30543 00001A13 73206F662064796E61-
 30543 00001A1C 6D6963616C6C792D61-
 30543 00001A25 6C6C6F636174656420-
 30543 00001A2E 6D656D6F72790A0A00 
 30544                                  fmt_non_closure:
 30545 00001A37 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 30545 00001A40 7074696E6720746F20-
 30545 00001A49 6170706C792061206E-
 30545 00001A52 6F6E2D636C6F737572-
 30545 00001A5B 65210A00           
 30546                                  fmt_error_improper_list:
 30547 00001A5F 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 30547 00001A68 7267756D656E742069-
 30547 00001A71 73206E6F7420612070-
 30547 00001A7A 726F706572206C6973-
 30547 00001A83 74210A00           
 30548                                  
 30549                                  section .bss
 30550                                  memory:
 30551 00000000 <res 40000000>          	resb gbytes(1)
 30552                                  
 30553                                  section .data
 30554                                  top_of_memory:
 30555 00001A87 [0000000000000000]              dq memory
 30556                                  
 30557                                  section .text
 30558                                  malloc:
 30559 0001610F 488B0425[871A0000]              mov rax, qword [top_of_memory]
 30560 00016117 48013C25[871A0000]              add qword [top_of_memory], rdi
 30561 0001611F C3                              ret
 30562                                  
 30563                                  L_code_ptr_break:
 30564 00016120 48837C241000                    cmp qword [rsp + 8 * 2], 0
 30565 00016126 0F85861A0000                    jne L_error_arg_count_0
 30566 0001612C CC                              int3
 30567 0001612D 48B8-                           mov rax, sob_void
 30567 0001612F [0000000000000000] 
 30568 00016137 C21000                          ret AND_KILL_FRAME(0)        
 30569                                  
 30570                                  L_code_ptr_frame:
 30571 0001613A C8000000                        enter 0, 0
 30572 0001613E 48837D1800                      cmp COUNT, 0
 30573 00016143 0F85691A0000                    jne L_error_arg_count_0
 30574                                  
 30575 00016149 48BF-                           mov rdi, fmt_frame
 30575 0001614B [8F1A000000000000] 
 30576 00016153 488B7500                        mov rsi, qword [rbp]    ; old rbp
 30577 00016157 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
 30578 0001615B 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
 30579 0001615F 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
 30580 00016163 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
 30581 00016167 6A00                            push 0
 30582 00016169 4151                            push r9
 30583 0001616B 4150                            push r8                   ; we'll use it when printing the params
 30584 0001616D B800000000                      mov rax, 0
 30585                                          
 30586                                          ENTER
 30586 00016172 C8000000            <1>  enter 0, 0
 30586 00016176 4883E4F0            <1>  and rsp, ~15
 30587 0001617A E8(00000000)                    call printf
 30588                                          LEAVE
 30588 0001617F C9                  <1>  leave
 30589                                  
 30590                                  .L:
 30591 00016180 488B0C24                        mov rcx, qword [rsp]
 30592 00016184 4883F900                        cmp rcx, 0
 30593 00016188 7467                            je .L_out
 30594 0001618A 48BF-                           mov rdi, fmt_frame_param_prefix
 30594 0001618C [C81A000000000000] 
 30595 00016194 488B742410                      mov rsi, qword [rsp + 8*2]
 30596 00016199 B800000000                      mov rax, 0
 30597                                          
 30598                                          ENTER
 30598 0001619E C8000000            <1>  enter 0, 0
 30598 000161A2 4883E4F0            <1>  and rsp, ~15
 30599 000161A6 E8(00000000)                    call printf
 30600                                          LEAVE
 30600 000161AB C9                  <1>  leave
 30601                                  
 30602 000161AC 488B0C24                        mov rcx, qword [rsp]
 30603 000161B0 48FFC9                          dec rcx
 30604 000161B3 48890C24                        mov qword [rsp], rcx    ; dec arg count
 30605 000161B7 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
 30606 000161BC 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
 30607 000161C1 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
 30608 000161C5 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
 30609 000161CA 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
 30610 000161CD E87B000000                      call print_sexpr
 30611 000161D2 48BF-                           mov rdi, fmt_newline
 30611 000161D4 [F41A000000000000] 
 30612 000161DC B800000000                      mov rax, 0
 30613                                          ENTER
 30613 000161E1 C8000000            <1>  enter 0, 0
 30613 000161E5 4883E4F0            <1>  and rsp, ~15
 30614 000161E9 E8(00000000)                    call printf
 30615                                          LEAVE
 30615 000161EE C9                  <1>  leave
 30616 000161EF EB8F                            jmp .L
 30617                                  .L_out:
 30618 000161F1 48BF-                           mov rdi, fmt_frame_continue
 30618 000161F3 [D91A000000000000] 
 30619 000161FB B800000000                      mov rax, 0
 30620                                          ENTER
 30620 00016200 C8000000            <1>  enter 0, 0
 30620 00016204 4883E4F0            <1>  and rsp, ~15
 30621 00016208 E8(00000000)                    call printf
 30622 0001620D E8(00000000)                    call getchar
 30623                                          LEAVE
 30623 00016212 C9                  <1>  leave
 30624                                          
 30625 00016213 48B8-                           mov rax, sob_void
 30625 00016215 [0000000000000000] 
 30626 0001621D C9                              leave
 30627 0001621E C21000                          ret AND_KILL_FRAME(0)
 30628                                          
 30629                                  print_sexpr_if_not_void:
 30630 00016221 4881FF[00000000]        	cmp rdi, sob_void
 30631 00016228 7422                    	je .done
 30632 0001622A E81E000000              	call print_sexpr
 30633 0001622F 48BF-                   	mov rdi, fmt_newline
 30633 00016231 [F41A000000000000] 
 30634 00016239 B800000000              	mov rax, 0
 30635                                  	ENTER
 30635 0001623E C8000000            <1>  enter 0, 0
 30635 00016242 4883E4F0            <1>  and rsp, ~15
 30636 00016246 E8(00000000)            	call printf
 30637                                  	LEAVE
 30637 0001624B C9                  <1>  leave
 30638                                  .done:
 30639 0001624C C3                      	ret
 30640                                  
 30641                                  section .data
 30642                                  fmt_frame:
 30643 00001A8F 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
 30643 00001A98 207265742061646472-
 30643 00001AA1 203D2025703B206C65-
 30643 00001AAA 7820656E76203D2025-
 30643 00001AB3 703B20706172616D20-
 30643 00001ABC 636F756E74203D2025-
 30643 00001AC5 640A00             
 30644                                  fmt_frame_param_prefix:
 30645 00001AC8 3D3D5B706172616D20-             db `==[param %d]==> \0`
 30645 00001AD1 25645D3D3D3E2000   
 30646                                  fmt_frame_continue:
 30647 00001AD9 486974203C456E7465-             db `Hit <Enter> to continue...\0`
 30647 00001AE2 723E20746F20636F6E-
 30647 00001AEB 74696E75652E2E2E00 
 30648                                  fmt_newline:
 30649 00001AF4 0A00                    	db `\n\0`
 30650                                  fmt_void:
 30651 00001AF6 233C766F69643E00        	db `#<void>\0`
 30652                                  fmt_nil:
 30653 00001AFE 282900                  	db `()\0`
 30654                                  fmt_boolean_false:
 30655 00001B01 236600                  	db `#f\0`
 30656                                  fmt_boolean_true:
 30657 00001B04 237400                  	db `#t\0`
 30658                                  fmt_char_backslash:
 30659 00001B07 235C5C00                	db `#\\\\\0`
 30660                                  fmt_char_dquote:
 30661 00001B0B 235C2200                	db `#\\"\0`
 30662                                  fmt_char_simple:
 30663 00001B0F 235C256300              	db `#\\%c\0`
 30664                                  fmt_char_null:
 30665 00001B14 235C6E756C00            	db `#\\nul\0`
 30666                                  fmt_char_bell:
 30667 00001B1A 235C62656C6C00          	db `#\\bell\0`
 30668                                  fmt_char_backspace:
 30669 00001B21 235C6261636B737061-     	db `#\\backspace\0`
 30669 00001B2A 636500             
 30670                                  fmt_char_tab:
 30671 00001B2D 235C74616200            	db `#\\tab\0`
 30672                                  fmt_char_newline:
 30673 00001B33 235C6E65776C696E65-     	db `#\\newline\0`
 30673 00001B3C 00                 
 30674                                  fmt_char_formfeed:
 30675 00001B3D 235C7061676500          	db `#\\page\0`
 30676                                  fmt_char_return:
 30677 00001B44 235C72657475726E00      	db `#\\return\0`
 30678                                  fmt_char_escape:
 30679 00001B4D 235C65736300            	db `#\\esc\0`
 30680                                  fmt_char_space:
 30681 00001B53 235C737061636500        	db `#\\space\0`
 30682                                  fmt_char_hex:
 30683 00001B5B 235C782530325800        	db `#\\x%02X\0`
 30684                                  fmt_gensym:
 30685 00001B63 47256C6400                      db `G%ld\0`
 30686                                  fmt_closure:
 30687 00001B68 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 30687 00001B71 206174203078253038-
 30687 00001B7A 5820656E763D307825-
 30687 00001B83 30385820636F64653D-
 30687 00001B8C 3078253038583E00   
 30688                                  fmt_lparen:
 30689 00001B94 2800                    	db `(\0`
 30690                                  fmt_dotted_pair:
 30691 00001B96 202E2000                	db ` . \0`
 30692                                  fmt_rparen:
 30693 00001B9A 2900                    	db `)\0`
 30694                                  fmt_space:
 30695 00001B9C 2000                    	db ` \0`
 30696                                  fmt_empty_vector:
 30697 00001B9E 23282900                	db `#()\0`
 30698                                  fmt_vector:
 30699 00001BA2 232800                  	db `#(\0`
 30700                                  fmt_real:
 30701 00001BA5 256600                  	db `%f\0`
 30702                                  fmt_fraction:
 30703 00001BA8 256C642F256C6400        	db `%ld/%ld\0`
 30704                                  fmt_zero:
 30705 00001BB0 3000                    	db `0\0`
 30706                                  fmt_int:
 30707 00001BB2 256C6400                	db `%ld\0`
 30708                                  fmt_unknown_scheme_object_error:
 30709 00001BB6 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
 30709 00001BBF 6F723A20556E6B6E6F-
 30709 00001BC8 776E20536368656D65-
 30709 00001BD1 2D6F626A6563742028-
 30709 00001BDA 525454492030782530-
 30709 00001BE3 32582920           
 30710 00001BE7 617420616464726573-     	db `at address 0x%08X\n\n\0`
 30710 00001BF0 73203078253038580A-
 30710 00001BF9 0A00               
 30711                                  fmt_dquote:
 30712 00001BFB 2200                    	db `\"\0`
 30713                                  fmt_string_char:
 30714 00001BFD 256300                          db `%c\0`
 30715                                  fmt_string_char_7:
 30716 00001C00 5C6100                          db `\\a\0`
 30717                                  fmt_string_char_8:
 30718 00001C03 5C6200                          db `\\b\0`
 30719                                  fmt_string_char_9:
 30720 00001C06 5C7400                          db `\\t\0`
 30721                                  fmt_string_char_10:
 30722 00001C09 5C6E00                          db `\\n\0`
 30723                                  fmt_string_char_11:
 30724 00001C0C 5C7600                          db `\\v\0`
 30725                                  fmt_string_char_12:
 30726 00001C0F 5C6600                          db `\\f\0`
 30727                                  fmt_string_char_13:
 30728 00001C12 5C7200                          db `\\r\0`
 30729                                  fmt_string_char_34:
 30730 00001C15 5C2200                          db `\\"\0`
 30731                                  fmt_string_char_92:
 30732 00001C18 5C5C00                          db `\\\\\0`
 30733                                  fmt_string_char_hex:
 30734 00001C1B 5C7825583B00                    db `\\x%X;\0`
 30735                                  
 30736                                  section .text
 30737                                  
 30738                                  print_sexpr:
 30739 0001624D C8000000                	enter 0, 0
 30740 00016251 8A07                    	mov al, byte [rdi]
 30741 00016253 3C00                    	cmp al, T_void
 30742 00016255 7465                    	je .Lvoid
 30743 00016257 3C01                    	cmp al, T_nil
 30744 00016259 7470                    	je .Lnil
 30745 0001625B 3C09                    	cmp al, T_boolean_false
 30746 0001625D 747B                    	je .Lboolean_false
 30747 0001625F 3C0A                    	cmp al, T_boolean_true
 30748 00016261 0F8482000000            	je .Lboolean_true
 30749 00016267 3C02                    	cmp al, T_char
 30750 00016269 0F8489000000            	je .Lchar
 30751 0001626F 3C41                    	cmp al, T_interned_symbol
 30752 00016271 0F84CB010000            	je .Linterned_symbol
 30753 00016277 3C42                            cmp al, T_uninterned_symbol
 30754 00016279 0F84E6010000                    je .Luninterned_symbol
 30755 0001627F 3C21                    	cmp al, T_pair
 30756 00016281 0F84F1010000            	je .Lpair
 30757 00016287 3C22                    	cmp al, T_vector
 30758 00016289 0F84BA020000            	je .Lvector
 30759 0001628F 3C04                    	cmp al, T_closure
 30760 00016291 0F8491010000            	je .Lclosure
 30761 00016297 3C13                    	cmp al, T_real
 30762 00016299 0F844B030000            	je .Lreal
 30763 0001629F 3C12                    	cmp al, T_fraction
 30764 000162A1 0F8471030000            	je .Lfraction
 30765 000162A7 3C11                    	cmp al, T_integer
 30766 000162A9 0F84AA030000            	je .Linteger
 30767 000162AF 3C03                    	cmp al, T_string
 30768 000162B1 0F84B5030000            	je .Lstring
 30769                                  
 30770 000162B7 E9ED040000              	jmp .Lunknown_sexpr_type
 30771                                  
 30772                                  .Lvoid:
 30773 000162BC 48BF-                   	mov rdi, fmt_void
 30773 000162BE [F61A000000000000] 
 30774 000162C6 E911050000              	jmp .Lemit
 30775                                  
 30776                                  .Lnil:
 30777 000162CB 48BF-                   	mov rdi, fmt_nil
 30777 000162CD [FE1A000000000000] 
 30778 000162D5 E902050000              	jmp .Lemit
 30779                                  
 30780                                  .Lboolean_false:
 30781 000162DA 48BF-                   	mov rdi, fmt_boolean_false
 30781 000162DC [011B000000000000] 
 30782 000162E4 E9F3040000              	jmp .Lemit
 30783                                  
 30784                                  .Lboolean_true:
 30785 000162E9 48BF-                   	mov rdi, fmt_boolean_true
 30785 000162EB [041B000000000000] 
 30786 000162F3 E9E4040000              	jmp .Lemit
 30787                                  
 30788                                  .Lchar:
 30789 000162F8 8A4701                  	mov al, byte [rdi + 1]
 30790 000162FB 3C20                    	cmp al, ' '
 30791 000162FD 7E28                    	jle .Lchar_whitespace
 30792 000162FF 3C5C                    	cmp al, 92 		; backslash
 30793 00016301 0F847C000000            	je .Lchar_backslash
 30794 00016307 3C22                    	cmp al, '"'
 30795 00016309 0F8483000000            	je .Lchar_dquote
 30796 0001630F 4825FF000000            	and rax, 255
 30797 00016315 48BF-                   	mov rdi, fmt_char_simple
 30797 00016317 [0F1B000000000000] 
 30798 0001631F 4889C6                  	mov rsi, rax
 30799 00016322 E9B5040000              	jmp .Lemit
 30800                                  
 30801                                  .Lchar_whitespace:
 30802 00016327 3C00                    	cmp al, 0
 30803 00016329 7476                    	je .Lchar_null
 30804 0001632B 3C07                    	cmp al, 7
 30805 0001632D 0F847D000000            	je .Lchar_bell
 30806 00016333 3C08                    	cmp al, 8
 30807 00016335 0F8484000000            	je .Lchar_backspace
 30808 0001633B 3C09                    	cmp al, 9
 30809 0001633D 0F848B000000            	je .Lchar_tab
 30810 00016343 3C0A                    	cmp al, 10
 30811 00016345 0F8492000000            	je .Lchar_newline
 30812 0001634B 3C0C                    	cmp al, 12
 30813 0001634D 0F8499000000            	je .Lchar_formfeed
 30814 00016353 3C0D                    	cmp al, 13
 30815 00016355 0F84A0000000            	je .Lchar_return
 30816 0001635B 3C1B                    	cmp al, 27
 30817 0001635D 0F84A7000000            	je .Lchar_escape
 30818 00016363 4825FF000000            	and rax, 255
 30819 00016369 3C20                    	cmp al, ' '
 30820 0001636B 0F84A8000000            	je .Lchar_space
 30821 00016371 48BF-                   	mov rdi, fmt_char_hex
 30821 00016373 [5B1B000000000000] 
 30822 0001637B 4889C6                  	mov rsi, rax
 30823 0001637E E959040000              	jmp .Lemit	
 30824                                  
 30825                                  .Lchar_backslash:
 30826 00016383 48BF-                   	mov rdi, fmt_char_backslash
 30826 00016385 [071B000000000000] 
 30827 0001638D E94A040000              	jmp .Lemit
 30828                                  
 30829                                  .Lchar_dquote:
 30830 00016392 48BF-                   	mov rdi, fmt_char_dquote
 30830 00016394 [0B1B000000000000] 
 30831 0001639C E93B040000              	jmp .Lemit
 30832                                  
 30833                                  .Lchar_null:
 30834 000163A1 48BF-                   	mov rdi, fmt_char_null
 30834 000163A3 [141B000000000000] 
 30835 000163AB E92C040000              	jmp .Lemit
 30836                                  
 30837                                  .Lchar_bell:
 30838 000163B0 48BF-                   	mov rdi, fmt_char_bell
 30838 000163B2 [1A1B000000000000] 
 30839 000163BA E91D040000              	jmp .Lemit
 30840                                  
 30841                                  .Lchar_backspace:
 30842 000163BF 48BF-                   	mov rdi, fmt_char_backspace
 30842 000163C1 [211B000000000000] 
 30843 000163C9 E90E040000              	jmp .Lemit
 30844                                  
 30845                                  .Lchar_tab:
 30846 000163CE 48BF-                   	mov rdi, fmt_char_tab
 30846 000163D0 [2D1B000000000000] 
 30847 000163D8 E9FF030000              	jmp .Lemit
 30848                                  
 30849                                  .Lchar_newline:
 30850 000163DD 48BF-                   	mov rdi, fmt_char_newline
 30850 000163DF [331B000000000000] 
 30851 000163E7 E9F0030000              	jmp .Lemit
 30852                                  
 30853                                  .Lchar_formfeed:
 30854 000163EC 48BF-                   	mov rdi, fmt_char_formfeed
 30854 000163EE [3D1B000000000000] 
 30855 000163F6 E9E1030000              	jmp .Lemit
 30856                                  
 30857                                  .Lchar_return:
 30858 000163FB 48BF-                   	mov rdi, fmt_char_return
 30858 000163FD [441B000000000000] 
 30859 00016405 E9D2030000              	jmp .Lemit
 30860                                  
 30861                                  .Lchar_escape:
 30862 0001640A 48BF-                   	mov rdi, fmt_char_escape
 30862 0001640C [4D1B000000000000] 
 30863 00016414 E9C3030000              	jmp .Lemit
 30864                                  
 30865                                  .Lchar_space:
 30866 00016419 48BF-                   	mov rdi, fmt_char_space
 30866 0001641B [531B000000000000] 
 30867 00016423 E9B4030000              	jmp .Lemit
 30868                                  
 30869                                  .Lclosure:
 30870 00016428 4889FE                  	mov rsi, qword rdi
 30871 0001642B 48BF-                   	mov rdi, fmt_closure
 30871 0001642D [681B000000000000] 
 30872 00016435 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 30873 00016439 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 30874 0001643D E99A030000              	jmp .Lemit
 30875                                  
 30876                                  .Linterned_symbol:
 30877 00016442 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 30878 00016446 BE01000000              	mov rsi, 1		 ; size = 1 byte
 30879 0001644B 488B5701                	mov rdx, qword [rdi + 1] ; length
 30880 0001644F 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 30881 00016453 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 30882 0001645B E8(00000000)            	call fwrite
 30883 00016460 E98C030000              	jmp .Lend
 30884                                  
 30885                                  .Luninterned_symbol:
 30886 00016465 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
 30887 00016469 48BF-                           mov rdi, fmt_gensym
 30887 0001646B [631B000000000000] 
 30888 00016473 E964030000                      jmp .Lemit
 30889                                  	
 30890                                  .Lpair:
 30891 00016478 57                      	push rdi
 30892 00016479 48BF-                   	mov rdi, fmt_lparen
 30892 0001647B [941B000000000000] 
 30893 00016483 B800000000              	mov rax, 0
 30894                                          ENTER
 30894 00016488 C8000000            <1>  enter 0, 0
 30894 0001648C 4883E4F0            <1>  and rsp, ~15
 30895 00016490 E8(00000000)            	call printf
 30896                                          LEAVE
 30896 00016495 C9                  <1>  leave
 30897 00016496 488B3C24                	mov rdi, qword [rsp] 	; pair
 30898 0001649A 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 30899 0001649E E8AAFDFFFF              	call print_sexpr
 30900 000164A3 5F                      	pop rdi 		; pair
 30901 000164A4 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 30902                                  .Lcdr:
 30903 000164A8 8A07                    	mov al, byte [rdi]
 30904 000164AA 3C01                    	cmp al, T_nil
 30905 000164AC 7447                    	je .Lcdr_nil
 30906 000164AE 3C21                    	cmp al, T_pair
 30907 000164B0 7462                    	je .Lcdr_pair
 30908 000164B2 57                      	push rdi
 30909 000164B3 48BF-                   	mov rdi, fmt_dotted_pair
 30909 000164B5 [961B000000000000] 
 30910 000164BD B800000000              	mov rax, 0
 30911                                          ENTER
 30911 000164C2 C8000000            <1>  enter 0, 0
 30911 000164C6 4883E4F0            <1>  and rsp, ~15
 30912 000164CA E8(00000000)            	call printf
 30913                                          LEAVE
 30913 000164CF C9                  <1>  leave
 30914 000164D0 5F                      	pop rdi
 30915 000164D1 E877FDFFFF              	call print_sexpr
 30916 000164D6 48BF-                   	mov rdi, fmt_rparen
 30916 000164D8 [9A1B000000000000] 
 30917 000164E0 B800000000              	mov rax, 0
 30918                                          ENTER
 30918 000164E5 C8000000            <1>  enter 0, 0
 30918 000164E9 4883E4F0            <1>  and rsp, ~15
 30919 000164ED E8(00000000)            	call printf
 30920                                          LEAVE
 30920 000164F2 C9                  <1>  leave
 30921 000164F3 C9                      	leave
 30922 000164F4 C3                      	ret
 30923                                  
 30924                                  .Lcdr_nil:
 30925 000164F5 48BF-                   	mov rdi, fmt_rparen
 30925 000164F7 [9A1B000000000000] 
 30926 000164FF B800000000              	mov rax, 0
 30927                                          ENTER
 30927 00016504 C8000000            <1>  enter 0, 0
 30927 00016508 4883E4F0            <1>  and rsp, ~15
 30928 0001650C E8(00000000)            	call printf
 30929                                          LEAVE
 30929 00016511 C9                  <1>  leave
 30930 00016512 C9                      	leave
 30931 00016513 C3                      	ret
 30932                                  
 30933                                  .Lcdr_pair:
 30934 00016514 57                      	push rdi
 30935 00016515 48BF-                   	mov rdi, fmt_space
 30935 00016517 [9C1B000000000000] 
 30936 0001651F B800000000              	mov rax, 0
 30937                                          ENTER
 30937 00016524 C8000000            <1>  enter 0, 0
 30937 00016528 4883E4F0            <1>  and rsp, ~15
 30938 0001652C E8(00000000)            	call printf
 30939                                          LEAVE
 30939 00016531 C9                  <1>  leave
 30940 00016532 488B3C24                	mov rdi, qword [rsp]
 30941 00016536 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 30942 0001653A E80EFDFFFF              	call print_sexpr
 30943 0001653F 5F                      	pop rdi
 30944 00016540 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 30945 00016544 E95FFFFFFF              	jmp .Lcdr
 30946                                  
 30947                                  .Lvector:
 30948 00016549 488B4701                	mov rax, qword [rdi + 1] ; length
 30949 0001654D 4883F800                	cmp rax, 0
 30950 00016551 0F8484000000            	je .Lvector_empty
 30951 00016557 57                      	push rdi
 30952 00016558 48BF-                   	mov rdi, fmt_vector
 30952 0001655A [A21B000000000000] 
 30953 00016562 B800000000              	mov rax, 0
 30954                                          ENTER
 30954 00016567 C8000000            <1>  enter 0, 0
 30954 0001656B 4883E4F0            <1>  and rsp, ~15
 30955 0001656F E8(00000000)            	call printf
 30956                                          LEAVE
 30956 00016574 C9                  <1>  leave
 30957 00016575 488B3C24                	mov rdi, qword [rsp]
 30958 00016579 FF7701                  	push qword [rdi + 1]
 30959 0001657C 6A01                    	push 1
 30960 0001657E 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 30961 00016582 E8C6FCFFFF              	call print_sexpr
 30962                                  .Lvector_loop:
 30963                                  	; [rsp] index
 30964                                  	; [rsp + 8*1] limit
 30965                                  	; [rsp + 8*2] vector
 30966 00016587 488B0424                	mov rax, qword [rsp]
 30967 0001658B 483B442408              	cmp rax, qword [rsp + 8*1]
 30968 00016590 7436                    	je .Lvector_end
 30969 00016592 48BF-                   	mov rdi, fmt_space
 30969 00016594 [9C1B000000000000] 
 30970 0001659C B800000000              	mov rax, 0
 30971                                          ENTER
 30971 000165A1 C8000000            <1>  enter 0, 0
 30971 000165A5 4883E4F0            <1>  and rsp, ~15
 30972 000165A9 E8(00000000)            	call printf
 30973                                          LEAVE
 30973 000165AE C9                  <1>  leave
 30974 000165AF 488B0424                	mov rax, qword [rsp]
 30975 000165B3 488B5C2410              	mov rbx, qword [rsp + 8*2]
 30976 000165B8 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 30977 000165BD E88BFCFFFF              	call print_sexpr
 30978 000165C2 48FF0424                	inc qword [rsp]
 30979 000165C6 EBBF                    	jmp .Lvector_loop
 30980                                  
 30981                                  .Lvector_end:
 30982 000165C8 4883C418                	add rsp, 8*3
 30983 000165CC 48BF-                   	mov rdi, fmt_rparen
 30983 000165CE [9A1B000000000000] 
 30984 000165D6 E901020000              	jmp .Lemit	
 30985                                  
 30986                                  .Lvector_empty:
 30987 000165DB 48BF-                   	mov rdi, fmt_empty_vector
 30987 000165DD [9E1B000000000000] 
 30988 000165E5 E9F2010000              	jmp .Lemit
 30989                                  
 30990                                  .Lreal:
 30991 000165EA FF7701                  	push qword [rdi + 1]
 30992 000165ED F20F100424              	movsd xmm0, qword [rsp]
 30993 000165F2 4883C408                	add rsp, 8*1
 30994 000165F6 48BF-                   	mov rdi, fmt_real
 30994 000165F8 [A51B000000000000] 
 30995 00016600 B801000000              	mov rax, 1
 30996                                  	ENTER
 30996 00016605 C8000000            <1>  enter 0, 0
 30996 00016609 4883E4F0            <1>  and rsp, ~15
 30997 0001660D E8(00000000)            	call printf
 30998                                  	LEAVE
 30998 00016612 C9                  <1>  leave
 30999 00016613 E9D9010000              	jmp .Lend
 31000                                  
 31001                                  .Lfraction:
 31002 00016618 488B7701                	mov rsi, qword [rdi + 1]
 31003 0001661C 488B5709                	mov rdx, qword [rdi + 1 + 8]
 31004 00016620 4883FE00                	cmp rsi, 0
 31005 00016624 7415                    	je .Lrat_zero
 31006 00016626 4883FA01                	cmp rdx, 1
 31007 0001662A 741E                    	je .Lrat_int
 31008 0001662C 48BF-                   	mov rdi, fmt_fraction
 31008 0001662E [A81B000000000000] 
 31009 00016636 E9A1010000              	jmp .Lemit
 31010                                  
 31011                                  .Lrat_zero:
 31012 0001663B 48BF-                   	mov rdi, fmt_zero
 31012 0001663D [B01B000000000000] 
 31013 00016645 E992010000              	jmp .Lemit
 31014                                  
 31015                                  .Lrat_int:
 31016 0001664A 48BF-                   	mov rdi, fmt_int
 31016 0001664C [B21B000000000000] 
 31017 00016654 E983010000              	jmp .Lemit
 31018                                  
 31019                                  .Linteger:
 31020 00016659 488B7701                	mov rsi, qword [rdi + 1]
 31021 0001665D 48BF-                   	mov rdi, fmt_int
 31021 0001665F [B21B000000000000] 
 31022 00016667 E970010000              	jmp .Lemit
 31023                                  
 31024                                  .Lstring:
 31025 0001666C 488D4709                	lea rax, [rdi + 1 + 8]
 31026 00016670 50                      	push rax
 31027 00016671 FF7701                  	push qword [rdi + 1]
 31028 00016674 48BF-                   	mov rdi, fmt_dquote
 31028 00016676 [FB1B000000000000] 
 31029 0001667E B800000000              	mov rax, 0
 31030                                  	ENTER
 31030 00016683 C8000000            <1>  enter 0, 0
 31030 00016687 4883E4F0            <1>  and rsp, ~15
 31031 0001668B E8(00000000)            	call printf
 31032                                  	LEAVE
 31032 00016690 C9                  <1>  leave
 31033                                  .Lstring_loop:
 31034                                  	; qword [rsp]: limit
 31035                                  	; qword [rsp + 8*1]: char *
 31036 00016691 48833C2400              	cmp qword [rsp], 0
 31037 00016696 0F84FD000000            	je .Lstring_end
 31038 0001669C 488B442408              	mov rax, qword [rsp + 8*1]
 31039 000166A1 8A00                    	mov al, byte [rax]
 31040 000166A3 4825FF000000            	and rax, 255
 31041 000166A9 3C07                    	cmp al, 7
 31042 000166AB 7468                            je .Lstring_char_7
 31043 000166AD 3C08                            cmp al, 8
 31044 000166AF 7470                            je .Lstring_char_8
 31045 000166B1 3C09                            cmp al, 9
 31046 000166B3 7478                            je .Lstring_char_9
 31047 000166B5 3C0A                            cmp al, 10
 31048 000166B7 0F847C000000                    je .Lstring_char_10
 31049 000166BD 3C0B                            cmp al, 11
 31050 000166BF 0F8480000000                    je .Lstring_char_11
 31051 000166C5 3C0C                            cmp al, 12
 31052 000166C7 0F8484000000                    je .Lstring_char_12
 31053 000166CD 3C0D                            cmp al, 13
 31054 000166CF 0F8488000000                    je .Lstring_char_13
 31055 000166D5 3C22                            cmp al, 34
 31056 000166D7 0F848C000000                    je .Lstring_char_34
 31058 000166DD 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 31059 000166DF 3C20                            cmp al, ' '
 31060 000166E1 0F8CA0000000                    jl .Lstring_char_hex
 31061 000166E7 48BF-                           mov rdi, fmt_string_char
 31061 000166E9 [FD1B000000000000] 
 31062 000166F1 4889C6                          mov rsi, rax
 31063                                  .Lstring_char_emit:
 31064 000166F4 B800000000                      mov rax, 0
 31065                                          ENTER
 31065 000166F9 C8000000            <1>  enter 0, 0
 31065 000166FD 4883E4F0            <1>  and rsp, ~15
 31066 00016701 E8(00000000)                    call printf
 31067                                          LEAVE
 31067 00016706 C9                  <1>  leave
 31068 00016707 48FF0C24                        dec qword [rsp]
 31069 0001670B 48FF442408                      inc qword [rsp + 8*1]
 31070 00016710 E97CFFFFFF                      jmp .Lstring_loop
 31071                                  
 31072                                  .Lstring_char_7:
 31073 00016715 48BF-                           mov rdi, fmt_string_char_7
 31073 00016717 [001C000000000000] 
 31074 0001671F EBD3                            jmp .Lstring_char_emit
 31075                                  
 31076                                  .Lstring_char_8:
 31077 00016721 48BF-                           mov rdi, fmt_string_char_8
 31077 00016723 [031C000000000000] 
 31078 0001672B EBC7                            jmp .Lstring_char_emit
 31079                                          
 31080                                  .Lstring_char_9:
 31081 0001672D 48BF-                           mov rdi, fmt_string_char_9
 31081 0001672F [061C000000000000] 
 31082 00016737 EBBB                            jmp .Lstring_char_emit
 31083                                  
 31084                                  .Lstring_char_10:
 31085 00016739 48BF-                           mov rdi, fmt_string_char_10
 31085 0001673B [091C000000000000] 
 31086 00016743 EBAF                            jmp .Lstring_char_emit
 31087                                  
 31088                                  .Lstring_char_11:
 31089 00016745 48BF-                           mov rdi, fmt_string_char_11
 31089 00016747 [0C1C000000000000] 
 31090 0001674F EBA3                            jmp .Lstring_char_emit
 31091                                  
 31092                                  .Lstring_char_12:
 31093 00016751 48BF-                           mov rdi, fmt_string_char_12
 31093 00016753 [0F1C000000000000] 
 31094 0001675B EB97                            jmp .Lstring_char_emit
 31095                                  
 31096                                  .Lstring_char_13:
 31097 0001675D 48BF-                           mov rdi, fmt_string_char_13
 31097 0001675F [121C000000000000] 
 31098 00016767 EB8B                            jmp .Lstring_char_emit
 31099                                  
 31100                                  .Lstring_char_34:
 31101 00016769 48BF-                           mov rdi, fmt_string_char_34
 31101 0001676B [151C000000000000] 
 31102 00016773 E97CFFFFFF                      jmp .Lstring_char_emit
 31103                                  
 31104                                  .Lstring_char_92:
 31105 00016778 48BF-                           mov rdi, fmt_string_char_92
 31105 0001677A [181C000000000000] 
 31106 00016782 E96DFFFFFF                      jmp .Lstring_char_emit
 31107                                  
 31108                                  .Lstring_char_hex:
 31109 00016787 48BF-                           mov rdi, fmt_string_char_hex
 31109 00016789 [1B1C000000000000] 
 31110 00016791 4889C6                          mov rsi, rax
 31111 00016794 E95BFFFFFF                      jmp .Lstring_char_emit        
 31112                                  
 31113                                  .Lstring_end:
 31114 00016799 4883C410                	add rsp, 8 * 2
 31115 0001679D 48BF-                   	mov rdi, fmt_dquote
 31115 0001679F [FB1B000000000000] 
 31116 000167A7 EB33                    	jmp .Lemit
 31117                                  
 31118                                  .Lunknown_sexpr_type:
 31119 000167A9 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
 31119 000167AB [B61B000000000000] 
 31120 000167B3 4825FF000000            	and rax, 255
 31121 000167B9 4889C2                  	mov rdx, rax
 31122 000167BC 4889F9                  	mov rcx, rdi
 31123 000167BF 488B3C25[00000000]      	mov rdi, qword [stderr]
 31124 000167C7 B800000000              	mov rax, 0
 31125                                          ENTER
 31125 000167CC C8000000            <1>  enter 0, 0
 31125 000167D0 4883E4F0            <1>  and rsp, ~15
 31126 000167D4 E8(00000000)            	call fprintf
 31127                                          LEAVE
 31127 000167D9 C9                  <1>  leave
 31128 000167DA C9                              leave
 31129 000167DB C3                              ret
 31130                                  
 31131                                  .Lemit:
 31132 000167DC B800000000              	mov rax, 0
 31133                                          ENTER
 31133 000167E1 C8000000            <1>  enter 0, 0
 31133 000167E5 4883E4F0            <1>  and rsp, ~15
 31134 000167E9 E8(00000000)            	call printf
 31135                                          LEAVE
 31135 000167EE C9                  <1>  leave
 31136 000167EF EB00                    	jmp .Lend
 31137                                  
 31138                                  .Lend:
 31139                                  	LEAVE
 31139 000167F1 C9                  <1>  leave
 31140 000167F2 C3                      	ret
 31141                                  
 31142                                  ;;; rdi: address of free variable
 31143                                  ;;; rsi: address of code-pointer
 31144                                  bind_primitive:
 31145 000167F3 C8000000                        enter 0, 0
 31146 000167F7 57                              push rdi
 31147 000167F8 BF11000000                      mov rdi, (1 + 8 + 8)
 31148 000167FD E80DF9FFFF                      call malloc
 31149 00016802 5F                              pop rdi
 31150 00016803 C60004                          mov byte [rax], T_closure
 31151 00016806 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 31152 0001680E 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 31153 00016812 488907                          mov qword [rdi], rax
 31154 00016815 48B8-                           mov rax, sob_void
 31154 00016817 [0000000000000000] 
 31155 0001681F C9                              leave
 31156 00016820 C3                              ret
 31157                                  
 31158                                  L_code_ptr_ash:
 31159 00016821 C8000000                        enter 0, 0
 31160 00016825 48837D1802                      cmp COUNT, 2
 31161 0001682A 0F85EC130000                    jne L_error_arg_count_2
 31162 00016830 488B7D20                        mov rdi, PARAM(0)
 31163                                          assert_integer(rdi)
 31163 00016834 803F11              <1>  cmp byte [%1], %2
 31163 00016837 0F857E140000        <1>  jne L_error_incorrect_type
 31164 0001683D 488B4D28                        mov rcx, PARAM(1)
 31165                                          assert_integer(rcx)
 31165 00016841 803911              <1>  cmp byte [%1], %2
 31165 00016844 0F8571140000        <1>  jne L_error_incorrect_type
 31166 0001684A 488B7F01                        mov rdi, qword [rdi + 1]
 31167 0001684E 488B4901                        mov rcx, qword [rcx + 1]
 31168 00016852 4883F900                        cmp rcx, 0
 31169 00016856 7C0F                            jl .L_negative
 31170                                  .L_loop_positive:
 31171 00016858 4883F900                        cmp rcx, 0
 31172 0001685C 741B                            je .L_exit
 31173 0001685E 48D3E7                          sal rdi, cl
 31174 00016861 48C1E908                        shr rcx, 8
 31175 00016865 EBF1                            jmp .L_loop_positive
 31176                                  .L_negative:
 31177 00016867 48F7D9                          neg rcx
 31178                                  .L_loop_negative:
 31179 0001686A 4883F900                        cmp rcx, 0
 31180 0001686E 7409                            je .L_exit
 31181 00016870 48D3FF                          sar rdi, cl
 31182 00016873 48C1E908                        shr rcx, 8
 31183 00016877 EBF1                            jmp .L_loop_negative
 31184                                  .L_exit:
 31185 00016879 E8E9120000                      call make_integer
 31186 0001687E C9                              leave
 31187 0001687F C22000                          ret AND_KILL_FRAME(2)
 31188                                  
 31189                                  L_code_ptr_logand:
 31190 00016882 C8000000                        enter 0, 0
 31191 00016886 48837D1802                      cmp COUNT, 2
 31192 0001688B 0F858B130000                    jne L_error_arg_count_2
 31193 00016891 4C8B4520                        mov r8, PARAM(0)
 31194                                          assert_integer(r8)
 31194 00016895 41803811            <1>  cmp byte [%1], %2
 31194 00016899 0F851C140000        <1>  jne L_error_incorrect_type
 31195 0001689F 4C8B4D28                        mov r9, PARAM(1)
 31196                                          assert_integer(r9)
 31196 000168A3 41803911            <1>  cmp byte [%1], %2
 31196 000168A7 0F850E140000        <1>  jne L_error_incorrect_type
 31197 000168AD 498B7801                        mov rdi, qword [r8 + 1]
 31198 000168B1 49237901                        and rdi, qword [r9 + 1]
 31199 000168B5 E8AD120000                      call make_integer
 31200 000168BA C9                              leave
 31201 000168BB C22000                          ret AND_KILL_FRAME(2)
 31202                                  
 31203                                  L_code_ptr_logor:
 31204 000168BE C8000000                        enter 0, 0
 31205 000168C2 48837D1802                      cmp COUNT, 2
 31206 000168C7 0F854F130000                    jne L_error_arg_count_2
 31207 000168CD 4C8B4520                        mov r8, PARAM(0)
 31208                                          assert_integer(r8)
 31208 000168D1 41803811            <1>  cmp byte [%1], %2
 31208 000168D5 0F85E0130000        <1>  jne L_error_incorrect_type
 31209 000168DB 4C8B4D28                        mov r9, PARAM(1)
 31210                                          assert_integer(r9)
 31210 000168DF 41803911            <1>  cmp byte [%1], %2
 31210 000168E3 0F85D2130000        <1>  jne L_error_incorrect_type
 31211 000168E9 498B7801                        mov rdi, qword [r8 + 1]
 31212 000168ED 490B7901                        or rdi, qword [r9 + 1]
 31213 000168F1 E871120000                      call make_integer
 31214 000168F6 C9                              leave
 31215 000168F7 C22000                          ret AND_KILL_FRAME(2)
 31216                                  
 31217                                  L_code_ptr_logxor:
 31218 000168FA C8000000                        enter 0, 0
 31219 000168FE 48837D1802                      cmp COUNT, 2
 31220 00016903 0F8513130000                    jne L_error_arg_count_2
 31221 00016909 4C8B4520                        mov r8, PARAM(0)
 31222                                          assert_integer(r8)
 31222 0001690D 41803811            <1>  cmp byte [%1], %2
 31222 00016911 0F85A4130000        <1>  jne L_error_incorrect_type
 31223 00016917 4C8B4D28                        mov r9, PARAM(1)
 31224                                          assert_integer(r9)
 31224 0001691B 41803911            <1>  cmp byte [%1], %2
 31224 0001691F 0F8596130000        <1>  jne L_error_incorrect_type
 31225 00016925 498B7801                        mov rdi, qword [r8 + 1]
 31226 00016929 49337901                        xor rdi, qword [r9 + 1]
 31227 0001692D E835120000                      call make_integer
 31228                                          LEAVE
 31228 00016932 C9                  <1>  leave
 31229 00016933 C22000                          ret AND_KILL_FRAME(2)
 31230                                  
 31231                                  L_code_ptr_lognot:
 31232 00016936 C8000000                        enter 0, 0
 31233 0001693A 48837D1801                      cmp COUNT, 1
 31234 0001693F 0F85A2120000                    jne L_error_arg_count_1
 31235 00016945 4C8B4520                        mov r8, PARAM(0)
 31236                                          assert_integer(r8)
 31236 00016949 41803811            <1>  cmp byte [%1], %2
 31236 0001694D 0F8568130000        <1>  jne L_error_incorrect_type
 31237 00016953 498B7801                        mov rdi, qword [r8 + 1]
 31238 00016957 48F7D7                          not rdi
 31239 0001695A E808120000                      call make_integer
 31240 0001695F C9                              leave
 31241 00016960 C21800                          ret AND_KILL_FRAME(1)
 31242                                  
 31243                                  L_code_ptr_bin_apply:
 31244 00016963 48837C241002                    cmp qword [rsp + 8 * 2], 2
 31245 00016969 0F85AD120000                    jne L_error_arg_count_2
 31246 0001696F 4C8B642418                      mov r12, qword [rsp + 8 * 3]
 31247                                          assert_closure(r12)
 31247 00016974 41803C2404          <1>  cmp byte [%1], %2
 31247 00016979 0F853C130000        <1>  jne L_error_incorrect_type
 31248 0001697F 4C8D542420                      lea r10, [rsp + 8 * 4]
 31249 00016984 4D8B1A                          mov r11, qword [r10]
 31250 00016987 4C8B0C24                        mov r9, qword [rsp]
 31251 0001698B B900000000                      mov rcx, 0
 31252 00016990 4C89DE                          mov rsi, r11
 31253                                  .L0:
 31254 00016993 4881FE[01000000]                cmp rsi, sob_nil
 31255 0001699A 7412                            je .L0_out
 31256                                          assert_pair(rsi)
 31256 0001699C 803E21              <1>  cmp byte [%1], %2
 31256 0001699F 0F8516130000        <1>  jne L_error_incorrect_type
 31257 000169A5 48FFC1                          inc rcx
 31258 000169A8 488B7609                        mov rsi, SOB_PAIR_CDR(rsi)
 31259 000169AC EBE5                            jmp .L0
 31260                                  .L0_out:
 31261 000169AE 488D1CCDF0FFFFFF                lea rbx, [8 * (rcx - 2)]
 31262 000169B6 4829DC                          sub rsp, rbx
 31263 000169B9 4889E7                          mov rdi, rsp
 31264 000169BC FC                              cld
 31265                                          ; place ret addr
 31266 000169BD 4C89C8                          mov rax, r9
 31267 000169C0 48AB                            stosq
 31268                                          ; place env_f
 31269 000169C2 498B442401                      mov rax, SOB_CLOSURE_ENV(r12)
 31270 000169C7 48AB                            stosq
 31271                                          ; place COUNT = rcx
 31272 000169C9 4889C8                          mov rax, rcx
 31273 000169CC 48AB                            stosq
 31274                                  .L1:
 31275 000169CE 4883F900                        cmp rcx, 0
 31276 000169D2 740F                            je .L1_out
 31277 000169D4 498B4301                        mov rax, SOB_PAIR_CAR(r11)
 31278 000169D8 48AB                            stosq
 31279 000169DA 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11)
 31280 000169DE 48FFC9                          dec rcx
 31281 000169E1 EBEB                            jmp .L1
 31282                                  .L1_out:
 31283 000169E3 4883EF08                        sub rdi, 8*1
 31284 000169E7 4939FA                          cmp r10, rdi
 31285 000169EA 7505                            jne .L_error_apply_stack_corrupted
 31286 000169EC 41FF642409                      jmp SOB_CLOSURE_CODE(r12)
 31287                                  .L_error_apply_stack_corrupted:
 31288 000169F1 CC                              int3
 31289                                  
 31290                                  L_code_ptr_is_null:
 31291 000169F2 C8000000                        enter 0, 0
 31292 000169F6 48837D1801                      cmp COUNT, 1
 31293 000169FB 0F85E6110000                    jne L_error_arg_count_1
 31294 00016A01 488B4520                        mov rax, PARAM(0)
 31295 00016A05 803801                          cmp byte [rax], T_nil
 31296 00016A08 750C                            jne .L_false
 31297 00016A0A 48B8-                           mov rax, sob_boolean_true
 31297 00016A0C [0300000000000000] 
 31298 00016A14 EB0A                            jmp .L_end
 31299                                  .L_false:
 31300 00016A16 48B8-                           mov rax, sob_boolean_false
 31300 00016A18 [0200000000000000] 
 31301                                  .L_end:
 31302 00016A20 C9                              leave
 31303 00016A21 C21800                          ret AND_KILL_FRAME(1)
 31304                                  
 31305                                  L_code_ptr_is_pair:
 31306 00016A24 C8000000                        enter 0, 0
 31307 00016A28 48837D1801                      cmp COUNT, 1
 31308 00016A2D 0F85B4110000                    jne L_error_arg_count_1
 31309 00016A33 488B4520                        mov rax, PARAM(0)
 31310 00016A37 803821                          cmp byte [rax], T_pair
 31311 00016A3A 750C                            jne .L_false
 31312 00016A3C 48B8-                           mov rax, sob_boolean_true
 31312 00016A3E [0300000000000000] 
 31313 00016A46 EB0A                            jmp .L_end
 31314                                  .L_false:
 31315 00016A48 48B8-                           mov rax, sob_boolean_false
 31315 00016A4A [0200000000000000] 
 31316                                  .L_end:
 31317 00016A52 C9                              leave
 31318 00016A53 C21800                          ret AND_KILL_FRAME(1)
 31319                                          
 31320                                  L_code_ptr_is_void:
 31321 00016A56 C8000000                        enter 0, 0
 31322 00016A5A 48837D1801                      cmp COUNT, 1
 31323 00016A5F 0F8582110000                    jne L_error_arg_count_1
 31324 00016A65 488B4520                        mov rax, PARAM(0)
 31325 00016A69 803800                          cmp byte [rax], T_void
 31326 00016A6C 750C                            jne .L_false
 31327 00016A6E 48B8-                           mov rax, sob_boolean_true
 31327 00016A70 [0300000000000000] 
 31328 00016A78 EB0A                            jmp .L_end
 31329                                  .L_false:
 31330 00016A7A 48B8-                           mov rax, sob_boolean_false
 31330 00016A7C [0200000000000000] 
 31331                                  .L_end:
 31332 00016A84 C9                              leave
 31333 00016A85 C21800                          ret AND_KILL_FRAME(1)
 31334                                  
 31335                                  L_code_ptr_is_char:
 31336 00016A88 C8000000                        enter 0, 0
 31337 00016A8C 48837D1801                      cmp COUNT, 1
 31338 00016A91 0F8550110000                    jne L_error_arg_count_1
 31339 00016A97 488B4520                        mov rax, PARAM(0)
 31340 00016A9B 803802                          cmp byte [rax], T_char
 31341 00016A9E 750C                            jne .L_false
 31342 00016AA0 48B8-                           mov rax, sob_boolean_true
 31342 00016AA2 [0300000000000000] 
 31343 00016AAA EB0A                            jmp .L_end
 31344                                  .L_false:
 31345 00016AAC 48B8-                           mov rax, sob_boolean_false
 31345 00016AAE [0200000000000000] 
 31346                                  .L_end:
 31347 00016AB6 C9                              leave
 31348 00016AB7 C21800                          ret AND_KILL_FRAME(1)
 31349                                  
 31350                                  L_code_ptr_is_string:
 31351 00016ABA C8000000                        enter 0, 0
 31352 00016ABE 48837D1801                      cmp COUNT, 1
 31353 00016AC3 0F851E110000                    jne L_error_arg_count_1
 31354 00016AC9 488B4520                        mov rax, PARAM(0)
 31355 00016ACD 803803                          cmp byte [rax], T_string
 31356 00016AD0 750C                            jne .L_false
 31357 00016AD2 48B8-                           mov rax, sob_boolean_true
 31357 00016AD4 [0300000000000000] 
 31358 00016ADC EB0A                            jmp .L_end
 31359                                  .L_false:
 31360 00016ADE 48B8-                           mov rax, sob_boolean_false
 31360 00016AE0 [0200000000000000] 
 31361                                  .L_end:
 31362 00016AE8 C9                              leave
 31363 00016AE9 C21800                          ret AND_KILL_FRAME(1)
 31364                                  
 31365                                  L_code_ptr_is_symbol:
 31366 00016AEC C8000000                        enter 0, 0
 31367 00016AF0 48837D1801                      cmp COUNT, 1
 31368 00016AF5 0F85EC100000                    jne L_error_arg_count_1
 31369 00016AFB 4C8B4520                        mov r8, PARAM(0)
 31370 00016AFF 41802040                        and byte [r8], T_symbol
 31371 00016B03 740C                            jz .L_false
 31372 00016B05 48B8-                           mov rax, sob_boolean_true
 31372 00016B07 [0300000000000000] 
 31373 00016B0F EB0A                            jmp .L_exit
 31374                                  .L_false:
 31375 00016B11 48B8-                           mov rax, sob_boolean_false
 31375 00016B13 [0200000000000000] 
 31376                                  .L_exit:
 31377 00016B1B C9                              leave
 31378 00016B1C C21800                          ret AND_KILL_FRAME(1)
 31379                                  
 31380                                  L_code_ptr_is_uninterned_symbol:
 31381 00016B1F C8000000                        enter 0, 0
 31382 00016B23 48837D1801                      cmp COUNT, 1
 31383 00016B28 0F85B9100000                    jne L_error_arg_count_1
 31384 00016B2E 4C8B4520                        mov r8, PARAM(0)
 31385 00016B32 41803842                        cmp byte [r8], T_uninterned_symbol
 31386 00016B36 750C                            jne .L_false
 31387 00016B38 48B8-                           mov rax, sob_boolean_true
 31387 00016B3A [0300000000000000] 
 31388 00016B42 EB0A                            jmp .L_exit
 31389                                  .L_false:
 31390 00016B44 48B8-                           mov rax, sob_boolean_false
 31390 00016B46 [0200000000000000] 
 31391                                  .L_exit:
 31392 00016B4E C9                              leave
 31393 00016B4F C21800                          ret AND_KILL_FRAME(1)
 31394                                  
 31395                                  L_code_ptr_is_interned_symbol:
 31396 00016B52 C8000000                        enter 0, 0
 31397 00016B56 48837D1801                      cmp COUNT, 1
 31398 00016B5B 0F8586100000                    jne L_error_arg_count_1
 31399 00016B61 488B4520                        mov rax, PARAM(0)
 31400 00016B65 803841                          cmp byte [rax], T_interned_symbol
 31401 00016B68 750C                            jne .L_false
 31402 00016B6A 48B8-                           mov rax, sob_boolean_true
 31402 00016B6C [0300000000000000] 
 31403 00016B74 EB0A                            jmp .L_end
 31404                                  .L_false:
 31405 00016B76 48B8-                           mov rax, sob_boolean_false
 31405 00016B78 [0200000000000000] 
 31406                                  .L_end:
 31407 00016B80 C9                              leave
 31408 00016B81 C21800                          ret AND_KILL_FRAME(1)
 31409                                  
 31410                                  L_code_ptr_gensym:
 31411 00016B84 C8000000                        enter 0, 0
 31412 00016B88 48837D1800                      cmp COUNT, 0
 31413 00016B8D 0F851F100000                    jne L_error_arg_count_0
 31414 00016B93 48FF0425[211C0000]              inc qword [gensym_count]
 31415 00016B9B BF09000000                      mov rdi, (1 + 8)
 31416 00016BA0 E86AF5FFFF                      call malloc
 31417 00016BA5 C60042                          mov byte [rax], T_uninterned_symbol
 31418 00016BA8 488B0C25[211C0000]              mov rcx, qword [gensym_count]
 31419 00016BB0 48894801                        mov qword [rax + 1], rcx
 31420 00016BB4 C9                              leave
 31421 00016BB5 C21000                          ret AND_KILL_FRAME(0)
 31422                                  
 31423                                  L_code_ptr_is_vector:
 31424 00016BB8 C8000000                        enter 0, 0
 31425 00016BBC 48837D1801                      cmp COUNT, 1
 31426 00016BC1 0F8520100000                    jne L_error_arg_count_1
 31427 00016BC7 488B4520                        mov rax, PARAM(0)
 31428 00016BCB 803822                          cmp byte [rax], T_vector
 31429 00016BCE 750C                            jne .L_false
 31430 00016BD0 48B8-                           mov rax, sob_boolean_true
 31430 00016BD2 [0300000000000000] 
 31431 00016BDA EB0A                            jmp .L_end
 31432                                  .L_false:
 31433 00016BDC 48B8-                           mov rax, sob_boolean_false
 31433 00016BDE [0200000000000000] 
 31434                                  .L_end:
 31435 00016BE6 C9                              leave
 31436 00016BE7 C21800                          ret AND_KILL_FRAME(1)
 31437                                  
 31438                                  L_code_ptr_is_closure:
 31439 00016BEA C8000000                        enter 0, 0
 31440 00016BEE 48837D1801                      cmp COUNT, 1
 31441 00016BF3 0F85EE0F0000                    jne L_error_arg_count_1
 31442 00016BF9 488B4520                        mov rax, PARAM(0)
 31443 00016BFD 803804                          cmp byte [rax], T_closure
 31444 00016C00 750C                            jne .L_false
 31445 00016C02 48B8-                           mov rax, sob_boolean_true
 31445 00016C04 [0300000000000000] 
 31446 00016C0C EB0A                            jmp .L_end
 31447                                  .L_false:
 31448 00016C0E 48B8-                           mov rax, sob_boolean_false
 31448 00016C10 [0200000000000000] 
 31449                                  .L_end:
 31450 00016C18 C9                              leave
 31451 00016C19 C21800                          ret AND_KILL_FRAME(1)
 31452                                  
 31453                                  L_code_ptr_is_real:
 31454 00016C1C C8000000                        enter 0, 0
 31455 00016C20 48837D1801                      cmp COUNT, 1
 31456 00016C25 0F85BC0F0000                    jne L_error_arg_count_1
 31457 00016C2B 488B4520                        mov rax, PARAM(0)
 31458 00016C2F 803813                          cmp byte [rax], T_real
 31459 00016C32 750C                            jne .L_false
 31460 00016C34 48B8-                           mov rax, sob_boolean_true
 31460 00016C36 [0300000000000000] 
 31461 00016C3E EB0A                            jmp .L_end
 31462                                  .L_false:
 31463 00016C40 48B8-                           mov rax, sob_boolean_false
 31463 00016C42 [0200000000000000] 
 31464                                  .L_end:
 31465 00016C4A C9                              leave
 31466 00016C4B C21800                          ret AND_KILL_FRAME(1)
 31467                                  
 31468                                  L_code_ptr_is_fraction:
 31469 00016C4E C8000000                        enter 0, 0
 31470 00016C52 48837D1801                      cmp COUNT, 1
 31471 00016C57 0F858A0F0000                    jne L_error_arg_count_1
 31472 00016C5D 488B4520                        mov rax, PARAM(0)
 31473 00016C61 803812                          cmp byte [rax], T_fraction
 31474 00016C64 750C                            jne .L_false
 31475 00016C66 48B8-                           mov rax, sob_boolean_true
 31475 00016C68 [0300000000000000] 
 31476 00016C70 EB0A                            jmp .L_end
 31477                                  .L_false:
 31478 00016C72 48B8-                           mov rax, sob_boolean_false
 31478 00016C74 [0200000000000000] 
 31479                                  .L_end:
 31480 00016C7C C9                              leave
 31481 00016C7D C21800                          ret AND_KILL_FRAME(1)
 31482                                  
 31483                                  L_code_ptr_is_boolean:
 31484 00016C80 C8000000                        enter 0, 0
 31485 00016C84 48837D1801                      cmp COUNT, 1
 31486 00016C89 0F85580F0000                    jne L_error_arg_count_1
 31487 00016C8F 488B4520                        mov rax, PARAM(0)
 31488 00016C93 8A18                            mov bl, byte [rax]
 31489 00016C95 80E308                          and bl, T_boolean
 31490 00016C98 740C                            je .L_false
 31491 00016C9A 48B8-                           mov rax, sob_boolean_true
 31491 00016C9C [0300000000000000] 
 31492 00016CA4 EB0A                            jmp .L_end
 31493                                  .L_false:
 31494 00016CA6 48B8-                           mov rax, sob_boolean_false
 31494 00016CA8 [0200000000000000] 
 31495                                  .L_end:
 31496 00016CB0 C9                              leave
 31497 00016CB1 C21800                          ret AND_KILL_FRAME(1)
 31498                                          
 31499                                  L_code_ptr_is_number:
 31500 00016CB4 C8000000                        enter 0, 0
 31501 00016CB8 48837D1801                      cmp COUNT, 1
 31502 00016CBD 0F85240F0000                    jne L_error_arg_count_1
 31503 00016CC3 488B4520                        mov rax, PARAM(0)
 31504 00016CC7 8A18                            mov bl, byte [rax]
 31505 00016CC9 80E310                          and bl, T_number
 31506 00016CCC 740C                            jz .L_false
 31507 00016CCE 48B8-                           mov rax, sob_boolean_true
 31507 00016CD0 [0300000000000000] 
 31508 00016CD8 EB0A                            jmp .L_end
 31509                                  .L_false:
 31510 00016CDA 48B8-                           mov rax, sob_boolean_false
 31510 00016CDC [0200000000000000] 
 31511                                  .L_end:
 31512 00016CE4 C9                              leave
 31513 00016CE5 C21800                          ret AND_KILL_FRAME(1)
 31514                                          
 31515                                  L_code_ptr_is_collection:
 31516 00016CE8 C8000000                        enter 0, 0
 31517 00016CEC 48837D1801                      cmp COUNT, 1
 31518 00016CF1 0F85F00E0000                    jne L_error_arg_count_1
 31519 00016CF7 488B4520                        mov rax, PARAM(0)
 31520 00016CFB 8A18                            mov bl, byte [rax]
 31521 00016CFD 80E320                          and bl, T_collection
 31522 00016D00 740C                            je .L_false
 31523 00016D02 48B8-                           mov rax, sob_boolean_true
 31523 00016D04 [0300000000000000] 
 31524 00016D0C EB0A                            jmp .L_end
 31525                                  .L_false:
 31526 00016D0E 48B8-                           mov rax, sob_boolean_false
 31526 00016D10 [0200000000000000] 
 31527                                  .L_end:
 31528 00016D18 C9                              leave
 31529 00016D19 C21800                          ret AND_KILL_FRAME(1)
 31530                                  
 31531                                  L_code_ptr_cons:
 31532 00016D1C C8000000                        enter 0, 0
 31533 00016D20 48837D1802                      cmp COUNT, 2
 31534 00016D25 0F85F10E0000                    jne L_error_arg_count_2
 31535 00016D2B BF11000000                      mov rdi, (1 + 8 + 8)
 31536 00016D30 E8DAF3FFFF                      call malloc
 31537 00016D35 C60021                          mov byte [rax], T_pair
 31538 00016D38 488B5D20                        mov rbx, PARAM(0)
 31539 00016D3C 48895801                        mov SOB_PAIR_CAR(rax), rbx
 31540 00016D40 488B5D28                        mov rbx, PARAM(1)
 31541 00016D44 48895809                        mov SOB_PAIR_CDR(rax), rbx
 31542 00016D48 C9                              leave
 31543 00016D49 C22000                          ret AND_KILL_FRAME(2)
 31544                                  
 31545                                  L_code_ptr_display_sexpr:
 31546 00016D4C C8000000                        enter 0, 0
 31547 00016D50 48837D1801                      cmp COUNT, 1
 31548 00016D55 0F858C0E0000                    jne L_error_arg_count_1
 31549 00016D5B 488B7D20                        mov rdi, PARAM(0)
 31550 00016D5F E8E9F4FFFF                      call print_sexpr
 31551 00016D64 48B8-                           mov rax, sob_void
 31551 00016D66 [0000000000000000] 
 31552 00016D6E C9                              leave
 31553 00016D6F C21800                          ret AND_KILL_FRAME(1)
 31554                                  
 31555                                  L_code_ptr_write_char:
 31556 00016D72 C8000000                        enter 0, 0
 31557 00016D76 48837D1801                      cmp COUNT, 1
 31558 00016D7B 0F85660E0000                    jne L_error_arg_count_1
 31559 00016D81 488B4520                        mov rax, PARAM(0)
 31560                                          assert_char(rax)
 31560 00016D85 803802              <1>  cmp byte [%1], %2
 31560 00016D88 0F852D0F0000        <1>  jne L_error_incorrect_type
 31561 00016D8E 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 31562 00016D91 4825FF000000                    and rax, 255
 31563 00016D97 48BF-                           mov rdi, fmt_char
 31563 00016D99 [291C000000000000] 
 31564 00016DA1 4889C6                          mov rsi, rax
 31565 00016DA4 B800000000                      mov rax, 0
 31566                                          ENTER
 31566 00016DA9 C8000000            <1>  enter 0, 0
 31566 00016DAD 4883E4F0            <1>  and rsp, ~15
 31567 00016DB1 E8(00000000)                    call printf
 31568                                          LEAVE
 31568 00016DB6 C9                  <1>  leave
 31569 00016DB7 48B8-                           mov rax, sob_void
 31569 00016DB9 [0000000000000000] 
 31570 00016DC1 C9                              leave
 31571 00016DC2 C21800                          ret AND_KILL_FRAME(1)
 31572                                  
 31573                                  L_code_ptr_car:
 31574 00016DC5 C8000000                        enter 0, 0
 31575 00016DC9 48837D1801                      cmp COUNT, 1
 31576 00016DCE 0F85130E0000                    jne L_error_arg_count_1
 31577 00016DD4 488B4520                        mov rax, PARAM(0)
 31578                                          assert_pair(rax)
 31578 00016DD8 803821              <1>  cmp byte [%1], %2
 31578 00016DDB 0F85DA0E0000        <1>  jne L_error_incorrect_type
 31579 00016DE1 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 31580 00016DE5 C9                              leave
 31581 00016DE6 C21800                          ret AND_KILL_FRAME(1)
 31582                                          
 31583                                  L_code_ptr_cdr:
 31584 00016DE9 C8000000                        enter 0, 0
 31585 00016DED 48837D1801                      cmp COUNT, 1
 31586 00016DF2 0F85EF0D0000                    jne L_error_arg_count_1
 31587 00016DF8 488B4520                        mov rax, PARAM(0)
 31588                                          assert_pair(rax)
 31588 00016DFC 803821              <1>  cmp byte [%1], %2
 31588 00016DFF 0F85B60E0000        <1>  jne L_error_incorrect_type
 31589 00016E05 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 31590 00016E09 C9                              leave
 31591 00016E0A C21800                          ret AND_KILL_FRAME(1)
 31592                                          
 31593                                  L_code_ptr_string_length:
 31594 00016E0D C8000000                        enter 0, 0
 31595 00016E11 48837D1801                      cmp COUNT, 1
 31596 00016E16 0F85CB0D0000                    jne L_error_arg_count_1
 31597 00016E1C 488B4520                        mov rax, PARAM(0)
 31598                                          assert_string(rax)
 31598 00016E20 803803              <1>  cmp byte [%1], %2
 31598 00016E23 0F85920E0000        <1>  jne L_error_incorrect_type
 31599 00016E29 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 31600 00016E2D E8350D0000                      call make_integer
 31601 00016E32 C9                              leave
 31602 00016E33 C21800                          ret AND_KILL_FRAME(1)
 31603                                  
 31604                                  L_code_ptr_vector_length:
 31605 00016E36 C8000000                        enter 0, 0
 31606 00016E3A 48837D1801                      cmp COUNT, 1
 31607 00016E3F 0F85A20D0000                    jne L_error_arg_count_1
 31608 00016E45 488B4520                        mov rax, PARAM(0)
 31609                                          assert_vector(rax)
 31609 00016E49 803822              <1>  cmp byte [%1], %2
 31609 00016E4C 0F85690E0000        <1>  jne L_error_incorrect_type
 31610 00016E52 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 31611 00016E56 E80C0D0000                      call make_integer
 31612 00016E5B C9                              leave
 31613 00016E5C C21800                          ret AND_KILL_FRAME(1)
 31614                                  
 31615                                  L_code_ptr_real_to_integer:
 31616 00016E5F C8000000                        enter 0, 0
 31617 00016E63 48837D1801                      cmp COUNT, 1
 31618 00016E68 0F85790D0000                    jne L_error_arg_count_1
 31619 00016E6E 488B5D20                        mov rbx, PARAM(0)
 31620                                          assert_real(rbx)
 31620 00016E72 803B13              <1>  cmp byte [%1], %2
 31620 00016E75 0F85400E0000        <1>  jne L_error_incorrect_type
 31621 00016E7B F20F104301                      movsd xmm0, qword [rbx + 1]
 31622 00016E80 F2480F2CF8                      cvttsd2si rdi, xmm0
 31623 00016E85 E8DD0C0000                      call make_integer
 31624 00016E8A C9                              leave
 31625 00016E8B C21800                          ret AND_KILL_FRAME(1)
 31626                                  
 31627                                  L_code_ptr_exit:
 31628 00016E8E C8000000                        enter 0, 0
 31629 00016E92 48837D1800                      cmp COUNT, 0
 31630 00016E97 0F85150D0000                    jne L_error_arg_count_0
 31631 00016E9D B800000000                      mov rax, 0
 31632 00016EA2 E8(00000000)                    call exit
 31633                                  
 31634                                  L_code_ptr_integer_to_real:
 31635 00016EA7 C8000000                        enter 0, 0
 31636 00016EAB 48837D1801                      cmp COUNT, 1
 31637 00016EB0 0F85310D0000                    jne L_error_arg_count_1
 31638 00016EB6 488B4520                        mov rax, PARAM(0)
 31639                                          assert_integer(rax)
 31639 00016EBA 803811              <1>  cmp byte [%1], %2
 31639 00016EBD 0F85F80D0000        <1>  jne L_error_incorrect_type
 31640 00016EC3 FF7001                          push qword [rax + 1]
 31641 00016EC6 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 31642 00016ECC E87E0C0000                      call make_real
 31643 00016ED1 C9                              leave
 31644 00016ED2 C21800                          ret AND_KILL_FRAME(1)
 31645                                  
 31646                                  L_code_ptr_fraction_to_real:
 31647 00016ED5 C8000000                        enter 0, 0
 31648 00016ED9 48837D1801                      cmp COUNT, 1
 31649 00016EDE 0F85030D0000                    jne L_error_arg_count_1
 31650 00016EE4 488B4520                        mov rax, PARAM(0)
 31651                                          assert_fraction(rax)
 31651 00016EE8 803812              <1>  cmp byte [%1], %2
 31651 00016EEB 0F85CA0D0000        <1>  jne L_error_incorrect_type
 31652 00016EF1 FF7001                          push qword [rax + 1]
 31653 00016EF4 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 31654 00016EFA FF7009                          push qword [rax + 1 + 8]
 31655 00016EFD F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 31656 00016F03 F20F5EC1                        divsd xmm0, xmm1
 31657 00016F07 E8430C0000                      call make_real
 31658 00016F0C C9                              leave
 31659 00016F0D C21800                          ret AND_KILL_FRAME(1)
 31660                                  
 31661                                  L_code_ptr_char_to_integer:
 31662 00016F10 C8000000                        enter 0, 0
 31663 00016F14 48837D1801                      cmp COUNT, 1
 31664 00016F19 0F85C80C0000                    jne L_error_arg_count_1
 31665 00016F1F 488B4520                        mov rax, PARAM(0)
 31666                                          assert_char(rax)
 31666 00016F23 803802              <1>  cmp byte [%1], %2
 31666 00016F26 0F858F0D0000        <1>  jne L_error_incorrect_type
 31667 00016F2C 8A4001                          mov al, byte [rax + 1]
 31668 00016F2F 4825FF000000                    and rax, 255
 31669 00016F35 4889C7                          mov rdi, rax
 31670 00016F38 E82A0C0000                      call make_integer
 31671 00016F3D C9                              leave
 31672 00016F3E C21800                          ret AND_KILL_FRAME(1)
 31673                                  
 31674                                  L_code_ptr_integer_to_fraction:
 31675 00016F41 C8000000                        enter 0, 0
 31676 00016F45 48837D1801                      cmp COUNT, 1
 31677 00016F4A 0F85970C0000                    jne L_error_arg_count_1
 31678 00016F50 4C8B4520                        mov r8, PARAM(0)
 31679                                          assert_integer(r8)
 31679 00016F54 41803811            <1>  cmp byte [%1], %2
 31679 00016F58 0F855D0D0000        <1>  jne L_error_incorrect_type
 31680 00016F5E BF11000000                      mov rdi, (1 + 8 + 8)
 31681 00016F63 E8A7F1FFFF                      call malloc
 31682 00016F68 498B5801                        mov rbx, qword [r8 + 1]
 31683 00016F6C C60012                          mov byte [rax], T_fraction
 31684 00016F6F 48895801                        mov qword [rax + 1], rbx
 31685 00016F73 48C7400901000000                mov qword [rax + 1 + 8], 1
 31686 00016F7B C9                              leave
 31687 00016F7C C21800                          ret AND_KILL_FRAME(1)
 31688                                  
 31689                                  L_code_ptr_integer_to_char:
 31690 00016F7F C8000000                        enter 0, 0
 31691 00016F83 48837D1801                      cmp COUNT, 1
 31692 00016F88 0F85590C0000                    jne L_error_arg_count_1
 31693 00016F8E 488B4520                        mov rax, PARAM(0)
 31694                                          assert_integer(rax)
 31694 00016F92 803811              <1>  cmp byte [%1], %2
 31694 00016F95 0F85200D0000        <1>  jne L_error_incorrect_type
 31695 00016F9B 488B5801                        mov rbx, qword [rax + 1]
 31696 00016F9F 4883FB00                        cmp rbx, 0
 31697 00016FA3 0F8ED80B0000                    jle L_error_integer_range
 31698 00016FA9 4881FB00010000                  cmp rbx, 256
 31699 00016FB0 0F8DCB0B0000                    jge L_error_integer_range
 31700 00016FB6 BF02000000                      mov rdi, (1 + 1)
 31701 00016FBB E84FF1FFFF                      call malloc
 31702 00016FC0 C60002                          mov byte [rax], T_char
 31703 00016FC3 885801                          mov byte [rax + 1], bl
 31704 00016FC6 C9                              leave
 31705 00016FC7 C21800                          ret AND_KILL_FRAME(1)
 31706                                  
 31707                                  L_code_ptr_trng:
 31708 00016FCA C8000000                        enter 0, 0
 31709 00016FCE 48837D1800                      cmp COUNT, 0
 31710 00016FD3 0F85D90B0000                    jne L_error_arg_count_0
 31711 00016FD9 480FC7F7                        rdrand rdi
 31712 00016FDD 48D1EF                          shr rdi, 1
 31713 00016FE0 E8820B0000                      call make_integer
 31714 00016FE5 C9                              leave
 31715 00016FE6 C21000                          ret AND_KILL_FRAME(0)
 31716                                  
 31717                                  L_code_ptr_is_zero:
 31718 00016FE9 C8000000                        enter 0, 0
 31719 00016FED 48837D1801                      cmp COUNT, 1
 31720 00016FF2 0F85EF0B0000                    jne L_error_arg_count_1
 31721 00016FF8 488B4520                        mov rax, PARAM(0)
 31722 00016FFC 803811                          cmp byte [rax], T_integer
 31723 00016FFF 740F                            je .L_integer
 31724 00017001 803812                          cmp byte [rax], T_fraction
 31725 00017004 7413                            je .L_fraction
 31726 00017006 803813                          cmp byte [rax], T_real
 31727 00017009 7417                            je .L_real
 31728 0001700B E9AB0C0000                      jmp L_error_incorrect_type
 31729                                  .L_integer:
 31730 00017010 4883780100                      cmp qword [rax + 1], 0
 31731 00017015 7429                            je .L_zero
 31732 00017017 EB1B                            jmp .L_not_zero
 31733                                  .L_fraction:
 31734 00017019 4883780100                      cmp qword [rax + 1], 0
 31735 0001701E 7420                            je .L_zero
 31736 00017020 EB12                            jmp .L_not_zero
 31737                                  .L_real:
 31738 00017022 660FEFC0                        pxor xmm0, xmm0
 31739 00017026 FF7001                          push qword [rax + 1]
 31740 00017029 F20F100C24                      movsd xmm1, qword [rsp]
 31741 0001702E 660F2EC1                        ucomisd xmm0, xmm1
 31742 00017032 740C                            je .L_zero
 31743                                  .L_not_zero:
 31744 00017034 48B8-                           mov rax, sob_boolean_false
 31744 00017036 [0200000000000000] 
 31745 0001703E EB0A                            jmp .L_end
 31746                                  .L_zero:
 31747 00017040 48B8-                           mov rax, sob_boolean_true
 31747 00017042 [0300000000000000] 
 31748                                  .L_end:
 31749 0001704A C9                              leave
 31750 0001704B C21800                          ret AND_KILL_FRAME(1)
 31751                                  
 31752                                  L_code_ptr_is_integer:
 31753 0001704E C8000000                        enter 0, 0
 31754 00017052 48837D1801                      cmp COUNT, 1
 31755 00017057 0F858A0B0000                    jne L_error_arg_count_1
 31756 0001705D 488B4520                        mov rax, PARAM(0)
 31757 00017061 803811                          cmp byte [rax], T_integer
 31758 00017064 750C                            jne .L_false
 31759 00017066 48B8-                           mov rax, sob_boolean_true
 31759 00017068 [0300000000000000] 
 31760 00017070 EB0A                            jmp .L_exit
 31761                                  .L_false:
 31762 00017072 48B8-                           mov rax, sob_boolean_false
 31762 00017074 [0200000000000000] 
 31763                                  .L_exit:
 31764 0001707C C9                              leave
 31765 0001707D C21800                          ret AND_KILL_FRAME(1)
 31766                                  
 31767                                  L_code_ptr_raw_bin_add_rr:
 31768 00017080 C8000000                        enter 0, 0
 31769 00017084 48837D1802                      cmp COUNT, 2
 31770 00017089 0F858D0B0000                    jne L_error_arg_count_2
 31771 0001708F 488B5D20                        mov rbx, PARAM(0)
 31772                                          assert_real(rbx)
 31772 00017093 803B13              <1>  cmp byte [%1], %2
 31772 00017096 0F851F0C0000        <1>  jne L_error_incorrect_type
 31773 0001709C 488B4D28                        mov rcx, PARAM(1)
 31774                                          assert_real(rcx)
 31774 000170A0 803913              <1>  cmp byte [%1], %2
 31774 000170A3 0F85120C0000        <1>  jne L_error_incorrect_type
 31775 000170A9 F20F104301                      movsd xmm0, qword [rbx + 1]
 31776 000170AE F20F104901                      movsd xmm1, qword [rcx + 1]
 31777 000170B3 F20F58C1                        addsd xmm0, xmm1
 31778 000170B7 E8930A0000                      call make_real
 31779 000170BC C9                              leave
 31780 000170BD C22000                          ret AND_KILL_FRAME(2)
 31781                                  
 31782                                  L_code_ptr_raw_bin_sub_rr:
 31783 000170C0 C8000000                        enter 0, 0
 31784 000170C4 48837D1802                      cmp COUNT, 2
 31785 000170C9 0F854D0B0000                    jne L_error_arg_count_2
 31786 000170CF 488B5D20                        mov rbx, PARAM(0)
 31787                                          assert_real(rbx)
 31787 000170D3 803B13              <1>  cmp byte [%1], %2
 31787 000170D6 0F85DF0B0000        <1>  jne L_error_incorrect_type
 31788 000170DC 488B4D28                        mov rcx, PARAM(1)
 31789                                          assert_real(rcx)
 31789 000170E0 803913              <1>  cmp byte [%1], %2
 31789 000170E3 0F85D20B0000        <1>  jne L_error_incorrect_type
 31790 000170E9 F20F104301                      movsd xmm0, qword [rbx + 1]
 31791 000170EE F20F104901                      movsd xmm1, qword [rcx + 1]
 31792 000170F3 F20F5CC1                        subsd xmm0, xmm1
 31793 000170F7 E8530A0000                      call make_real
 31794 000170FC C9                              leave
 31795 000170FD C22000                          ret AND_KILL_FRAME(2)
 31796                                  
 31797                                  L_code_ptr_raw_bin_mul_rr:
 31798 00017100 C8000000                        enter 0, 0
 31799 00017104 48837D1802                      cmp COUNT, 2
 31800 00017109 0F850D0B0000                    jne L_error_arg_count_2
 31801 0001710F 488B5D20                        mov rbx, PARAM(0)
 31802                                          assert_real(rbx)
 31802 00017113 803B13              <1>  cmp byte [%1], %2
 31802 00017116 0F859F0B0000        <1>  jne L_error_incorrect_type
 31803 0001711C 488B4D28                        mov rcx, PARAM(1)
 31804                                          assert_real(rcx)
 31804 00017120 803913              <1>  cmp byte [%1], %2
 31804 00017123 0F85920B0000        <1>  jne L_error_incorrect_type
 31805 00017129 F20F104301                      movsd xmm0, qword [rbx + 1]
 31806 0001712E F20F104901                      movsd xmm1, qword [rcx + 1]
 31807 00017133 F20F59C1                        mulsd xmm0, xmm1
 31808 00017137 E8130A0000                      call make_real
 31809 0001713C C9                              leave
 31810 0001713D C22000                          ret AND_KILL_FRAME(2)
 31811                                  
 31812                                  L_code_ptr_raw_bin_div_rr:
 31813 00017140 C8000000                        enter 0, 0
 31814 00017144 48837D1802                      cmp COUNT, 2
 31815 00017149 0F85CD0A0000                    jne L_error_arg_count_2
 31816 0001714F 488B5D20                        mov rbx, PARAM(0)
 31817                                          assert_real(rbx)
 31817 00017153 803B13              <1>  cmp byte [%1], %2
 31817 00017156 0F855F0B0000        <1>  jne L_error_incorrect_type
 31818 0001715C 488B4D28                        mov rcx, PARAM(1)
 31819                                          assert_real(rcx)
 31819 00017160 803913              <1>  cmp byte [%1], %2
 31819 00017163 0F85520B0000        <1>  jne L_error_incorrect_type
 31820 00017169 F20F104301                      movsd xmm0, qword [rbx + 1]
 31821 0001716E F20F104901                      movsd xmm1, qword [rcx + 1]
 31822 00017173 660FEFD2                        pxor xmm2, xmm2
 31823 00017177 660F2ECA                        ucomisd xmm1, xmm2
 31824 0001717B 0F846B0B0000                    je L_error_division_by_zero
 31825 00017181 F20F5EC1                        divsd xmm0, xmm1
 31826 00017185 E8C5090000                      call make_real
 31827 0001718A C9                              leave
 31828 0001718B C22000                          ret AND_KILL_FRAME(2)
 31829                                  
 31830                                  L_code_ptr_raw_bin_add_zz:
 31831 0001718E C8000000                	enter 0, 0
 31832 00017192 48837D1802              	cmp COUNT, 2
 31833 00017197 0F857F0A0000            	jne L_error_arg_count_2
 31834 0001719D 4C8B4520                	mov r8, PARAM(0)
 31835                                  	assert_integer(r8)
 31835 000171A1 41803811            <1>  cmp byte [%1], %2
 31835 000171A5 0F85100B0000        <1>  jne L_error_incorrect_type
 31836 000171AB 4C8B4D28                	mov r9, PARAM(1)
 31837                                  	assert_integer(r9)
 31837 000171AF 41803911            <1>  cmp byte [%1], %2
 31837 000171B3 0F85020B0000        <1>  jne L_error_incorrect_type
 31838 000171B9 498B7801                	mov rdi, qword [r8 + 1]
 31839 000171BD 49037901                	add rdi, qword [r9 + 1]
 31840 000171C1 E8A1090000              	call make_integer
 31841 000171C6 C9                      	leave
 31842 000171C7 C22000                  	ret AND_KILL_FRAME(2)
 31843                                  	
 31844                                  L_code_ptr_raw_bin_add_qq:
 31845 000171CA C8000000                        enter 0, 0
 31846 000171CE 48837D1802                      cmp COUNT, 2
 31847 000171D3 0F85430A0000                    jne L_error_arg_count_2
 31848 000171D9 4C8B4520                        mov r8, PARAM(0)
 31849                                          assert_fraction(r8)
 31849 000171DD 41803812            <1>  cmp byte [%1], %2
 31849 000171E1 0F85D40A0000        <1>  jne L_error_incorrect_type
 31850 000171E7 4C8B4D28                        mov r9, PARAM(1)
 31851                                          assert_fraction(r9)
 31851 000171EB 41803912            <1>  cmp byte [%1], %2
 31851 000171EF 0F85C60A0000        <1>  jne L_error_incorrect_type
 31852 000171F5 498B4001                        mov rax, qword [r8 + 1] ; num1
 31853 000171F9 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 31854 000171FD 4899                            cqo
 31855 000171FF 48F7EB                          imul rbx
 31856 00017202 4889C6                          mov rsi, rax
 31857 00017205 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 31858 00017209 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 31859 0001720D 4899                            cqo
 31860 0001720F 48F7EB                          imul rbx
 31861 00017212 4801C6                          add rsi, rax
 31862 00017215 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 31863 00017219 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 31864 0001721D 4899                            cqo
 31865 0001721F 48F7EB                          imul rbx
 31866 00017222 4889C7                          mov rdi, rax
 31867 00017225 E8DE010000                      call normalize_fraction
 31868 0001722A C9                              leave
 31869 0001722B C22000                          ret AND_KILL_FRAME(2)
 31870                                  
 31871                                  L_code_ptr_raw_bin_sub_zz:
 31872 0001722E C8000000                	enter 0, 0
 31873 00017232 48837D1802              	cmp COUNT, 2
 31874 00017237 0F85DF090000            	jne L_error_arg_count_2
 31875 0001723D 4C8B4520                	mov r8, PARAM(0)
 31876                                  	assert_integer(r8)
 31876 00017241 41803811            <1>  cmp byte [%1], %2
 31876 00017245 0F85700A0000        <1>  jne L_error_incorrect_type
 31877 0001724B 4C8B4D28                	mov r9, PARAM(1)
 31878                                  	assert_integer(r9)
 31878 0001724F 41803911            <1>  cmp byte [%1], %2
 31878 00017253 0F85620A0000        <1>  jne L_error_incorrect_type
 31879 00017259 498B7801                	mov rdi, qword [r8 + 1]
 31880 0001725D 492B7901                	sub rdi, qword [r9 + 1]
 31881 00017261 E801090000              	call make_integer
 31882 00017266 C9                      	leave
 31883 00017267 C22000                  	ret AND_KILL_FRAME(2)
 31884                                  
 31885                                  L_code_ptr_raw_bin_sub_qq:
 31886 0001726A C8000000                        enter 0, 0
 31887 0001726E 48837D1802                      cmp COUNT, 2
 31888 00017273 0F85A3090000                    jne L_error_arg_count_2
 31889 00017279 4C8B4520                        mov r8, PARAM(0)
 31890                                          assert_fraction(r8)
 31890 0001727D 41803812            <1>  cmp byte [%1], %2
 31890 00017281 0F85340A0000        <1>  jne L_error_incorrect_type
 31891 00017287 4C8B4D28                        mov r9, PARAM(1)
 31892                                          assert_fraction(r9)
 31892 0001728B 41803912            <1>  cmp byte [%1], %2
 31892 0001728F 0F85260A0000        <1>  jne L_error_incorrect_type
 31893 00017295 498B4001                        mov rax, qword [r8 + 1] ; num1
 31894 00017299 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 31895 0001729D 4899                            cqo
 31896 0001729F 48F7EB                          imul rbx
 31897 000172A2 4889C6                          mov rsi, rax
 31898 000172A5 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 31899 000172A9 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 31900 000172AD 4899                            cqo
 31901 000172AF 48F7EB                          imul rbx
 31902 000172B2 4829C6                          sub rsi, rax
 31903 000172B5 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 31904 000172B9 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 31905 000172BD 4899                            cqo
 31906 000172BF 48F7EB                          imul rbx
 31907 000172C2 4889C7                          mov rdi, rax
 31908 000172C5 E83E010000                      call normalize_fraction
 31909 000172CA C9                              leave
 31910 000172CB C22000                          ret AND_KILL_FRAME(2)
 31911                                  
 31912                                  L_code_ptr_raw_bin_mul_zz:
 31913 000172CE C8000000                	enter 0, 0
 31914 000172D2 48837D1802              	cmp COUNT, 2
 31915 000172D7 0F853F090000            	jne L_error_arg_count_2
 31916 000172DD 4C8B4520                	mov r8, PARAM(0)
 31917                                  	assert_integer(r8)
 31917 000172E1 41803811            <1>  cmp byte [%1], %2
 31917 000172E5 0F85D0090000        <1>  jne L_error_incorrect_type
 31918 000172EB 4C8B4D28                	mov r9, PARAM(1)
 31919                                  	assert_integer(r9)
 31919 000172EF 41803911            <1>  cmp byte [%1], %2
 31919 000172F3 0F85C2090000        <1>  jne L_error_incorrect_type
 31920 000172F9 4899                    	cqo
 31921 000172FB 498B4001                	mov rax, qword [r8 + 1]
 31922 000172FF 49F76101                	mul qword [r9 + 1]
 31923 00017303 4889C7                  	mov rdi, rax
 31924 00017306 E85C080000              	call make_integer
 31925 0001730B C9                      	leave
 31926 0001730C C22000                  	ret AND_KILL_FRAME(2)
 31927                                  
 31928                                  L_code_ptr_raw_bin_mul_qq:
 31929 0001730F C8000000                        enter 0, 0
 31930 00017313 48837D1802                      cmp COUNT, 2
 31931 00017318 0F85FE080000                    jne L_error_arg_count_2
 31932 0001731E 4C8B4520                        mov r8, PARAM(0)
 31933                                          assert_fraction(r8)
 31933 00017322 41803812            <1>  cmp byte [%1], %2
 31933 00017326 0F858F090000        <1>  jne L_error_incorrect_type
 31934 0001732C 4C8B4D28                        mov r9, PARAM(1)
 31935                                          assert_fraction(r9)
 31935 00017330 41803912            <1>  cmp byte [%1], %2
 31935 00017334 0F8581090000        <1>  jne L_error_incorrect_type
 31936 0001733A 498B4001                        mov rax, qword [r8 + 1] ; num1
 31937 0001733E 498B5901                        mov rbx, qword [r9 + 1] ; num2
 31938 00017342 4899                            cqo
 31939 00017344 48F7EB                          imul rbx
 31940 00017347 4889C6                          mov rsi, rax
 31941 0001734A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 31942 0001734E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 31943 00017352 4899                            cqo
 31944 00017354 48F7EB                          imul rbx
 31945 00017357 4889C7                          mov rdi, rax
 31946 0001735A E8A9000000                      call normalize_fraction
 31947 0001735F C9                              leave
 31948 00017360 C22000                          ret AND_KILL_FRAME(2)
 31949                                          
 31950                                  L_code_ptr_raw_bin_div_zz:
 31951 00017363 C8000000                	enter 0, 0
 31952 00017367 48837D1802              	cmp COUNT, 2
 31953 0001736C 0F85AA080000            	jne L_error_arg_count_2
 31954 00017372 4C8B4520                	mov r8, PARAM(0)
 31955                                  	assert_integer(r8)
 31955 00017376 41803811            <1>  cmp byte [%1], %2
 31955 0001737A 0F853B090000        <1>  jne L_error_incorrect_type
 31956 00017380 4C8B4D28                	mov r9, PARAM(1)
 31957                                  	assert_integer(r9)
 31957 00017384 41803911            <1>  cmp byte [%1], %2
 31957 00017388 0F852D090000        <1>  jne L_error_incorrect_type
 31958 0001738E 498B7901                	mov rdi, qword [r9 + 1]
 31959 00017392 4883FF00                	cmp rdi, 0
 31960 00017396 0F8450090000            	je L_error_division_by_zero
 31961 0001739C 498B7001                	mov rsi, qword [r8 + 1]
 31962 000173A0 E863000000              	call normalize_fraction
 31963 000173A5 C9                      	leave
 31964 000173A6 C22000                  	ret AND_KILL_FRAME(2)
 31965                                  
 31966                                  L_code_ptr_raw_bin_div_qq:
 31967 000173A9 C8000000                        enter 0, 0
 31968 000173AD 48837D1802                      cmp COUNT, 2
 31969 000173B2 0F8564080000                    jne L_error_arg_count_2
 31970 000173B8 4C8B4520                        mov r8, PARAM(0)
 31971                                          assert_fraction(r8)
 31971 000173BC 41803812            <1>  cmp byte [%1], %2
 31971 000173C0 0F85F5080000        <1>  jne L_error_incorrect_type
 31972 000173C6 4C8B4D28                        mov r9, PARAM(1)
 31973                                          assert_fraction(r9)
 31973 000173CA 41803912            <1>  cmp byte [%1], %2
 31973 000173CE 0F85E7080000        <1>  jne L_error_incorrect_type
 31974 000173D4 4983790100                      cmp qword [r9 + 1], 0
 31975 000173D9 0F840D090000                    je L_error_division_by_zero
 31976 000173DF 498B4001                        mov rax, qword [r8 + 1] ; num1
 31977 000173E3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 31978 000173E7 4899                            cqo
 31979 000173E9 48F7EB                          imul rbx
 31980 000173EC 4889C6                          mov rsi, rax
 31981 000173EF 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 31982 000173F3 498B5901                        mov rbx, qword [r9 + 1] ; num2
 31983 000173F7 4899                            cqo
 31984 000173F9 48F7EB                          imul rbx
 31985 000173FC 4889C7                          mov rdi, rax
 31986 000173FF E804000000                      call normalize_fraction
 31987 00017404 C9                              leave
 31988 00017405 C22000                          ret AND_KILL_FRAME(2)
 31989                                          
 31990                                  normalize_fraction:
 31991 00017408 56                              push rsi
 31992 00017409 57                              push rdi
 31993 0001740A E859000000                      call gcd
 31994 0001740F 4889C3                          mov rbx, rax
 31995 00017412 58                              pop rax
 31996 00017413 4899                            cqo
 31997 00017415 48F7FB                          idiv rbx
 31998 00017418 4989C0                          mov r8, rax
 31999 0001741B 58                              pop rax
 32000 0001741C 4899                            cqo
 32001 0001741E 48F7FB                          idiv rbx
 32002 00017421 4989C1                          mov r9, rax
 32003 00017424 4983F900                        cmp r9, 0
 32004 00017428 741C                            je .L_zero
 32005 0001742A 4983F801                        cmp r8, 1
 32006 0001742E 7421                            je .L_int
 32007 00017430 BF11000000                      mov rdi, (1 + 8 + 8)
 32008 00017435 E8D5ECFFFF                      call malloc
 32009 0001743A C60012                          mov byte [rax], T_fraction
 32010 0001743D 4C894801                        mov qword [rax + 1], r9
 32011 00017441 4C894009                        mov qword [rax + 1 + 8], r8
 32012 00017445 C3                              ret
 32013                                  .L_zero:
 32014 00017446 BF00000000                      mov rdi, 0
 32015 0001744B E817070000                      call make_integer
 32016 00017450 C3                              ret
 32017                                  .L_int:
 32018 00017451 4C89CF                          mov rdi, r9
 32019 00017454 E80E070000                      call make_integer
 32020 00017459 C3                              ret
 32021                                  
 32022                                  iabs:
 32023 0001745A 4889F8                          mov rax, rdi
 32024 0001745D 4883F800                        cmp rax, 0
 32025 00017461 7C01                            jl .Lneg
 32026 00017463 C3                              ret
 32027                                  .Lneg:
 32028 00017464 48F7D8                          neg rax
 32029 00017467 C3                              ret
 32030                                  
 32031                                  gcd:
 32032 00017468 E8EDFFFFFF                      call iabs
 32033 0001746D 4889C3                          mov rbx, rax
 32034 00017470 4889F7                          mov rdi, rsi
 32035 00017473 E8E2FFFFFF                      call iabs
 32036 00017478 4883F800                        cmp rax, 0
 32037 0001747C 7502                            jne .L0
 32038 0001747E 4893                            xchg rax, rbx
 32039                                  .L0:
 32040 00017480 4883FB00                        cmp rbx, 0
 32041 00017484 740C                            je .L1
 32042 00017486 4899                            cqo
 32043 00017488 48F7F3                          div rbx
 32044 0001748B 4889D0                          mov rax, rdx
 32045 0001748E 4893                            xchg rax, rbx
 32046 00017490 EBEE                            jmp .L0
 32047                                  .L1:
 32048 00017492 C3                              ret
 32049                                  
 32050                                  L_code_ptr_error:
 32051 00017493 C8000000                        enter 0, 0
 32052 00017497 48837D1802                      cmp COUNT, 2
 32053 0001749C 0F857A070000                    jne L_error_arg_count_2
 32054 000174A2 488B7520                        mov rsi, PARAM(0)
 32055                                          assert_interned_symbol(rsi)
 32055 000174A6 803E41              <1>  cmp byte [%1], %2
 32055 000174A9 0F850C080000        <1>  jne L_error_incorrect_type
 32056 000174AF 488B7528                        mov rsi, PARAM(1)
 32057                                          assert_string(rsi)
 32057 000174B3 803E03              <1>  cmp byte [%1], %2
 32057 000174B6 0F85FF070000        <1>  jne L_error_incorrect_type
 32058 000174BC 48BF-                           mov rdi, fmt_scheme_error_part_1
 32058 000174BE [611D000000000000] 
 32059 000174C6 B800000000                      mov rax, 0
 32060                                          ENTER
 32060 000174CB C8000000            <1>  enter 0, 0
 32060 000174CF 4883E4F0            <1>  and rsp, ~15
 32061 000174D3 E8(00000000)                    call printf
 32062                                          LEAVE
 32062 000174D8 C9                  <1>  leave
 32063 000174D9 488B7D20                        mov rdi, PARAM(0)
 32064 000174DD E86BEDFFFF                      call print_sexpr
 32065 000174E2 48BF-                           mov rdi, fmt_scheme_error_part_2
 32065 000174E4 [751D000000000000] 
 32066 000174EC B800000000                      mov rax, 0
 32067                                          ENTER
 32067 000174F1 C8000000            <1>  enter 0, 0
 32067 000174F5 4883E4F0            <1>  and rsp, ~15
 32068 000174F9 E8(00000000)                    call printf
 32069                                          LEAVE
 32069 000174FE C9                  <1>  leave
 32070 000174FF 488B4528                        mov rax, PARAM(1)       ; sob_string
 32071 00017503 BE01000000                      mov rsi, 1              ; size = 1 byte
 32072 00017508 488B5001                        mov rdx, qword [rax + 1] ; length
 32073 0001750C 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 32074 00017510 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 32075 00017518 E8(00000000)                    call fwrite
 32076 0001751D 48BF-                           mov rdi, fmt_scheme_error_part_3
 32076 0001751F [B71D000000000000] 
 32077 00017527 B800000000                      mov rax, 0
 32078                                          ENTER
 32078 0001752C C8000000            <1>  enter 0, 0
 32078 00017530 4883E4F0            <1>  and rsp, ~15
 32079 00017534 E8(00000000)                    call printf
 32080                                          LEAVE
 32080 00017539 C9                  <1>  leave
 32081 0001753A 48C7C0F7FFFFFF                  mov rax, -9
 32082 00017541 E8(00000000)                    call exit
 32083                                  
 32084                                  L_code_ptr_raw_less_than_rr:
 32085 00017546 C8000000                        enter 0, 0
 32086 0001754A 48837D1802                      cmp COUNT, 2
 32087 0001754F 0F85C7060000                    jne L_error_arg_count_2
 32088 00017555 488B7520                        mov rsi, PARAM(0)
 32089                                          assert_real(rsi)
 32089 00017559 803E13              <1>  cmp byte [%1], %2
 32089 0001755C 0F8559070000        <1>  jne L_error_incorrect_type
 32090 00017562 488B7D28                        mov rdi, PARAM(1)
 32091                                          assert_real(rdi)
 32091 00017566 803F13              <1>  cmp byte [%1], %2
 32091 00017569 0F854C070000        <1>  jne L_error_incorrect_type
 32092 0001756F F20F104601                      movsd xmm0, qword [rsi + 1]
 32093 00017574 F20F104F01                      movsd xmm1, qword [rdi + 1]
 32094 00017579 660F2FC1                        comisd xmm0, xmm1
 32095 0001757D 730C                            jae .L_false
 32096 0001757F 48B8-                           mov rax, sob_boolean_true
 32096 00017581 [0300000000000000] 
 32097 00017589 EB0A                            jmp .L_exit
 32098                                  .L_false:
 32099 0001758B 48B8-                           mov rax, sob_boolean_false
 32099 0001758D [0200000000000000] 
 32100                                  .L_exit:
 32101 00017595 C9                              leave
 32102 00017596 C22000                          ret AND_KILL_FRAME(2)
 32103                                          
 32104                                  L_code_ptr_raw_less_than_zz:
 32105 00017599 C8000000                	enter 0, 0
 32106 0001759D 48837D1802              	cmp COUNT, 2
 32107 000175A2 0F8574060000            	jne L_error_arg_count_2
 32108 000175A8 4C8B4520                	mov r8, PARAM(0)
 32109                                  	assert_integer(r8)
 32109 000175AC 41803811            <1>  cmp byte [%1], %2
 32109 000175B0 0F8505070000        <1>  jne L_error_incorrect_type
 32110 000175B6 4C8B4D28                	mov r9, PARAM(1)
 32111                                  	assert_integer(r9)
 32111 000175BA 41803911            <1>  cmp byte [%1], %2
 32111 000175BE 0F85F7060000        <1>  jne L_error_incorrect_type
 32112 000175C4 498B7801                	mov rdi, qword [r8 + 1]
 32113 000175C8 493B7901                	cmp rdi, qword [r9 + 1]
 32114 000175CC 7D0C                    	jge .L_false
 32115 000175CE 48B8-                   	mov rax, sob_boolean_true
 32115 000175D0 [0300000000000000] 
 32116 000175D8 EB0A                    	jmp .L_exit
 32117                                  .L_false:
 32118 000175DA 48B8-                   	mov rax, sob_boolean_false
 32118 000175DC [0200000000000000] 
 32119                                  .L_exit:
 32120 000175E4 C9                      	leave
 32121 000175E5 C22000                  	ret AND_KILL_FRAME(2)
 32122                                  
 32123                                  L_code_ptr_raw_less_than_qq:
 32124 000175E8 C8000000                        enter 0, 0
 32125 000175EC 48837D1802                      cmp COUNT, 2
 32126 000175F1 0F8525060000                    jne L_error_arg_count_2
 32127 000175F7 488B7520                        mov rsi, PARAM(0)
 32128                                          assert_fraction(rsi)
 32128 000175FB 803E12              <1>  cmp byte [%1], %2
 32128 000175FE 0F85B7060000        <1>  jne L_error_incorrect_type
 32129 00017604 488B7D28                        mov rdi, PARAM(1)
 32130                                          assert_fraction(rdi)
 32130 00017608 803F12              <1>  cmp byte [%1], %2
 32130 0001760B 0F85AA060000        <1>  jne L_error_incorrect_type
 32131 00017611 488B4601                        mov rax, qword [rsi + 1] ; num1
 32132 00017615 4899                            cqo
 32133 00017617 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 32134 0001761B 4889C1                          mov rcx, rax
 32135 0001761E 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 32136 00017622 4899                            cqo
 32137 00017624 48F76F01                        imul qword [rdi + 1]          ; num2
 32138 00017628 4829C1                          sub rcx, rax
 32139 0001762B 7D0C                            jge .L_false
 32140 0001762D 48B8-                           mov rax, sob_boolean_true
 32140 0001762F [0300000000000000] 
 32141 00017637 EB0A                            jmp .L_exit
 32142                                  .L_false:
 32143 00017639 48B8-                           mov rax, sob_boolean_false
 32143 0001763B [0200000000000000] 
 32144                                  .L_exit:
 32145 00017643 C9                              leave
 32146 00017644 C22000                          ret AND_KILL_FRAME(2)
 32147                                  
 32148                                  L_code_ptr_raw_equal_rr:
 32149 00017647 C8000000                        enter 0, 0
 32150 0001764B 48837D1802                      cmp COUNT, 2
 32151 00017650 0F85C6050000                    jne L_error_arg_count_2
 32152 00017656 488B7520                        mov rsi, PARAM(0)
 32153                                          assert_real(rsi)
 32153 0001765A 803E13              <1>  cmp byte [%1], %2
 32153 0001765D 0F8558060000        <1>  jne L_error_incorrect_type
 32154 00017663 488B7D28                        mov rdi, PARAM(1)
 32155                                          assert_real(rdi)
 32155 00017667 803F13              <1>  cmp byte [%1], %2
 32155 0001766A 0F854B060000        <1>  jne L_error_incorrect_type
 32156 00017670 F20F104601                      movsd xmm0, qword [rsi + 1]
 32157 00017675 F20F104F01                      movsd xmm1, qword [rdi + 1]
 32158 0001767A 660F2FC1                        comisd xmm0, xmm1
 32159 0001767E 750C                            jne .L_false
 32160 00017680 48B8-                           mov rax, sob_boolean_true
 32160 00017682 [0300000000000000] 
 32161 0001768A EB0A                            jmp .L_exit
 32162                                  .L_false:
 32163 0001768C 48B8-                           mov rax, sob_boolean_false
 32163 0001768E [0200000000000000] 
 32164                                  .L_exit:
 32165 00017696 C9                              leave
 32166 00017697 C22000                          ret AND_KILL_FRAME(2)
 32167                                          
 32168                                  L_code_ptr_raw_equal_zz:
 32169 0001769A C8000000                	enter 0, 0
 32170 0001769E 48837D1802              	cmp COUNT, 2
 32171 000176A3 0F8573050000            	jne L_error_arg_count_2
 32172 000176A9 4C8B4520                	mov r8, PARAM(0)
 32173                                  	assert_integer(r8)
 32173 000176AD 41803811            <1>  cmp byte [%1], %2
 32173 000176B1 0F8504060000        <1>  jne L_error_incorrect_type
 32174 000176B7 4C8B4D28                	mov r9, PARAM(1)
 32175                                  	assert_integer(r9)
 32175 000176BB 41803911            <1>  cmp byte [%1], %2
 32175 000176BF 0F85F6050000        <1>  jne L_error_incorrect_type
 32176 000176C5 498B7801                	mov rdi, qword [r8 + 1]
 32177 000176C9 493B7901                	cmp rdi, qword [r9 + 1]
 32178 000176CD 750C                    	jne .L_false
 32179 000176CF 48B8-                   	mov rax, sob_boolean_true
 32179 000176D1 [0300000000000000] 
 32180 000176D9 EB0A                    	jmp .L_exit
 32181                                  .L_false:
 32182 000176DB 48B8-                   	mov rax, sob_boolean_false
 32182 000176DD [0200000000000000] 
 32183                                  .L_exit:
 32184 000176E5 C9                      	leave
 32185 000176E6 C22000                  	ret AND_KILL_FRAME(2)
 32186                                  
 32187                                  L_code_ptr_raw_equal_qq:
 32188 000176E9 C8000000                        enter 0, 0
 32189 000176ED 48837D1802                      cmp COUNT, 2
 32190 000176F2 0F8524050000                    jne L_error_arg_count_2
 32191 000176F8 488B7520                        mov rsi, PARAM(0)
 32192                                          assert_fraction(rsi)
 32192 000176FC 803E12              <1>  cmp byte [%1], %2
 32192 000176FF 0F85B6050000        <1>  jne L_error_incorrect_type
 32193 00017705 488B7D28                        mov rdi, PARAM(1)
 32194                                          assert_fraction(rdi)
 32194 00017709 803F12              <1>  cmp byte [%1], %2
 32194 0001770C 0F85A9050000        <1>  jne L_error_incorrect_type
 32195 00017712 488B4601                        mov rax, qword [rsi + 1] ; num1
 32196 00017716 4899                            cqo
 32197 00017718 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 32198 0001771C 4889C1                          mov rcx, rax
 32199 0001771F 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 32200 00017723 4899                            cqo
 32201 00017725 48F76F01                        imul qword [rdi + 1]          ; num2
 32202 00017729 4829C1                          sub rcx, rax
 32203 0001772C 750C                            jne .L_false
 32204 0001772E 48B8-                           mov rax, sob_boolean_true
 32204 00017730 [0300000000000000] 
 32205 00017738 EB0A                            jmp .L_exit
 32206                                  .L_false:
 32207 0001773A 48B8-                           mov rax, sob_boolean_false
 32207 0001773C [0200000000000000] 
 32208                                  .L_exit:
 32209 00017744 C9                              leave
 32210 00017745 C22000                          ret AND_KILL_FRAME(2)
 32211                                  
 32212                                  L_code_ptr_quotient:
 32213 00017748 C8000000                        enter 0, 0
 32214 0001774C 48837D1802                      cmp COUNT, 2
 32215 00017751 0F85C5040000                    jne L_error_arg_count_2
 32216 00017757 488B7520                        mov rsi, PARAM(0)
 32217                                          assert_integer(rsi)
 32217 0001775B 803E11              <1>  cmp byte [%1], %2
 32217 0001775E 0F8557050000        <1>  jne L_error_incorrect_type
 32218 00017764 488B7D28                        mov rdi, PARAM(1)
 32219                                          assert_integer(rdi)
 32219 00017768 803F11              <1>  cmp byte [%1], %2
 32219 0001776B 0F854A050000        <1>  jne L_error_incorrect_type
 32220 00017771 488B4601                        mov rax, qword [rsi + 1]
 32221 00017775 488B5F01                        mov rbx, qword [rdi + 1]
 32222 00017779 4883FB00                        cmp rbx, 0
 32223 0001777D 0F8469050000                    je L_error_division_by_zero
 32224 00017783 4899                            cqo
 32225 00017785 48F7FB                          idiv rbx
 32226 00017788 4889C7                          mov rdi, rax
 32227 0001778B E8D7030000                      call make_integer
 32228 00017790 C9                              leave
 32229 00017791 C22000                          ret AND_KILL_FRAME(2)
 32230                                          
 32231                                  L_code_ptr_remainder:
 32232 00017794 C8000000                        enter 0, 0
 32233 00017798 48837D1802                      cmp COUNT, 2
 32234 0001779D 0F8579040000                    jne L_error_arg_count_2
 32235 000177A3 488B7520                        mov rsi, PARAM(0)
 32236                                          assert_integer(rsi)
 32236 000177A7 803E11              <1>  cmp byte [%1], %2
 32236 000177AA 0F850B050000        <1>  jne L_error_incorrect_type
 32237 000177B0 488B7D28                        mov rdi, PARAM(1)
 32238                                          assert_integer(rdi)
 32238 000177B4 803F11              <1>  cmp byte [%1], %2
 32238 000177B7 0F85FE040000        <1>  jne L_error_incorrect_type
 32239 000177BD 488B4601                        mov rax, qword [rsi + 1]
 32240 000177C1 488B5F01                        mov rbx, qword [rdi + 1]
 32241 000177C5 4883FB00                        cmp rbx, 0
 32242 000177C9 0F841D050000                    je L_error_division_by_zero
 32243 000177CF 4899                            cqo
 32244 000177D1 48F7FB                          idiv rbx
 32245 000177D4 4889D7                          mov rdi, rdx
 32246 000177D7 E88B030000                      call make_integer
 32247 000177DC C9                              leave
 32248 000177DD C22000                          ret AND_KILL_FRAME(2)
 32249                                  
 32250                                  L_code_ptr_set_car:
 32251 000177E0 C8000000                        enter 0, 0
 32252 000177E4 48837D1802                      cmp COUNT, 2
 32253 000177E9 0F852D040000                    jne L_error_arg_count_2
 32254 000177EF 488B4520                        mov rax, PARAM(0)
 32255                                          assert_pair(rax)
 32255 000177F3 803821              <1>  cmp byte [%1], %2
 32255 000177F6 0F85BF040000        <1>  jne L_error_incorrect_type
 32256 000177FC 488B5D28                        mov rbx, PARAM(1)
 32257 00017800 48895801                        mov SOB_PAIR_CAR(rax), rbx
 32258 00017804 48B8-                           mov rax, sob_void
 32258 00017806 [0000000000000000] 
 32259 0001780E C9                              leave
 32260 0001780F C22000                          ret AND_KILL_FRAME(2)
 32261                                  
 32262                                  L_code_ptr_set_cdr:
 32263 00017812 C8000000                        enter 0, 0
 32264 00017816 48837D1802                      cmp COUNT, 2
 32265 0001781B 0F85FB030000                    jne L_error_arg_count_2
 32266 00017821 488B4520                        mov rax, PARAM(0)
 32267                                          assert_pair(rax)
 32267 00017825 803821              <1>  cmp byte [%1], %2
 32267 00017828 0F858D040000        <1>  jne L_error_incorrect_type
 32268 0001782E 488B5D28                        mov rbx, PARAM(1)
 32269 00017832 48895809                        mov SOB_PAIR_CDR(rax), rbx
 32270 00017836 48B8-                           mov rax, sob_void
 32270 00017838 [0000000000000000] 
 32271 00017840 C9                              leave
 32272 00017841 C22000                          ret AND_KILL_FRAME(2)
 32273                                  
 32274                                  L_code_ptr_string_ref:
 32275 00017844 C8000000                        enter 0, 0
 32276 00017848 48837D1802                      cmp COUNT, 2
 32277 0001784D 0F85C9030000                    jne L_error_arg_count_2
 32278 00017853 488B7D20                        mov rdi, PARAM(0)
 32279                                          assert_string(rdi)
 32279 00017857 803F03              <1>  cmp byte [%1], %2
 32279 0001785A 0F855B040000        <1>  jne L_error_incorrect_type
 32280 00017860 488B7528                        mov rsi, PARAM(1)
 32281                                          assert_integer(rsi)
 32281 00017864 803E11              <1>  cmp byte [%1], %2
 32281 00017867 0F854E040000        <1>  jne L_error_incorrect_type
 32282 0001786D 488B5701                        mov rdx, qword [rdi + 1]
 32283 00017871 488B4E01                        mov rcx, qword [rsi + 1]
 32284 00017875 4839D1                          cmp rcx, rdx
 32285 00017878 0F8D03030000                    jge L_error_integer_range
 32286 0001787E 4883F900                        cmp rcx, 0
 32287 00017882 0F8CF9020000                    jl L_error_integer_range
 32288 00017888 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 32289 0001788C BF02000000                      mov rdi, 2
 32290 00017891 E879E8FFFF                      call malloc
 32291 00017896 C60002                          mov byte [rax], T_char
 32292 00017899 885801                          mov byte [rax + 1], bl
 32293 0001789C C9                              leave
 32294 0001789D C22000                          ret AND_KILL_FRAME(2)
 32295                                  
 32296                                  L_code_ptr_vector_ref:
 32297 000178A0 C8000000                        enter 0, 0
 32298 000178A4 48837D1802                      cmp COUNT, 2
 32299 000178A9 0F856D030000                    jne L_error_arg_count_2
 32300 000178AF 488B7D20                        mov rdi, PARAM(0)
 32301                                          assert_vector(rdi)
 32301 000178B3 803F22              <1>  cmp byte [%1], %2
 32301 000178B6 0F85FF030000        <1>  jne L_error_incorrect_type
 32302 000178BC 488B7528                        mov rsi, PARAM(1)
 32303                                          assert_integer(rsi)
 32303 000178C0 803E11              <1>  cmp byte [%1], %2
 32303 000178C3 0F85F2030000        <1>  jne L_error_incorrect_type
 32304 000178C9 488B5701                        mov rdx, qword [rdi + 1]
 32305 000178CD 488B4E01                        mov rcx, qword [rsi + 1]
 32306 000178D1 4839D1                          cmp rcx, rdx
 32307 000178D4 0F8DA7020000                    jge L_error_integer_range
 32308 000178DA 4883F900                        cmp rcx, 0
 32309 000178DE 0F8C9D020000                    jl L_error_integer_range
 32310 000178E4 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 32311 000178E9 C9                              leave
 32312 000178EA C22000                          ret AND_KILL_FRAME(2)
 32313                                  
 32314                                  L_code_ptr_vector_set:
 32315 000178ED C8000000                        enter 0, 0
 32316 000178F1 48837D1803                      cmp COUNT, 3
 32317 000178F6 0F858A030000                    jne L_error_arg_count_3
 32318 000178FC 488B7D20                        mov rdi, PARAM(0)
 32319                                          assert_vector(rdi)
 32319 00017900 803F22              <1>  cmp byte [%1], %2
 32319 00017903 0F85B2030000        <1>  jne L_error_incorrect_type
 32320 00017909 488B7528                        mov rsi, PARAM(1)
 32321                                          assert_integer(rsi)
 32321 0001790D 803E11              <1>  cmp byte [%1], %2
 32321 00017910 0F85A5030000        <1>  jne L_error_incorrect_type
 32322 00017916 488B5701                        mov rdx, qword [rdi + 1]
 32323 0001791A 488B4E01                        mov rcx, qword [rsi + 1]
 32324 0001791E 4839D1                          cmp rcx, rdx
 32325 00017921 0F8D5A020000                    jge L_error_integer_range
 32326 00017927 4883F900                        cmp rcx, 0
 32327 0001792B 0F8C50020000                    jl L_error_integer_range
 32328 00017931 488B4530                        mov rax, PARAM(2)
 32329 00017935 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 32330 0001793A 48B8-                           mov rax, sob_void
 32330 0001793C [0000000000000000] 
 32331 00017944 C9                              leave
 32332 00017945 C22800                          ret AND_KILL_FRAME(3)
 32333                                  
 32334                                  L_code_ptr_string_set:
 32335 00017948 C8000000                        enter 0, 0
 32336 0001794C 48837D1803                      cmp COUNT, 3
 32337 00017951 0F852F030000                    jne L_error_arg_count_3
 32338 00017957 488B7D20                        mov rdi, PARAM(0)
 32339                                          assert_string(rdi)
 32339 0001795B 803F03              <1>  cmp byte [%1], %2
 32339 0001795E 0F8557030000        <1>  jne L_error_incorrect_type
 32340 00017964 488B7528                        mov rsi, PARAM(1)
 32341                                          assert_integer(rsi)
 32341 00017968 803E11              <1>  cmp byte [%1], %2
 32341 0001796B 0F854A030000        <1>  jne L_error_incorrect_type
 32342 00017971 488B5701                        mov rdx, qword [rdi + 1]
 32343 00017975 488B4E01                        mov rcx, qword [rsi + 1]
 32344 00017979 4839D1                          cmp rcx, rdx
 32345 0001797C 0F8DFF010000                    jge L_error_integer_range
 32346 00017982 4883F900                        cmp rcx, 0
 32347 00017986 0F8CF5010000                    jl L_error_integer_range
 32348 0001798C 488B4530                        mov rax, PARAM(2)
 32349                                          assert_char(rax)
 32349 00017990 803802              <1>  cmp byte [%1], %2
 32349 00017993 0F8522030000        <1>  jne L_error_incorrect_type
 32350 00017999 8A4001                          mov al, byte [rax + 1]
 32351 0001799C 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 32352 000179A0 48B8-                           mov rax, sob_void
 32352 000179A2 [0000000000000000] 
 32353 000179AA C9                              leave
 32354 000179AB C22800                          ret AND_KILL_FRAME(3)
 32355                                  
 32356                                  L_code_ptr_make_vector:
 32357 000179AE C8000000                        enter 0, 0
 32358 000179B2 48837D1802                      cmp COUNT, 2
 32359 000179B7 0F855F020000                    jne L_error_arg_count_2
 32360 000179BD 488B4D20                        mov rcx, PARAM(0)
 32361                                          assert_integer(rcx)
 32361 000179C1 803911              <1>  cmp byte [%1], %2
 32361 000179C4 0F85F1020000        <1>  jne L_error_incorrect_type
 32362 000179CA 488B4901                        mov rcx, qword [rcx + 1]
 32363 000179CE 4883F900                        cmp rcx, 0
 32364 000179D2 0F8CA9010000                    jl L_error_integer_range
 32365 000179D8 488B5528                        mov rdx, PARAM(1)
 32366 000179DC 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 32367 000179E4 E826E7FFFF                      call malloc
 32368 000179E9 C60022                          mov byte [rax], T_vector
 32369 000179EC 48894801                        mov qword [rax + 1], rcx
 32370 000179F0 41B800000000                    mov r8, 0
 32371                                  .L0:
 32372 000179F6 4939C8                          cmp r8, rcx
 32373 000179F9 740A                            je .L1
 32374 000179FB 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 32375 00017A00 49FFC0                          inc r8
 32376 00017A03 EBF1                            jmp .L0
 32377                                  .L1:
 32378 00017A05 C9                              leave
 32379 00017A06 C22000                          ret AND_KILL_FRAME(2)
 32380                                          
 32381                                  L_code_ptr_make_string:
 32382 00017A09 C8000000                        enter 0, 0
 32383 00017A0D 48837D1802                      cmp COUNT, 2
 32384 00017A12 0F8504020000                    jne L_error_arg_count_2
 32385 00017A18 488B4D20                        mov rcx, PARAM(0)
 32386                                          assert_integer(rcx)
 32386 00017A1C 803911              <1>  cmp byte [%1], %2
 32386 00017A1F 0F8596020000        <1>  jne L_error_incorrect_type
 32387 00017A25 488B4901                        mov rcx, qword [rcx + 1]
 32388 00017A29 4883F900                        cmp rcx, 0
 32389 00017A2D 0F8C4E010000                    jl L_error_integer_range
 32390 00017A33 488B5528                        mov rdx, PARAM(1)
 32391                                          assert_char(rdx)
 32391 00017A37 803A02              <1>  cmp byte [%1], %2
 32391 00017A3A 0F857B020000        <1>  jne L_error_incorrect_type
 32392 00017A40 8A5201                          mov dl, byte [rdx + 1]
 32393 00017A43 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 32394 00017A47 E8C3E6FFFF                      call malloc
 32395 00017A4C C60003                          mov byte [rax], T_string
 32396 00017A4F 48894801                        mov qword [rax + 1], rcx
 32397 00017A53 41B800000000                    mov r8, 0
 32398                                  .L0:
 32399 00017A59 4939C8                          cmp r8, rcx
 32400 00017A5C 740A                            je .L1
 32401 00017A5E 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 32402 00017A63 49FFC0                          inc r8
 32403 00017A66 EBF1                            jmp .L0
 32404                                  .L1:
 32405 00017A68 C9                              leave
 32406 00017A69 C22000                          ret AND_KILL_FRAME(2)
 32407                                  
 32408                                  L_code_ptr_numerator:
 32409 00017A6C C8000000                        enter 0, 0
 32410 00017A70 48837D1801                      cmp COUNT, 1
 32411 00017A75 0F856C010000                    jne L_error_arg_count_1
 32412 00017A7B 488B4520                        mov rax, PARAM(0)
 32413                                          assert_fraction(rax)
 32413 00017A7F 803812              <1>  cmp byte [%1], %2
 32413 00017A82 0F8533020000        <1>  jne L_error_incorrect_type
 32414 00017A88 488B7801                        mov rdi, qword [rax + 1]
 32415 00017A8C E8D6000000                      call make_integer
 32416 00017A91 C9                              leave
 32417 00017A92 C21800                          ret AND_KILL_FRAME(1)
 32418                                          
 32419                                  L_code_ptr_denominator:
 32420 00017A95 C8000000                        enter 0, 0
 32421 00017A99 48837D1801                      cmp COUNT, 1
 32422 00017A9E 0F8543010000                    jne L_error_arg_count_1
 32423 00017AA4 488B4520                        mov rax, PARAM(0)
 32424                                          assert_fraction(rax)
 32424 00017AA8 803812              <1>  cmp byte [%1], %2
 32424 00017AAB 0F850A020000        <1>  jne L_error_incorrect_type
 32425 00017AB1 488B7809                        mov rdi, qword [rax + 1 + 8]
 32426 00017AB5 E8AD000000                      call make_integer
 32427 00017ABA C9                              leave
 32428 00017ABB C21800                          ret AND_KILL_FRAME(1)
 32429                                  
 32430                                  L_code_ptr_is_eq:
 32431 00017ABE C8000000                	enter 0, 0
 32432 00017AC2 48837D1802              	cmp COUNT, 2
 32433 00017AC7 0F854F010000            	jne L_error_arg_count_2
 32434 00017ACD 488B7D20                	mov rdi, PARAM(0)
 32435 00017AD1 488B7528                	mov rsi, PARAM(1)
 32436 00017AD5 4839F7                  	cmp rdi, rsi
 32437 00017AD8 745B                    	je .L_eq_true
 32438 00017ADA 8A17                    	mov dl, byte [rdi]
 32439 00017ADC 3A16                    	cmp dl, byte [rsi]
 32440 00017ADE 7561                    	jne .L_eq_false
 32441 00017AE0 80FA02                  	cmp dl, T_char
 32442 00017AE3 7448                    	je .L_char
 32443 00017AE5 80FA41                  	cmp dl, T_interned_symbol
 32444 00017AE8 742F                    	je .L_interned_symbol
 32445 00017AEA 80FA42                          cmp dl, T_uninterned_symbol
 32446 00017AED 7432                            je .L_uninterned_symbol
 32447 00017AEF 80FA13                  	cmp dl, T_real
 32448 00017AF2 741D                    	je .L_real
 32449 00017AF4 80FA12                  	cmp dl, T_fraction
 32450 00017AF7 7402                    	je .L_fraction
 32451 00017AF9 EB46                    	jmp .L_eq_false
 32452                                  .L_fraction:
 32453 00017AFB 488B4601                	mov rax, qword [rsi + 1]
 32454 00017AFF 483B4701                	cmp rax, qword [rdi + 1]
 32455 00017B03 753C                    	jne .L_eq_false
 32456 00017B05 488B4609                	mov rax, qword [rsi + 1 + 8]
 32457 00017B09 483B4709                	cmp rax, qword [rdi + 1 + 8]
 32458 00017B0D 7532                    	jne .L_eq_false
 32459 00017B0F EB24                    	jmp .L_eq_true
 32460                                  .L_real:
 32461 00017B11 488B4601                	mov rax, qword [rsi + 1]
 32462 00017B15 483B4701                	cmp rax, qword [rdi + 1]
 32463                                  .L_interned_symbol:
 32464                                  	; never reached, because interned_symbols are static!
 32465                                  	; but I'm keeping it in case, I'll ever change
 32466                                  	; the implementation
 32467 00017B19 488B4601                	mov rax, qword [rsi + 1]
 32468 00017B1D 483B4701                	cmp rax, qword [rdi + 1]
 32469                                  .L_uninterned_symbol:
 32470 00017B21 4C8B4701                        mov r8, qword [rdi + 1]
 32471 00017B25 4C3B4601                        cmp r8, qword [rsi + 1]
 32472 00017B29 7516                            jne .L_eq_false
 32473 00017B2B EB08                            jmp .L_eq_true
 32474                                  .L_char:
 32475 00017B2D 8A5E01                  	mov bl, byte [rsi + 1]
 32476 00017B30 3A5F01                  	cmp bl, byte [rdi + 1]
 32477 00017B33 750C                    	jne .L_eq_false
 32478                                  .L_eq_true:
 32479 00017B35 48B8-                   	mov rax, sob_boolean_true
 32479 00017B37 [0300000000000000] 
 32480 00017B3F EB0A                    	jmp .L_eq_exit
 32481                                  .L_eq_false:
 32482 00017B41 48B8-                   	mov rax, sob_boolean_false
 32482 00017B43 [0200000000000000] 
 32483                                  .L_eq_exit:
 32484 00017B4B C9                      	leave
 32485 00017B4C C22000                  	ret AND_KILL_FRAME(2)
 32486                                  
 32487                                  make_real:
 32488 00017B4F C8000000                        enter 0, 0
 32489 00017B53 BF09000000                      mov rdi, (1 + 8)
 32490 00017B58 E8B2E5FFFF                      call malloc
 32491 00017B5D C60013                          mov byte [rax], T_real
 32492 00017B60 F20F114001                      movsd qword [rax + 1], xmm0
 32493 00017B65 C9                              leave 
 32494 00017B66 C3                              ret
 32495                                          
 32496                                  make_integer:
 32497 00017B67 C8000000                        enter 0, 0
 32498 00017B6B 4889FE                          mov rsi, rdi
 32499 00017B6E BF09000000                      mov rdi, (1 + 8)
 32500 00017B73 E897E5FFFF                      call malloc
 32501 00017B78 C60011                          mov byte [rax], T_integer
 32502 00017B7B 48897001                        mov qword [rax + 1], rsi
 32503 00017B7F C9                              leave
 32504 00017B80 C3                              ret
 32505                                          
 32506                                  L_error_integer_range:
 32507 00017B81 488B3C25[00000000]              mov rdi, qword [stderr]
 32508 00017B89 48BE-                           mov rsi, fmt_integer_range
 32508 00017B8B [2E1D000000000000] 
 32509 00017B93 B800000000                      mov rax, 0
 32510                                          ENTER
 32510 00017B98 C8000000            <1>  enter 0, 0
 32510 00017B9C 4883E4F0            <1>  and rsp, ~15
 32511 00017BA0 E8(00000000)                    call fprintf
 32512                                          LEAVE
 32512 00017BA5 C9                  <1>  leave
 32513 00017BA6 48C7C0FBFFFFFF                  mov rax, -5
 32514 00017BAD E8(00000000)                    call exit
 32515                                  
 32516                                  L_error_arg_count_0:
 32517 00017BB2 488B3C25[00000000]              mov rdi, qword [stderr]
 32518 00017BBA 48BE-                           mov rsi, fmt_arg_count_0
 32518 00017BBC [2C1C000000000000] 
 32519 00017BC4 488B5518                        mov rdx, COUNT
 32520 00017BC8 B800000000                      mov rax, 0
 32521                                          ENTER
 32521 00017BCD C8000000            <1>  enter 0, 0
 32521 00017BD1 4883E4F0            <1>  and rsp, ~15
 32522 00017BD5 E8(00000000)                    call fprintf
 32523                                          LEAVE
 32523 00017BDA C9                  <1>  leave
 32524 00017BDB 48C7C0FDFFFFFF                  mov rax, -3
 32525 00017BE2 E8(00000000)                    call exit
 32526                                  
 32527                                  L_error_arg_count_1:
 32528 00017BE7 488B3C25[00000000]              mov rdi, qword [stderr]
 32529 00017BEF 48BE-                           mov rsi, fmt_arg_count_1
 32529 00017BF1 [541C000000000000] 
 32530 00017BF9 488B5518                        mov rdx, COUNT
 32531 00017BFD B800000000                      mov rax, 0
 32532                                          ENTER
 32532 00017C02 C8000000            <1>  enter 0, 0
 32532 00017C06 4883E4F0            <1>  and rsp, ~15
 32533 00017C0A E8(00000000)                    call fprintf
 32534                                          LEAVE
 32534 00017C0F C9                  <1>  leave
 32535 00017C10 48C7C0FDFFFFFF                  mov rax, -3
 32536 00017C17 E8(00000000)                    call exit
 32537                                  
 32538                                  L_error_arg_count_2:
 32539 00017C1C 488B3C25[00000000]              mov rdi, qword [stderr]
 32540 00017C24 48BE-                           mov rsi, fmt_arg_count_2
 32540 00017C26 [BA1C000000000000] 
 32541 00017C2E 488B5518                        mov rdx, COUNT
 32542 00017C32 B800000000                      mov rax, 0
 32543                                          ENTER
 32543 00017C37 C8000000            <1>  enter 0, 0
 32543 00017C3B 4883E4F0            <1>  and rsp, ~15
 32544 00017C3F E8(00000000)                    call fprintf
 32545                                          LEAVE
 32545 00017C44 C9                  <1>  leave
 32546 00017C45 48C7C0FDFFFFFF                  mov rax, -3
 32547 00017C4C E8(00000000)                    call exit
 32548                                  
 32549                                  L_error_arg_count_12:
 32550 00017C51 488B3C25[00000000]              mov rdi, qword [stderr]
 32551 00017C59 48BE-                           mov rsi, fmt_arg_count_12
 32551 00017C5B [7A1C000000000000] 
 32552 00017C63 488B5518                        mov rdx, COUNT
 32553 00017C67 B800000000                      mov rax, 0
 32554                                          ENTER
 32554 00017C6C C8000000            <1>  enter 0, 0
 32554 00017C70 4883E4F0            <1>  and rsp, ~15
 32555 00017C74 E8(00000000)                    call fprintf
 32556                                          LEAVE
 32556 00017C79 C9                  <1>  leave
 32557 00017C7A 48C7C0FDFFFFFF                  mov rax, -3
 32558 00017C81 E8(00000000)                    call exit
 32559                                  
 32560                                  L_error_arg_count_3:
 32561 00017C86 488B3C25[00000000]              mov rdi, qword [stderr]
 32562 00017C8E 48BE-                           mov rsi, fmt_arg_count_3
 32562 00017C90 [E11C000000000000] 
 32563 00017C98 488B5518                        mov rdx, COUNT
 32564 00017C9C B800000000                      mov rax, 0
 32565                                          ENTER
 32565 00017CA1 C8000000            <1>  enter 0, 0
 32565 00017CA5 4883E4F0            <1>  and rsp, ~15
 32566 00017CA9 E8(00000000)                    call fprintf
 32567                                          LEAVE
 32567 00017CAE C9                  <1>  leave
 32568 00017CAF 48C7C0FDFFFFFF                  mov rax, -3
 32569 00017CB6 E8(00000000)                    call exit
 32570                                          
 32571                                  L_error_incorrect_type:
 32572 00017CBB 488B3C25[00000000]              mov rdi, qword [stderr]
 32573 00017CC3 48BE-                           mov rsi, fmt_type
 32573 00017CC5 [0A1D000000000000] 
 32574 00017CCD B800000000                      mov rax, 0
 32575                                          ENTER
 32575 00017CD2 C8000000            <1>  enter 0, 0
 32575 00017CD6 4883E4F0            <1>  and rsp, ~15
 32576 00017CDA E8(00000000)                    call fprintf
 32577                                          LEAVE
 32577 00017CDF C9                  <1>  leave
 32578 00017CE0 48C7C0FCFFFFFF                  mov rax, -4
 32579 00017CE7 E8(00000000)                    call exit
 32580                                  
 32581                                  L_error_division_by_zero:
 32582 00017CEC 488B3C25[00000000]              mov rdi, qword [stderr]
 32583 00017CF4 48BE-                           mov rsi, fmt_division_by_zero
 32583 00017CF6 [4B1D000000000000] 
 32584 00017CFE B800000000                      mov rax, 0
 32585                                          ENTER
 32585 00017D03 C8000000            <1>  enter 0, 0
 32585 00017D07 4883E4F0            <1>  and rsp, ~15
 32586 00017D0B E8(00000000)                    call fprintf
 32587                                          LEAVE
 32587 00017D10 C9                  <1>  leave
 32588 00017D11 48C7C0F8FFFFFF                  mov rax, -8
 32589 00017D18 E8(00000000)                    call exit
 32590                                  
 32591                                  section .data
 32592                                  gensym_count:
 32593 00001C21 0000000000000000                dq 0
 32594                                  fmt_char:
 32595 00001C29 256300                          db `%c\0`
 32596                                  fmt_arg_count_0:
 32597 00001C2C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 32597 00001C35 74696E67207A65726F-
 32597 00001C3E 20617267756D656E74-
 32597 00001C47 732E20466F756E6420-
 32597 00001C50 25640A00           
 32598                                  fmt_arg_count_1:
 32599 00001C54 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 32599 00001C5D 74696E67206F6E6520-
 32599 00001C66 617267756D656E742E-
 32599 00001C6F 20466F756E64202564-
 32599 00001C78 0A00               
 32600                                  fmt_arg_count_12:
 32601 00001C7A 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 32601 00001C83 74696E67206F6E6520-
 32601 00001C8C 726571756972656420-
 32601 00001C95 616E64206F6E65206F-
 32601 00001C9E 7074696F6E616C2061-
 32601 00001CA7 7267756D656E742E20-
 32601 00001CB0 466F756E642025640A-
 32601 00001CB9 00                 
 32602                                  fmt_arg_count_2:
 32603 00001CBA 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 32603 00001CC3 74696E672074776F20-
 32603 00001CCC 617267756D656E7473-
 32603 00001CD5 2E20466F756E642025-
 32603 00001CDE 640A00             
 32604                                  fmt_arg_count_3:
 32605 00001CE1 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 32605 00001CEA 74696E672074687265-
 32605 00001CF3 6520617267756D656E-
 32605 00001CFC 74732E20466F756E64-
 32605 00001D05 2025640A00         
 32606                                  fmt_type:
 32607 00001D0A 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 32607 00001D13 696F6E207061737365-
 32607 00001D1C 6420696E636F727265-
 32607 00001D25 637420747970650A00 
 32608                                  fmt_integer_range:
 32609 00001D2E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 32609 00001D37 7265637420696E7465-
 32609 00001D40 6765722072616E6765-
 32609 00001D49 0A00               
 32610                                  fmt_division_by_zero:
 32611 00001D4B 212121204469766973-             db `!!! Division by zero\n\0`
 32611 00001D54 696F6E206279207A65-
 32611 00001D5D 726F0A00           
 32612                                  fmt_scheme_error_part_1:
 32613 00001D61 0A2121212054686520-             db `\n!!! The procedure \0`
 32613 00001D6A 70726F636564757265-
 32613 00001D73 2000               
 32614                                  fmt_scheme_error_part_2:
 32615 00001D75 2061736B656420746F-             db ` asked to terminate the program\n`
 32615 00001D7E 207465726D696E6174-
 32615 00001D87 65207468652070726F-
 32615 00001D90 6772616D0A         
 32616 00001D95 202020207769746820-             db `    with the following message:\n\n\0`
 32616 00001D9E 74686520666F6C6C6F-
 32616 00001DA7 77696E67206D657373-
 32616 00001DB0 6167653A0A0A00     
 32617                                  fmt_scheme_error_part_3:
 32618 00001DB7 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 32618 00001DC0 210A0A00           
